(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Workflow = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function Workflow(e,t,s,o){var i=this;if(""==t||void 0==t)throw util.error("ParamRequired","A community id is required.");if("string"!=typeof t)throw new Error("The community id must be a javascript string.");if(i.communityId=t||"",""==e||void 0==e)throw util.error("ParamRequired","A profile id is required.");if("string"!=typeof e)throw new Error("The profile id must be a javascript string.");if(i.profile=e||"",""==s||void 0==s)throw util.error("ParamRequired","An app id is required.");if("string"!=typeof s)throw new Error("The app id must be a javascript string.");if(i.app=s||"",""==o||void 0==o)throw util.error("ParamRequired","A workflow configuration is required.");"object"!=typeof o?i.config=JSON.parse(o):i.config=o,i.instance,i.subprocesses=[],i.indicators=[]}var Process=require("./lib/process"),util=require("utility"),userInterface=require("./lib/interface"),helper=require("./lib/helper");Workflow.prototype.getProfile=function(){return this.profile},Workflow.prototype.getApp=function(){return this.app},Workflow.prototype.getConfig=function(){return this.config},Workflow.prototype.getInstance=function(){return this.instance},Workflow.prototype.setInstance=function(e){this.instance=e},Workflow.prototype.getSubProcesses=function(){return this.subprocesses},Workflow.prototype.setSubProcesses=function(e){this.subprocesses=e},Workflow.prototype.getIndicators=function(){return this.indicators},Workflow.prototype.setIndicators=function(e){this.indicators=e},Workflow.prototype.create=function(){var e=this;return new Promise(function(t,s){try{if(void 0!==e.instance){var o=util.warn("Instance already exists.",e);t(o)}else{var i={_id:"",version:"",type:"workflowInstance",processes:[],channels:["community_"+app.SCOPE.getCommunityId(),"profile_"+app.SCOPE.profileId,"application_"+app.SCOPE.applicationId,"community_"+app.SCOPE.getCommunityId()+"_application_"+app.SCOPE.applicationId]};i._id="_local/"+e.profile+":processes",i.version=e.config.version,e.instance=i;var r=util.success("Workflow processes instance created successfully.",e);t(r)}}catch(e){s(e)}})},Workflow.prototype.initialise=function(e,t,s){var o=this;return new Promise(function(i,r){try{var n=[];if(""!==e&&void 0!==e){if(n=o.config.processes.filter(function(t){if(t._id==e)return t}),void 0==n[0]._id){var c=util.error("WFConfigError","No valid process definition found with process id: "+e);r(c)}}else n.push(o.config.processes[0]),e=o.config.processes[0]._id;var a=function(e){for(var t="",s=0;s<e.length-1;s++)t=t+"'"+e[s]+"',";return"("+t+"'"+e[e.length-1]+"')"},u=n[0].subProcesses[0]._id,p=n[0].subProcesses[0].instanceType,d=JSON.xpath("indicators/_id",n[0].subProcesses[0],{}),l=function(e){var t=JSON.xpath("/indicators[setId = "+a(e)+" and cardinality eq 'single' ]/setId",app.SCOPE.APP_CONFIG,{}),s=t.length;if(s>0){var i=JSON.xpath("/processes/subProcesses[indicators/_id = "+a(t)+"]/_id",o.config,{}),r=JSON.xpath("count(/instance/processes/subProcesses[id = "+a(i)+" and complete = false()])",o,{})[0];return 0==r}if(void 0!=p.newSequence){var r=JSON.xpath("count(/instance/processes/subProcesses[id eq '"+u+"' and complete eq 'false'])",o,{})[0];return 0==r}return void 0!=p.newInstance,!0};if(l(d)){var f=[];o.instance.processes.filter(function(t){t.id==e&&f.push(t)});var h=f.length+1,v={id:"",seq:"",subProcesses:[]};v.id=e,v.seq=h,o.instance.processes.push(v);var m=n[0].subProcesses[0]._id,P=1;o.instance.processes.filter(function(t){t.id==e&&t.seq==h&&(P=t.subProcesses.length+1)});var S=generateUUID();void 0!=t.subprocessUUID&&t.subprocessUUID.length>0&&(S=t.subprocessUUID);var b={communityId:app.SCOPE.communityId,uuid:S,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,transactionType:"subProcess",documents:[{document:S,rev:"0"}]};dao.startTransaction(b).then(function(n){Process.subProcess(S,e,h,m,P,s,t,o).then(function(t){var n=t.data._id,c=t.data.groupKey;void 0==s&&(s="");var a={id:m,subprofileId:s,seq:t.data["meta-data"].subProcessInsSeq,uuid:n,groupKey:c,label:t.data.label};v.subProcesses.push(a);for(var u=0;u<o.instance.processes.length;u++){var p=o.instance.processes[u];p.id==e&&p.seq==h&&o.instance.processes.splice(u,1,v)}var d=t.data.indicators,l=t.data.step;Process.indicatorDocs(e,d,l,o,n).then(function(e){var t=util.success("Process: "+o.config.processes[0]._id+" initialized successfully.",a);i(t)},function(e){r(e)})},function(t){o.instance.processes=o.instance.processes.filter(function(t){return!(t.id==e&&t.seq==h)}),console.log(t),r(t)})}).catch(function(e){console.log(e),r(void 0!=e.responseJSON&&void 0!=e.responseJSON.message?e.responseJSON.message:void 0!=e.responseText?e.responseText:e)})}else r("Cannot create workflow as other process using same SDO is not complete")}catch(e){r(e)}})},Workflow.prototype.transition=function(e,t,s,o,i,r,n,c){var a=this;return new Promise(function(o,u){try{var p=JSON.xpath("/subprocesses[_id eq '"+c+"']/step",app.SCOPE.workflow,{})[0],d=JSON.xpath("/processes[_id eq '"+e+"']/subProcesses[_id eq '"+s+"']/steps[_id eq '"+i+"']",a.config,{})[0],l=JSON.xpath("/subprocesses[_id eq '"+c+"']/meta-data/subProcessInsSeq",app.SCOPE.workflow,{})[0],f=function(i,r){a.instance.processes.filter(function(n){n.id==e&&n.seq==t&&n.subProcesses.filter(function(e){e.id==s&&a.subprocesses.filter(function(e){if(e._id==c)if("step"==i){e.step=r.data.step;var t=util.success(r.message,e);o(t)}else if("stepComplete"==i){e.step=r.data.step,e.complete=!0;var s=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+e._id+"']",app.SCOPE.workflow,{})[0];s.complete=!0;var t=util.success(r.message,e.step);o(t)}})})})},h={};void 0!=d.function.task&&void 0!=d.function.task.postActions?(h=d.function.task.postActions,Process.postActions(h,a,c).then(function(o){Process.transition(e,t,s,l,i,r,n,a,c,p).then(function(e){e.data.subProcessComplete?f("stepComplete",e):f("step",e)},function(e){u(e)})},function(e){u(e)})):void 0!=d.function.server&&void 0!=d.function.server.postActions?(h=d.function.server.postActions,Process.postActions(h,a,c).then(function(o){Process.transition(e,t,s,l,i,r,n,a,c,p).then(function(e){e.data.subProcessComplete?f("stepComplete",e):f("step",e)},function(e){u(e)})},function(e){u(e)})):Process.transition(e,t,s,l,i,r,n,a,c,p).then(function(e){e.data.subProcessComplete?f("stepComplete",e):f("step",e)},function(e){u(e)})}catch(e){u(e)}})},Workflow.prototype.assignUser=function(e,t,s,o,i,r){var n=this;return new Promise(function(c,a){try{var u=JSON.xpath("/subprocesses[_id eq '"+r+"']",app.SCOPE.workflow,{})[0],p=u._rev;({communityId:app.SCOPE.communityId,uuid:r,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,transactionType:"subProcess",documents:[{document:r,rev:p}]});Process.assignUser(e,t,s,o,i,r,n).then(function(e){c(e)},function(e){a(e)})}catch(e){a(e)}})},Workflow.prototype.ui=function(){var e=this;return{getProcess:function(t,s){return new Promise(function(o,i){try{userInterface.getProcess(t,s,e).then(function(e){o(e)},function(e){i(e)})}catch(e){i(e)}})}}},Workflow.prototype.getNodeValue=function(e,t){var s=this;return new Promise(function(o,i){try{helper.getNodeValue(e,s,t).then(function(e){o(e)},function(e){i(e)})}catch(e){i(e)}})},Workflow.prototype.takeAssignment=function(e){var t=this;return new Promise(function(s,o){try{var i=JSON.xpath("/subprocesses[_id eq '"+e+"']",t,{})[0],r=JSON.xpath("/step/assignedTo",i,{})[0];void 0==i.step.assignmentHistory&&(i.step.assignmentHistory=[]),""!=r.userId&&""!=r.name&&i.step.assignmentHistory.push(JSON.parse(JSON.stringify(r))),r.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,r.userId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"",r.dateTime=moment().format(),r.type=ASSIGNMENT_TYPE_ACCEPTANCE,r.dueDateTime="",r.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"";var n=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+e+"']/id",t,{})[0],c=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+e+"']/id",t,{})[0],a=JSON.xpath("/subprocesses[_id eq '"+e+"']/step/id",t,{})[0],u=JSON.xpath("/processes[_id eq '"+n+"']/subProcesses[_id eq '"+c+"']/steps[_id eq '"+a+"']",t.config,{})[0];if(void 0!=u.function.task.preWorkActions){var p=u.function.task.preWorkActions;Process.preWorkActions(p,t).then(function(e){s(t)},function(e){o(e)})}else s(t)}catch(e){o(e)}})},Workflow.prototype.condition=function(condition,spuuid){var _this=this;return new Promise(function(resolve,reject){try{var operator=condition.operator,dataBlock=condition.value.data;if(void 0!=condition.subject.indicator){var setId=condition.subject.indicator.setId,modelScope=condition.subject.indicator.modelScope,elementPath=condition.subject.indicator.elementPath;if("subProcess"==condition.subject.indicator.context){var indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+spuuid+"']/indicators[id eq '"+setId+"']/instances[1]/uuid",_this,{})[0],indicatorModel=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_this,{})[0],dataElement=indicatorModel.model[modelScope].data[setId],value=eval("dataElement."+elementPath);helper.getNodeValue(dataBlock,_this,spuuid).then(function(e){var t=helper.compare(value,operator,e);resolve(t)},function(e){reject(e)})}else if("subProfile"==condition.subject.indicator.context){var indicatorModel=JSON.xpath("/indicators[category/term eq '"+setId+"']",_this,{})[0],dataElement=indicatorModel.model[modelScope].data[setId],value=eval("dataElement."+elementPath);helper.getNodeValue(dataBlock,_this,spuuid).then(function(e){var t=helper.compare(value,operator,e);resolve(t)},function(e){reject(e)})}else reject("Not implemented")}else if(void 0!=condition.subject.indicatorWrapper)reject("Not implemented");else if(void 0!=condition.subject.variable)helper.getNodeValue(dataBlock,_this,spuuid).then(function(e){helper.getNodeValue(condition.subject,_this,spuuid).then(function(t){var s=helper.compare(t,operator,e);resolve(s)},function(e){reject(e)})},function(e){reject(e)});else if(void 0!=condition.subject.subProcess){var elementPath=condition.subject.subProcess.elementPath,spObject=JSON.xpath("/subprocesses[_id eq '"+spuuid+"']",_this,{})[0],value=eval("spObject."+elementPath);helper.getNodeValue(dataBlock,_this,spuuid).then(function(e){var t=helper.compare(value,operator,e);resolve(t)},function(e){reject(e)})}}catch(e){reject(e)}})},module.exports=Workflow;

},{"./lib/helper":4,"./lib/interface":5,"./lib/process":7,"utility":8}],2:[function(require,module,exports){
"use strict";var util=require("utility"),nodeValue=require("./nodeValue"),form=require("./form"),helper=require("./helper"),gatekeeper=new GK,community=function(){return{createCommunity:function(e,i,t){return new Promise(function(e,o){var n=worker.getWorkerWrapper(),a="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(a=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=t.profile,n.subProcessUUID=i,n.subprofileId=a,n.channels.push("follow"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=JSON.xpath("/indicators[category/term eq 'Community']/_id",t,{})[0],r={createCommunity:{newCommunityId:t.profile,indicatorUUID:{Community:s}}};n.action=r,worker.send(n).then(function(o){worker.setWorkerInfoInSubprocess(n,t,i);var a=util.success("Worker processed successfully.",o);e(a)},function(e){o(e)})})},userJoinCommunity:function(e,i,t){return new Promise(function(e,i){})},releaseAdoptedApplication:function(e,i,t){return new Promise(function(e,o){var n=worker.getWorkerWrapper(),a="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(a=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=t.profile,n.subProcessUUID=i,n.subprofileId=a,n.channels.push("follow"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'adoptedApplication']/instances[1]/uuid",t,{})[0],r={releaseAdoptedApplication:{communityId:t.profile,indicatorUUID:{adoptedApplication:s}}};n.action=r,worker.send(n).then(function(o){worker.setWorkerInfoInSubprocess(n,t,i);var a=util.success("Worker processes successfully.",o);e(a)},function(e){o(e)})})}}}(),application=function(){return{createAppDefinition:function(e,i,t){return new Promise(function(e,o){var n=worker.getWorkerWrapper(),a="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(a=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=t.profile,n.subProcessUUID=i,n.subprofileId=a,n.channels.push("follow"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=JSON.xpath("/indicators[category/term eq 'Application']/_id",t,{})[0],r={createApplication:{newApplicationId:t.profile,indicatorUUID:{Application:s}}};n.action=r,worker.send(n).then(function(o){worker.setWorkerInfoInSubprocess(n,t,i);var a=util.success("Worker processes successfully.",o);e(a)},function(e){o(e)})})},buildApplication:function(e,i,t){return new Promise(function(e,o){var n=worker.getWorkerWrapper(),a="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(a=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=t.profile,n.subProcessUUID=i,n.subprofileId=a,n.channels.push("follow"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'PublishApplication']/instances[1]/uuid",t,{})[0],r=JSON.xpath("/indicators[category/term eq 'ApplicationDefinition']/_id",t,{})[0],c=JSON.xpath("/indicators[category/term eq 'Roles']/_id",t,{})[0],p=JSON.xpath("/indicators[category/term eq 'Application']/_id",t,{})[0],d=JSON.xpath("/indicators[category/term eq 'AppPermissions']/_id",t,{})[0],u={buildApplication:{applicationId:t.profile,indicatorUUID:{PublishApplication:s,ApplicationDefinition:r,Roles:c,Application:p,AppPermissions:d}}};n.action=u,worker.send(n).then(function(o){worker.setWorkerInfoInSubprocess(n,t,i);var a=util.success("Worker processes successfully.",o);e(a)},function(e){o(e)})})},applicationAdoption:function(e,i,t){return new Promise(function(e,o){var n=worker.getWorkerWrapper(),a="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(a=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=t.profile,n.subProcessUUID=i,n.subprofileId=a,n.channels.push("follow"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'Adoption']/instances[1]/uuid",t,{})[0],r=JSON.xpath("/indicators[category/term eq 'PublishApplication']/_id",t,{})[0],c=JSON.xpath("/indicators[category/term eq 'Application']/_id",t,{})[0],p={adoptApplication:{applicationId:t.profile,indicatorUUID:{Adoption:s,PublishApplication:r,Application:c}}};n.action=p,worker.send(n).then(function(o){worker.setWorkerInfoInSubprocess(n,t,i);var a=util.success("Worker processes successfully.",o);e(a)},function(e){o(e)})})},createTaxonomy:function(e,i,t){return new Promise(function(e,o){var n=worker.getWorkerWrapper(),a="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(a=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=t.profile,n.subProcessUUID=i,n.subprofileId=a,n.channels.push("follow"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'Taxonomy']/instances[1]/uuid",t,{})[0],r={createTaxonomy:{taxonomyUUID:s}};n.action=r,worker.send(n).then(function(o){worker.setWorkerInfoInSubprocess(n,t,i);var a=util.success("Worker processes successfully.",o);e(a)},function(e){o(e)})})}}}(),performance=function(){return{unlockPeriod:function(e,i,t){return new Promise(function(e,o){var n=JSON.xpath("/subprocesses[_id eq '"+i+"']",t,{})[0],a=JSON.xpath("/indicators[id eq '"+PERIOD_SET_ID+"' or id eq '"+AUDIT_PERIOD_SET_ID+"']/instances/uuid",n,{})[0],s=n.dates.valid;library.unlockPeriod(a,s,i).then(function(i){var t=util.success("Unlock period.",i);e(t)},function(e){o(e)})})},setModelStatus:function(e,i,t){return new Promise(function(o,n){var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",t,{})[0],s=JSON.xpath("/indicators[id eq '"+PERIOD_SET_ID+"' or id eq '"+AUDIT_PERIOD_SET_ID+"']/instances/uuid",a,{})[0],r=a.dates.valid,c=JSON.xpath("/label",e,{})[0],p=helper.getLanguageMessage(c);library.setPeriodStatus(s,r,p,i).then(function(e){var i=util.success("setModelStatus",e);o(i)},function(e){n(e)})})},lockPerformanceModel:function(e,i,t){return new Promise(function(e,o){var n=JSON.xpath("/subprocesses[_id eq '"+i+"']",t,{})[0],a=JSON.xpath("/indicators[id eq '"+PERFORMANCE_SET_ID+"']/instances/uuid",n,{})[0],s=n.dates.valid;library.lockPerformanceModel(a,s,i).then(function(i){var t=util.success("Lock performance model.",i);e(t)},function(e){o(e)})})}}}(),sdo=function(){return{create:function(e,i,t){return new Promise(function(e,o){var n=worker.getWorkerWrapper(),a="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(a=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=t.profile,n.subProcessUUID=i,n.subprofileId=a,n.channels.push("follow"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'SDO']/instances[1]/uuid",t,{})[0],r={createSDO:{sdoUUID:s}};n.action=r,worker.send(n).then(function(o){worker.setWorkerInfoInSubprocess(n,t,i);var a=util.success("Worker processes successfully.",o);e(a)},function(e){o(e)})})}}}(),taxonomy=function(){return{create:function(e,i,t){return new Promise(function(e,o){var n=worker.getWorkerWrapper(),a="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(a=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=t.profile,n.subProcessUUID=i,n.subprofileId=a,n.channels.push("follow"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'Taxonomy']/instances[1]/uuid",t,{})[0],r={createTaxonomy:{taxonomyUUID:s}};n.action=r,worker.send(n).then(function(o){worker.setWorkerInfoInSubprocess(n,t,i);var a=util.success("Worker processes successfully.",o);e(a)},function(e){o(e)})})}}}(),subProcessInstance=function(){return{setTitle:function(e,i,t,o){return new Promise(function(e,n){var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",app.SCOPE.workflow,{})[0],s=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+i+"']",app.SCOPE.workflow,{})[0];void 0!=s&&(s.label=t),a.label=t;var r=[],c={};c.model=o.subprocesses,r.push(c);var p=util.success("Subprocess setTitle success.",o.subprocesses);e(p)})},setValidDate:function(e,i,t,o){return new Promise(function(e,n){var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",app.SCOPE.workflow,{})[0];a.dates.valid=t;var s=[],r={};r.model=a,s.push(r);var c=util.success("valid date set.",o.subprocesses);e(c)})},setSPStatus:function(e,i,t,o){return new Promise(function(e,n){var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",app.SCOPE.workflow,{})[0];a.spStatus=t;var s=[],r={};r.model=o.subprocesses,s.push(r);var c=util.success("Subprocess spStatus success.",o.subprocesses);e(c)})}}}(),variables=function(){return{setVariable:function(setVariable,_WFInstance,uuid){return new Promise(function(resolve,reject){helper.getNodeValue(setVariable.data,_WFInstance,uuid).then(function(dataValue){var scope=setVariable.scope,variableName=setVariable.name,variableType=setVariable.variableType,validDate=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/dates/valid",_WFInstance,{})[0];switch(scope){case"profile":var profileId=_WFInstance.profile,profileVariableFileName=profileId+":variables",txnPacket=app.SCOPE.txn;dao.get(profileVariableFileName).then(function(file){for(var refPack={},localProcess=function(){if("periodic"==variableType){var subprocessType=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+uuid+"']/id]/type",_WFInstance,{})[0],seq=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+uuid+"']/id])",_WFInstance,{})[0]+1;if(subprocessType==PROCESS_TYPE_SUBPROFILE){var part=library.getSubprofileSubprocessIds();seq=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+uuid+"']/id and uuid = "+part+"])",_WFInstance,{})[0]+1}var obj={subProcessUUID:uuid,user:{userName:LOCAL_SETTINGS.SUBSCRIPTIONS.username,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userProfileId},seq:seq,validDate:validDate,value:dataValue};void 0!=file[variableName]?eval("file."+variableName+".push(obj)"):file[variableName]=[obj]}else file[variableName]=dataValue;dao.save(file).then(function(e){refPack.rev=e.rev,resolve("Variable set successfully")}).catch(function(e){reject("Failed to set Variable")})},found=!1,i=0;i<txnPacket.documents.length;i++)profileVariableFileName==txnPacket.documents[i].document&&(refPack=txnPacket.documents[i],found=!0);found?localProcess():(txnPacket=JSON.parse(JSON.stringify(app.SCOPE.txn)),txnPacket.documents=[],refPack={document:profileVariableFileName,rev:void 0==file._rev?"0":file._rev},txnPacket.documents.push(refPack),app.SCOPE.txn.documents.push(refPack),dao.updateTransaction(txnPacket).then(function(e){localProcess()}).catch(function(e){console.log(e),reject(void 0!=e.responseJSON&&void 0!=e.responseJSON.message?e.responseJSON.message:void 0!=e.responseText?e.responseText:e)}))}).catch(function(e){var i={_id:profileVariableFileName};if(i.channels=app.profile.channels,"periodic"==variableType){var t=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+uuid+"']/id]/type",_WFInstance,{})[0],o=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+uuid+"']/id])",_WFInstance,{})[0]+1;if(t==PROCESS_TYPE_SUBPROFILE){var n=library.getSubprofileSubprocessIds();o=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+uuid+"']/id and uuid = "+n+"])",_WFInstance,{})[0]+1}i[variableName]=[{subProcessUUID:uuid,user:{userName:LOCAL_SETTINGS.SUBSCRIPTIONS.username,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userProfileId},seq:o,validDate:validDate,value:dataValue}]}else i[variableName]=dataValue;var a=JSON.parse(JSON.stringify(app.SCOPE.txn));a.documents=[];var s={document:profileVariableFileName,rev:void 0==i._rev?"0":i._rev};a.documents.push(s),app.SCOPE.txn.documents.push(s),dao.updateTransaction(a).then(function(e){dao.save(i).then(function(e){s.rev=e.rev,resolve("Variable set successfully")}).catch(function(e){reject("Failed to set Variable")})}).catch(function(e){console.log(e),reject(void 0!=e.responseJSON&&void 0!=e.responseJSON.message?e.responseJSON.message:void 0!=e.responseText?e.responseText:e)})});break;case"subProcessInstance":resolve("not implemented");break;case"step":resolve("not implemented");break;case"subProfileSubProcessInstance":var subProfileId=app.profile.subprofileId,subProfileVariableFileName=subProfileId+":variables",txnPacket=app.SCOPE.txn;dao.get(subProfileVariableFileName).then(function(file){for(var refPack={},localProcess=function(){if("periodic"==variableType){var part=library.getSubprofileSubprocessIds(),seq=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+uuid+"']/id and uuid = "+part+"])",_WFInstance,{})[0]+1,obj={subProcessUUID:uuid,user:{userName:LOCAL_SETTINGS.SUBSCRIPTIONS.username,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userProfileId},seq:seq,validDate:validDate,value:dataValue};void 0!=file[variableName]?eval("file."+variableName+".push(obj)"):file[variableName]=[obj]}else file[variableName]=dataValue;dao.save(file).then(function(e){refPack.rev=e.rev,resolve("Variable at subprofile set successfully")}).catch(function(e){reject("Failed to set Variable at subprofile")})},found=!1,i=0;i<txnPacket.documents.length;i++)subProfileVariableFileName==txnPacket.documents[i].document&&(refPack=txnPacket.documents[i],found=!0);found?localProcess():(txnPacket=JSON.parse(JSON.stringify(app.SCOPE.txn)),txnPacket.documents=[],refPack={document:subProfileVariableFileName,rev:void 0==file._rev?"0":file._rev},txnPacket.documents.push(refPack),app.SCOPE.txn.documents.push(refPack),dao.updateTransaction(txnPacket).then(function(e){localProcess()}).catch(function(e){console.log(e),reject(void 0!=e.responseJSON&&void 0!=e.responseJSON.message?e.responseJSON.message:void 0!=e.responseText?e.responseText:e)}))}).catch(function(e){var i={_id:subProfileVariableFileName};if(i.channels=app.profile.channels,"periodic"==variableType){var t=library.getSubprofileSubprocessIds(),o=JSON.xpath("count(/subprocesses[_id eq '"+uuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+uuid+"']/id and _id = /subprocesses[_id = "+t+"]/_id])",_WFInstance,{})[0]+1;i[variableName]=[{subProcessUUID:uuid,user:{userName:LOCAL_SETTINGS.SUBSCRIPTIONS.username,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userProfileId},seq:o,validDate:validDate,value:dataValue}]}else i[variableName]=dataValue;var n=JSON.parse(JSON.stringify(app.SCOPE.txn));n.documents=[];var a={document:subProfileVariableFileName,rev:void 0==i._rev?"0":i._rev};n.documents.push(a),app.SCOPE.txn.documents.push(a),dao.updateTransaction(n).then(function(e){dao.save(i).then(function(e){a.rev=e.rev,resolve("Variable at subprofile set successfully")}).catch(function(e){reject("Failed to set Variable at subprofile")})}).catch(function(e){console.log(e),reject(void 0!=e.responseJSON&&void 0!=e.responseJSON.message?e.responseJSON.message:void 0!=e.responseText?e.responseText:e)})})}},function(e){reject("getNodeValue value not found.")})})}}}(),notification=function(){return{sendNotificationWorker:function(e,i,t){return new Promise(function(o,n){var a=function(e){return new Promise(function(o,n){var a={};if(void 0!=e.recipients.role)a.role=e.recipients.role,o(a);else if(void 0!=e.recipients.profileRole)a.profileRole={},a.profileRole.role=e.recipients.profileRole.role,a.profileRole.profile=e.recipients.profileRole.profile,o(a);else if(void 0!=e.recipients.subProfileRole)a.subProfileRole={},a.subProfileRole.role=e.recipients.subProfileRole.role,a.subProfileRole.subProfileCategory=e.recipients.subProfileRole.subProfileCategory,a.subProfileRole.profile=e.recipients.subProfileRole.profile,o(a);else if(void 0!=e.recipients.function)a.function={},a.function.users={},helper.getNodeValue(e.recipients.function.users,i,t).then(function(e){a.function.users=e,o(a)},function(e){rej(e)});else if(void 0!=e.recipients.stepAssignee)a.stepAssignee={},a.stepAssignee.role=e.recipients.stepAssignee.role,o(a);else if(void 0!=e.recipients.stepAssigneeFromStep){a.stepAssigneeFromStep={};var s=e.recipients.stepAssigneeFromStep.stepId;a.stepAssigneeFromStep.stepId=s;for(var r=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],c={},p=0;p<r.history.length;p++)r.history[p].id==s&&(c=r.history[p]);if(void 0!=c.assignmentHistory&&c.assignmentHistory.length>0){var d=c.assignmentHistory[c.assignmentHistory.length-1];a.stepAssigneeFromStep.userId=d.userId}o(a)}else if(void 0!=e.recipients.indicator){a.indicator={};var u=e.recipients.indicator.indicatorSetId,l=e.recipients.indicator.elementId,f=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+u+"']/instances/uuid",i,{})[0],m=JSON.xpath("/indicators[_id eq '"+f+"']",i,{})[0],I="/model/pending/data/"+u+"/"+l,S=JSON.xpath(I,m,{})[0];a.indicator.userId=S,o(a)}})},s=new NotificatioWorker(app),r=JSON.xpath("/subprocesses[_id eq '"+t+"']/meta-data/subprofileId",i,{})[0],c=DOMAIN.replace("exist/rest",""),p="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(p=app.profile.subprofileId);var d={notification:{message:{},messageType:"","meta-data":{applicationId:i.app,communityId:i.communityId,profileId:i.profile,subProcessUUID:t,subProfileId:r},notificationType:"",subprofileId:p,priority:"",recipients:{},url:c,keys:{profile:{name:"",id:""},community:{name:"",id:""},application:{name:"",id:""},currentUser:{name:"",id:""},subProcess:{name:"",id:"",validDate:"",dueDate:""},notification:{createdDateTime:moment().format()},step:{stepCreatedDateTime:"",stepName:"",stepId:""},node:{title:""}}}},u=JSON.xpath("/indicators[_id eq '"+app.profile._id+"']/title",i,{})[0];d.notification.keys.profile.name=u,d.notification.keys.profile.id=app.profile._id,d.notification.keys.community.name=app.getNameByLang(LOCAL_SETTINGS.COMMUNITY_CONFIG.communityName),d.notification.keys.community.id=LOCAL_SETTINGS.COMMUNITY_CONFIG.communityId;var l=JSON.xpath("/applications[appId eq '"+app.SCOPE.applicationId+"']",LOCAL_SETTINGS.COMMUNITY_CONFIG,{})[0];d.notification.keys.application.name=app.getNameByLang(l.name),d.notification.keys.application.id=l.appId,d.notification.keys.currentUser.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,d.notification.keys.currentUser.id=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];d.notification.keys.subProcess.name=f.label,d.notification.keys.subProcess.id=t,d.notification.keys.subProcess.validDate=f.dates.valid,d.notification.keys.subProcess.dueDate=f.dates.due;try{var m=f.step;d.notification.keys.step.stepCreatedDateTime=m.dateTimeCreated,d.notification.keys.step.stepId=m.id;var I=JSON.xpath("/processes/subProcesses[_id eq '"+f.id+"']/steps[_id eq '"+m.id+"']",app.SCOPE.workflow.config,{})[0];d.notification.keys.step.stepName=app.getNameByLang(I.name)}catch(e){}var S=JSON.xpath("/indicators[_id eq '"+p+"']/title",app.SCOPE.workflow,{})[0];if(void 0==S?d.notification.keys.node.title="":d.notification.keys.node.title=S,d.notification.message.default=e.message.default,d.notification.message.title=e.message.title,void 0!=e.message.rtf&&(d.notification.message.rtf={},void 0!=e.message.rtf.template?d.notification.message.rtf.template=e.message.rtf.template:void 0!=e.message.rtf.markup&&(d.notification.message.rtf.markup=e.message.rtf.markup)),d.notification.messageType=e.messageType,d.notification.notificationType=e.notificationType,d.notification.priority=e.priority,void 0!=e.notificationAction&&(d.notification.notificationAction={},d.notification.notificationAction.label=e.notificationAction.label,void 0!=e.notificationAction.action.URI?(d.notification.notificationAction.action={},d.notification.notificationAction.action.URI=e.notificationAction.action.URI):void 0!=e.notificationAction.action.goto&&(d.notification.notificationAction.action={},d.notification.notificationAction.action.goto=e.notificationAction.action.goto)),void 0!=e.schedule){var v=e.schedule.executeCommand,P={dateTime:"",unit:"",factor:""};if(void 0!=v.now)P.dateTime=moment().format();else if(void 0!=v.exact)P.dateTime=v.exact.dateTime;else if(void 0!=v.dueDate){var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],b="",h=f.dates.due;b=""!=h?moment(h,"YYYY-MM-DD"):moment().format(),P.dateTime=b,P.factor=v.dueDate.factor,P.unit=v.dueDate.unit}else if(void 0!=v.validDate){var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],b="",h=f.dates.valid;b=""!=validDate?moment(validDate,"YYYY-MM-DD"):moment().format(),P.dateTime=b,P.factor=v.validDate.factor,P.unit=v.validDate.unit}else if(void 0!=v.stepCreatedDate){var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],b="",y=f.step.dueDateTime;b=""!=y?moment(y).format():moment().format(),P.dateTime=b,P.factor=v.stepCreatedDate.factor,P.unit=v.stepCreatedDate.unit}else P.dateTime=moment().format();s.setSchedule(P)}a(e).then(function(e){d.notification.recipients=e,s.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button."),s.setAction(d);var n=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];s.setContext({step:{stepDateTime:n.step.dateTimeCreated}}),s.send().then(function(e){console.log(s);var i=util.success("Notification Worker processes successfully.",e);o(i)},function(e){o(e)})}).catch(function(e){console.log("Notification - getRecipients failed with error "+e),n(e)})})},reAssignmentNotification:function(e,i,t,o){return new Promise(function(n,a){var s=function(e){return new Promise(function(i,t){var o={};o.function={},o.function.users={},o.function.users=e.id,i(o)})},r=new NotificatioWorker(app),c=JSON.xpath("/subprocesses[_id eq '"+t+"']/meta-data/subprofileId",i,{})[0],p=DOMAIN.replace("exist/rest",""),d={notification:{message:{rtf:{}},messageType:"","meta-data":{applicationId:i.app,communityId:i.communityId,profileId:i.profile,subProcessUUID:t,subProfileId:c},notificationType:"workflow",priority:"",recipients:{},url:p,keys:{profile:{name:"",id:""},community:{name:"",id:""},application:{name:"",id:""},currentUser:{name:"",id:""},subProcess:{name:"",id:"",validDate:"",dueDate:""},notification:{createdDateTime:moment().format()},step:{stepCreatedDateTime:"",stepName:"",stepId:""},node:{title:""}}}},u=JSON.xpath("/indicators[_id eq '"+app.profile._id+"']/title",i,{})[0];d.notification.keys.profile.name=u,d.notification.keys.profile.id=app.profile._id,d.notification.keys.community.name=app.getNameByLang(LOCAL_SETTINGS.COMMUNITY_CONFIG.communityName),d.notification.keys.community.id=LOCAL_SETTINGS.COMMUNITY_CONFIG.communityId;var l=JSON.xpath("/applications[appId eq '"+app.SCOPE.applicationId+"']",LOCAL_SETTINGS.COMMUNITY_CONFIG,{})[0];d.notification.keys.application.name=app.getNameByLang(l.name),d.notification.keys.application.id=l.appId,d.notification.keys.currentUser.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,d.notification.keys.currentUser.id=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,d.notification.keys.subProcess.name=JSON.xpath("/subprocesses[_id eq '"+t+"']/label",i,{})[0],d.notification.keys.subProcess.id=t,d.notification.keys.subProcess.validDate=P.dates.valid,d.notification.keys.subProcess.dueDate=P.dates.due;var f=P.step;d.notification.keys.step.stepCreatedDateTime=f.dateTimeCreated,d.notification.keys.step.stepId=f.id;var m=JSON.xpath("/processes/subProcesses[_id eq '"+P.id+"']/steps[_id eq '"+f.id+"']",app.SCOPE.workflow.config,{})[0];d.notification.keys.step.stepName=app.getNameByLang(m.name);var I=JSON.xpath("/indicators[_id eq '"+subprofileId+"']/title",app.SCOPE.workflow,{})[0];if(void 0==I?d.notification.keys.node.title="":d.notification.keys.node.title=I,d.notification.message.default="",d.notification.message.title=e.reAssignment.title,d.notification.message.rtf.markup=e.reAssignment.message,d.notification.messageType=e.reAssignment.messageType,d.notification.priority=e.reAssignment.priority,void 0!=e.reAssignment.notificationAction&&(d.notification.notificationAction={},d.notification.notificationAction.label=e.reAssignment.notificationAction.label,void 0!=e.reAssignment.notificationAction.action.URI?(d.notification.notificationAction.action={},d.notification.notificationAction.action.URI=e.reAssignment.notificationAction.action.URI):void 0!=e.reAssignment.notificationAction.action.goto&&(d.notification.notificationAction.action={},d.notification.notificationAction.action.goto=e.reAssignment.notificationAction.action.goto)),void 0!=e.reAssignment.schedule){var S=e.reAssignment.schedule.executeCommand,v={dateTime:"",unit:"",factor:""};if(void 0!=S.now)v.dateTime=moment().format();else if(void 0!=S.exact)v.dateTime=S.exact.dateTime;else if(void 0!=S.dueDate){var P=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],b="",h=P.dates.due;b=""!=h?moment(h,"YYYY-MM-DD"):moment().format(),v.dateTime=b,v.factor=S.dueDate.factor,v.unit=S.dueDate.unit}else if(void 0!=S.validDate){var P=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],b="",h=P.dates.valid;b=""!=validDate?moment(validDate,"YYYY-MM-DD"):moment().format(),v.dateTime=b,v.factor=S.validDate.factor,v.unit=S.validDate.unit}else if(void 0!=S.stepCreatedDate){var P=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],b="",y=P.step.dueDateTime;b=""!=y?moment(y).format():moment().format(),v.dateTime=b,v.factor=S.stepCreatedDate.factor,v.unit=S.stepCreatedDate.unit}else v.dateTime=moment().format();r.setSchedule(v)}s(o).then(function(e){d.notification.recipients=e,r.setAction(d),r.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button."),r.send().then(function(e){var i=util.success("Notification Worker processes successfully for reassignment.",e);n(i)},function(e){n(e)})}).catch(function(e){console.log("Notification - getRecipients failed with error "+e),a(e)})})},assignmentNotification:function(e,i,t,o){return new Promise(function(n,a){var s=function(e){return new Promise(function(i,t){var o={};o.function={},o.function.users={},o.function.users=e.id,i(o)})},r=new NotificatioWorker(app),c=JSON.xpath("/subprocesses[_id eq '"+t+"']/meta-data/subprofileId",i,{})[0],p=DOMAIN.replace("exist/rest",""),d={notification:{message:{rtf:{}},messageType:"","meta-data":{applicationId:i.app,communityId:i.communityId,profileId:i.profile,subProcessUUID:t,subProfileId:c},notificationType:"workflow",priority:"",recipients:{},url:p,keys:{profile:{name:"",id:""},community:{name:"",id:""},application:{name:"",id:""},currentUser:{name:"",id:""},subProcess:{name:"",id:"",validDate:"",dueDate:""},notification:{createdDateTime:moment().format()},step:{stepCreatedDateTime:"",stepName:"",stepId:""},node:{title:""}}}},u=JSON.xpath("/indicators[_id eq '"+app.profile._id+"']/title",i,{})[0];d.notification.keys.profile.name=u,d.notification.keys.profile.id=app.profile._id,d.notification.keys.community.name=app.getNameByLang(LOCAL_SETTINGS.COMMUNITY_CONFIG.communityName),d.notification.keys.community.id=LOCAL_SETTINGS.COMMUNITY_CONFIG.communityId;var l=JSON.xpath("/applications[appId eq '"+app.SCOPE.applicationId+"']",LOCAL_SETTINGS.COMMUNITY_CONFIG,{})[0];d.notification.keys.application.name=app.getNameByLang(l.name),d.notification.keys.application.id=l.appId,d.notification.keys.currentUser.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,d.notification.keys.currentUser.id=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,d.notification.keys.subProcess.name=JSON.xpath("/subprocesses[_id eq '"+t+"']/label",i,{})[0],d.notification.keys.subProcess.id=t,d.notification.keys.subProcess.validDate=P.dates.valid,d.notification.keys.subProcess.dueDate=P.dates.due;var f=P.step;d.notification.keys.step.stepCreatedDateTime=f.dateTimeCreated,d.notification.keys.step.stepId=f.id;var m=JSON.xpath("/processes/subProcesses[_id eq '"+P.id+"']/steps[_id eq '"+f.id+"']",app.SCOPE.workflow.config,{})[0];d.notification.keys.step.stepName=app.getNameByLang(m.name);var I=JSON.xpath("/indicators[_id eq '"+subprofileId+"']/title",app.SCOPE.workflow,{})[0];if(void 0==I?d.notification.keys.node.title="":d.notification.keys.node.title=I,d.notification.message.default="",d.notification.message.title=e.assignment.title,d.notification.message.rtf.markup=e.assignment.message,d.notification.messageType=e.assignment.messageType,d.notification.priority=e.assignment.priority,void 0!=e.assignment.notificationAction&&(d.notification.notificationAction={},d.notification.notificationAction.label=e.assignment.notificationAction.label,void 0!=e.assignment.notificationAction.action.URI?(d.notification.notificationAction.action={},d.notification.notificationAction.action.URI=e.assignment.notificationAction.action.URI):void 0!=e.assignment.notificationAction.action.goto&&(d.notification.notificationAction.action={},d.notification.notificationAction.action.goto=e.assignment.notificationAction.action.goto)),void 0!=e.assignment.schedule){var S=e.assignment.schedule.executeCommand,v={dateTime:"",unit:"",factor:""};if(void 0!=S.now)v.dateTime=moment().format();else if(void 0!=S.exact)v.dateTime=S.exact.dateTime;else if(void 0!=S.dueDate){var P=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],b="",h=P.dates.due;b=""!=h?moment(h,"YYYY-MM-DD"):moment().format(),v.dateTime=b,v.factor=S.dueDate.factor,v.unit=S.dueDate.unit}else if(void 0!=S.validDate){var P=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],b="",h=P.dates.valid;b=""!=validDate?moment(validDate,"YYYY-MM-DD"):moment().format(),v.dateTime=b,v.factor=S.validDate.factor,v.unit=S.validDate.unit}else if(void 0!=S.stepCreatedDate){var P=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],b="",y=P.step.dueDateTime;b=""!=y?moment(y).format():moment().format(),v.dateTime=b,v.factor=S.stepCreatedDate.factor,v.unit=S.stepCreatedDate.unit}else v.dateTime=moment().format();r.setSchedule(v)}s(o).then(function(e){d.notification.recipients=e,r.setAction(d),r.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button."),r.send().then(function(e){console.log(r);var i=util.success("Notification Worker processes successfully for assignment.",e);n(i)},function(e){n(e)})}).catch(function(e){console.log("Notification - getRecipients failed with error "+e),a(e)})})},acceptanceNotification:function(e,i,t,o){return new Promise(function(n,a){var s=function(e){return new Promise(function(i,t){var o={};o.role=e,i(o)})},r=new NotificatioWorker(app),c=JSON.xpath("/subprocesses[_id eq '"+t+"']/meta-data/subprofileId",i,{})[0],p=DOMAIN.replace("exist/rest",""),d={notification:{message:{rtf:{}},messageType:"","meta-data":{applicationId:i.app,communityId:i.communityId,profileId:i.profile,subProcessUUID:t,subProfileId:c},notificationType:"workflow",priority:"",recipients:{},url:p,keys:{profile:{name:"",id:""},community:{name:"",id:""},application:{name:"",id:""},currentUser:{name:"",id:""},subProcess:{name:"",id:"",validDate:"",dueDate:""},notification:{createdDateTime:moment().format()},step:{
stepCreatedDateTime:"",stepName:"",stepId:""},node:{title:""}}}},u=JSON.xpath("/indicators[_id eq '"+app.profile._id+"']/title",i,{})[0];d.notification.keys.profile.name=u,d.notification.keys.profile.id=app.profile._id,d.notification.keys.community.name=app.getNameByLang(LOCAL_SETTINGS.COMMUNITY_CONFIG.communityName),d.notification.keys.community.id=LOCAL_SETTINGS.COMMUNITY_CONFIG.communityId;var l=JSON.xpath("/applications[appId eq '"+app.SCOPE.applicationId+"']",LOCAL_SETTINGS.COMMUNITY_CONFIG,{})[0];d.notification.keys.application.name=app.getNameByLang(l.name),d.notification.keys.application.id=l.appId,d.notification.keys.currentUser.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,d.notification.keys.currentUser.id=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];d.notification.keys.subProcess.name=f.label,d.notification.keys.subProcess.id=t,d.notification.keys.subProcess.validDate=f.dates.valid,d.notification.keys.subProcess.dueDate=f.dates.due;var m=f.step;d.notification.keys.step.stepCreatedDateTime=m.dateTimeCreated,d.notification.keys.step.stepId=m.id;var I=JSON.xpath("/processes/subProcesses[_id eq '"+f.id+"']/steps[_id eq '"+m.id+"']",app.SCOPE.workflow.config,{})[0];d.notification.keys.step.stepName=app.getNameByLang(I.name);var S=JSON.xpath("/indicators[_id eq '"+c+"']/title",app.SCOPE.workflow,{})[0];if(void 0==S?d.notification.keys.node.title="":d.notification.keys.node.title=S,d.notification.message.default="",d.notification.message.title=e.assignmentAcceptance.title,d.notification.message.rtf.markup=e.assignmentAcceptance.message,d.notification.messageType=e.assignmentAcceptance.messageType,d.notification.priority=e.assignmentAcceptance.priority,void 0!=e.assignmentAcceptance.notificationAction&&(d.notification.notificationAction={},d.notification.notificationAction.label=e.assignmentAcceptance.notificationAction.label,void 0!=e.assignmentAcceptance.notificationAction.action.URI?(d.notification.notificationAction.action={},d.notification.notificationAction.action.URI=e.assignmentAcceptance.notificationAction.action.URI):void 0!=e.assignmentAcceptance.notificationAction.action.goto&&(d.notification.notificationAction.action={},d.notification.notificationAction.action.goto=e.assignmentAcceptance.notificationAction.action.goto)),void 0!=e.assignmentAcceptance.schedule){var v=e.assignmentAcceptance.schedule.executeCommand,P={dateTime:"",unit:"",factor:""};if(void 0!=v.now)P.dateTime=moment().format();else if(void 0!=v.exact)P.dateTime=v.exact.dateTime;else if(void 0!=v.dueDate){var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],b="",h=f.dates.due;b=""!=h?moment(h,"YYYY-MM-DD"):moment().format(),P.dateTime=b,P.factor=v.dueDate.factor,P.unit=v.dueDate.unit}else if(void 0!=v.validDate){var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],b="",h=f.dates.valid;b=""!=validDate?moment(validDate,"YYYY-MM-DD"):moment().format(),P.dateTime=b,P.factor=v.validDate.factor,P.unit=v.validDate.unit}else if(void 0!=v.stepCreatedDate){var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],b="",y=f.step.dueDateTime;b=""!=y?moment(y).format():moment().format(),P.dateTime=b,P.factor=v.stepCreatedDate.factor,P.unit=v.stepCreatedDate.unit}else P.dateTime=moment().format();r.setSchedule(P)}s(o).then(function(e){d.notification.recipients=e,r.setAction(d),r.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button."),r.setContext({process:{}}),r.send(r).then(function(e){console.log(r);var i=util.success("Notification Worker processes successfully for assignment.",e);n(i)},function(e){n(e)})}).catch(function(e){console.log("Notification - getRecipients failed with error "+e),a(e)})})},acceptanceNotificationExternal:function(e,i,t,o){return new Promise(function(n,a){var s=function(e){return new Promise(function(i,t){var o={};o.function={},o.function.users=e,i(o)})},r=new NotificatioWorker(app),c=JSON.xpath("/subprocesses[_id eq '"+t+"']/meta-data/subprofileId",i,{})[0],p=DOMAIN.replace("exist/rest",""),d={notification:{message:{rtf:{}},messageType:"","meta-data":{applicationId:i.app,communityId:i.communityId,profileId:i.profile,subProcessUUID:t,subProfileId:c},notificationType:"workflow",priority:"",recipients:{},url:p,keys:{profile:{name:"",id:""},community:{name:"",id:""},application:{name:"",id:""},currentUser:{name:"",id:""},subProcess:{name:"",id:"",validDate:"",dueDate:""},notification:{createdDateTime:moment().format()},step:{stepCreatedDateTime:"",stepName:"",stepId:""},node:{title:""}}}},u=JSON.xpath("/indicators[_id eq '"+app.profile._id+"']/title",i,{})[0];d.notification.keys.profile.name=u,d.notification.keys.profile.id=app.profile._id,d.notification.keys.community.name=app.getNameByLang(LOCAL_SETTINGS.COMMUNITY_CONFIG.communityName),d.notification.keys.community.id=LOCAL_SETTINGS.COMMUNITY_CONFIG.communityId;var l=JSON.xpath("/applications[appId eq '"+app.SCOPE.applicationId+"']",LOCAL_SETTINGS.COMMUNITY_CONFIG,{})[0];d.notification.keys.application.name=app.getNameByLang(l.name),d.notification.keys.application.id=l.appId,d.notification.keys.currentUser.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,d.notification.keys.currentUser.id=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];d.notification.keys.subProcess.name=f.label,d.notification.keys.subProcess.id=t,d.notification.keys.subProcess.validDate=f.dates.valid,d.notification.keys.subProcess.dueDate=f.dates.due;var m=f.step;d.notification.keys.step.stepCreatedDateTime=m.dateTimeCreated,d.notification.keys.step.stepId=m.id;var I=JSON.xpath("/processes/subProcesses[_id eq '"+f.id+"']/steps[_id eq '"+m.id+"']",app.SCOPE.workflow.config,{})[0];d.notification.keys.step.stepName=app.getNameByLang(I.name);var S=JSON.xpath("/indicators[_id eq '"+c+"']/title",app.SCOPE.workflow,{})[0];if(void 0==S?d.notification.keys.node.title="":d.notification.keys.node.title=S,d.notification.message.default="",d.notification.message.title=e.assignmentAcceptance.title,d.notification.message.rtf.markup=e.assignmentAcceptance.message,d.notification.messageType=e.assignmentAcceptance.messageType,d.notification.priority=e.assignmentAcceptance.priority,void 0!=e.assignmentAcceptance.notificationAction&&(d.notification.notificationAction={},d.notification.notificationAction.label=e.assignmentAcceptance.notificationAction.label,void 0!=e.assignmentAcceptance.notificationAction.action.URI?(d.notification.notificationAction.action={},d.notification.notificationAction.action.URI=e.assignmentAcceptance.notificationAction.action.URI):void 0!=e.assignmentAcceptance.notificationAction.action.goto&&(d.notification.notificationAction.action={},d.notification.notificationAction.action.goto=e.assignmentAcceptance.notificationAction.action.goto)),void 0!=e.assignmentAcceptance.schedule){var v=e.assignmentAcceptance.schedule.executeCommand,P={dateTime:"",unit:"",factor:""};if(void 0!=v.now)P.dateTime=moment().format();else if(void 0!=v.exact)P.dateTime=v.exact.dateTime;else if(void 0!=v.dueDate){var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],b="",h=f.dates.due;b=""!=h?moment(h,"YYYY-MM-DD"):moment().format(),P.dateTime=b,P.factor=v.dueDate.factor,P.unit=v.dueDate.unit}else if(void 0!=v.validDate){var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],b="",h=f.dates.valid;b=""!=validDate?moment(validDate,"YYYY-MM-DD"):moment().format(),P.dateTime=b,P.factor=v.validDate.factor,P.unit=v.validDate.unit}else if(void 0!=v.stepCreatedDate){var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],b="",y=f.step.dueDateTime;b=""!=y?moment(y).format():moment().format(),P.dateTime=b,P.factor=v.stepCreatedDate.factor,P.unit=v.stepCreatedDate.unit}else P.dateTime=moment().format();r.setSchedule(P)}s(o).then(function(e){d.notification.recipients=e,r.setAction(d),r.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button."),r.setContext({process:{}}),r.send(r).then(function(e){console.log(r);var i=util.success("Notification Worker processes successfully for assignment.",e);n(i)},function(e){n(e)})}).catch(function(e){console.log("Notification - getRecipients failed with error "+e),a(e)})})}}}(),report=function(){return{createPerformanceReport:function(e,i,t){return new Promise(function(o,n){var a=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=t,a.subprofileId=s,a.channels.push("createPerformanceReport"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.workplanSetId,c=e.configSetId,p=JSON.xpath("/indicators[category/term eq '"+r+"']/_id",app.SCOPE.workflow,{})[0],d=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+c+"']/instances[1]/uuid",i,{})[0],u={createPerformanceReport:{workplanUUID:p,configUUID:d,profilId:i.profile}};a.action=u,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,t);var n=util.success("WorkplanReport Worker processed successfully.",e);o(n)},function(e){n(e)})})},createReport:function(e,i,t){return new Promise(function(o,n){var a=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=t,a.subprofileId=s,a.channels.push("executeReport"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.PerformanceReportDefinitionSetId,c=e.reportingSDOSetId,p=JSON.xpath("/indicators[category/term eq '"+r+"']/_id",i,{})[0],d=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+c+"']/instances[1]/uuid",i,{})[0],u={createReport:{performanceReportDefinition:p,reportingSDO:d,profilId:i.profile}};a.action=u,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,t);var n=util.success("Reprot Worker processed successfully.",e);o(n)},function(e){n(e)})})},sdoReport:function(e,i,t){return new Promise(function(o,n){var a=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=t,a.subprofileId=s,a.channels.push("sdoReport"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.indicatorSetId,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],p={sdoReport:{sdoReportUUID:c,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};a.action=p,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,t);var n=util.success("report Worker processed successfully.",e);o(n)},function(e){n(e)})})},executeReport:function(e,i,t){return new Promise(function(o,n){var a=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=t,a.subprofileId=s,a.channels.push("executeReport"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.SDOreportSetId,c=e.reportingSDOSetid,p=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],d=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+c+"']/instances[1]/uuid",i,{})[0];void 0==p&&(p=JSON.xpath("/indicators[category/term eq '"+r+"']/_id",i,{})[0]);var u={executeReport:{sdoReportUUID:p,reportingSDOUUID:d,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};a.action=u,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,t);var n=util.success("report Worker processed successfully.",e);o(n)},function(e){n(e)})})},generateView:function(e,i,t){return new Promise(function(o,n){var a=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=t,a.subprofileId=s,a.channels.push("sdoReport"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.ViewConfigSetId,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],p={generateView:{viewConfigUUID:c,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};a.action=p,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,t);var n=util.success("report Worker processed successfully.",e);o(n)},function(e){n(e)})})},requestReport:function(e,i,t){return new Promise(function(o,n){var a=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=t,a.subprofileId=s,a.channels.push("executeReport"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.sdoRequestReportSetId,c=e.sdoReportCreationSetId,p=e.performanceReportSetId,d=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],u=JSON.xpath("/indicators[category/term eq '"+c+"']/_id",i,{})[0],l=JSON.xpath("/indicators[category/term eq '"+p+"']/_id",i,{})[0],f={requestReport:{performanceReportUUID:l,sdoRequestReportUUID:d,sdoReportCreationUUID:u,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};a.action=f,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,t);var n=util.success("Request report Worker processed successfully.",e);o(n)},function(e){n(e)})})},generateBasicView:function(e,i,t){return new Promise(function(o,n){var a=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=t,a.subprofileId=s,a.channels.push("sdoReport"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.sdoDataObjectViewSetId,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],p={generateBasicView:{sdoDataObjectViewUUID:c,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};a.action=p,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,t);var n=util.success("generateBasicView Worker processed successfully.",e);o(n)},function(e){n(e)})})},generateUnionView:function(e,i,t){return new Promise(function(o,n){var a=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=t,a.subprofileId=s,a.channels.push("sdoReport"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.sdoDataObjectViewUnionSetId,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],p={generateUnionView:{sdoDataObjectViewUnionUUID:c,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};a.action=p,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,t);var n=util.success("generateUnionView Worker processed successfully.",e);o(n)},function(e){n(e)})})},sdoReportMultiple:function(e,i,t){return new Promise(function(o,n){var a=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=t,a.subprofileId=s,a.channels.push("sdoReport"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.sdoReportCreationSetId,c=e.sdoReportViewsSetId,p=e.sdoReportJoinsSetId,d=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],u=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+c+"']/instances[1]/uuid",i,{})[0],l=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+p+"']/instances[1]/uuid",i,{})[0],f={sdoReportMultiple:{sdoReportCreationUUID:d,sdoReportViewsUUID:u,sdoReportJoinsUUID:l,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};a.action=f,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,t);var n=util.success("sdoReportMultiple Worker processed successfully.",e);o(n)},function(e){n(e)})})},subprofileQuarterlyReport:function(e,i,t){return new Promise(function(o,n){var a=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=t,a.subprofileId=s,a.channels.push("executeReport"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.scheduleReportIndicator,c=JSON.xpath("/indicators[category/term eq '"+r+"']/_id",i,{})[0],p=e.sdoReportApprovalIndicator,d=JSON.xpath("/indicators[category/term eq '"+p+"' and workflows[1]/processes[1]/subProcessUUID eq '"+t+"']/_id",i,{})[0],u={subprofileQuarterlyReport:{scheduleReportIndicatorUUID:c,sdoReportApprovalIndicatorUUID:d,subprofileCode:app.profile.subProfile.code,subprofileTitle:app.profile.subProfile.title,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};a.action=u,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,t);var n=util.success("QuarterlyReport report Worker processed successfully.",e);o(n)},function(e){n(e)})})}}}(),participants=function(){return{linkParticipants:function(e,i,t){return new Promise(function(o,n){var a=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=t,a.subprofileId=s,a.channels.push("follow"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.EPWPLinkParticipantsInBulkId,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],p=e.EPWPLocalityId,d=JSON.xpath("/indicators[category/term eq '"+p+"']/_id",i,{})[0],u=e.EPWPActiveParticipantsId,l=JSON.xpath("/indicators[category/term eq '"+u+"']/_id",i,{})[0],f={linkParticipants:{EPWPLinkParticipantsInBulkIdUUID:c,EPWPLocalityIdUUID:d,EPWPActiveParticipantsIdUUID:l,profilId:i.profile}};a.action=f,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,t);var n=util.success("EPWPLinkParticipants Worker processed successfully.",e);o(n)},function(e){n(e)})})},monthlyAttendance:function(e,i,t){return new Promise(function(o,n){var a=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=t,a.subprofileId=s,a.channels.push("follow"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.EPWPMonthlyAttendanceBulkUploadUUID,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],p=e.EPWPActiveParticipantsIdUUID,d=JSON.xpath("/indicators[category/term eq '"+p+"']/_id",i,{})[0],u=e.EPWPMonthlyEmploymentPerLocalityUUID,l=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+u+"']/instances[1]/uuid",i,{})[0],f={monthlyAttendance:{EPWPMonthlyAttendanceBulkUploadUUID:c,EPWPActiveParticipantsIdUUID:d,EPWPMonthlyEmploymentPerLocalityUUID:l,profilId:i.profile}};a.action=f,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,t);var n=util.success("monthlyAttendance Worker processed successfully.",e);o(n)},function(e){n(e)})})},monthlyProgressSummary:function(e,i,t){return new Promise(function(o,n){var a=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=t,a.subprofileId=s,a.channels.push("follow"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.EPWPMonthlyProgressSummaryIdUUID,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],p={monthlyProgressSummary:{EPWPMonthlyProgressSummaryIdUUID:c,profilId:i.profile}};a.action=p,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,t);var n=util.success("monthlyAttendance Worker processed successfully.",e);o(n)},function(e){n(e)})})},participantContracts:function(e,i,t){return new Promise(function(o,n){var a=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=t,a.subprofileId=s,a.channels.push("follow"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.EPWPParticipantContractsIdUUID,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],p={participantContracts:{EPWPParticipantContractsIdUUID:c,profilId:i.profile}};a.action=p,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,t);var n=util.success("participantContracts Worker processed successfully.",e);o(n)},function(e){n(e)})})},genericLinkParticipants:function(e,i,t){return new Promise(function(e,i){})}}}(),worker=function(){return{getWorkerWrapper:function(){var e={source:"remote",type:"workerObject",_id:"",channels:["workerObject"],profileId:"",communityId:"",applicationId:"",subProcessUUID:"",message:"",messageType:"info",createdDateTime:"",senderUserId:"",subProfileId:"",parentTransactionId:void 0==app.SCOPE.txn?"":app.SCOPE.txn.transactionId,action:{}};return e},send:function(e){return new Promise(function(i,t){console.log("Submitting Worker Object to server"),console.log(e),dao.save(e).then(function(e){i(e)}).catch(function(e){console.log("Error submitting worker response !!"+e),t(e)})})},sendWorker:function(e,i,t){return new Promise(function(o,n){var a=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=t,a.subprofileId=s,a.channels.push("sendWorker"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=function(e,o,n){return new Promise(function(a,s){helper.getNodeValue(e,i,t).then(function(e){a({seq:o,paramName:n,dataValue:e})},function(e){s(e)})})},c=function(e){return new Promise(function(o,n){for(var a=[],s=e.length,c=0;c<e.length;c++){var p=e[c].parameterValue,d=e[c].seq,u=e[c].parameterName;r(p,d,u).then(function(e){a.push({seq:e.seq,paramName:e.paramName,paramValue:e.dataValue}),s--,0==s&&(a.push({seq:s+1,paramName:"communityId",paramValue:i.communityId}),a.push({seq:s+2,paramName:"applicationId",paramValue:i.app}),a.push({seq:s+3,paramName:"profileId",paramValue:i.profile}),a.push({seq:s+4,paramName:"subProcessUUID",paramValue:t}),o(a))},function(e){s--,0==s&&(a.push({seq:s+1,paramName:"communityId",paramValue:i.communityId}),a.push({seq:s+2,paramName:"applicationId",paramValue:i.app}),a.push({seq:s+3,paramName:"profileId",paramValue:i.profile}),a.push({seq:s+4,paramName:"subProcessUUID",paramValue:t}),o(a))})}})};if(void 0!=e.rest){var p=e.rest.parameters;c(p).then(function(s){var r={sendWorker:{rest:{}}};r.sendWorker.rest.uri=e.rest.uri,r.sendWorker.rest.profilId=i.profile,r.sendWorker.rest.parameters=s,a.action=r,worker.send(a).then(function(e){var s=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];s.spStatus="submitted",void 0==s.messages&&(s.messages=[]);var r={message:{i18n:{_id:"",en:"The server is processing your request. Please wait a few seconds and then click the refresh button.",pt:"The server is processing your request. Please wait a few seconds and then click the refresh button."}},type:"info"};s.messages.push(r),void 0==s.workers&&(s.workers=[]),s.workers.push({workerId:a._id,dateTime:moment().format()}),persistData("subprocesses",app.SCOPE.workflow,t).then(function(i){var t=util.success("Worker Rest processed successfully.",e);o(t)}).catch(function(e){console.log("Worker submitted subprocess file update failed"),n(e)})},function(e){console.log("Worker failed "),n(e)})},function(e){console.log("parameter creation failed. Abording worker object")})}else if(void 0!=e.functional){var p=e.functional.parameters;c(p).then(function(s){var r={sendWorker:{functional:{}}};r.sendWorker.functional.methodName=e.functional.methodName,r.sendWorker.functional.profilId=i.profile,r.sendWorker.functional.parameters=s,a.action=r,worker.send(a).then(function(e){var s=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];s.spStatus="submitted",void 0==s.messages&&(s.messages=[]);var r={message:{i18n:{_id:"",en:"The server is processing your request. Please wait a few seconds and then click the refresh button.",pt:"The server is processing your request. Please wait a few seconds and then click the refresh button."}},type:"info"};s.messages.push(r),void 0==s.workers&&(s.workers=[]),s.workers.push({workerId:a._id,dateTime:moment().format()}),persistData("subprocesses",app.SCOPE.workflow,t).then(function(i){var t=util.success("Worker functional processed successfully.",e);o(t)}).catch(function(e){console.log("Worker submitted subprocess file update failed"),n(e)})},function(e){console.log("Worker failed "),n(e)})},function(e){console.log("parameter creation failed. Abording worker object")})}})},executeLocal:function(workerConfig,_WFInstance,uuid){return new Promise(function(resolve,reject){var processGetNodeValue=function(e,i,t){return new Promise(function(o,n){helper.getNodeValue(e,_WFInstance,uuid).then(function(e){o({seq:i,dataType:t,dataValue:e})},function(e){n(e)})})},processParams=function(e){return new Promise(function(i,t){for(var o=[],n=e.length,a=0;a<e.length;a++){var s=e[a].parameterValue,r=e[a].seq,c=e[a].dataType.dataType;processGetNodeValue(s,r,c).then(function(e){o.push({seq:e.seq,dataType:e.dataType,paramValue:e.dataValue}),n--,0==n&&i(o)},function(e){n--,0==n&&i(o)})}})},fixParamType=function(e,i){switch(i){case"string":var t=e.replace(/'/g,"\\'");return"'"+t+"'";case"date":case"dateTime":return"'"+e+"'";case"number":case"decimal":return e}},methodName=workerConfig.methodName,configParam=workerConfig.parameters;processParams(configParam).then(function(paramsArray){for(var pList="",i=0;i<paramsArray.length-1;i++)pList=pList+fixParamType(paramsArray[i].paramValue,paramsArray[i].dataType)+",";pList+=fixParamType(paramsArray[i].paramValue,paramsArray[i].dataType);var callbackSuccess=function(){return resolve("Function '"+methodName+"' executed. Response success.")},callbackFailure=function(){return reject("Function '"+methodName+"' executed. Response failed.")},spUUID="'"+uuid+"'",func=methodName+"("+pList+",callbackSuccess, callbackFailure,"+spUUID+")",exe=eval(func);console.log(exe)},function(e){console.log("parameter creation failed. Abording worker object"),reject(e)})})},setWorkerInfoInSubprocess:function(e,i,t){var o=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],n={message:{i18n:{_id:"",en:"The server is processing your request. Please wait a few seconds and then click the refresh button.",pt:"O servidor está processando sua solicitação. Por favor aguarde alguns segundos e depois clique no botão atualizar."}},type:"info"};o.messages=[],o.messages.push(n),void 0==o.workers&&(o.workers=[]),o.workers.push({workerId:e._id,dateTime:moment().format()})},create:function(e,i,t){return new Promise(function(o,n){var a=e.channel,s=e.action,r=worker.getWorkerWrapper(),c="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(c=app.profile.subprofileId),r._id=generateUUID(),r.communityId=app.SCOPE.getCommunityId(),r.applicationId=app.SCOPE.applicationId,r.createdDateTime=moment().format(),r.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,r.profileId=i.profile,r.subProcessUUID=t,r.subprofileId=c,r.channels.push(a),r.channels.push("community_"+app.SCOPE.getCommunityId());var p={};p[s]={};for(var d=0;d<e.indicators.length;d++){var u=e.indicators[d].label,l=e.indicators[d].setId,f=e.indicators[d].context,m="";if("subProcess"==f||"currentSubProcessInstance"==f||"currentSubProcess"==f){if(m=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+l+"']/instances[1]/uuid",i,{})[0],void 0==m){var I=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];void 0!=I&&I.indicators.length>0&&(m=JSON.xpath("/indicators[category/term eq '"+l+"']/_id",i,{})[0])}}else m=JSON.xpath("/indicators[category/term eq '"+l+"']/_id",i,{})[0];p[s][u]=m}if(p[s].profilId=i.profile,void 0!=e.fixed)for(var d=0;d<e.fixed.length;d++){var S=e.fixed[d],v=Object.keys(S)[0];p[s][v]=S[v]}void 0!=e.dataFields&&(p[s].dataFields=e.dataFields),r.action=p,worker.send(r).then(function(e){worker.setWorkerInfoInSubprocess(r,i,t);var n=util.success(s+" worker processed successfully.",e);o(n)},function(e){n(e)})})}}}(),user=function(){return{addToRole:function(e,i,t){return new Promise(function(o,n){helper.getNodeValue(e.userName,t,i).then(function(a){helper.getNodeValue(e.userId,t,i).then(function(i){var t=JSON.xpath("/roles[id eq '"+e.roleId+"']/type",app.SCOPE.APP_CONFIG,{})[0];"instance"==t?rolesManager.doUserRegistration(i,a,e.roleId,"instance").then(function(e){var i=util.success("Role assigned to user in context instance",e);o(i)}).catch(function(e){console.log("rolesManager- instance fail"),o("role update failed")}):"subprofile"==t?rolesManager.doUserRegistration_node(i,a,e.roleId,"subprofile").then(function(e){
var i=util.success("Role assigned to user in context subprofile",e);o(i)}).catch(function(e){console.log("rolesManager- subprofile fail"),o("role update failed")}):"adoption"==t?rolesManager.doUserRegistration_adoption(i,a,e.roleId,"adoption").then(function(e){var i=util.success("Role assigned to user in context adoption",e);o(i)}).catch(function(e){console.log("rolesManager- adoption fail"),o("role update failed")}):(console.log("Role not found in any context"),n("Role not found in any context"))}).catch(function(e){n(e)})}).catch(function(e){n(e)})})}}}(),generalFunctions=function(){return{addToFavourites:function(e,i,t){return new Promise(function(i,o){var n=e.context;"profile"==n?library.addToFavouritesProfile().then(function(e){i(e)}).catch(function(e){o(e)}):"subprofile"==n?library.addToFavouritesSubProfile().then(function(e){i(e)}).catch(function(e){o(e)}):"subprocess"==n&&library.addToFavouritesSubProcess(t).then(function(e){i(e)}).catch(function(e){o(e)})})},addToUserFavourites:function(e,i,t){return new Promise(function(o,n){var a=e.context,s=e.user,r="";if(void 0!=s.stepAssigneeFromStep){for(var c=s.stepAssigneeFromStep.stepId,p=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],d={},u=0;u<p.history.length;u++)p.history[u].id==c&&(d=p.history[u]);if(void 0!=d.assignmentHistory&&d.assignmentHistory.length>0){var l=d.assignmentHistory[d.assignmentHistory.length-1];r=l.userId}}else if(void 0!=s.indicator){var f=s.indicator.indicatorSetId,m=s.indicator.elementId,I=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+f+"']/instances/uuid",i,{})[0],S=JSON.xpath("/indicators[_id eq '"+I+"']",i,{})[0],v="/model/pending/data/"+f+"/"+m,P=JSON.xpath(v,S,{})[0];r=P}"profile"==a?library.addToFavouritesProfileForUser(r).then(function(e){console.log("Workflow ****** Profile Done"),o(e)}).catch(function(e){n(e)}):"subprofile"==a?library.addToFavouritesSubprofileForUser(r).then(function(e){console.log("Workflow ****** SubProfile Done"),o(e)}).catch(function(e){n(e)}):"subprocess"==a&&library.addToUsersFavouritesSubProcessForUser(r,t).then(function(e){console.log("Workflow ****** Subprocess Done"),o(e)}).catch(function(e){n(e)})})}}}();module.exports={community:community,application:application,performance:performance,worker:worker,sdo:sdo,taxonomy:taxonomy,subProcessInstance:subProcessInstance,variables:variables,notification:notification,report:report,participants:participants,user:user,generalFunctions:generalFunctions};

},{"./form":3,"./helper":4,"./nodeValue":6,"utility":8}],3:[function(require,module,exports){
"use strict";function create(args){var processId=args[0]||"",subProcess=args[1]||{},step=args[2]||{},action=args[3]||{},_WFInstance=args[6]||{},data=args[6]||{},indicators=subProcess.indicators||[],result=[],indicatorType=action._type,processSeq=args[4]||"",subProcessSeq=args[5]||"",createType=args[7]||"",subProcessId=subProcess._id,uuid=args[8]||"",baseUUID=args[9]||"",profile=_WFInstance.profile,inputData=args[10]||{},formCreateType=action.method.form.create,formType=action.method.form.type,paramObject={formCreateType:formCreateType,formType:formType};return new Promise(function(resolve,reject){var toProcess=indicators.length,broke=!1,errorArray=[],resolveCaller=function(){if(0==broke){var e=util.success("Form create indicator persist success.",_WFInstance.indicators);resolve(e)}else{for(var s=[],t=0;t<_WFInstance.instance.processes.length;t++)_WFInstance.instance.processes[t].subProcesses.length>0&&s.push(_WFInstance.instance.processes[t]);_WFInstance.instance.processes=[],_WFInstance.instance.processes=s;var r=[],a=JSON.xpath("/subprocesses[_id eq '"+uuid+"']",_WFInstance,{})[0],o=a.id,i=JSON.xpath("/config/processes/subProcesses[_id eq '"+o+"']",_WFInstance,{})[0];if(void 0!=i.instanceType.newSequence){for(var t=0;t<i.indicators.length;t++){var n=i.indicators[t],c=n._id,d=JSON.xpath("distinct-values(/subprocesses[groupKey = '"+a.groupKey+"']/indicators[id = '"+c+"']/instances/uuid)",_WFInstance,{})[0];if(void 0!=d){var u=JSON.xpath("/indicators[_id eq '"+d+"']",_WFInstance,{})[0];void 0!=u&&(u.model.pending=u.model.approved)}}for(var l="",t=0;t<i.indicators.length-1;t++)l=l+"'"+i.indicators[t]._id+"',";l=l+"'"+i.indicators[i.indicators.length-1]._id+"'",r=JSON.xpath("distinct-values(/indicators[category/term = ("+l+")]/model/approved/subProcessUUID)",_WFInstance,{});var p=function(e,s){if(e==s.length){for(var t=[],r=0;r<_WFInstance.subprocesses.length;r++)_WFInstance.subprocesses[r].indicators.length>0&&t.push(_WFInstance.subprocesses[r]);_WFInstance.subprocesses=[],_WFInstance.subprocesses=t;var a=util.success("Process failed",errorArray);reject(a)}else persistData("indicators",_WFInstance,s[e]).then(function(t){p(e+1,s)}).catch(function(t){p(e+1,s)})};p(0,r)}else{for(var f=[],t=0;t<_WFInstance.subprocesses.length;t++)_WFInstance.subprocesses[t].indicators.length>0&&f.push(_WFInstance.subprocesses[t]);_WFInstance.subprocesses=[],_WFInstance.subprocesses=f;var I=util.success("Process failed",errorArray);reject(I)}}},subprocessType=JSON.xpath("/config/processes/subProcesses[_id eq '"+subProcessId+"']/type",_WFInstance,{})[0],formCreateFn=function(indicatorType,indicatorId,validDate,instantiateSource){return new Promise(function(resolve,reject){gatekeeper.instantiate(baseUUID,indicatorType,indicatorId,_WFInstance.profile,validDate,subProcessId,subprocessType).then(function(docArray){for(var i=0;i<docArray.length;i++){for(var object=docArray[i],index=0;index<_WFInstance.indicators.length;index++){var indicator=_WFInstance.indicators[index];if(indicator._id==object.model._id){_WFInstance.indicators.splice(index,1),_WFInstance.indicators.push(object.model);break}}if(!object.model._id.endsWith(":approved")&&!object.model._id.endsWith(":rejected")){object.model.model.pending.validDate=validDate,object.model.model.pending.subProcessUUID=uuid;var workflowObj={id:_WFInstance.config._id,instance:_WFInstance.instance._id,processes:[{id:processId,subProcessId:subProcess._id,subProcessUUID:uuid,step:{id:step.id,seq:step.seq,startDate:"",status:step.status,message:step.message,assignedTo:{userId:step.assignedTo.userId,name:step.assignedTo.name},comment:step.comment,complete:!1,endDate:""}}]};1==object.model.model.pending.seq&&void 0!=action.setWorkflowLabelInTitle&&""!=action.setWorkflowLabelInTitle&&1==action.setWorkflowLabelInTitle&&(object.model.title=inputData.label),void 0!=action.setDraft&&""!=action.setDraft&&1==action.setDraft&&(object.model.control.draft=!0);var alreadyExists=!1,obIndex=-1;object.model.workflows.forEach(function(e,s){uuid==e.processes[0].subProcessUUID&&(alreadyExists=!0,obIndex=s)}),alreadyExists?object.model.workflows[obIndex]=workflowObj:object.model.workflows.push(workflowObj);var mainId=object.model._id;gatekeeper.persist(docArray).then(function(savedArray){dao.get(mainId).then(function(data){var indicatorModel=ko.mapping.fromJS({defaultModel:{setId:indicatorId}}),sequence=data.model.pending.seq;gatekeeper.instantiateData(mainId,instantiateSource,indicatorModel,data.model.pending.seq,paramObject).then(function(data){if("200"==data[0].status){for(var index=0;index<_WFInstance.indicators.length;index++){var indicator=_WFInstance.indicators[index];if(indicator._id==data[0].model._id){_WFInstance.indicators.splice(index,1),_WFInstance.indicators.push(data[0].model);break}}if(1==sequence&&void 0!=action.setWorkflowLabelInField&&""!=action.setWorkflowLabelInField){var assignmentSetId=action.setWorkflowLabelInField.split(".")[0];if(assignmentSetId==indicatorId){console.log(data[0]);var txt=inputData.label,squote=txt.replace(/'/g,"\\'"),path="data[0].model.model.pending.data."+action.setWorkflowLabelInField+"='"+squote+"'";eval(path)}}gatekeeper.persist(data).then(function(e){dao.get(mainId).then(function(e){if(0==_WFInstance.indicators.length)_WFInstance.indicators.push(e),toProcess--,0==toProcess&&persistData("indicators",_WFInstance,uuid).then(function(e){util.success("Form create indicator persist success.",_WFInstance.indicators);resolveCaller()}).catch(function(e){errorArray.push({error:"persistData "+uuid,errorBlock:e}),console.error(e);util.success("Form create indicator persist failed.",{});broke=!0,resolveCaller()}),resolve({});else{for(var s=!1,t=0;t<_WFInstance.indicators.length;t++){var r=_WFInstance.indicators[t];r._id==e._id&&(s=!0,_WFInstance.indicators.splice(t,1),_WFInstance.indicators.push(e),t=_WFInstance.indicators.length,toProcess--,0==toProcess&&persistData("indicators",_WFInstance,uuid).then(function(e){util.success("Form create indicator persist success.",_WFInstance.indicators);resolveCaller()}).catch(function(e){errorArray.push({error:"persistData "+uuid,errorBlock:e}),console.error(e);util.success("Form create indicator persist failed.",{});broke=!0,resolveCaller()}),resolve({}))}0==s&&(_WFInstance.indicators.push(e),toProcess--,0==toProcess&&persistData("indicators",_WFInstance,uuid).then(function(e){util.success("Form create indicator persist success.",_WFInstance.indicators);resolveCaller()}).catch(function(e){errorArray.push({error:"persistData "+uuid,errorBlock:e}),console.error(e);util.success("Form create indicator persist failed.",{});broke=!0,resolveCaller()}),resolve({}))}}).catch(function(e){errorArray.push({error:"dao.get(mainId) "+mainId,errorBlock:e}),console.error(e);util.success("1 Gatekeeper initialisation failed with initialiseData message ",{});broke=!0,toProcess--,0==toProcess&&resolveCaller(),resolve({})})},function(e){errorArray.push({error:"gatekeeper.persist(data) - Persisting all docs ",errorBlock:e}),console.error(e);util.success("2 Gatekeeper initialisation failed with initialiseData message ",{});broke=!0,toProcess--,0==toProcess&&resolveCaller(),resolve({})})}else{errorArray.push({error:"gatekeeper.instantiateData"+mainId+" "+data[0].status,errorBlock:{}});var failure=util.success("3 Gatekeeper initialisation failed with initialiseData message ",{});broke=!0,toProcess--,0==toProcess&&resolveCaller(),resolve({})}},function(e){errorArray.push({error:"gatekeeper.instantiateData"+mainId,errorBlock:e});util.success("4 Gatekeeper initialisation failed with initialiseData message ",{});broke=!0,toProcess--,0==toProcess&&resolveCaller(),resolve({})})}).catch(function(e){errorArray.push({error:"dao.get(mainId) "+mainId,errorBlock:e}),console.error(e);util.success("5 Gatekeeper initialisation failed with initialiseData message ",{});broke=!0,toProcess--,0==toProcess&&resolveCaller(),resolve({})})},function(e){errorArray.push({error:"gatekeeper.persist savedArray",errorBlock:e}),console.error(e);util.success("6 Gatekeeper initialisation failed with initialiseData message ",{});broke=!0,toProcess--,0==toProcess&&resolveCaller(),resolve({})})}}},function(e){errorArray.push({error:"gatekeeper.instantiate",errorBlock:e}),broke=!0,toProcess--,0==toProcess&&resolveCaller(),resolve({})})})},instantiateSource=FROM_DEFINITION,loopFunction=function(e,s){if(0==e.length)toProcess--,0==toProcess&&resolveCaller();else if(s<e.length){var t=e[s]._id,r=(util.getName(e[s].name,"en"),e[s].initiateData,"");void 0!=subProcess.instanceType.newSequence?r=INSTANCE_TYPE_NEW_SEQ:void 0!=subProcess.instanceType.newInstance&&(r=INSTANCE_TYPE_NEW_INS);var a=function(){formCreateFn(r,t,inputData.validDate,instantiateSource).then(function(t){loopFunction(e,s+1)}).catch(function(e){broke=!0,toProcess--,0==toProcess&&resolveCaller()})};if(void 0!=baseUUID&&""!=baseUUID&&baseUUID.length>0){var o=JSON.xpath("/subprocesses[_id eq '"+baseUUID+"']",_WFInstance,{})[0];void 0==subProcess.periodType.periodic&&baseUUID!=uuid&&(o.active=!1),instantiateSource=FROM_AUTHORISED,a()}else{var i=JSON.xpath("/indicators[setId eq '"+t+"']/cardinality",app.SCOPE.APP_CONFIG,{})[0];if(r==INSTANCE_TYPE_NEW_INS)i==INDICATOR_CARDINALITY_SINGLE?library.getSingleIndicator(t).then(function(e){instantiateSource=e.length>0?FROM_AUTHORISED:FROM_DEFINITION,a()}).catch(function(e){instantiateSource=FROM_DEFINITION,a()}):(instantiateSource=FROM_DEFINITION,a());else if(i==INDICATOR_CARDINALITY_SINGLE)library.getSingleIndicator(t).then(function(e){instantiateSource=e.length>0?FROM_AUTHORISED:FROM_DEFINITION,a()}).catch(function(e){instantiateSource=FROM_DEFINITION,a()});else{var n="/indicators[category/term eq '"+t+"' and id = /subprocesses[id = '"+subProcessId+"']/indicators/instances/uuid]/_id",c=library.getSubprofileSubprocessIds();subprocessType==PROCESS_TYPE_SUBPROFILE&&(n="/indicators[category/term eq '"+t+"' and id = /subprocesses[id = '"+subProcessId+"' and id = "+c+"]/indicators/instances/uuid]/_id");var d=JSON.xpath(n,_WFInstance,{});instantiateSource=d.length>0?FROM_AUTHORISED:FROM_DEFINITION,a()}}}};loopFunction(indicators,0)})}function setInstanceTitle(e){var s=e[0]||{},t=e[2]||"",r=e[4]||{},a=r.label;return new Promise(function(e,r){for(var o=JSON.xpath("/subprocesses[_id eq '"+t+"']",s,{})[0],i=o.indicators,n=0;n<i.length;n++){var c=i[n].instances[0].uuid,d=JSON.xpath("/indicators[_id eq '"+c+"']",s,{})[0];d.title=i[n].id+" "+a}e("Set Title Success",i)})}function deleteProfile(e){var s=e[0]||{},t=s.profile;return new Promise(function(e,r){var a="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(a=app.profile.subprofileId);var o={source:"remote",type:"workerObject",_id:generateUUID(),channels:["deleteProfile","community_"+app.SCOPE.getCommunityId(),"workerObject"],communityId:app.SCOPE.getCommunityId(),applicationId:app.SCOPE.applicationId,profileId:s.profile,message:"",subprofileId:a,messageType:"info",createdDateTime:moment().format(),senderUserId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,parentTransactionId:void 0==app.SCOPE.txn?"":app.SCOPE.txn.transactionId,notification:{},profile:{action:"deleteProfile",profileId:t}};console.log(o),dao.save(o).then(function(s){console.log("Worker Object submitted for profile("+t+") deletion."),console.log(s),e(s)}).catch(function(e){console.log(e),r(data)})})}function createProfile(e){var s=e[1]||{},t=s.communityId,r=s.profile;return new Promise(function(e,s){library.createProfileDocuments(t,r).then(function(s){var t=util.success("Form created successfully.",s);e(t)}).catch(function(e){console.error(e);var t=util.success("ERROR: Profile creation failed",{});s(t)})})}function setDraft(e){var s=e[0]||{},t=(s.communityId,s.profile,e[2]||"");return new Promise(function(e,r){for(var a=JSON.xpath("/subprocesses[_id eq '"+t+"']",s,{})[0],o=a.indicators,i=0;i<o.length;i++){var n=o[i].instances[0].uuid,c=JSON.xpath("/indicators[_id eq '"+n+"']",s,{})[0];c.control.draft=!0}e("Set Draft Success",o)})}function setUnDraft(e){var s=e[0]||{},t=(s.communityId,s.profile,e[2]||"");return new Promise(function(e,r){for(var a=JSON.xpath("/subprocesses[_id eq '"+t+"']",s,{})[0],o=a.indicators,i=0;i<o.length;i++){var n=o[i].instances[0].uuid,c=JSON.xpath("/indicators[_id eq '"+n+"']",s,{})[0];c.control.draft=!1}e("Set Draft Success",o)})}function save(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var r=util.success("Form indicator set saved successfully.",s);e(r)})}function submit(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var r=util.success("Form submitted successfully.",s);e(r)})}function authorise(e){var s=(e[0]||"",e[1]||{}),t=(s._id,e[2]||"",e[3]||"",e[4]||{}),r=e[6]||"";return new Promise(function(e,s){var a=(JSON.xpath("/subprocesses[_id eq '"+r+"']",app.SCOPE.workflow,{})[0],JSON.xpath("/subprocesses[_id eq '"+r+"']/indicators/instances/uuid",t,{})),o=a.length,i=[],n=[],c=function(d){gatekeeper.authorise(a[d]).then(function(a){gatekeeper.persist(a).then(function(a){for(var u="",l=0;l<a.length;l++)a[l].id.endsWith(":approved")||(u=a[l].id);dao.get(u).then(function(a){if(0==t.indicators.length)t.indicators.push(a),o--,0==o?persistData("indicators",t,r).then(function(s){var t=util.success("Form authorised successfully.",i);e(t)}).catch(function(e){console.error(e);var t=util.success("Form authorised persist failed.",{});s(t)}):o>0&&c(d+1);else{for(var u=!1,l=0;l<t.indicators.length;l++){var p=t.indicators[l];if(p._id==a._id&&(u=!0,n.push(a),o--,0==o)){for(var f=t.indicators.length,I=n.length,v=0;v<f;v++){for(var m=!1,h=0;h<I;h++)t.indicators[v]._id==n[h]._id&&(m=!0);m||n.push(t.indicators[v])}t.indicators=n;break}}1==u&&0==o?persistData("indicators",t,r).then(function(s){var t=util.success("Form authorised successfully.",i);e(t)}).catch(function(e){console.error(e);var t=util.success("Form authorised persist failed.",{});s(t)}):o>0&&c(d+1)}}).catch(function(e){console.error(e);var t=util.success("Form authorised persist failed 2.",{});s(t)})},function(e){console.error(e);var t=util.success("Form authorised persist failed 3.",{});s(t)})},function(e){var t=util.success("Form authorised persist failed 4.",{});s(t)})};c(0)})}function close(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var r=util.success("Form closed successfully.",s);e(r)})}function updateIndicator(args){var _WFInstance=args[0]||{},uuid=args[1]||"",path=args[2]||"",dataValue=args[3]||"";return new Promise(function(resolve,reject){var setId=path.split(".",1)[0],indObject=JSON.xpath("/indicators[workflows/processes/subProcessUUID = '"+uuid+"' and category/term = '"+setId+"']",_WFInstance,{})[0],squote=(dataValue+"").replace(/'/g,"\\'"),squote=squote.split("\n").join(" "),expr="indObject.model.pending.data."+path+" = '"+squote+"'";eval(expr);var itemsToProcess=1,stuff=[],obj={};obj.model=indObject,stuff.push(obj);var success=util.success("Indicator updated.",stuff);resolve(success)})}function updateIndicatorWrapper(args){var _WFInstance=args[0]||{},uuid=args[1]||"",path=args[2]||"",dataValue=args[3]||"",indicatorSetId=args[4]||"";return new Promise(function(resolve,reject){var indObject=JSON.xpath("/indicators[workflows/processes/subProcessUUID = '"+uuid+"' and category/term = '"+indicatorSetId+"']",_WFInstance,{})[0],squote=dataValue.replace(/'/g,"\\'"),squote=squote.split("\n").join(" "),expr="indObject."+path+" = '"+squote+"'";eval(expr);var itemsToProcess=1,stuff=[],obj={};obj.model=indObject,stuff.push(obj);var success=util.success("Indicator updated.",stuff);resolve(success)})}function markUpdateIndicator(e){var s=e[0]||{},t=e[1]||"",r=e[2]||"",a=e[3]||"";return new Promise(function(e,o){var i=JSON.xpath("/indicators[workflows/processes/subProcessUUID = '"+t+"' and category/term = '"+a+"']",s,{})[0];i.model.pending.status=r;var n=[],c={};c.model=i,n.push(c);var d=util.success("Indicator updated.",n);e(d)})}function setStatus(e){var s=e[0]||{},t=e[1]||"",r=e[2]||"";return new Promise(function(e,a){var o=JSON.xpath("/subprocesses[_id eq '"+t+"']",s,{})[0];o.step.message=r,e("Set profile status Success",o)})}var util=require("utility"),gatekeeper=new GK;module.exports={create:create,save:save,submit:submit,authorise:authorise,close:close,setDraft:setDraft,setUnDraft:setUnDraft,createProfile:createProfile,setInstanceTitle:setInstanceTitle,deleteProfile:deleteProfile,updateIndicator:updateIndicator,markUpdateIndicator:markUpdateIndicator,updateIndicatorWrapper:updateIndicatorWrapper};

},{"utility":8}],4:[function(require,module,exports){
"use strict";function getLanguageMessage(message){var language=service.getLanguage(),res=eval("message.i18n."+language);return res}function getNodeValue(data,_WFInstance,uuid){return new Promise(function(resolve,reject){if(void 0!=data.value){var inputDataType="string";inputDataType=void 0!=data.value.datatype.dataType?data.value.datatype.dataType:data.value.datatype;var inputValue=data.value.data;resolve("number"==inputDataType?Number(inputValue):"string"==inputDataType?inputValue:"integer"==inputDataType?parseInt(inputValue):"decimal"==inputDataType?parseFloat(inputValue):"date"==inputDataType||"dateTime"==inputDataType?inputValue:inputValue)}else if(void 0!=data.indicatorUUID){var indicatorUUID=null,subprocess=JSON.xpath("/subprocesses[_id eq '"+uuid+"']",_WFInstance,{})[0];0==subprocess.indicators.length?indicatorUUID=JSON.xpath("/indicators[category/term eq '"+data.indicatorUUID.indicatorSetId+"']/_id",_WFInstance,{})[0]:(indicatorUUID=JSON.xpath("/indicators[id eq '"+data.indicatorUUID.indicatorSetId+"']/instances/uuid",subprocess,{})[0],void 0==indicatorUUID&&(indicatorUUID=JSON.xpath("/indicators[category/term eq '"+data.indicatorUUID.indicatorSetId+"']/_id",_WFInstance,{})[0])),resolve(indicatorUUID)}else if(void 0!=data.indicator){var indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+data.indicator.indicatorSetId+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],xpath="/model/pending/data/"+data.indicator.indicatorSetId+"/"+data.indicator.elementId,subprocessType=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+uuid+"']/id]/type",_WFInstance,{})[0],seq=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+uuid+"']/id])",_WFInstance,{})[0]+1;if(subprocessType==PROCESS_TYPE_SUBPROFILE){var part=library.getSubprofileSubprocessIds();seq=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+uuid+"']/id and uuid = "+part+"])",_WFInstance,{})[0]+1}var replacedPath=replaceAll(xpath,"#SEQUENCE#",seq),validDate=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/dates/valid",_WFInstance,{})[0],concatValidDate="'"+validDate+"'",newPath=replaceAll(replacedPath,"#END_DATE#",concatValidDate),dotReplaced=replaceAll(newPath,"[.]","/"),retValue=JSON.xpath(dotReplaced,indObject,{})[0];void 0!=data.indicator.addString&&""!=data.indicator.addString&&(retValue+=data.indicator.addString),resolve(retValue)}else if(void 0!=data.system)resolve("ERROR: Unimplemented system type found.");else if(void 0!=data.variable)if(void 0!=data.variable.profile){var variableName=data.variable.profile,profileId=_WFInstance.profile,profileVariableFileName=profileId+":variables";dao.get(profileVariableFileName).then(function(file){if(void 0!=data.variable.type)"count"==data.variable.type?resolve(file[data.variable.name].length):reject("ERROR: Profile variables type implementation - Case not found");else{var obj=eval("file."+variableName);if(void 0==obj)reject("Variable not found");else if("object"==typeof obj){var getSeq=function(){return new Promise(function(e,a){var t=0;if(void 0==data.variable.periodic||void 0==data.variable.periodic.seq){var i=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+uuid+"']/id]/type",_WFInstance,{})[0];if(t=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+uuid+"']/id])",_WFInstance,{})[0]+1,i==PROCESS_TYPE_SUBPROFILE){var r=library.getSubprofileSubprocessIds();t=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+uuid+"']/id and uuid = "+r+"])",_WFInstance,{})[0]+1}e(t)}else getNodeValue(data.variable.periodic.seq,_WFInstance,uuid).then(function(a){e(a)}).catch(function(e){a(e)})})},getVal=function(){return new Promise(function(e,a){var t="value";void 0!=data.variable.periodic&&void 0!=data.variable.periodic.value?getNodeValue(data.variable.periodic.value,_WFInstance,uuid).then(function(a){e(a)}).catch(function(e){a(e)}):e(t)})};getSeq().then(function(e){getVal().then(function(a){var t="/"+variableName+"["+e+"]/"+a,i=JSON.xpath(t,file,{})[0];resolve(i)}).catch(function(e){reject(e)})}).catch(function(e){reject(e)})}else"string"==typeof obj&&resolve(obj)}}).catch(function(e){reject("ERROR: Profile variables not found")})}else if(void 0!=data.variable.subProfile){var variableName=data.variable.subProfile,subprofileId=app.profile.subprofileId;void 0!=data.variable.subprofileId&&""!=data.variable.subprofileId&&(subprofileId=data.variable.subprofileId);var profileVariableFileName=subprofileId+":variables";dao.get(profileVariableFileName).then(function(file){var obj=eval("file."+variableName);if(void 0==obj)reject("Variable not found");else if("object"==typeof obj){var seq=0;if(void 0==data.variable.periodic||void 0==data.variable.periodic.seq){var subprocessType=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+uuid+"']/id]/type",_WFInstance,{})[0];if(seq=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+uuid+"']/id])",_WFInstance,{})[0]+1,subprocessType==PROCESS_TYPE_SUBPROFILE){var part=library.getSubprofileSubprocessIds();seq=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+uuid+"']/id and uuid = "+part+"])",_WFInstance,{})[0]+1}}else seq=getNodeValue(data.variable.periodic.seq,_WFInstance,uuid);var vParam="value";void 0!=data.variable.periodic&&void 0!=data.variable.periodic.value&&(vParam=getNodeValue(data.variable.periodic.value,_WFInstance,uuid));var valuePath="/"+variableName+"["+seq+"]/"+vParam,retValue=JSON.xpath(valuePath,file,{})[0];resolve(retValue)}else"string"==typeof obj&&resolve(obj)}).catch(function(e){reject("ERROR: sub Profile variables not found")})}else reject("ERROR: Unimplemented profile type found.");else if(void 0!=data.indicatorWrapper){var indicatorSet=data.indicatorWrapper.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(data.indicatorWrapper.path,"[.]","/"),xpath="/"+elementpath,value=JSON.xpath(xpath,indObject,{})[0];resolve(value)}else if(void 0!=data.calculated){for(var value="",separator=data.calculated.separator,i=0;i<data.calculated.elements.length-1;i++){var elements=data.calculated.elements,possibleItems=["fromRepeat","elementProperty","constantValue","elementWrapper","currentDate","randomDigits","profileObjectElement","profileObjectWrapper","currentFinancialYear","scopeVariable"];switch(propertyExists(elements[i],possibleItems)){case"elementProperty":var indicatorSet=elements[i].elementProperty.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(elements[i].elementProperty.elementId,"[.]","/"),xpath="/model/pending/data/"+indicatorSet+"/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value=value+itemValue+separator;break;case"constantValue":var itemValue=elements[i].constantValue.value;value=value+itemValue+separator;break;case"scopeVariable":var varName=elements[i].scopeVariable,itemValue="";"#USER_ID"==varName?itemValue=LOCAL_SETTINGS.SUBSCRIPTIONS.userId:"#USERNAME"==varName?itemValue=LOCAL_SETTINGS.SESSION.username:"#FIRSTNAME"==varName?itemValue=LOCAL_SETTINGS.SESSION.firstName:"#LASTNAME"==varName&&(itemValue=LOCAL_SETTINGS.SESSION.lastName),itemValue.length>0&&(value=value+itemValue+separator);break;case"elementWrapper":var indicatorSet=elements[i].elementWrapper.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(elements[i].elementWrapper.elementId,"[.]","/"),xpath="/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value=value+itemValue+separator;break;case"currentDate":value=value+formatDate(new Date)+separator;break;case"randomDigits":var digits=elements[i].randomDigits.digits,random=Math.random(),exp=Math.pow(10,digits),intPart=random*exp^0;value=value+intPart+separator;break;case"profileObjectElement":var indicatorSet=elements[i].profileObjectElement.indicatorSetId,indObject=JSON.xpath("/indicators[category/term eq 'appProfile']",app.SCOPE.workflow,{})[0],elementpath=replaceAll(elements[i].profileObjectElement.elementId,"[.]","/"),xpath="/model/pending/data/"+indicatorSet+"/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value=value+itemValue+separator;break;case"profileObjectWrapper":var indicatorSet=elements[i].profileObjectWrapper.indicatorSetId,indObject=JSON.xpath("/indicators[category/term eq 'appProfile']",app.SCOPE.workflow,{})[0],elementpath=replaceAll(elements[i].profileObjectWrapper.wrapperElementId,"[.]","/"),xpath="/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value=value+itemValue+separator;break;case"currentFinancialYear":var startDate=elements[i].currentFinancialYear.startDate,startMonth=elements[i].currentFinancialYear.startMonth,financialYear=(new Date).getFullYear()+"-"+startMonth+"-"+startDate;value=value+financialYear+separator;break;case"fromRepeat":var indicatorSet=elements[i].fromRepeat.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(elements[i].fromRepeat.path,"[.]","/"),xpath="/model/pending/data/"+indicatorSet+"/"+elementpath,filter="";if("validDate"==elements[i].fromRepeat.filter){var sp=JSON.xpath("/subprocesses[_id eq '"+uuid+"']",_WFInstance,{})[0],vd=sp.dates.valid;filter="[enddate eq '"+vd+"']/"}xpath=xpath+filter+replaceAll(elements[i].fromRepeat.element,"[.]","/");var itemValue=JSON.xpath(xpath,indObject,{})[0];value=value+itemValue+separator;break;default:reject("No method found from implemented list.")}}var i=data.calculated.elements.length-1,elements=data.calculated.elements,possibleItems=["fromRepeat","elementProperty","constantValue","elementWrapper","currentDate","randomDigits","profileObjectElement","profileObjectWrapper","currentFinancialYear","scopeVariable"];switch(propertyExists(elements[i],possibleItems)){case"elementProperty":var indicatorSet=elements[i].elementProperty.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(elements[i].elementProperty.elementId,"[.]","/"),xpath="/model/pending/data/"+indicatorSet+"/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value+=itemValue;break;case"constantValue":var itemValue=elements[i].constantValue.value;value+=itemValue;break;case"scopeVariable":var varName=elements[i].scopeVariable,itemValue="";"#USER_ID"==varName?itemValue=LOCAL_SETTINGS.SUBSCRIPTIONS.userId:"#USERNAME"==varName?itemValue=LOCAL_SETTINGS.SESSION.username:"#FIRSTNAME"==varName?itemValue=LOCAL_SETTINGS.SESSION.firstName:"#LASTNAME"==varName&&(itemValue=LOCAL_SETTINGS.SESSION.lastName),itemValue.length>0&&(value+=itemValue);break;case"elementWrapper":var indicatorSet=elements[i].elementWrapper.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(elements[i].elementWrapper.elementId,"[.]","/"),xpath="/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value+=itemValue;break;case"currentDate":value+=formatDate(new Date);break;case"randomDigits":var digits=elements[i].randomDigits.digits,random=Math.random(),exp=Math.pow(10,digits),intPart=random*exp^0;value+=intPart;break;case"profileObjectElement":var indicatorSet=elements[i].profileObjectElement.indicatorSetId,indObject=JSON.xpath("/indicators[category/term eq 'appProfile']",app.SCOPE.workflow,{})[0],elementpath=replaceAll(elements[i].profileObjectElement.elementId,"[.]","/"),xpath="/model/pending/data/"+indicatorSet+"/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value+=itemValue;break;case"profileObjectWrapper":var indicatorSet=elements[i].profileObjectWrapper.indicatorSetId,indObject=JSON.xpath("/indicators[category/term eq 'appProfile']",app.SCOPE.workflow,{})[0],elementpath=replaceAll(elements[i].profileObjectWrapper.wrapperElementId,"[.]","/"),xpath="/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value+=itemValue;break;case"currentFinancialYear":var startDate=elements[i].currentFinancialYear.startDate,startMonth=elements[i].currentFinancialYear.startMonth,financialYear=(new Date).getFullYear()+"-"+startMonth+"-"+startDate;value+=financialYear;break;case"fromRepeat":var indicatorSet=elements[i].fromRepeat.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(elements[i].fromRepeat.path,"[.]","/"),xpath="/model/pending/data/"+indicatorSet+"/"+elementpath,filter="";if("validDate"==elements[i].fromRepeat.filter){var sp=JSON.xpath("/subprocesses[_id eq '"+uuid+"']",_WFInstance,{})[0],vd=sp.dates.valid;filter="[enddate eq '"+vd+"']/"}xpath=xpath+filter+replaceAll(elements[i].fromRepeat.element,"[.]","/");var itemValue=JSON.xpath(xpath,indObject,{})[0];value+=itemValue;break;default:reject("No method found from implemented list.")}resolve(value)}else if(void 0!=data.subProcess)if(void 0!=data.subProcess.path){for(var path=data.subProcess.path,arr=path.split("."),pathItems="",i=0;i<arr.length;i++)pathItems=pathItems+"['"+arr[i]+"']";var subprocess=JSON.xpath("/subprocesses[_id eq '"+uuid+"']",_WFInstance,{})[0],value=eval("subprocess"+pathItems);resolve(value)}else void 0!=data.subProcess.stepUser})}function replaceAll(e,a,t){return"function"!=typeof e.replace&&(console.log(a+" "+t),console.log(e)),e.replace(new RegExp(a,"g"),t)}function formatDate(e){var a=e.getDate(),t=e.getMonth(),i=e.getFullYear();return a+"-"+t+"-"+i}function compare(e,a,t){switch(a){case">":return e>t;case"<":return e<t;case">=":return e>=t;case"<=":return e<=t;case"==":return void 0==e&&(e=""),e==t;case"!=":return e!=t}}module.exports={getLanguageMessage:getLanguageMessage,getNodeValue:getNodeValue,compare:compare};

},{}],5:[function(require,module,exports){
"use strict";function getProcess(e,s,t){return new Promise(function(n,i){try{var c=[],r=[];t.instance.processes.filter(function(s){s.id==e&&(r=s)}),util.syncLoop(r.subProcesses.length,function(n){var o=n.iteration(),u=r.seq,f=r.subProcesses[o].id,a=r.subProcesses[o].seq;getSubProcess(e,u,f,a,s,t).then(function(e){c.push(e),n.next()},function(e){n.break(),i(e)})},function(){n(c)})}catch(e){i(e)}})}function getSubProcess(e,s,t,n,i,c){return new Promise(function(r,o){try{var u={id:"",seq:"",name:"",help:"",dates:"",step:""},f=[],a=[];c.instance.processes.filter(function(i){if(i.id==e&&i.seq==s){i.subProcesses.length;i.subProcesses.filter(function(e){e.id==t&&e.seq==n&&0==e.complete&&(f=e)})}}),c.config.processes.filter(function(s){s._id==e&&s.subProcesses.filter(function(e){e._id==t&&(a=e)})}),u.id=a._id,u.seq=f.seq,u.name=util.getName(a.name,i),u.help=util.getName(a.help,i),u.dates=f.dates,u.step=f.step,r(u)}catch(e){o(e)}})}function prepareNotificationScreen(){""}var util=require("utility");module.exports={getProcess:getProcess};

},{"utility":8}],6:[function(require,module,exports){
"use strict";function get(){return new Promise(function(e,t){})}module.exports={get:get};

},{}],7:[function(require,module,exports){
"use strict";function count(e){return void 0!==e?e.length:0}function preRequisites(e,s,t){return new Promise(function(i,n){var a=[];try{util.syncLoop(e.length,function(i){var o=i.iteration();preRequisite(e[o],s,t).then(function(e){a.push(!0),i.next()},function(e){a.push(!1),i.break(),n(e)})},function(){if(a.every(Boolean)){var e=util.success("Pre-requisites completed successfully.",{});i(e)}else{var s=util.error("WFPreRequisiteError","Not all pre-requisites passed.");n(s)}})}catch(e){n(e)}})}function preRequisite(prerequisite,_WFInstance,spuuid){return new Promise(function(resolve,reject){if(void 0!=prerequisite.check.numberProcessInstances){var numberProcessInstances=prerequisite.check.numberProcessInstances,_filterOperator=numberProcessInstances.operator,xpathOperator="";switch(_filterOperator){case"greaterThan":xpathOperator="gt";break;case"lessThan":xpathOperator="lt";break;case"greaterThanEqual":xpathOperator="ge";break;case"lessThanEqual":xpathOperator="le";break;case"equalTo":xpathOperator="eq";break;case"notEqualTo":xpathOperator="ne"}var _subprocessId=numberProcessInstances.subProcessId,_filterValue=numberProcessInstances.type,innerXpath="";innerXpath="all"==_filterValue?"":"[complete eq 'true']";var additionalFilter="";void 0!=numberProcessInstances.filter&&numberProcessInstances.filter.length>0&&(additionalFilter="["+numberProcessInstances.filter+"]");var fullPath="count(/instance/processes/subProcesses[id eq '"+_subprocessId+"']"+innerXpath+additionalFilter+")",prereqProcessType=JSON.xpath("/config/processes/subProcesses[_id eq '"+_subprocessId+"']/type",_WFInstance,{})[0],part=library.getSubprofileSubprocessIds();void 0!=app.profile.subprofileId&&""!=app.profile.subprofileId&&void 0!=prereqProcessType&&prereqProcessType==PROCESS_TYPE_SUBPROFILE&&(fullPath="count(/instance/processes/subProcesses[id eq '"+_subprocessId+"' and uuid = "+part+"]"+innerXpath+")");var subjectCount=JSON.xpath(fullPath,_WFInstance,{})[0],countValue=prerequisite.check.numberProcessInstances.count,compare=util.compare(subjectCount,prerequisite.check.numberProcessInstances.operator,parseInt(countValue));if(compare){var success=util.success("Pre-requisites passed.",{});resolve(success)}else{var message=helper.getLanguageMessage(prerequisite.message),error=util.error("WFPreRequisiteError",message);reject(error)}}else if(void 0!=prerequisite.check.variable){var scope=prerequisite.check.variable.scope,fileName="";if("profile"==scope){var profileId=_WFInstance.profile;fileName=profileId+":variables"}else if("subProfileSubProcessInstance"==scope){var subProfileId=app.profile.subprofileId;fileName=subProfileId+":variables"}else reject("ERROR: Scope '"+scope+"' not implemented in pre-requisites");dao.get(fileName).then(function(file){var variableName=prerequisite.check.variable.name,variableType=prerequisite.check.variable.type,obj=eval("file."+variableName),subjectValueCalculated;if(void 0!=variableType&&"array"==variableType)subjectValueCalculated=obj;else if("object"==typeof obj){var subprocessType=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+spuuid+"']/id]/type",_WFInstance,{})[0],seq=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+spuuid+"']/id])",_WFInstance,{})[0]+1;if(subprocessType==PROCESS_TYPE_SUBPROFILE){var part=library.getSubprofileSubprocessIds();seq=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+spuuid+"']/id and uuid = "+part+"])",_WFInstance,{})[0]+1}var valuePath="/"+variableName+"["+seq+"]/value";subjectValueCalculated=JSON.xpath(valuePath,file,{})[0]}else"string"==typeof obj&&(subjectValueCalculated=obj);var inputValue=prerequisite.check.variable.value.data,inputDataType=prerequisite.check.variable.value.dataType.dataType;if(0==inputValue.indexOf("xpath:")){var fullPath=inputValue.substring(6);inputValue=JSON.xpath(fullPath,_WFInstance,{})[0]}if("#VALID_DATE"==inputValue){var spo=JSON.xpath("/subprocesses[_id eq '"+spuuid+"']",_WFInstance,{})[0];void 0!=spo&&(inputValue=spo.dates.valid)}var finalValue;if("number"==inputDataType?finalValue=Number(inputValue):"string"==inputDataType?finalValue=inputValue:"integer"==inputDataType?(finalValue=parseInt(inputValue),void 0!=variableType&&"array"==variableType&&(subjectValueCalculated=void 0==subjectValueCalculated?0:subjectValueCalculated.length)):"decimal"==inputDataType?finalValue=parseFloat(inputValue):"date"!=inputDataType&&"dateTime"!=inputDataType||(finalValue=inputValue),void 0==subjectValueCalculated&&void 0!=prerequisite.check.variable.allowBlank&&1==prerequisite.check.variable.allowBlank){var success=util.success("Variable Pre-requisites passed.",{});resolve(success)}else{var compare=util.compare(subjectValueCalculated,prerequisite.check.variable.operator,finalValue);if(compare){var success=util.success("Variable Pre-requisites passed.",{});resolve(success)}else{var message=helper.getLanguageMessage(prerequisite.message);message=message.replace("#VALID_DATE",subjectValueCalculated);var error=util.error("WFPreRequisiteError",message);reject(error)}}}).catch(function(e){if(void 0!=prerequisite.check.variable.allowBlank&&1==prerequisite.check.variable.allowBlank){var s=util.success("Variable Pre-requisites passed.",{});resolve(s)}else{var t=helper.getLanguageMessage(prerequisite.message),e=util.error("WFPreRequisiteError:",t);reject(e)}})}else{var error=util.error("WFPreRequisiteError","Pre-requisite type not defined.");reject(error)}})}function preActions(e,s,t){return new Promise(function(i,n){var a=[];try{var o=JSON.xpath("/subprocesses[_id eq '"+t+"']",s,{})[0],r=o["meta-data"].processConfigId,c=o["meta-data"].subProcessConfigId,u=o["meta-data"].subProcessInsSeq,d=o["meta-data"].subProcessInsSeq,p=JSON.xpath("/processes[_id eq '"+r+"']/subProcesses[_id eq '"+c+"']",s.config,{})[0],l=JSON.xpath("/subprocesses[_id eq '"+t+"']/step",s,{})[0];util.syncLoop(e.length,function(i){var o=i.iteration();action(e[o],r,u,c,d,p,l,s,{},t).then(function(e){a.push(!0),i.next()},function(e){a.push(!1),i.break(),n(e)})},function(){if(a.every(Boolean)){var e=util.success("Pre-actions completed successfully.",{});i(e)}else{var s=util.error("WFPreRequisiteError","Not all pre-actions passed.");n(s)}})}catch(e){n(e)}})}function getSubProcess(e,s){return void 0==s.subprocesses?[]:void s.subprocesses.filter(function(s){if(s.id==e)return s})}function subProcess(e,s,t,i,n,a,o,r){var c=[],u=[],d=[];r.subprocesses.filter(function(s){s._id==e&&(c=s)}),r.config.processes.filter(function(e){e._id==s&&(u=e,e.subProcesses.filter(function(e){e._id==i&&(d=e)}))});var p="",l=o.baseUUID,f=0;if(void 0!=l&&""!=l&&l.length>0){var m=JSON.xpath("/subprocesses[_id eq '"+l+"']",r,{})[0];p=m.groupKey,f=m["meta-data"].subProcessInsSeq}else{for(var h="",g=0;g<d.indicators.length-1;g++)h=h+"'"+d.indicators[g]._id+"',";h=h+"'"+d.indicators[g]._id+"'";var v=JSON.xpath("/indicators[setId = ("+h+") and cardinality eq 'single']",app.SCOPE.APP_CONFIG,{}).length;if(void 0!=d.instanceType.newSequence||v>0){var m=JSON.xpath("/instance/processes[id eq '"+s+"']",r,{})[0];p=void 0!=m&&m.subProcesses.length>0?m.subProcesses[0].groupKey:generateUUID()}else p=generateUUID();f=JSON.xpath("count(/processes/subProcesses[groupKey eq '"+p+"'])",r.instance,{})[0]}var S=o.label,I=e,b={_id:I,id:i,type:"workflowInstanceSubProcess",dateTimeCreated:moment().format(),dueDateTime:moment().format(),seq:n,initiated:!1,dates:{created:"",valid:"",start:"",due:"",closed:""},complete:!1,indicators:[],step:{},active:!0,groupKey:p,label:S,channels:["community_"+app.SCOPE.getCommunityId(),"profile_"+app.SCOPE.profileId,"application_"+app.SCOPE.applicationId,"community_"+app.SCOPE.getCommunityId()+"_application_"+app.SCOPE.applicationId],history:[],"meta-data":{applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.profileId,subprofileId:void 0==a?"":a,processConfigId:s,subProcessConfigId:i,subProcessInsSeq:f+1},messages:[],spStatus:""};return void 0!=o.validDate&&o.validDate.length>0&&(b.dates.valid=o.validDate),void 0!=app.profile.subprofileId&&""!=app.profile.subprofileId?(b.channels.push("profile_"+app.SCOPE.profileId+"_subprofile_"+app.profile.subprofileId),b.channels.push("subprofile_"+app.profile.subprofileId)):(b.channels.push("profile_"+app.SCOPE.profileId+"_subprofile_0"),b.channels.push("subprofile_0")),r.subprocesses.push(b),new Promise(function(e,a){try{var p=u.preActions;preActions(p,r,I).then(function(p){var l=u.prerequisites;preRequisites(l,r,I).then(function(u){var p=d.initiate;initiate(p,c,o).then(function(c){b.initiated=c.data.initiated,b.dates=c.data.dates;var u=d.steps[0]._id,p=(d.steps[0].transition[0]._id,1);step(s,t,i,n,u,p,o,r,I).then(function(s){b.step=s.data,indicators(d.indicators,r,b._id).then(function(s){b.indicators=s.data;var t=util.success(s.message,b);e(t)},function(e){a(e)})},function(e){console.log(e),a(e)})},function(e){r.subprocesses=r.subprocesses.filter(function(e){return!(e._id==I)}),a(e)})},function(e){r.subprocesses=r.subprocesses.filter(function(e){return!(e._id==I)}),a(e)})},function(e){r.subprocesses=r.subprocesses.filter(function(e){return!(e._id==I)}),a(e)})}catch(e){a(e)}})}function initiate(e,s,t){var i={initiated:!1,dates:{created:"",valid:"",start:"",due:"",closed:""}};return new Promise(function(n,a){var o=function(){if(void 0!=e.user){i.dates.created=t.createdDate,"userSelected"!=e.user.validDate._type&&"autoSelected"!=e.user.validDate._type||(void 0!=t.validDate?i.dates.valid=t.validDate:i.dates.valid=(new Date).toISOString().substring(0,10)),"userSelected"!=e.user.dueDate._type&&"autoSelected"!=e.user.dueDate._type||void 0!==t.dueDate&&(i.dates.due=t.dueDate),i.dates.start=t.firstDate,i.initiated=!0;var s=util.success("Sub-Process initiate completed successfully.",i);n(s)}else if(void 0!=e.auto);else{var o=util.error("WFInitiateError","Initiate type: "+e._type+" not defined.");a(o)}};if(void 0==s.complete)o();else if(!s.complete)if(e.parallelInstances)o();else{var r=util.error("WFInitiateError","Sub-process: "+s.id+" still active and parallel instances are not allowed.");a(r)}})}function step(processId,processSeq,subProcessId,subProcessSeq,stepId,stepSeq,data,_WFInstance,spuuid){var model={key:generateUUID(),id:"",seq:"",status:"",message:"",assignedTo:{userId:"",name:"",dateTime:"",type:"",dueDateTime:"",by:""},assignmentHistory:[],dateTimeCreated:moment().format(),dueDateTime:moment().format(),transition:{transitionId:"",dateTime:"",userId:""},assignment:{},comment:""},subProcess={},uuid="",instSubProcess,step={},transitionId="";return new Promise(function(resolve,reject){try{_WFInstance.subprocesses.filter(function(e){e._id==app.SCOPE.processUUID&&(instSubProcess=e)}),_WFInstance.config.processes.filter(function(e){e._id==processId&&e.subProcesses.filter(function(e){e._id==subProcessId&&(subProcess=e,e.steps.filter(function(e){e._id==stepId&&(step=e)}))})}),model.id=stepId,model.seq=stepSeq;var instanceStatus="";void 0!=step.setInstanceStatusTo.NotStarted?instanceStatus="NotStarted":void 0!=step.setInstanceStatusTo.Created?instanceStatus="Created":void 0!=step.setInstanceStatusTo.InProgress?instanceStatus="InProgress":void 0!=step.setInstanceStatusTo.Submitted?instanceStatus="Submitted":void 0!=step.setInstanceStatusTo.Complete&&(instanceStatus="Complete");var language=service.getLanguage();model.status=instanceStatus,model.message=eval("step.setInstanceStatusTo."+instanceStatus+".label.i18n."+language),model.comment=void 0!==data.comment?data.comment:"";var indicators=void 0!==instSubProcess?instSubProcess.indicators:[],updateSPIndicatorObject=function(e,s){var t=model.assignedTo;if(e.length>0)for(var i=0;i<e.length;i++){var n=e[i],a=n.instances[0].uuid,o=JSON.xpath("/indicators[_id eq '"+a+"']",s,{})[0];n.instances[0].seq=o.model.pending.seq;for(var r=0;r<o.workflows.length;r++)void 0!=o.workflows[r].processes[0]&&void 0!=o.workflows[r].processes[0].subProcessUUID&&void 0!=o.workflows[r].processes[0].step&&spuuid==o.workflows[r].processes[0].subProcessUUID&&(o.workflows[r].processes[0].step.assignedTo=t)}},clearSPStatus=function(e){var s=JSON.xpath("/subprocesses[_id eq '"+e+"']",_WFInstance,{})[0];s.spStatus=""};indicatorDocs(processId,indicators,model,_WFInstance,spuuid).then(function(e){uuid=spuuid,void 0!=step.function.actions?actions(step.function.actions,processId,processSeq,subProcessId,subProcessSeq,subProcess,model,_WFInstance,data,spuuid).then(function(e){var s=model.assignedTo;s.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,s.userId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"",s.dateTime=moment().format(),s.type=ASSIGNMENT_TYPE_AUTO,s.dueDateTime="",s.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"",updateSPIndicatorObject(indicators,_WFInstance);var t=step.transition[0]._id;transition(processId,processSeq,subProcessId,subProcessSeq,stepId,t,data,_WFInstance,spuuid,model).then(function(e){var s=util.success("Transition completed successfully.",e.data.step);resolve(s)},function(e){reject(e)})},function(e){console.log(e),reject(e)}):void 0!=step.function.task?task(processId,processSeq,step.function.task,spuuid,model).then(function(e){updateSPIndicatorObject(indicators,_WFInstance);var s=util.success("Task awaiting user action.",model);resolve(s)},function(e){reject(e)}):void 0!=step.function.server&&(clearSPStatus(spuuid),server(step.function.server,processId,processSeq,subProcessId,subProcessSeq,subProcess,model,_WFInstance,data,spuuid).then(function(e){updateSPIndicatorObject(indicators,_WFInstance);var s=util.success("Server awaiting server response.",model);resolve(s)},function(e){reject(e)}))},function(e){reject(e)})}catch(e){reject(e)}})}function indicators(e,s,t){var i=[];return new Promise(function(e,n){try{for(var a=JSON.xpath("indicators[fn:count(./workflows/processes[subProcessUUID eq '"+t+"']) gt 0]",s,{}),o=0;o<a.length;o++){var r=a[o],c={id:"",instances:[]},u={uuid:"",title:"",key:"",seq:1,rev:""};c.id=r.category.term,u.uuid=r._id,u.rev=r._rev,u.title=r.title,u.key="",u.seq=r.model.pending.seq,c.instances.push(u),i.push(c)}var d=util.success("Process indicator model updated.",i);e(d)}catch(e){n(e)}})}function assignUser(e,s,t,i,n,a,o){return new Promise(function(s,t){try{o.subprocesses.filter(function(t){if(t._id==a){void 0==t.step.assignmentHistory&&(t.step.assignmentHistory=[]),""!=t.step.assignedTo.userId&&""!=t.step.assignedTo.name&&t.step.assignmentHistory.push(JSON.parse(JSON.stringify(t.step.assignedTo))),t.step.assignedTo.userId=n.id,t.step.assignedTo.name=n.name,t.step.assignedTo.dateTime=moment().format(),t.step.assignedTo.type=ASSIGNMENT_TYPE_REASSIGNMENT,t.step.assignedTo.dueDateTime="",t.step.assignedTo.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"";for(var i=t.indicators,r=0;r<i.length;r++)for(var c=i[r],u=0;u<c.instances.length;u++)for(var d=c.instances[u],p=0;p<o.indicators.length;p++){var l=o.indicators[p];d.uuid==l._id&&l.workflows.filter(function(s){s.id==o.config._id&&s.processes.filter(function(s){s.id==e&&(s.step.assignedTo.userId=n.id,s.step.assignedTo.name=n.name)})})}var f=JSON.xpath("/processes[_id eq '"+e+"']/notifications",o.config,{})[0];if(void 0!=f&&void 0!=f.reAssignment)actionsModule.notification.reAssignmentNotification(f,o,a,n).then(function(e){var e=util.success('User assigned successfully. UserId: "'+n.id+'", Name: "'+n.name+'"',t);s(e)}).catch(function(e){s(e)});else{var m=util.success('User assigned successfully. UserId: "'+n.id+'", Name: "'+n.name+'"',t);s(m)}}})}catch(e){t(e)}})}function indicatorDocs(e,s,t,i,n){return new Promise(function(e,a){try{if(void 0==s){util.error("WFIndicatorsUpdate","Indicators parameter is required. - Value: "+s);a(err)}else{for(var o=0;o<s.length;o++)for(var r=s[o],c=0;c<r.instances.length;c++)for(var u=r.instances[c],d=0;d<i.indicators.length;d++){var p=i.indicators[d];u.uuid==p._id&&p.workflows.filter(function(e){e.id==i.config._id&&e.processes.filter(function(e){e.subProcessUUID==n&&(e.step.id=t.id,e.step.seq=t.seq,e.step.status=t.status,e.step.message=t.message,e.step.assignedTo.userId=t.assignedTo.userId,e.step.assignedTo.name=t.assignedTo.name,e.step.comment=void 0!==t.comment?t.comment:"")})})}var l=util.success("Indicator documents workflow process model updated.",i);e(l)}}catch(e){a(e)}})}function actions(e,s,t,i,n,a,o,r,c,u){var d=[];return new Promise(function(p,l){util.syncLoop(e.length,function(p){var f=p.iteration();action(e[f],s,t,i,n,a,o,r,c,u).then(function(s){var t={id:e[f]._id,seq:f,data:s};d.push(t),p.next()},function(e){p.break(),l(e)})},function(){var e=util.success("Actions completed successfully.",d);p(e)})})}function action(e,s,t,i,n,a,o,r,c,u){return new Promise(function(i,d){if(void 0!=e.method){var p=["form","indicator","profile","subProcessInstance","step","community","application","user","sdo","performance","taxonomy","variables","notification","report","worker","participants","generalFunctions"];switch(propertyExists(e.method,p)){case"form":if(void 0!=e.method.form.create){var l=[];l.push(s),l.push(a),l.push(o),l.push(e),l.push(t),l.push(n),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.create(l).then(function(e){i(e.data)},function(e){d(e)})}else if(void 0!=e.method.form.authorise){var l=[];l.push(s),l.push(a),l.push(t),l.push(n),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.authorise(l).then(function(e){i(e.data)},function(e){d(e)})}else if(void 0!=e.method.form.undraft){var l=[];l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.setUnDraft(l).then(function(e){i(e.data)},function(e){d(e)})}else if(void 0!=e.method.form.draft){var l=[];l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.setDraft(l).then(function(e){i(e.data)},function(e){d(e)})}else if(void 0!=e.method.form.close){var l=[];l.push(a.indicators),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.close(l).then(function(e){i(e.data)},function(e){d(e)})}else if(void 0!=e.method.form.authoriseAndCreateNewSeq){var l=[];l.push(s),l.push(a),l.push(t),l.push(n),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.authorise(l).then(function(p){var l=[];l.push(s),l.push(a),l.push(o),l.push(e),l.push(t),l.push(n),l.push(r),l.push(c.createType),l.push(u),l.push(u),l.push(c),form.create(l).then(function(e){i(e.data)},function(e){d(e)})},function(e){d(e)})}else if(void 0!=e.method.form.createNewSeq){var l=[];l.push(s),l.push(a),l.push(o),l.push(e),l.push(t),l.push(n),l.push(r),l.push(c.createType),l.push(u),l.push(u),l.push(c),form.create(l).then(function(e){i(e.data)},function(e){d(e)})}break;case"indicator":if(void 0!=e.method.indicator.create)i("Not implemented");else if(void 0!=e.method.indicator.instantiate)i("Not implemented");else if(void 0!=e.method.indicator.setValue){var f=e.method.indicator.setValue.path;helper.getNodeValue(e.method.indicator.setValue.data,r,u).then(function(e){var s=[];s.push(r),s.push(u),s.push(f),s.push(e),form.updateIndicator(s).then(function(e){i(e.data)},function(e){d(e)})},function(e){d(e)})}else if(void 0!=e.method.indicator.updateStatus){var m=e.method.indicator.indicatorSetId,l=[];if(l.push(r),l.push(u),void 0!=e.method.indicator.updateStatus){var h=e.method.indicator.updateStatus;l.push(h),l.push(m),form.markUpdateIndicator(l).then(function(e){i(e.data)},function(e){d(e)})}else i("Action indicator sub type not found.")}else if(void 0!=e.method.indicator.setWrapperElement){var f=e.method.indicator.setWrapperElement.path,m=e.method.indicator.setWrapperElement.indicatorSetId;helper.getNodeValue(e.method.indicator.setWrapperElement.data,r,u).then(function(e){var s=[];s.push(r),s.push(u),s.push(f),s.push(e),s.push(m),form.updateIndicatorWrapper(s).then(function(e){i(e.data)},function(e){d(e)})},function(e){d(e)})}break;case"profile":if(void 0!=e.method.profile.create){var l=[];l.push(s),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.createProfile(l).then(function(e){i(e.data)},function(e){d(e)})}else if(void 0!=e.method.profile.setStatusTo){var l=[],h=e.method.profile.setStatusTo;l.push(r),l.push(u),l.push(h),form.setStatus(l).then(function(e){i(e.data)},function(e){d(e)})}break;case"subProcessInstance":var g=["instantiate","authorise","close","setVariable","setStatusTo","setStatusMsgTo","setTitle","setValidDate","setSPStatus"];switch(propertyExists(e.method.subProcessInstance,g)){case"setTitle":helper.getNodeValue(e.method.subProcessInstance.setTitle,r,u).then(function(s){actionsModule.subProcessInstance.setTitle(e.method.subProcessInstance.setTitle,u,s,r).then(function(e){i(e.data)},function(e){d(e)})},function(e){d(e)});break;case"setValidDate":helper.getNodeValue(e.method.subProcessInstance.setValidDate,r,u).then(function(s){actionsModule.subProcessInstance.setValidDate(e.method.subProcessInstance.setValidDate,u,s,r).then(function(e){i(e.data)},function(e){d(e)})},function(e){d(e)});break;case"setSPStatus":helper.getNodeValue(e.method.subProcessInstance.setSPStatus,r,u).then(function(s){actionsModule.subProcessInstance.setSPStatus(e.method.subProcessInstance.setSPStatus,u,s,r).then(function(e){i(e.data)},function(e){d(e)})},function(e){d(e)});break;default:d("No method found from implemented list in subprocess action.")}break;case"step":break;case"community":var v=["createCommunity","releaseAdoptedApplication","userJoinCommunity"];switch(propertyExists(e.method.community,v)){case"createCommunity":return actionsModule.community.createCommunity(e.method.community.createCommunity,u,r).then(function(e){i(e.data)},function(e){d(e)});case"releaseAdoptedApplication":return actionsModule.community.releaseAdoptedApplication(e.method.community.releaseAdoptedApplication,u,r).then(function(e){i(e.data)},function(e){d(e)});case"userJoinCommunity":return actionsModule.community.userJoinCommunity(e.method.community.userJoinCommunity,u,r).then(function(e){i(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"application":var S=["createAppDefinition","buildApplication","applicationAdoption"];switch(propertyExists(e.method.application,S)){case"createAppDefinition":return actionsModule.application.createAppDefinition(e.method.application.createAppDefinition,u,r).then(function(e){i(e.data)},function(e){d(e)});case"buildApplication":return actionsModule.application.buildApplication(e.method.application.buildApplication,u,r).then(function(e){i(e.data)},function(e){d(e)});case"applicationAdoption":return actionsModule.application.applicationAdoption(e.method.application.applicationAdoption,u,r).then(function(e){i(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"user":var I=["addToRole"];switch(propertyExists(e.method.user,I)){case"addToRole":return actionsModule.user.addToRole(e.method.user.addToRole,u,r).then(function(e){i(e.data)},function(e){d(e)})}break;case"sdo":var b=["create","enrollCourse"];switch(propertyExists(e.method.sdo,b)){case"create":return actionsModule.sdo.create(e.method.sdo.create,u,r).then(function(e){i(e.data)},function(e){d(e)});case"enrollCourse":return actionsModule.sdo.enrollCourse(e.method.sdo.enrollCourse,u,r).then(function(e){i(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"performance":var N=["unlockPeriod","lockPerformanceModel","setModelStatus"];switch(propertyExists(e.method.performance,N)){case"unlockPeriod":return actionsModule.performance.unlockPeriod(e.method.performance.unlockPeriod,u,r).then(function(e){i(e.data)},function(e){d(e)});case"setModelStatus":return actionsModule.performance.setModelStatus(e.method.performance.setModelStatus,u,r).then(function(e){i(e.data)},function(e){d(e)});case"lockPerformanceModel":return actionsModule.performance.lockPerformanceModel(e.method.performance.lockPerformanceModel,u,r).then(function(e){i(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"taxonomy":var y=["create"];switch(propertyExists(e.method.taxonomy,y)){case"create":return actionsModule.taxonomy.create(e.method.taxonomy.create,u,r).then(function(e){i(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"variables":var P=["setVariable"];switch(propertyExists(e.method.variables,P)){case"setVariable":return actionsModule.variables.setVariable(e.method.variables.setVariable,r,u).then(function(e){i(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"notification":return actionsModule.notification.sendNotificationWorker(e.method.notification,r,u).then(function(e){i(e.data)},function(e){d(e)});case"report":var T=["createPerformanceReport","createReport","sdoReport","executeReport","requestReport","generateView","generateBasicView","generateUnionView","sdoReportMultiple","subprofileQuarterlyReport"];switch(propertyExists(e.method.report,T)){case"createPerformanceReport":return actionsModule.report.createPerformanceReport(e.method.report.createPerformanceReport,r,u).then(function(e){i(e.data)},function(e){d(e)});case"createReport":return actionsModule.report.createReport(e.method.report.createReport,r,u).then(function(e){i(e.data)},function(e){d(e)});case"sdoReport":return actionsModule.report.sdoReport(e.method.report.sdoReport,r,u).then(function(e){i(e.data)},function(e){d(e)});case"executeReport":return actionsModule.report.executeReport(e.method.report.executeReport,r,u).then(function(e){i(e.data)},function(e){d(e)});case"generateView":return actionsModule.report.generateView(e.method.report.generateView,r,u).then(function(e){i(e.data)},function(e){d(e)});case"requestReport":return actionsModule.report.requestReport(e.method.report.requestReport,r,u).then(function(e){i(e.data)},function(e){d(e)});case"generateBasicView":return actionsModule.report.generateBasicView(e.method.report.generateBasicView,r,u).then(function(e){i(e.data)},function(e){d(e)});case"generateUnionView":return actionsModule.report.generateUnionView(e.method.report.generateUnionView,r,u).then(function(e){i(e.data)},function(e){d(e)});case"sdoReportMultiple":return actionsModule.report.sdoReportMultiple(e.method.report.sdoReportMultiple,r,u).then(function(e){i(e.data)},function(e){d(e)});case"subprofileQuarterlyReport":return actionsModule.report.subprofileQuarterlyReport(e.method.report.subprofileQuarterlyReport,r,u).then(function(e){i(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"worker":var _=["sendWorker","executeLocal","create"];switch(propertyExists(e.method.worker,_)){case"sendWorker":return actionsModule.worker.sendWorker(e.method.worker.sendWorker,r,u).then(function(e){i(e.data)},function(e){d(e)});case"executeLocal":return actionsModule.worker.executeLocal(e.method.worker.executeLocal,r,u).then(function(e){i(e.data)},function(e){d(e)});case"create":return actionsModule.worker.create(e.method.worker.create,r,u).then(function(e){i(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"participants":var O=["linkParticipants","monthlyAttendance","monthlyProgressSummary","participantContracts"];switch(propertyExists(e.method.participants,O)){case"linkParticipants":return actionsModule.participants.linkParticipants(e.method.participants.linkParticipants,r,u).then(function(e){i(e.data)},function(e){d(e)});case"monthlyAttendance":return actionsModule.participants.monthlyAttendance(e.method.participants.monthlyAttendance,r,u).then(function(e){i(e.data)},function(e){d(e)});case"monthlyProgressSummary":return actionsModule.participants.monthlyProgressSummary(e.method.participants.monthlyProgressSummary,r,u).then(function(e){i(e.data)},function(e){d(e)});case"participantContracts":return actionsModule.participants.participantContracts(e.method.participants.participantContracts,r,u).then(function(e){i(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"generalFunctions":var q=["addToFavourites","addToUserFavourites"];switch(propertyExists(e.method.generalFunctions,q)){case"addToFavourites":return actionsModule.generalFunctions.addToFavourites(e.method.generalFunctions.addToFavourites,r,u).then(function(e){i(e.data)},function(e){d(e)});case"addToUserFavourites":return actionsModule.generalFunctions.addToUserFavourites(e.method.generalFunctions.addToUserFavourites,r,u).then(function(e){i(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;default:d("method not defined in configuration")}}else d("No method found from implemented list.")})}function task(e,s,t,i,n){return new Promise(function(s,a){var o=app.SCOPE.workflow,r=t.preActions;preActions(r,o,i).then(function(r){var c=[];if(void 0!=t.assign.role){var u=o.profile,d="",p=function(){var r=t.assign.role.roleId;library.getUsersFromProfileRole(d,r).then(function(a){if(void 0!=a)if(a.length>1){for(var r=!1,c=0;c<a.length;c++){a[c].id;LOCAL_SETTINGS.SUBSCRIPTIONS.userId==a[c].id&&(r=!0)}if(r){void 0==n.assignmentHistory&&(n.assignmentHistory=[]);var u=n.assignedTo;if(""!=u.userId&&""!=u.name){var p=JSON.parse(JSON.stringify(u));n.assignmentHistory.push(p)}u.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,u.userId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"",u.dateTime=moment().format(),u.type=ASSIGNMENT_TYPE_AUTO,u.dueDateTime="",u.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"";var l=JSON.xpath("/processes[_id eq '"+e+"']/notifications",o.config,{})[0];if(void 0!=l&&void 0!=l.assignment){var f={id:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,name:LOCAL_SETTINGS.SUBSCRIPTIONS.username};actionsModule.notification.assignmentNotification(l,o,i,f).then(function(e){console.log('User assigned successfully. UserId: "'+f.id+'", Name: "'+f.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+f.id+'", Name: "'+f.name+'"')})}}var m="";if(void 0!=t.assign.assignment){var m=n.assignment,h={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};m.accept=h,m.message=_getNameByLang(t.assign.assignment.message.i18n);var g={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};m.reject=g;var v={profileId:d,type:"user",userId:a};m.value=v,m.profileRoleId=d}if(r){var S=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+i+"']/id",o,{})[0],I=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+i+"']/id",o,{})[0],b=JSON.xpath("/subprocesses[_id eq '"+i+"']/step/id",o,{})[0];JSON.xpath("/processes[_id eq '"+S+"']/subProcesses[_id eq '"+I+"']/steps[_id eq '"+b+"']",o.config,{})[0];if(void 0!=t.preWorkActions){var N=t.preWorkActions;preWorkActions(N,o).then(function(e){s("Assignment is made. Pre work actions found and executed ")},function(e){g(e)})}else s("Assignment is made. No pre work actions found. ")}else{var l=JSON.xpath("/processes[_id eq '"+e+"']/notifications",o.config,{})[0];if(void 0!=l&&void 0!=l.assignmentAcceptance){var f={id:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,name:LOCAL_SETTINGS.SUBSCRIPTIONS.username};actionsModule.notification.acceptanceNotificationExternal(l,o,i,a).then(function(e){s("Notifications request submitted for acceptance.")}).catch(function(e){s("Notifications failed"),console.log('User assignment notification failed to user UserId: "'+f.id+'", Name: "'+f.name+'"')})}else s("Notifications not found")}}else if(1==a.length){var y=a[0].id,P=a[0].name;void 0==n.assignmentHistory&&(n.assignmentHistory=[]);var u=n.assignedTo;if(""!=u.userId&&""!=u.name){var p=JSON.parse(JSON.stringify(u));n.assignmentHistory.push(p)}u.name=P+"",u.userId=y+"",u.dateTime=moment().format(),u.type=ASSIGNMENT_TYPE_AUTO,u.dueDateTime="",u.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"";var m="";if(void 0!=t.assign.assignment){var m=n.assignment,h={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};m.accept=h,m.message=_getNameByLang(t.assign.assignment.message.i18n);
var g={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};m.reject=g;var v={profileId:d,userId:a,type:"user"};m.value=v,m.profileRoleId=d}var l=JSON.xpath("/processes[_id eq '"+e+"']/notifications",o.config,{})[0];if(void 0!=l&&void 0!=l.assignment){var f={id:y,name:P};actionsModule.notification.assignmentNotification(l,o,i,f).then(function(e){console.log('User assigned successfully. UserId: "'+f.id+'", Name: "'+f.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+f.id+'", Name: "'+f.name+'"')})}var S=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+i+"']/id",o,{})[0],I=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+i+"']/id",o,{})[0],b=JSON.xpath("/subprocesses[_id eq '"+i+"']/step/id",o,{})[0];JSON.xpath("/processes[_id eq '"+S+"']/subProcesses[_id eq '"+I+"']/steps[_id eq '"+b+"']",o.config,{})[0];if(void 0!=t.preWorkActions){var N=t.preWorkActions;preWorkActions(N,o).then(function(e){s("Assigned to the only user in role. Pre work actions executed")},function(e){g(e)})}else s("Assigned to the only user in role. No pre work actions found.")}else{var u=n.assignedTo;u.name="",u.userId="";var m="";if(void 0!=t.assign.assignment){var m=n.assignment,h={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};m.accept=h,m.message=_getNameByLang(t.assign.assignment.message.i18n);var g={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};m.reject=g;var v={profileId:d,userId:a,type:"user"};m.value=v,m.profileRoleId=d}s("No users found in list. Assigning blank ")}else g("Error in getUsersFromProfileRole ")}).catch(function(e){a(e)})},l=function(){var r=t.assign.role.roleId;library.getUsersListByRole(d,r).then(function(a){if(void 0!=a)if(a.length>1){var c=!1,p=library.getCurrentUserRoles(),l=p.profile.indexOf(r),f=p.community.indexOf(r),m=p.implicit.indexOf(r),h=p.adoption.indexOf(r),g=p.subprofile.indexOf(r);if(c=l>-1||f>-1||m>-1||h>-1||g>-1){void 0==n.assignmentHistory&&(n.assignmentHistory=[]);var v=n.assignedTo;if(""!=v.userId&&""!=v.name){var S=JSON.parse(JSON.stringify(v));n.assignmentHistory.push(S)}v.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,v.userId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"",v.dateTime=moment().format(),v.type=ASSIGNMENT_TYPE_AUTO,v.dueDateTime="",v.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"";var I=JSON.xpath("/processes[_id eq '"+e+"']/notifications",o.config,{})[0];if(void 0!=I&&void 0!=I.assignment){var b={id:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,name:LOCAL_SETTINGS.SUBSCRIPTIONS.username};actionsModule.notification.assignmentNotification(I,o,i,b).then(function(e){console.log('User assigned successfully. UserId: "'+b.id+'", Name: "'+b.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+b.id+'", Name: "'+b.name+'"')})}}var N="";if(void 0!=t.assign.assignment){var N=n.assignment,y={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};N.accept=y,N.message=_getNameByLang(t.assign.assignment.message.i18n);var P={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};N.reject=P;var T={profileId:u,roleId:r,type:"role"};N.value=T,N.profileRoleId=d}if(c){var _=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+i+"']/id",o,{})[0],O=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+i+"']/id",o,{})[0],q=JSON.xpath("/subprocesses[_id eq '"+i+"']/step/id",o,{})[0];JSON.xpath("/processes[_id eq '"+_+"']/subProcesses[_id eq '"+O+"']/steps[_id eq '"+q+"']",o.config,{})[0];if(void 0!=t.preWorkActions){var A=t.preWorkActions;preWorkActions(A,o).then(function(e){s("Assignment is made. Pre work actions found and executed ")},function(e){P(e)})}else s("Assignment is made. No pre work actions found. ")}else{var I=JSON.xpath("/processes[_id eq '"+e+"']/notifications",o.config,{})[0];if(void 0!=I&&void 0!=I.assignmentAcceptance){var b={id:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,name:LOCAL_SETTINGS.SUBSCRIPTIONS.username};actionsModule.notification.acceptanceNotification(I,o,i,r).then(function(e){s("Notifications request submitted for acceptance.")}).catch(function(e){s("Notifications failed"),console.log('User assignment notification failed to user UserId: "'+b.id+'", Name: "'+b.name+'"')})}else s("Notifications not found")}}else if(1==a.length){var k=a[0].id,E=a[0].name;void 0==n.assignmentHistory&&(n.assignmentHistory=[]);var v=n.assignedTo;if(""!=v.userId&&""!=v.name){var S=JSON.parse(JSON.stringify(v));n.assignmentHistory.push(S)}v.name=E+"",v.userId=k+"",v.dateTime=moment().format(),v.type=ASSIGNMENT_TYPE_AUTO,v.dueDateTime="",v.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"";var N="";if(void 0!=t.assign.assignment){var N=n.assignment,y={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};N.accept=y,N.message=_getNameByLang(t.assign.assignment.message.i18n);var P={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};N.reject=P;var T={profileId:u,roleId:r,type:"role"};N.value=T,N.profileRoleId=d}var I=JSON.xpath("/processes[_id eq '"+e+"']/notifications",o.config,{})[0];if(void 0!=I&&void 0!=I.assignment){var b={id:k,name:E};actionsModule.notification.assignmentNotification(I,o,i,b).then(function(e){console.log('User assigned successfully. UserId: "'+b.id+'", Name: "'+b.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+b.id+'", Name: "'+b.name+'"')})}var _=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+i+"']/id",o,{})[0],O=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+i+"']/id",o,{})[0],q=JSON.xpath("/subprocesses[_id eq '"+i+"']/step/id",o,{})[0];JSON.xpath("/processes[_id eq '"+_+"']/subProcesses[_id eq '"+O+"']/steps[_id eq '"+q+"']",o.config,{})[0];if(void 0!=t.preWorkActions){var A=t.preWorkActions;preWorkActions(A,o).then(function(e){s("Assigned to the only user in role. Pre work actions executed")},function(e){P(e)})}else s("Assigned to the only user in role. No pre work actions found.")}else{var v=n.assignedTo;v.name="",v.userId="";var N="";if(void 0!=t.assign.assignment){var N=n.assignment,y={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};N.accept=y,N.message=_getNameByLang(t.assign.assignment.message.i18n);var P={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};N.reject=P;var T={profileId:u,roleId:r,type:"role"};N.value=T,N.profileRoleId=d}s("No users found in list. Assigning blank ")}else P(err)},function(e){a(e)})};void 0!=t.assign.role.profile?("current"==t.assign.role.profile?d=o.profile:"community"==t.assign.role.profile&&(d=app.SCOPE.getCommunityId()),l()):void 0!=t.assign.role.profileId&&helper.getNodeValue(t.assign.role.profileId,o,i).then(function(e){d=e,p()}).catch(function(e){a(e)})}else if(void 0!=t.assign.user)helper.getNodeValue(t.assign.user.userName,o,i).then(function(r){helper.getNodeValue(t.assign.user.userId,o,i).then(function(a){var a=a,u=r,p=o.profile;void 0==n.assignmentHistory&&(n.assignmentHistory=[]);var l=n.assignedTo;if(""!=l.userId&&""!=l.name){var f=JSON.parse(JSON.stringify(l));n.assignmentHistory.push(f)}l.name=u+"",l.userId=a+"",l.dateTime=moment().format(),l.type=ASSIGNMENT_TYPE_AUTO,l.dueDateTime="",l.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"";var m="";if(void 0!=t.assign.assignment){var m=n.assignment,h={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};m.accept=h,m.message=_getNameByLang(t.assign.assignment.message.i18n);var g={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)},v={id:a,name:r};c.push(v),m.reject=g;var S={profileId:p,userId:c,type:"user"};m.value=S,m.profileRoleId=d}var I=JSON.xpath("/processes[_id eq '"+e+"']/notifications",o.config,{})[0];if(void 0!=I&&void 0!=I.assignment){var b={id:a,name:u};actionsModule.notification.assignmentNotification(I,o,i,b).then(function(e){console.log('User assigned successfully. UserId: "'+b.id+'", Name: "'+b.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+b.id+'", Name: "'+b.name+'"')})}var N=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+i+"']/id",o,{})[0],y=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+i+"']/id",o,{})[0],P=JSON.xpath("/subprocesses[_id eq '"+i+"']/step/id",o,{})[0];JSON.xpath("/processes[_id eq '"+N+"']/subProcesses[_id eq '"+y+"']/steps[_id eq '"+P+"']",o.config,{})[0];if(void 0!=t.preWorkActions){var T=t.preWorkActions;preWorkActions(T,o).then(function(e){s("Assigned to the only user in role. Pre work actions executed")},function(e){g(e)})}else s("Assigned to the only user in role. No pre work actions found.")},function(e){a(e)})},function(e){a(e)});else if(void 0!=t.assign.swimlane){var f=t.assign.swimlane.stepId,m=t.assign.swimlane.sequence,h=JSON.xpath("/subprocesses[_id eq '"+i+"']",o,{})[0],g=JSON.xpath("/history[id eq '"+f+"']",h,{}),v="";v="last"==m?JSON.xpath("max(for $s in /* return xs:dateTime($s/dateTimeCreated))",g,{})[0]:JSON.xpath("min(for $s in /* return xs:dateTime($s/dateTimeCreated))",g,{})[0];var S=JSON.xpath("/*[xs:dateTime(dateTimeCreated) eq xs:dateTime('"+v+"')]",g,{})[0],I=JSON.xpath("/assignmentHistory[last()]",S,{})[0],b=I.userId,N=I.name;void 0==n.assignmentHistory&&(n.assignmentHistory=[]);var y=n.assignedTo;if(""!=y.userId&&""!=y.name){var P=JSON.parse(JSON.stringify(y));n.assignmentHistory.push(P)}y.name=N+"",y.userId=b+"",y.dateTime=moment().format(),y.type=ASSIGNMENT_TYPE_SWIMLANE,y.dueDateTime="",y.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"";var T=JSON.xpath("/processes[_id eq '"+e+"']/notifications",o.config,{})[0];if(void 0!=T&&void 0!=T.assignment){var _={id:b,name:N};actionsModule.notification.assignmentNotification(T,o,i,_).then(function(e){console.log('User assigned successfully. UserId: "'+_.id+'", Name: "'+_.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+_.id+'", Name: "'+_.name+'"')})}var O=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+i+"']/id",o,{})[0],q=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+i+"']/id",o,{})[0],f=JSON.xpath("/subprocesses[_id eq '"+i+"']/step/id",o,{})[0];JSON.xpath("/processes[_id eq '"+O+"']/subProcesses[_id eq '"+q+"']/steps[_id eq '"+f+"']",o.config,{})[0];if(void 0!=t.preWorkActions){var A=t.preWorkActions;preWorkActions(A,o).then(function(e){s("Assigned to the only user in role. Pre work actions executed")},function(e){a(e)})}else s("Assigned to the only user in role. No pre work actions found.")}},function(e){a(e)})})}function server(e,s,t,i,n,a,o,r,c,u){return new Promise(function(d,p){var l=(r.profile,e.serverAction[0]);void 0==o.assignmentHistory&&(o.assignmentHistory=[]);var f=o.assignedTo;if(""!=f.userId&&""!=f.name){var m=JSON.parse(JSON.stringify(f));o.assignmentHistory.push(m)}f.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,f.userId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"",f.dateTime=moment().format(),f.type=ASSIGNMENT_TYPE_AUTO,f.dueDateTime="",f.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"",action(l,s,t,i,n,a,o,r,c,u).then(function(e){d("No users found in list. Assigning blank ")},function(e){p("Server action error found rejected")})})}function transition(e,s,t,i,n,a,o,r,c,u){return new Promise(function(d,p){try{for(var l=0,f="",m=0,h=r.config.processes.filter(function(s){if(s._id==e)return s}),g=h[0].subProcesses.filter(function(e){if(e._id==t)return e}),v=g[0].steps.filter(function(e){if(e._id==n)return e}),S=v[0].transition.filter(function(e){if(e._id==a)return e}),I=0;I<g[0].steps.length;I++)g[0].steps[I]._id==n&&(l=parseInt(g[0].steps[I]._seq));g[0].steps.filter(function(e){m=l+1,parseInt(e._seq)==m&&(f=e._id)});var b=g[0].steps.length,N=JSON.xpath("/subprocesses[_id eq '"+c+"']",r,{})[0],y=JSON.xpath("/subprocesses[_id eq '"+c+"']/step",r,{})[0];void 0==N.history&&(N.history=[]);var P=function(e){var s=JSON.xpath("/subprocesses[_id eq '"+c+"']/indicators",r,{}),t=!1;void 0!=s&&0!=s.length||(t=!0,s=JSON.xpath("/indicators[workflows/processes[subProcessUUID eq '"+c+"']]",r,{})),void 0==e.indicators&&(e.indicators=[]);for(var i=0;i<s.length;i++)if(t){var n=s[i]._id,a=JSON.xpath("/indicators[_id eq '"+n+"']/_rev",r,{})[0],o=s[i].model.pending.seq,u=s[i].model.pending.status,d={uuid:n,rev:a,seq:o,status:u};e.indicators.push(d)}else{var n=s[i].instances[0].uuid,a=JSON.xpath("/indicators[_id eq '"+n+"']/_rev",r,{})[0],o=JSON.xpath("/indicators[_id eq '"+n+"']/model/pending/seq",r,{})[0],u=JSON.xpath("/indicators[_id eq '"+n+"']/model/pending/status",r,{})[0],d={uuid:n,rev:a,seq:o,status:u};e.indicators.push(d)}return delete e.assignedTo,delete e.assignment,e},T={transitionId:S[0]._id,dateTime:moment().format(),userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId+""};if(void 0!=u&&Object.keys(u).length>0?u.transition=T:y.transition=T,void 0!=u&&Object.keys(u).length>0){void 0==u.assignmentHistory&&(u.assignmentHistory=[]);var _=JSON.parse(JSON.stringify(u.assignedTo));""!=_.userId&&""!=_.name&&u.assignmentHistory.push(_)}else{void 0==y.assignmentHistory&&(y.assignmentHistory=[]);var _=JSON.parse(JSON.stringify(y.assignedTo));""!=_.userId&&""!=_.name&&y.assignmentHistory.push(_)}var O;O=void 0!=u&&Object.keys(u).length>0?JSON.parse(JSON.stringify(u)):JSON.parse(JSON.stringify(y));var q=P(O);if(N.history.push(q),void 0!=S[0].transitionAction.goToStep){var A=parseInt(v[0]._seq)+parseInt(S[0].transitionAction.goToStep.default),k="";g[0].steps.filter(function(e){parseInt(e._seq)==m&&(k=e._id)}),step(e,s,t,i,k,A,o,r,c).then(function(e){if(A==b){var s=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});d(s)}else{var s=util.success("Step transition completed successfully.",{subProcessComplete:!1,step:e.data});d(s)}},function(e){p(e)})}else if(void 0!=S[0].transitionAction.goToStepId){var E=S[0].transitionAction.goToStepId.stepId,C=1;g[0].steps.filter(function(e){e._id==E&&(C=parseInt(e._seq))}),step(e,s,t,i,E,C,o,r,c).then(function(e){if(C==b||"Complete"==e.data.status){var s=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});d(s)}else{var s=util.success("Step transition completed successfully.",{subProcessComplete:!1,step:e.data});d(s)}},function(e){p(e)})}else if(void 0!=S[0].transitionAction.stop){var w=h[0].postActions;postActions(w,r,c).then(function(e){var s=util.success("Step transition completed successfully.Workflow stopped.",{subProcessComplete:!0,step:u});d(s)},function(e){p(e)})}}catch(e){p(e)}})}function postActions(e,s,t){return new Promise(function(i,n){var a=[];try{var o=JSON.xpath("/subprocesses[_id eq '"+t+"']",s,{})[0],r=o["meta-data"].processConfigId,c=o["meta-data"].subProcessConfigId,u=o["meta-data"].subProcessInsSeq,d=o["meta-data"].subProcessInsSeq,p=JSON.xpath("/config/processes[_id eq '"+r+"']/subProcesses[_id eq '"+c+"']",s,{})[0],l=JSON.xpath("/subprocesses[_id eq '"+t+"']/step",s,{})[0];util.syncLoop(e.length,function(i){var o=i.iteration();action(e[o],r,u,c,d,p,l,s,{},t).then(function(e){a.push(!0),i.next()},function(e){a.push(!1),i.break(),n(e)})},function(){if(a.every(Boolean)){var e=util.success("Post-actions completed successfully.",{});i(e)}else{var s=util.error("WFPreActionsError","Not all post-actions passed.");n(s)}})}catch(e){n(e)}})}function processWorkflowMessage(e,s){var t=e;if(t.indexOf("#INSTANCE_LABEL")!==-1){var i=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+s+"']/label",app.SCOPE.workflow,{})[0];t=t.replace("#INSTANCE_LABEL",i)}if(t.indexOf("#USER_NAME")!==-1){var i=JSON.xpath("/subprocesses[_id eq '"+s+"']/step/assignedTo/name",app.SCOPE.workflow,{})[0];t=t.replace("#USER_NAME",i)}if(t.indexOf("#PROFILE_TITLE")!==-1){var i=app.profile.title;t=t.replace("#PROFILE_TITLE",i)}if(t.indexOf("#PROFILE_TYPE")!==-1){var i=app.SCOPE.APP_CONFIG.name;t=t.replace("#PROFILE_TYPE",i)}if(t.indexOf("#VAR_SPUUID")!==-1){var i=s;t=t.replace("#VAR_SPUUID",i)}return t}function _getName(e,s){if(void 0!==e)for(var t=0;t<e.length;t++)if(e[t]._lang===s)return e[t].value}function _getNameByLang(e){return library.getNameByLang(e)}function preWorkActions(e,s){return new Promise(function(t,i){var n=[];try{var a=JSON.xpath("/config/processes[_id eq '"+app.SCOPE.spo.pObject.id+"']/subProcesses[_id eq '"+app.SCOPE.spo.spObject.id+"']",s,{})[0],o=JSON.xpath("/subprocesses[_id eq '"+app.SCOPE.processUUID+"']/step",s,{})[0];util.syncLoop(e.length,function(t){var r=t.iteration();action(e[r],app.SCOPE.spo.pObject.id,app.SCOPE.spo.pObject.seq,app.SCOPE.spo.spObject.id,app.SCOPE.spo.spObject.seq,a,o,s,{},app.SCOPE.processUUID).then(function(e){n.push(!0),t.next()},function(e){n.push(!1),t.break(),i(e)})},function(){if(n.every(Boolean)){var e=util.success("PreWork-actions completed successfully.",{});t(e)}else{var s=util.error("WFPreActionsError","Not all pre-work-actions passed.");i(s)}})}catch(e){i(e)}})}var util=require("utility"),actionsModule=require("./actions"),helper=require("./helper"),form=require("./form");module.exports={preRequisites:preRequisites,preActions:preActions,postActions:postActions,preWorkActions:preWorkActions,subProcess:subProcess,indicatorDocs:indicatorDocs,task:task,transition:transition,assignUser:assignUser};

},{"./actions":2,"./form":3,"./helper":4,"utility":8}],8:[function(require,module,exports){
"use strict";function success(r,e){return{message:r,data:e}}function warn(r,e){return console.warn(e),{warning:r,data:e}}function error(r,e){var n=new Error("");return n.name=r,n.message=e,n}function syncLoop(r,e,n){var a=0,t=!1,o=!1,u={next:function(){return t&&o&&n?n():void(a<r?(a++,e(u)):(t=!0,n&&n()))},iteration:function(){return a-1},break:function(r){t=!0,o=r}};return u.next(),u}function compare(r,e,n){switch(e){case"greaterThan":return r>n;case"lessThan":return r<n;case"greaterThanEqual":return r>=n;case"lessThanEqual":return r<=n;case"equalTo":return r===n;case"notEqualTo":return r!==n}}function getName(r,e){if(void 0!==r)for(var n=0;n<r.length;n++)if(r[n].i18n._lang===e)return r[n].i18n.value}module.exports={success:success,warn:warn,error:error,syncLoop:syncLoop,compare:compare,getName:getName};

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
