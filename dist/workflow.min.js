(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Workflow = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function Workflow(e,s,t,o){var i=this;if(""==s||void 0==s)throw util.error("ParamRequired","A community id is required.");if("string"!=typeof s)throw new Error("The community id must be a javascript string.");if(i.communityId=s||"",""==e||void 0==e)throw util.error("ParamRequired","A profile id is required.");if("string"!=typeof e)throw new Error("The profile id must be a javascript string.");if(i.profile=e||"",""==t||void 0==t)throw util.error("ParamRequired","An app id is required.");if("string"!=typeof t)throw new Error("The app id must be a javascript string.");if(i.app=t||"",""==o||void 0==o)throw util.error("ParamRequired","A workflow configuration is required.");"object"!=typeof o?i.config=JSON.parse(o):i.config=o,i.instance,i.subprocesses=[],i.indicators=[]}var Process=require("./lib/process"),util=require("utility"),userInterface=require("./lib/interface"),helper=require("./lib/helper");Workflow.prototype.getProfile=function(){return this.profile},Workflow.prototype.getApp=function(){return this.app},Workflow.prototype.getConfig=function(){return this.config},Workflow.prototype.getInstance=function(){return this.instance},Workflow.prototype.setInstance=function(e){this.instance=e},Workflow.prototype.getSubProcesses=function(){return this.subprocesses},Workflow.prototype.setSubProcesses=function(e){this.subprocesses=e},Workflow.prototype.getIndicators=function(){return this.indicators},Workflow.prototype.setIndicators=function(e){this.indicators=e},Workflow.prototype.create=function(){var e=this;return new Promise(function(s,t){try{if(void 0!==e.instance){var o=util.warn("Instance already exists.",e);s(o)}else{var i={_id:"",version:"",type:"workflowInstance",processes:[],channels:["community_"+app.SCOPE.getCommunityId(),"profile_"+app.SCOPE.profileId,"application_"+app.SCOPE.applicationId,"community_"+app.SCOPE.getCommunityId()+"_application_"+app.SCOPE.applicationId]};i._id=e.profile+":processes",i.version=e.config.version,e.instance=i;var r=util.success("Workflow processes instance created successfully.",e);s(r)}}catch(e){t(e)}})},Workflow.prototype.initialise=function(e,s,t){var o=this;return new Promise(function(i,r){try{var n=[];if(""!==e&&void 0!==e){if(n=o.config.processes.filter(function(s){if(s._id==e)return s}),void 0==n[0]._id){var c=util.error("WFConfigError","No valid process definition found with process id: "+e);r(c)}}else n.push(o.config.processes[0]),e=o.config.processes[0]._id;var u=[];o.instance.processes.filter(function(s){s.id==e&&u.push(s)});var p=u.length+1,a={id:"",seq:"",subProcesses:[]};a.id=e,a.seq=p,o.instance.processes.push(a);var f=n[0].subProcesses[0]._id,d=1;o.instance.processes.filter(function(s){s.id==e&&s.seq==p&&(d=s.subProcesses.length+1)}),Process.subProcess(e,p,f,d,s,o).then(function(s){var n=s.data._id,c={id:f,subprofileId:t,seq:d,uuid:n};a.subProcesses.push(c);for(var u=0;u<o.instance.processes.length;u++){var l=o.instance.processes[u];l.id==e&&l.seq==p&&o.instance.processes.splice(u,1,a)}var h=s.data.indicators,v=s.data.step;Process.indicatorDocs(e,h,v,o).then(function(e){var s=util.success("Process: "+o.config.processes[0]._id+" initialized successfully.",c);i(s)},function(e){r(e)})},function(s){o.instance.processes=o.instance.processes.filter(function(s){return!(s.id==e&&s.seq==p)}),console.log(s),r(s)})}catch(e){r(e)}})},Workflow.prototype.transition=function(e,s,t,o,i,r,n,c){var u=this;return new Promise(function(p,a){try{var f=JSON.xpath("/subprocesses[_id eq '"+c+"']/step/data",app.SCOPE.workflow,{})[0],d=JSON.xpath("/processes[_id eq '"+e+"']/subProcesses[_id eq '"+t+"']/steps[_id eq '"+i+"']",u.config,{})[0],l=function(i,r){u.instance.processes.filter(function(n){n.id==e&&n.seq==s&&n.subProcesses.filter(function(e){e.id==t&&e.seq==o&&u.subprocesses.filter(function(s){if(s._id==e.uuid)if("step"==i){s.step=r.data.step;var t=util.success(r.message,s);p(t)}else if("stepComplete"==i){s.step=r.data.step,s.complete=!0;var t=util.success(r.message,s.step);p(t)}})})})};if(void 0!=d.function.task.postActions){var h=d.function.task.postActions;Process.postActions(h,u).then(function(p){Process.transition(e,s,t,o,i,r,n,u,c,f).then(function(e){e.data.subProcessComplete?l("stepComplete",e):l("step",e)},function(e){a(e)})},function(e){a(e)})}else Process.transition(e,s,t,o,i,r,n,u,c,f).then(function(e){e.data.subProcessComplete?l("stepComplete",e):l("step",e)},function(e){a(e)})}catch(e){a(e)}})},Workflow.prototype.assignUser=function(e,s,t,o,i){var r=this;return new Promise(function(n,c){try{Process.assignUser(e,s,t,o,i,r).then(function(e){n(e)},function(e){c(e)})}catch(e){c(e)}})},Workflow.prototype.ui=function(){var e=this;return{getProcess:function(s,t){return new Promise(function(o,i){try{userInterface.getProcess(s,t,e).then(function(e){o(e)},function(e){i(e)})}catch(e){i(e)}})}}},Workflow.prototype.getNodeValue=function(e,s){var t=this;return new Promise(function(o,i){try{helper.getNodeValue(e,t,s).then(function(e){o(e)},function(e){i(e)})}catch(e){i(e)}})},Workflow.prototype.takeAssignment=function(e){var s=this;return new Promise(function(t,o){try{var i=JSON.xpath("/subprocesses[_id eq '"+e+"']",s,{})[0],r=JSON.xpath("/step/assignedTo",i,{})[0];r.name=LOCAL_SETTINGS.SUBSCRIPTIONS.username+"",r.userId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"";var n=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+e+"']/id",s,{})[0],c=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+e+"']/id",s,{})[0],u=JSON.xpath("/subprocesses[_id eq '"+e+"']/step/id",s,{})[0],p=JSON.xpath("/processes[_id eq '"+n+"']/subProcesses[_id eq '"+c+"']/steps[_id eq '"+u+"']",s.config,{})[0];if(void 0!=p.function.task.preWorkActions){var a=p.function.task.preWorkActions;Process.preWorkActions(a,s).then(function(e){t(s)},function(e){o(e)})}else t(s)}catch(e){o(e)}})},module.exports=Workflow;

},{"./lib/helper":4,"./lib/interface":5,"./lib/process":7,"utility":8}],2:[function(require,module,exports){
"use strict";var util=require("utility"),nodeValue=require("./nodeValue"),form=require("./form"),helper=require("./helper"),gatekeeper=new GK,community=function(){return{createCommunity:function(e,i,r){return new Promise(function(e,i){var n=worker.getWorkerWrapper();n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=(new Date).toString(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var t=JSON.xpath("/indicators[category/term eq 'Community']/_id",r,{})[0],a={createCommunity:{newCommunityId:r.profile,indicatorUUID:{Community:t}}};n.action=a,worker.send(n).then(function(i){var r=util.success("Worker processed successfully.",i);e(r)},function(e){i(e)})})},userJoinCommunity:function(e,i,r){return new Promise(function(e,i){})},releaseAdoptedApplication:function(e,i,r){return new Promise(function(e,n){var t=worker.getWorkerWrapper();t._id=generateUUID(),t.communityId=app.SCOPE.getCommunityId(),t.applicationId=app.SCOPE.applicationId,t.createdDateTime=(new Date).toString(),t.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var a=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'adoptedApplication']/instances[1]/uuid",r,{})[0],o={releaseAdoptedApplication:{communityId:r.profile,indicatorUUID:{adoptedApplication:a}}};t.action=o,worker.send(t).then(function(i){var r=util.success("Worker processes successfully.",i);e(r)},function(e){n(e)})})}}}(),application=function(){return{createAppDefinition:function(e,i,r){return new Promise(function(e,i){var n=worker.getWorkerWrapper();n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=(new Date).toString(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var t=JSON.xpath("/indicators[category/term eq 'Application']/_id",r,{})[0],a={createApplication:{newApplicationId:r.profile,indicatorUUID:{Application:t}}};n.action=a,worker.send(n).then(function(i){var r=util.success("Worker processes successfully.",i);e(r)},function(e){i(e)})})},buildApplication:function(e,i,r){return new Promise(function(e,n){var t=worker.getWorkerWrapper();t._id=generateUUID(),t.communityId=app.SCOPE.getCommunityId(),t.applicationId=app.SCOPE.applicationId,t.createdDateTime=(new Date).toString(),t.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var a=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'PublishApplication']/instances[1]/uuid",r,{})[0],o=JSON.xpath("/indicators[category/term eq 'ApplicationDefinition']/_id",r,{})[0],s=JSON.xpath("/indicators[category/term eq 'Roles']/_id",r,{})[0],c=JSON.xpath("/indicators[category/term eq 'Application']/_id",r,{})[0],u=JSON.xpath("/indicators[category/term eq 'AppPermissions']/_id",r,{})[0],d={buildApplication:{applicationId:r.profile,indicatorUUID:{PublishApplication:a,ApplicationDefinition:o,Roles:s,Application:c,AppPermissions:u}}};t.action=d,worker.send(t).then(function(i){var r=util.success("Worker processes successfully.",i);e(r)},function(e){n(e)})})},applicationAdoption:function(e,i,r){return new Promise(function(e,n){var t=worker.getWorkerWrapper();t._id=generateUUID(),t.communityId=app.SCOPE.getCommunityId(),t.applicationId=app.SCOPE.applicationId,t.createdDateTime=(new Date).toString(),t.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var a=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'Adoption']/instances[1]/uuid",r,{})[0],o=JSON.xpath("/indicators[category/term eq 'PublishApplication']/_id",r,{})[0],s=JSON.xpath("/indicators[category/term eq 'Application']/_id",r,{})[0],c={adoptApplication:{applicationId:r.profile,indicatorUUID:{Adoption:a,PublishApplication:o,Application:s}}};t.action=c,worker.send(t).then(function(i){var r=util.success("Worker processes successfully.",i);e(r)},function(e){n(e)})})},createTaxonomy:function(e,i,r){return new Promise(function(e,n){var t=worker.getWorkerWrapper();t._id=generateUUID(),t.communityId=app.SCOPE.getCommunityId(),t.applicationId=app.SCOPE.applicationId,t.createdDateTime=(new Date).toString(),t.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var a=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'Taxonomy']/instances[1]/uuid",r,{})[0],o={createTaxonomy:{taxonomyUUID:a}};t.action=o,worker.send(t).then(function(i){var r=util.success("Worker processes successfully.",i);e(r)},function(e){n(e)})})}}}(),worker=function(){return{getWorkerWrapper:function(){var e={source:"remote",type:"workerObject",_id:"",channels:[],communityId:"",applicationId:"",message:"",messageType:"info",createdDateTime:"",senderUserId:"",action:{}};return e},send:function(e){return new Promise(function(i,r){console.log("Submitting Worker Object to server"),console.log(e),dao.save(e).done(function(e){i(e)}).fail(function(e){console.log("Error submitting worker response !!"+e),r(e)})})}}}(),performance=function(){return{create:function(e,i,r){return new Promise(function(e,i){var n=worker.getWorkerWrapper();n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=(new Date).toString(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var t=JSON.xpath("/indicators[category/term eq 'plan']/_id",r,{})[0],a={createPlan:{planUUID:t}};n.action=a,worker.send(n).then(function(i){var r=util.success("Worker processed successfully.",i);e(r)},function(e){i(e)})})},configureNode:function(e,i,r){return new Promise(function(e,n){var t=worker.getWorkerWrapper();t._id=generateUUID(),t.communityId=app.SCOPE.getCommunityId(),t.applicationId=app.SCOPE.applicationId,t.createdDateTime=(new Date).toString(),t.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var a=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'node']/instances[1]/uuid",r,{})[0],o={configureNode:{nodeUUID:a}};t.action=o,worker.send(t).then(function(i){var r=util.success("Worker processed successfully.",i);e(r)},function(e){n(e)})})},unlockPeriod:function(e,i,r){return new Promise(function(e,n){var t=JSON.xpath("/subprocesses[_id eq '"+i+"']",r,{})[0],a=JSON.xpath("/indicators[id eq '"+PERIOD_SET_ID+"']/instances/uuid",t,{})[0],o=t.dates.valid;library.unlockPeriod(a,o).then(function(i){var t=i.id;dao.get(t).done(function(i){for(var n=0;n<r.indicators.length;n++){var t=r.indicators[n];if(t._id==i._id){r.indicators.splice(n,1),r.indicators.push(i);var a=util.success("Unlock period.",i);e(a)}}}).fail(function(e){console.error(e),n(e)})},function(e){n(e)})})},setModelStatus:function(e,i,r){return new Promise(function(n,t){var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",r,{})[0],o=JSON.xpath("/indicators[id eq '"+PERIOD_SET_ID+"']/instances/uuid",a,{})[0],s=a.dates.valid,c=JSON.xpath("/label",e,{})[0],u=helper.getLanguageMessage(c);library.setPeriodStatus(o,s,u).then(function(e){var i=e.id;dao.get(i).done(function(e){for(var i=0;i<r.indicators.length;i++){var t=r.indicators[i];if(t._id==e._id){r.indicators.splice(i,1),r.indicators.push(e);var a=util.success("setModelStatus",e);n(a)}}}).fail(function(e){console.error(e),t(e)})},function(e){t(e)})})},lockPerformanceModel:function(e,i,r){return new Promise(function(e,n){var t=JSON.xpath("/subprocesses[_id eq '"+i+"']",r,{})[0],a=JSON.xpath("/indicators[id eq '"+PERFORMANCE_SET_ID+"']/instances/uuid",t,{})[0],o=t.dates.valid;library.lockPerformanceModel(a,o).then(function(i){var t=i.id;dao.get(t).done(function(i){for(var n=0;n<r.indicators.length;n++){var t=r.indicators[n];if(t._id==i._id){r.indicators.splice(n,1),r.indicators.push(i);var a=util.success("Lock performance model.",i);e(a)}}}).fail(function(e){console.error(e),n(e)})},function(e){n(e)})})}}}(),sdo=function(){return{create:function(e,i,r){return new Promise(function(e,n){var t=worker.getWorkerWrapper();t._id=generateUUID(),t.communityId=app.SCOPE.getCommunityId(),t.applicationId=app.SCOPE.applicationId,t.createdDateTime=(new Date).toString(),t.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var a=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'SDO']/instances[1]/uuid",r,{})[0],o={createSDO:{sdoUUID:a}};t.action=o,worker.send(t).then(function(i){var r=util.success("Worker processes successfully.",i);e(r)},function(e){n(e)})})},enrollCourse:function(e,i,r){return new Promise(function(e,n){var t=worker.getWorkerWrapper();t._id=generateUUID(),t.communityId=app.SCOPE.getCommunityId(),t.applicationId=app.SCOPE.applicationId,t.createdDateTime=(new Date).toString(),t.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var a=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'NTIPcourseEnrollmentTDMP']/instances[1]/uuid",r,{})[0],o={enrollCourse:{courseUUID:a}};t.action=o,worker.send(t).then(function(i){var r=util.success("Worker processes successfully.",i);e(r)},function(e){n(e)})})}}}(),taxonomy=function(){return{create:function(e,i,r){return new Promise(function(e,n){var t=worker.getWorkerWrapper();t._id=generateUUID(),t.communityId=app.SCOPE.getCommunityId(),t.applicationId=app.SCOPE.applicationId,t.createdDateTime=(new Date).toString(),t.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var a=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'Taxonomy']/instances[1]/uuid",r,{})[0],o={createTaxonomy:{taxonomyUUID:a}};t.action=o,worker.send(t).then(function(i){var r=util.success("Worker processes successfully.",i);e(r)},function(e){n(e)})})}}}(),subProcessInstance=function(){return{setTitle:function(e,i,r,n){return new Promise(function(e,t){var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",app.SCOPE.workflow,{})[0];a.label=r;var o=[],s={};s.model=n.instance,o.push(s);var c=util.success("Subprocess setTitle success.",n.instance);e(c)})},setValidDate:function(e,i,r,n){return new Promise(function(e,t){var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",app.SCOPE.workflow,{})[0];a.dates.valid=r;var o=[],s={};s.model=a,o.push(s);var c=util.success("valid date set.",n.subprocesses);e(c)})}}}(),variables=function(){return{setVariable:function(setVariable,_WFInstance,uuid){return new Promise(function(resolve,reject){helper.getNodeValue(setVariable.data,_WFInstance,uuid).then(function(dataValue){var scope=setVariable.scope,variableName=setVariable.name,variableType=setVariable.variableType,validDate=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/dates/valid",_WFInstance,{})[0];switch(scope){case"profile":var profileId=_WFInstance.profile,profileVariableFileName=profileId+":variables";dao.get(profileVariableFileName).done(function(file){if("periodic"==variableType){var processObj=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+uuid+"']",_WFInstance,{})[0],seq=processObj.seq,obj={subProcessUUID:uuid,user:{userName:LOCAL_SETTINGS.SUBSCRIPTIONS.username,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userProfileId},seq:seq,validDate:validDate,value:dataValue};void 0!=file[variableName]?eval("file."+variableName+".push(obj)"):file[variableName]=[obj]}else file[variableName]=dataValue;dao.upsert(file).done(function(e){resolve("Variable set successfully")}).fail(function(e){reject("Failed to set Variable")})}).fail(function(e){var i={_id:profileVariableFileName};if(i.channels=app.profile.channels,"periodic"==variableType){var r=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+uuid+"']",_WFInstance,{})[0],n=r.seq;i[variableName]=[{subProcessUUID:uuid,user:{userName:LOCAL_SETTINGS.SUBSCRIPTIONS.username,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userProfileId},seq:n,validDate:validDate,value:dataValue}]}else i[variableName]=dataValue;dao.upsert(i).done(function(e){resolve("Variable set successfully")}).fail(function(e){reject("Failed to set Variable")})});break;case"subProcessInstance":resolve("not implemented");break;case"step":resolve("not implemented");break;case"subProfileSubProcessInstance":var subProfileId=app.profile.subprofileId,subProfileVariableFileName=subProfileId+":variables";dao.get(subProfileVariableFileName).done(function(file){if("periodic"==variableType){var part=library.getSubprofileSubprocessIds(),seq=JSON.xpath("count(/subprocesses[_id eq '"+uuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+uuid+"']/id and _id = /subprocesses[_id = "+part+"]/_id])",_WFInstance,{})[0]+1,obj={subProcessUUID:uuid,user:{userName:LOCAL_SETTINGS.SUBSCRIPTIONS.username,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userProfileId},seq:seq,validDate:validDate,value:dataValue};void 0!=file[variableName]?eval("file."+variableName+".push(obj)"):file[variableName]=[obj]}else file[variableName]=dataValue;dao.upsert(file).done(function(e){resolve("Variable at subprofile set successfully")}).fail(function(e){reject("Failed to set Variable at subprofile")})}).fail(function(e){var i={_id:subProfileVariableFileName};if(i.channels=app.profile.channels,"periodic"==variableType){var r=library.getSubprofileSubprocessIds(),n=JSON.xpath("count(/subprocesses[_id eq '"+uuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+uuid+"']/id and _id = /subprocesses[_id = "+r+"]/_id])",_WFInstance,{})[0]+1;i[variableName]=[{subProcessUUID:uuid,user:{userName:LOCAL_SETTINGS.SUBSCRIPTIONS.username,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userProfileId},seq:n,validDate:validDate,value:dataValue}]}else i[variableName]=dataValue;dao.upsert(i).done(function(e){resolve("Variable at subprofile set successfully")}).fail(function(e){reject("Failed to set Variable at subprofile")})})}},function(e){reject("getNodeValue value not found.")})})}}}(),notification=function(){return{email:function(e,r,n){return new Promise(function(n,t){var a=worker.getWorkerWrapper();a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=(new Date).toString(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var o={};o.emailAddress=NOTIFICATION_FROM_ADDRESS,o.name=NOTIFICATION_FROM_NAME;var s=function(e){return new Promise(function(n,t){var a=[];if(void 0!=e.recipients.role){var o=e.recipients.role.roleId,s="";"current"==e.recipients.role.profile?s=r.profile:"community"==e.recipients.role.profile&&(s=app.SCOPE.getCommunityId()),library.getUsersListByRole(s,o).then(function(e){if(void 0!=e&&e.length>0){for(i=0;i<e.length;i++)a.push({name:e[i].name,id:e[i].id});n(a)}else t("ERROR: No users found in role list")},function(e){t("ERROR: Cannot fetch users from role. Exiting.")})}else void 0!=e.recipients.assignedTo&&(a.push({name:"",id:assignedTo}),n(a))})},c=[],u=[],d=e.heading,p={};void 0!=e.message.plain?p.plain=e.message.plain:void 0!=e.message.rtf&&(p.rtf={},void 0!=e.message.rtf.markup?p.rtf.markup=e.message.rtf.markup:void 0!=e.message.rtf.template);var l={notification:{email:{}}};s(e).then(function(e){l.notification.email.from=o,l.notification.email.to=e,l.notification.email.cc=c,l.notification.email.bcc=u,l.notification.email.heading=d,l.notification.email.message=p,a.action=l,worker.send(a).then(function(e){console.log(a);var i=util.success("Notification Email Worker processes successfully.",e);n(i)},function(e){t(e)})},function(e){t(e)})})},sms:function(e,i,r){return new Promise(function(e,i){})},pushAPI:function(e,i,r){return new Promise(function(e,i){})}}}(),report=function(){return{createPerformanceReport:function(e,i,r){return new Promise(function(n,t){var a=worker.getWorkerWrapper();a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=(new Date).toString(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var o=e.workplanSetId,s=e.configSetId,c=JSON.xpath("/indicators[category/term eq '"+o+"']/_id",app.SCOPE.workflow,{})[0],u=JSON.xpath("/subprocesses[_id eq '"+r+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],d={createPerformanceReport:{workplanUUID:c,configUUID:u,profilId:i.profile}};a.action=d,worker.send(a).then(function(e){var i=util.success("WorkplanReport Worker processed successfully.",e);n(i)},function(e){t(e)})})},createReport:function(e,i,r){return new Promise(function(e,n){var t=worker.getWorkerWrapper();t._id=generateUUID(),t.communityId=app.SCOPE.getCommunityId(),t.applicationId=app.SCOPE.applicationId,t.createdDateTime=(new Date).toString(),t.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var a=JSON.xpath("/indicators[category/term eq 'PerformanceReportDefinition']/_id",i,{})[0],o=JSON.xpath("/subprocesses[_id eq '"+r+"']/indicators[id eq 'reportingSDO']/instances[1]/uuid",i,{})[0],s={createReport:{performanceReportDefinition:a,reportingSDO:o,profilId:i.profile}};t.action=s,worker.send(t).then(function(i){var r=util.success("Reprot Worker processed successfully.",i);e(r)},function(e){n(e)})})}}}();module.exports={community:community,application:application,performance:performance,worker:worker,sdo:sdo,taxonomy:taxonomy,subProcessInstance:subProcessInstance,variables:variables,notification:notification,report:report};

},{"./form":3,"./helper":4,"./nodeValue":6,"utility":8}],3:[function(require,module,exports){
"use strict";function create(args){var processId=args[0]||"",subProcess=args[1]||{},step=args[2]||{},action=args[3]||{},_WFInstance=args[6]||{},data=args[6]||{},indicators=subProcess.indicators||[],result=[],indicatorType=action._type,processSeq=args[4]||"",subProcessSeq=args[5]||"",createType=args[7]||"",subProcessId=subProcess._id,uuid=args[8]||"",baseUUID=args[9]||"",profile=_WFInstance.profile,inputData=args[10]||{},formCreateType=action.method.form.create,formType=action.method.form.type,paramObject={formCreateType:formCreateType,formType:formType};return new Promise(function(resolve,reject){for(var toProcess=indicators.length,subprocessType=JSON.xpath("/config/processes/subProcesses[_id eq '"+subProcessId+"']/type",_WFInstance,{})[0],formCreateFn=function(indicatorType,indicatorId,validDate,instantiateSource){gatekeeper.instantiate(baseUUID,indicatorType,indicatorId,_WFInstance.profile,validDate,subProcessId,subprocessType).then(function(docArray){for(var i=0;i<docArray.length;i++){var object=docArray[i];if(!object.model._id.endsWith(":approved")&&!object.model._id.endsWith(":rejected")){var workflowObj={id:_WFInstance.config._id,instance:_WFInstance.instance._id,processes:[{id:processId,subProcessId:subProcess._id,subProcessUUID:uuid,step:{id:step.id,seq:step.seq,startDate:"",status:step.status,message:step.message,assignedTo:{userId:step.assignedTo.userId,name:step.assignedTo.name},comment:step.comment,complete:!1,endDate:""}}]};void 0!=action.setWorkflowLabelInTitle&&""!=action.setWorkflowLabelInTitle&&1==action.setWorkflowLabelInTitle&&(object.model.title=inputData.label),void 0!=action.setDraft&&""!=action.setDraft&&1==action.setDraft&&(object.model.control.draft=!0),object.model.workflows.push(workflowObj);var mainId=object.model._id;gatekeeper.persist(docArray).then(function(savedArray){dao.get(mainId).done(function(data){var indicatorModel=ko.mapping.fromJS({defaultModel:{setId:indicatorId}});gatekeeper.instantiateData(mainId,instantiateSource,indicatorModel,data.model.pending.seq,paramObject).then(function(data){if("200"==data[0].status){if(void 0!=action.setWorkflowLabelInField&&""!=action.setWorkflowLabelInField){var assignmentSetId=action.setWorkflowLabelInField.split(".")[0];if(assignmentSetId==indicatorId){console.log(data[0]);var path="data[0].model.model.pending.data."+action.setWorkflowLabelInField+"='"+inputData.label+"'";eval(path)}}gatekeeper.persist(data).then(function(e){dao.get(mainId).done(function(e){if(0==_WFInstance.indicators.length){if(_WFInstance.indicators.push(e),toProcess--,0==toProcess){var s=util.success("Form created successfully.",_WFInstance.indicators);resolve(s)}}else{for(var t=!1,i=0;i<_WFInstance.indicators.length;i++){var a=_WFInstance.indicators[i];if(a._id==e._id&&(t=!0,_WFInstance.indicators.splice(i,1),_WFInstance.indicators.push(e),toProcess--,0==toProcess)){var s=util.success("Form created successfully.",_WFInstance.indicators);resolve(s)}}if(0==t&&(_WFInstance.indicators.push(e),toProcess--,0==toProcess)){var s=util.success("Form created successfully.",_WFInstance.indicators);resolve(s)}}}).fail(function(e){console.error(e);var s=util.success("1 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(s)})},function(e){console.error(e);var s=util.success("2 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(s)})}else{var failure=util.success("3 Gatekeeper initialisation failed with initialiseData message "+err[0].message,{});reject(failure)}},function(e){var s=util.success("4 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(s)})}).fail(function(e){console.error(e);var s=util.success("5 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(s)})},function(e){console.error(e);var s=util.success("6 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(s)})}}},function(e){for(var s=[],t=0;t<_WFInstance.instance.processes.length;t++)_WFInstance.instance.processes[t].subProcesses.length>0&&s.push(_WFInstance.instance.processes[t]);_WFInstance.instance.processes=[],_WFInstance.instance.processes=s;for(var i=[],t=0;t<_WFInstance.subprocesses.length;t++)_WFInstance.subprocesses[t].indicators.length>0&&i.push(_WFInstance.subprocesses[t]);_WFInstance.subprocesses=[],_WFInstance.subprocesses=i,console.error(e);var a=util.success("7 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(a)})},instantiateSource=FROM_DEFINITION,counter=0;counter<indicators.length;counter++){var indicatorId=indicators[counter]._id,indicatorName=util.getName(indicators[counter].name,"en"),source=indicators[counter].initiateData,initType="";void 0!=subProcess.instanceType.newSequence?initType=INSTANCE_TYPE_NEW_SEQ:void 0!=subProcess.instanceType.newInstance&&(initType=INSTANCE_TYPE_NEW_INS);var indicatorDoc={};if(void 0!=baseUUID&&""!=baseUUID&&baseUUID.length>0){var sp=JSON.xpath("/subprocesses[_id eq '"+baseUUID+"']",_WFInstance,{})[0];void 0==subProcess.periodType.periodic&&baseUUID!=uuid&&(sp.active=!1),instantiateSource=FROM_AUTHORISED}else{var cardinality=JSON.xpath("/indicators[setId eq '"+indicatorId+"']/cardinality",app.SCOPE.APP_CONFIG,{})[0];if(initType==INSTANCE_TYPE_NEW_INS)if(cardinality==INDICATOR_CARDINALITY_SINGLE){var existingUUID=JSON.xpath("/indicators[category/term eq '"+indicatorId+"']/_id",_WFInstance,{});instantiateSource=existingUUID.length>0?FROM_AUTHORISED:FROM_DEFINITION}else instantiateSource=FROM_DEFINITION;else if(cardinality==INDICATOR_CARDINALITY_SINGLE){var existingUUID=JSON.xpath("/indicators[category/term eq '"+indicatorId+"']/_id",app.SCOPE.workflow,{});instantiateSource=existingUUID.length>0?FROM_AUTHORISED:FROM_DEFINITION}else{var path="/indicators[category/term eq '"+indicatorId+"' and id = /subprocesses[id = '"+subProcessId+"']/indicators/instances/uuid]/_id",part=library.getSubprofileSubprocessIds();subprocessType==PROCESS_TYPE_SUBPROFILE&&(path="/indicators[category/term eq '"+indicatorId+"' and id = /subprocesses[id = '"+subProcessId+"' and id = "+part+"]/indicators/instances/uuid]/_id");var existingUUID=JSON.xpath(path,_WFInstance,{});instantiateSource=existingUUID.length>0?FROM_AUTHORISED:FROM_DEFINITION}}formCreateFn(initType,indicatorId,"",instantiateSource)}})}function setInstanceTitle(e){var s=e[0]||{},t=e[2]||"",i=e[4]||{},a=i.label;return new Promise(function(e,i){for(var n=JSON.xpath("/subprocesses[_id eq '"+t+"']",s,{})[0],r=n.indicators,o=0;o<r.length;o++){var c=r[o].instances[0].uuid,d=JSON.xpath("/indicators[_id eq '"+c+"']",s,{})[0];d.title=r[o].id+" "+a}e("Set Title Success",r)})}function deleteProfile(e){var s=e[0]||{},t=s.profile;return new Promise(function(e,s){var i={source:"remote",type:"workerObject",_id:generateUUID(),channels:[],communityId:app.SCOPE.getCommunityId(),applicationId:app.SCOPE.applicationId,message:"",messageType:"info",createdDateTime:moment().format(),senderUserId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,notification:{},profile:{action:"deleteProfile",profileId:t}};console.log(i),dao.upsert(i).done(function(s){console.log("Worker Object submitted for profile("+t+") deletion."),console.log(s),e(s)}).fail(function(e){console.log(e),s(data)})})}function createProfile(e){var s=e[1]||{},t=s.communityId,i=s.profile;return new Promise(function(e,s){library.createProfileDocuments(t,i).done(function(s){var t=util.success("Form created successfully.",s);e(t)}).fail(function(e){console.error(e);var t=util.success("ERROR: Profile creation failed"+e[0].message,{});s(t)})})}function setDraft(e){var s=e[0]||{},t=(s.communityId,s.profile,e[2]||"");return new Promise(function(e,i){for(var a=JSON.xpath("/subprocesses[_id eq '"+t+"']",s,{})[0],n=a.indicators,r=0;r<n.length;r++){var o=n[r].instances[0].uuid,c=JSON.xpath("/indicators[_id eq '"+o+"']",s,{})[0];c.control.draft=!0}e("Set Draft Success",n)})}function setUnDraft(e){var s=e[0]||{},t=(s.communityId,s.profile,e[2]||"");return new Promise(function(e,i){for(var a=JSON.xpath("/subprocesses[_id eq '"+t+"']",s,{})[0],n=a.indicators,r=0;r<n.length;r++){var o=n[r].instances[0].uuid,c=JSON.xpath("/indicators[_id eq '"+o+"']",s,{})[0];c.control.draft=!1}e("Set Draft Success",n)})}function save(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var i=util.success("Form indicator set saved successfully.",s);e(i)})}function submit(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var i=util.success("Form submitted successfully.",s);e(i)})}function authorise(e){var s=e[0]||"",t=e[1]||{},i=t._id,a=e[2]||"",n=e[3]||"",r=e[4]||{};return new Promise(function(e,t){for(var o=JSON.xpath("/processes[id eq '"+s+"' and seq eq '"+a+"']/subProcesses[id eq '"+i+"' and seq eq '"+n+"']/uuid",r.instance,{})[0],c=JSON.xpath("/subprocesses[_id eq '"+o+"']/indicators/instances/uuid",r,{}),d=c.length,u=[],l=0;l<d;l++)gatekeeper.authorise(c[l]).then(function(s){gatekeeper.persist(s).then(function(s){for(var t="",i=0;i<s.length;i++)s[i].id.endsWith(":approved")||(t=s[i].id);dao.get(t).done(function(s){if(0==r.indicators.length){if(r.indicators.push(s),d--,0==d){var t=util.success("Form authorised successfully.",u);e(t)}}else{for(var i=!1,a=0;a<r.indicators.length;a++){var n=r.indicators[a];if(n._id==s._id&&(i=!0,r.indicators.splice(a,1),r.indicators.push(s),d--,0==d)){var t=util.success("Form authorised successfully.",u);e(t)}}if(0==i&&(r.indicators.push(s),d--,0==d)){var t=util.success("Form authorised successfully.",u);e(t)}}}).fail(function(e){console.error(e)})},function(e){console.error(err)})},function(s){if(d--,0==d){var t=util.success("Form authorised successfully.",u);e(t)}})})}function close(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var i=util.success("Form closed successfully.",s);e(i)})}function updateIndicator(args){var _WFInstance=args[0]||{},uuid=args[1]||"",path=args[2]||"",dataValue=args[3]||"";return new Promise(function(resolve,reject){var subProcessInstance=JSON.xpath("/subprocesses[_id eq '"+uuid+"']",_WFInstance,{})[0],indicatorInstances=subProcessInstance.indicators,setId=path.split(".",1)[0],indicatorUUID=JSON.xpath("/*[id eq '"+setId+"']/instances/uuid",indicatorInstances,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],expr="indObject.model.pending.data."+path+' = "'+dataValue+'"';eval(expr);var itemsToProcess=1,stuff=[],obj={};obj.model=indObject,stuff.push(obj),gatekeeper.persist(stuff).then(function(e){for(var s="",t=0;t<e.length;t++)e[t].id.endsWith(":approved")||(s=e[t].id);dao.get(s).done(function(e){if(0==_WFInstance.indicators.length){if(_WFInstance.indicators.push(e),itemsToProcess--,0==itemsToProcess){var s=util.success("Indicator updated.",stuff);resolve(s)}}else{for(var t=!1,i=0;i<_WFInstance.indicators.length;i++){var a=_WFInstance.indicators[i];if(a._id==e._id&&(t=!0,_WFInstance.indicators.splice(i,1),_WFInstance.indicators.push(e),itemsToProcess--,0==itemsToProcess)){var s=util.success("Indicator updated.",stuff);resolve(s)}}if(0==t&&(_WFInstance.indicators.push(e),itemsToProcess--,0==itemsToProcess)){var s=util.success("Indicator updated.",stuff);resolve(s)}}}).fail(function(e){console.error(e)})},function(e){console.error(e)})})}function updateIndicatorWrapper(args){var _WFInstance=args[0]||{},uuid=args[1]||"",path=args[2]||"",dataValue=args[3]||"",indicatorSetId=args[4]||"";return new Promise(function(resolve,reject){var subProcessInstance=JSON.xpath("/subprocesses[_id eq '"+uuid+"']",_WFInstance,{})[0],indicatorInstances=subProcessInstance.indicators,indicatorUUID=JSON.xpath("/*[id eq '"+indicatorSetId+"']/instances/uuid",indicatorInstances,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],expr="indObject."+path+' = "'+dataValue+'"';eval(expr);var itemsToProcess=1,stuff=[],obj={};obj.model=indObject,stuff.push(obj),gatekeeper.persist(stuff).then(function(e){for(var s="",t=0;t<e.length;t++)e[t].id.endsWith(":approved")||(s=e[t].id);dao.get(s).done(function(e){if(0==_WFInstance.indicators.length){if(_WFInstance.indicators.push(e),itemsToProcess--,0==itemsToProcess){var s=util.success("Indicator updated.",stuff);resolve(s)}}else{for(var t=!1,i=0;i<_WFInstance.indicators.length;i++){var a=_WFInstance.indicators[i];if(a._id==e._id&&(t=!0,_WFInstance.indicators.splice(i,1),_WFInstance.indicators.push(e),itemsToProcess--,0==itemsToProcess)){var s=util.success("Indicator updated.",stuff);resolve(s)}}if(0==t&&(_WFInstance.indicators.push(e),itemsToProcess--,0==itemsToProcess)){var s=util.success("Indicator updated.",stuff);resolve(s)}}}).fail(function(e){console.error(e)})},function(e){console.error(e)})})}function markUpdateIndicator(e){var s=e[0]||{},t=e[1]||"",i=e[2]||"",a=e[3]||"";return new Promise(function(e,n){var r="",o=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+a+"' ]/instances[1]/uuid",s,{})[0];r=void 0!=o?JSON.xpath("/indicators[_id eq '"+o+"']",s,{})[0]:JSON.xpath("/indicators[category/term eq '"+a+"']",s,{})[0],r.model.pending.status=i;var c=1,d=[],u={};u.model=r,d.push(u),gatekeeper.persist(d).then(function(t){for(var i="",a=0;a<t.length;a++)t[a].id.endsWith(":approved")||(i=t[a].id);dao.get(i).done(function(t){if(0==s.indicators.length){if(s.indicators.push(t),c--,0==c){var i=util.success("Indicator updated.",d);e(i)}}else{for(var a=!1,n=0;n<s.indicators.length;n++){var r=s.indicators[n];if(r._id==t._id&&(a=!0,s.indicators.splice(n,1),s.indicators.push(t),c--,0==c)){var i=util.success("Indicator updated.",d);e(i)}}if(0==a&&(s.indicators.push(t),c--,0==c)){var i=util.success("Indicator updated.",d);e(i)}}}).fail(function(e){console.error(e)})},function(e){console.error(e)})})}function setStatus(e){var s=e[0]||{},t=e[1]||"",i=e[2]||"";return new Promise(function(e,a){var n=JSON.xpath("/subprocesses[_id eq '"+t+"']",s,{})[0];n.step.message=i,e("Set profile status Success",n)})}var util=require("utility"),gatekeeper=new GK;module.exports={create:create,save:save,submit:submit,authorise:authorise,close:close,setDraft:setDraft,setUnDraft:setUnDraft,createProfile:createProfile,setInstanceTitle:setInstanceTitle,deleteProfile:deleteProfile,updateIndicator:updateIndicator,markUpdateIndicator:markUpdateIndicator,updateIndicatorWrapper:updateIndicatorWrapper};

},{"utility":8}],4:[function(require,module,exports){
"use strict";function getLanguageMessage(message){var language=service.getLanguage(),res=eval("message.i18n."+language);return res}function getNodeValue(data,_WFInstance,uuid){return new Promise(function(resolve,reject){if(void 0!=data.value){var inputDataType=data.value.datatype.dataType,inputValue=data.value.data;resolve("number"==inputDataType?Number(inputValue):"string"==inputDataType?inputValue:"integer"==inputDataType?parseInt(inputValue):"decimal"==inputDataType?parseFloat(inputValue):"date"==inputDataType||"dateTime"==inputDataType?inputValue:inputValue)}else if(void 0!=data.indicatorUUID)reject("ERROR: Unimplemented value type found.");else if(void 0!=data.indicator){var indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+data.indicator.indicatorSetId+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],xpath="/model/pending/data/"+data.indicator.indicatorSetId+"/"+data.indicator.elementId,seq=JSON.xpath("count(/subprocesses[_id eq '"+uuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+uuid+"']/id])",_WFInstance,{})[0]+1,subprocessType=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+uuid+"']/id]/type",_WFInstance,{})[0],part=library.getSubprofileSubprocessIds();subprocessType==PROCESS_TYPE_SUBPROFILE&&(seq=JSON.xpath("count(/subprocesses[_id eq '"+uuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+uuid+"']/id and _id = /subprocesses[_id = "+part+"]/_id])",_WFInstance,{})[0]+1);var replacedPath=replaceAll(xpath,"#SEQUENCE#",seq),validDate=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/dates/valid",_WFInstance,{})[0],concatValidDate="'"+validDate+"'",newPath=replaceAll(replacedPath,"#END_DATE#",concatValidDate),dotReplaced=replaceAll(newPath,"[.]","/"),retValue=JSON.xpath(dotReplaced,indObject,{})[0];resolve(retValue)}else if(void 0!=data.system)resolve("ERROR: Unimplemented system type found.");else if(void 0!=data.variable)if(void 0!=data.variable.profile){var variableName=data.variable.profile,profileId=_WFInstance.profile,profileVariableFileName=profileId+":variables";dao.get(profileVariableFileName).done(function(file){var obj=eval("file."+variableName);if("object"==typeof obj){var seq=JSON.xpath("count(/subprocesses[_id eq '"+uuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+uuid+"']/id])",_WFInstance,{})[0]+1,subprocessType=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+uuid+"']/id]/type",_WFInstance,{})[0],part=library.getSubprofileSubprocessIds();subprocessType==PROCESS_TYPE_SUBPROFILE&&(seq=JSON.xpath("count(/subprocesses[_id eq '"+uuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+uuid+"']/id and _id = /subprocesses[_id = "+part+"]/_id])",_WFInstance,{})[0]+1);var valuePath="/"+variableName+"[seq eq '"+seq+"']/value",retValue=JSON.xpath(valuePath,file,{})[0];resolve(retValue)}else"string"==typeof obj&&resolve(obj)}).fail(function(e){reject("ERROR: Profile variables not found")})}else reject("ERROR: Unimplemented profile type found.");else if(void 0!=data.indicatorWrapper){var indicatorSet=data.indicatorWrapper.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(data.indicatorWrapper.path,"[.]","/"),xpath="/"+elementpath,value=JSON.xpath(xpath,indObject,{})[0];resolve(value)}else if(void 0!=data.calculated){for(var value="",separator=data.calculated.separator,i=0;i<data.calculated.elements.length-1;i++){var elements=data.calculated.elements,possibleItems=["elementProperty","constantValue","elementWrapper","currentDate","randomDigits","profileObjectElement","profileObjectWrapper","currentFinancialYear"];switch(propertyExists(elements[i],possibleItems)){case"elementProperty":var indicatorSet=elements[i].elementProperty.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(elements[i].elementProperty.elementId,"[.]","/"),xpath="/model/pending/data/"+indicatorSet+"/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value=value+itemValue+separator;break;case"constantValue":var itemValue=elements[i].constantValue.value;value=value+itemValue+separator;break;case"elementWrapper":var indicatorSet=elements[i].elementWrapper.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(elements[i].elementWrapper.elementId,"[.]","/"),xpath="/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value=value+itemValue+separator;break;case"currentDate":value=value+formatDate(new Date)+separator;break;case"randomDigits":var digits=elements[i].randomDigits.digits,random=Math.random(),exp=Math.pow(10,digits),intPart=random*exp^0;value=value+intPart+separator;break;case"profileObjectElement":var indicatorSet=elements[i].profileObjectElement.indicatorSetId,indObject=JSON.xpath("/indicators[category/term eq 'appProfile']",app.SCOPE.workflow,{})[0],elementpath=replaceAll(elements[i].profileObjectElement.elementId,"[.]","/"),xpath="/model/pending/data/"+indicatorSet+"/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value=value+itemValue+separator;break;case"profileObjectWrapper":var indicatorSet=elements[i].profileObjectWrapper.indicatorSetId,indObject=JSON.xpath("/indicators[category/term eq 'appProfile']",app.SCOPE.workflow,{})[0],elementpath=replaceAll(elements[i].profileObjectWrapper.wrapperElementId,"[.]","/"),xpath="/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value=value+itemValue+separator;break;case"currentFinancialYear":var startDate=elements[i].currentFinancialYear.startDate,startMonth=elements[i].currentFinancialYear.startMonth,financialYear=(new Date).getFullYear()+"-"+startMonth+"-"+startDate;value=value+financialYear+separator;break;default:reject("No method found from implemented list.")}}var i=data.calculated.elements.length-1,elements=data.calculated.elements,possibleItems=["elementProperty","constantValue","elementWrapper","currentDate","randomDigits","profileObjectElement","profileObjectWrapper","currentFinancialYear"];switch(propertyExists(elements[i],possibleItems)){case"elementProperty":var indicatorSet=elements[i].elementProperty.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(elements[i].elementProperty.elementId,"[.]","/"),xpath="/model/pending/data/"+indicatorSet+"/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value+=itemValue;break;case"constantValue":var itemValue=elements[i].constantValue.value;value+=itemValue;break;case"elementWrapper":var indicatorSet=elements[i].elementWrapper.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(elements[i].elementWrapper.elementId,"[.]","/"),xpath="/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value+=itemValue;break;case"currentDate":value+=formatDate(new Date);break;case"randomDigits":var digits=elements[i].randomDigits.digits,random=Math.random(),exp=Math.pow(10,digits),intPart=random*exp^0;value+=intPart;break;case"profileObjectElement":var indicatorSet=elements[i].profileObjectElement.indicatorSetId,indObject=JSON.xpath("/indicators[category/term eq 'appProfile']",app.SCOPE.workflow,{})[0],elementpath=replaceAll(elements[i].profileObjectElement.elementId,"[.]","/"),xpath="/model/pending/data/"+indicatorSet+"/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value+=itemValue;break;case"profileObjectWrapper":var indicatorSet=elements[i].profileObjectWrapper.indicatorSetId,indObject=JSON.xpath("/indicators[category/term eq 'appProfile']",app.SCOPE.workflow,{})[0],elementpath=replaceAll(elements[i].profileObjectWrapper.wrapperElementId,"[.]","/"),xpath="/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value+=itemValue;break;case"currentFinancialYear":var startDate=elements[i].currentFinancialYear.startDate,startMonth=elements[i].currentFinancialYear.startMonth,financialYear=(new Date).getFullYear()+"-"+startMonth+"-"+startDate;value+=financialYear;break;default:reject("No method found from implemented list.")}resolve(value)}})}function replaceAll(e,a,t){return"function"!=typeof e.replace&&(console.log(a+" "+t),console.log(e)),e.replace(new RegExp(a,"g"),t)}function formatDate(e){var a=e.getDate(),t=e.getMonth(),i=e.getFullYear();return a+"-"+t+"-"+i}module.exports={getLanguageMessage:getLanguageMessage,getNodeValue:getNodeValue};

},{}],5:[function(require,module,exports){
"use strict";function getProcess(e,s,t){return new Promise(function(n,i){try{var c=[],r=[];t.instance.processes.filter(function(s){s.id==e&&(r=s)}),util.syncLoop(r.subProcesses.length,function(n){var o=n.iteration(),u=r.seq,f=r.subProcesses[o].id,a=r.subProcesses[o].seq;getSubProcess(e,u,f,a,s,t).then(function(e){c.push(e),n.next()},function(e){n.break(),i(e)})},function(){n(c)})}catch(e){i(e)}})}function getSubProcess(e,s,t,n,i,c){return new Promise(function(r,o){try{var u={id:"",seq:"",name:"",help:"",dates:"",step:""},f=[],a=[];c.instance.processes.filter(function(i){if(i.id==e&&i.seq==s){i.subProcesses.length;i.subProcesses.filter(function(e){e.id==t&&e.seq==n&&0==e.complete&&(f=e)})}}),c.config.processes.filter(function(s){s._id==e&&s.subProcesses.filter(function(e){e._id==t&&(a=e)})}),u.id=a._id,u.seq=f.seq,u.name=util.getName(a.name,i),u.help=util.getName(a.help,i),u.dates=f.dates,u.step=f.step,r(u)}catch(e){o(e)}})}function prepareNotificationScreen(){""}var util=require("utility");module.exports={getProcess:getProcess};

},{"utility":8}],6:[function(require,module,exports){
"use strict";function get(){return new Promise(function(e,t){})}module.exports={get:get};

},{}],7:[function(require,module,exports){
"use strict";function count(e){return void 0!==e?e.length:0}function preRequisites(e,s,t){return new Promise(function(i,n){var o=[];try{util.syncLoop(e.length,function(i){var a=i.iteration();preRequisite(e[a],s,t).then(function(e){o.push(!0),i.next()},function(e){o.push(!1),i.break(),n(e)})},function(){if(o.every(Boolean)){var e=util.success("Pre-requisites completed successfully.",{});i(e)}else{var s=util.error("WFPreRequisiteError","Not all pre-requisites passed.");n(s)}})}catch(e){n(e)}})}function preRequisite(prerequisite,_WFInstance,spuuid){return new Promise(function(resolve,reject){if(void 0!=prerequisite.check.numberProcessInstances){var numberProcessInstances=prerequisite.check.numberProcessInstances,_filterOperator=numberProcessInstances.operator,xpathOperator="";switch(_filterOperator){case"greaterThan":xpathOperator="gt";break;case"lessThan":xpathOperator="lt";break;case"greaterThanEqual":xpathOperator="ge";break;case"lessThanEqual":xpathOperator="le";break;case"equalTo":xpathOperator="eq";break;case"notEqualTo":xpathOperator="ne"}var _subprocessId=numberProcessInstances.subProcessId,_filterElement="step/status",_filterValue=numberProcessInstances.type,innerXpath="/"+_filterElement+"[. eq '"+_filterValue+"']",fullPath="count(/subprocesses[id eq '"+_subprocessId+"']"+innerXpath+")",prereqProcessType=JSON.xpath("/config/processes/subProcesses[_id eq '"+_subprocessId+"']/type",_WFInstance,{})[0],part=library.getSubprofileSubprocessIds();void 0!=app.profile.subprofileId&&""!=app.profile.subprofileId&&void 0!=prereqProcessType&&prereqProcessType==PROCESS_TYPE_SUBPROFILE&&(fullPath="count(/subprocesses[id eq '"+_subprocessId+"' and _id = "+part+"]"+innerXpath+")");var subjectCount=JSON.xpath(fullPath,_WFInstance,{})[0],countValue=prerequisite.check.numberProcessInstances.count,compare=util.compare(subjectCount,prerequisite.check.numberProcessInstances.operator,parseInt(countValue));if(compare){var success=util.success("Pre-requisites passed.",{});resolve(success)}else{var message=helper.getLanguageMessage(prerequisite.message),error=util.error("WFPreRequisiteError",message);reject(error)}}else if(void 0!=prerequisite.check.variable){var scope=prerequisite.check.variable.scope,fileName="";if("profile"==scope){var profileId=_WFInstance.profile;fileName=profileId+":variables"}else if("subProfileSubProcessInstance"==scope){var subProfileId=app.profile.subprofileId;fileName=subProfileId+":variables"}else reject("ERROR: Scope '"+scope+"' not implemented in pre-requisites");dao.get(fileName).done(function(file){var variableName=prerequisite.check.variable.name,obj=eval("file."+variableName),subjectValueCalculated;if("object"==typeof obj){var seq=JSON.xpath("count(/subprocesses[_id eq '"+spuuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+spuuid+"']/id])",_WFInstance,{})[0]+1,subprocessType=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+spuuid+"']/id]/type",_WFInstance,{})[0],part=library.getSubprofileSubprocessIds();subprocessType==PROCESS_TYPE_SUBPROFILE&&(seq=JSON.xpath("count(/subprocesses[_id eq '"+spuuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+spuuid+"']/id and _id = /subprocesses[_id = "+part+"]/_id])",_WFInstance,{})[0]+1);var valuePath="/"+variableName+"[seq eq '"+seq+"']/value";subjectValueCalculated=JSON.xpath(valuePath,file,{})[0]}else"string"==typeof obj&&(subjectValueCalculated=obj);var inputValue=prerequisite.check.variable.value.data,inputDataType=prerequisite.check.variable.value.dataType.dataType,finalValue;"number"==inputDataType?finalValue=Number(inputValue):"string"==inputDataType?finalValue=inputValue:"integer"==inputDataType?finalValue=parseInt(inputValue):"decimal"==inputDataType?finalValue=parseFloat(inputValue):"date"!=inputDataType&&"dateTime"!=inputDataType||(finalValue=inputValue);var compare=util.compare(subjectValueCalculated,prerequisite.check.variable.operator,finalValue);if(compare){var success=util.success("Variable Pre-requisites passed.",{});resolve(success)}else{var message=helper.getLanguageMessage(prerequisite.message),error=util.error("WFPreRequisiteError",message);reject(error)}}).fail(function(e){var s=helper.getLanguageMessage(prerequisite.message),e=util.error("WFPreRequisiteError:",s);reject(e)})}else{var error=util.error("WFPreRequisiteError","Pre-requisite type not defined.");reject(error)}})}function preActions(e,s){return new Promise(function(t,i){var n=[];try{var o=JSON.xpath("/config/processes[_id eq '"+app.processID+"']/subProcesses[_id eq '"+app.processId+"']",s,{})[0],a=JSON.xpath("/subprocesses[_id eq '"+app.SCOPE.processUUID+"']/step",s,{})[0];util.syncLoop(e.length,function(t){var r=t.iteration();action(e[r],app.processID,app.processSEQ,app.processId,app.processSeq,o,a,s,{},app.SCOPE.processUUID).then(function(e){n.push(!0),t.next()},function(e){n.push(!1),t.break(),i(e)})},function(){if(n.every(Boolean)){var e=util.success("Pre-actions completed successfully.",{});t(e)}else{var s=util.error("WFPreRequisiteError","Not all pre-actions passed.");i(s)}})}catch(e){i(e)}})}function getSubProcess(e,s){return void 0==s.subprocesses?[]:void s.subprocesses.filter(function(s){if(s.id==e)return s})}function subProcess(e,s,t,i,n,o){var a=[],r=[],c=[];o.instance.processes.filter(function(n){if(n.id==e&&n.seq==s){n.subProcesses.length;n.subProcesses.filter(function(e){if(e.id==t&&e.seq==i){var s=e.uuid;o.subprocesses.filter(function(e){e._id==s&&(a=e)})}})}}),o.config.processes.filter(function(s){s._id==e&&(r=s,s.subProcesses.filter(function(e){e._id==t&&(c=e)}))});var u="",p=n.baseUUID;if(void 0!=p&&""!=p&&p.length>0){var d=JSON.xpath("/subprocesses[_id eq '"+p+"']",o,{})[0];u=d.groupKey}else u=generateUUID();var l=n.label,f=generateUUID(),m={_id:f,id:t,type:"workflowInstanceSubProcess",seq:i,initiated:!1,dates:{created:"",valid:"",start:"",due:"",closed:""},complete:!1,indicators:[],step:{},active:!0,groupKey:u,label:l,channels:["community_"+app.SCOPE.getCommunityId(),"profile_"+app.SCOPE.profileId,"application_"+app.SCOPE.applicationId,"community_"+app.SCOPE.getCommunityId()+"_application_"+app.SCOPE.applicationId],history:[]};return o.subprocesses.push(m),new Promise(function(u,p){try{var d=r.preActions;preActions(d,o).then(function(d){var l=r.prerequisites;preRequisites(l,o,f).then(function(r){var d=c.initiate;initiate(d,a,n).then(function(a){m.initiated=a.data.initiated,m.dates=a.data.dates;var r=c.steps[0]._id,d=(c.steps[0].transition[0]._id,1);step(e,s,t,i,r,d,n,o,f).then(function(e){m.step=e.data,indicators(c.indicators,o,m._id).then(function(e){m.indicators=e.data;var s=util.success(e.message,m);u(s)},function(e){p(e)})},function(e){p(e)})},function(e){o.subprocesses=o.subprocesses.filter(function(e){return!(e._id==f)}),p(e)})},function(e){o.subprocesses=o.subprocesses.filter(function(e){return!(e._id==f)}),p(e)})},function(e){o.subprocesses=o.subprocesses.filter(function(e){return!(e._id==f)}),p(e)})}catch(e){p(e)}})}function initiate(e,s,t){var i={initiated:!1,dates:{created:"",valid:"",start:"",due:"",closed:""}};return new Promise(function(n,o){var a=function(){if(void 0!=e.user){i.dates.created=t.createdDate,"userSelected"!=e.user.validDate._type&&"autoSelected"!=e.user.validDate._type||(void 0!==t.validDate?i.dates.valid=t.validDate:util.warn("WFInitiateError","No valid date passed in - {data.validDate}")),"userSelected"!=e.user.dueDate._type&&"autoSelected"!=e.user.dueDate._type||(void 0!==t.dueDate?i.dates.due=t.dueDate:util.warn("WFInitiateError","No due date passed in - {data.dueDate}")),i.dates.start=t.firstDate,i.initiated=!0;var s=util.success("Sub-Process initiate completed successfully.",i);n(s)}else if(void 0!=e.auto);else{var a=util.error("WFInitiateError","Initiate type: "+e._type+" not defined.");o(a)}};if(void 0==s.complete)a();else if(!s.complete)if(e.parallelInstances)a();else{var r=util.error("WFInitiateError","Sub-process: "+s.id+" still active and parallel instances are not allowed.");o(r)}})}function step(processId,processSeq,subProcessId,subProcessSeq,stepId,stepSeq,data,_WFInstance,spuuid){var model={key:generateUUID(),id:"",seq:"",status:"",message:"",assignedTo:{userId:"",name:""},assignment:{},comment:""},subProcess={},uuid="",instSubProcess,step={},transitionId="";return new Promise(function(resolve,reject){try{_WFInstance.instance.processes.filter(function(e){e.id==processId&&e.seq==processSeq&&e.subProcesses.filter(function(e){e.id==subProcessId&&e.seq==subProcessSeq&&(uuid=e.uuid)})}),_WFInstance.subprocesses.filter(function(e){e._id==uuid&&(instSubProcess=e)}),_WFInstance.config.processes.filter(function(e){e._id==processId&&e.subProcesses.filter(function(e){e._id==subProcessId&&(subProcess=e,e.steps.filter(function(e){e._id==stepId&&(step=e)}))})}),model.id=stepId,model.seq=stepSeq;var instanceStatus="";void 0!=step.setInstanceStatusTo.NotStarted?instanceStatus="NotStarted":void 0!=step.setInstanceStatusTo.Created?instanceStatus="Created":void 0!=step.setInstanceStatusTo.InProgress?instanceStatus="InProgress":void 0!=step.setInstanceStatusTo.Submitted?instanceStatus="Submitted":void 0!=step.setInstanceStatusTo.Complete&&(instanceStatus="Complete");var language=service.getLanguage();model.status=instanceStatus,model.message=eval("step.setInstanceStatusTo."+instanceStatus+".label.i18n."+language),model.comment=void 0!==data.comment?data.comment:"";var indicators=void 0!==instSubProcess?instSubProcess.indicators:[],updateSPIndicatorObject=function(e,s){if(e.length>0)for(var t=0;t<e.length;t++){var i=e[t],n=i.instances[0].uuid,o=JSON.xpath("/indicators[_id eq '"+n+"']/model/pending/seq",s,{})[0];i.instances[0].seq=o}};indicatorDocs(processId,indicators,model,_WFInstance).then(function(e){uuid=spuuid,void 0!=step.function.actions?actions(step.function.actions,processId,processSeq,subProcessId,subProcessSeq,subProcess,model,_WFInstance,data,spuuid).then(function(e){updateSPIndicatorObject(indicators,_WFInstance);var s=step.transition[0]._id;transition(processId,processSeq,subProcessId,subProcessSeq,stepId,s,data,_WFInstance,spuuid,model).then(function(e){var s=util.success("Transition completed successfully.",e.data.step);resolve(s)},function(e){reject(e)})},function(e){reject(e)}):void 0!=step.function.task&&task(processId,processSeq,step.function.task,spuuid,model).then(function(e){updateSPIndicatorObject(indicators,_WFInstance);var s=util.success("Task awaiting user action.",model);resolve(s)},function(e){reject(e)})},function(e){reject(e)})}catch(e){reject(e)}})}function indicators(e,s,t){var i=[];return new Promise(function(e,n){try{for(var o=JSON.xpath("indicators[fn:count(./workflows/processes[subProcessUUID eq '"+t+"']) gt 0]",s,{}),a=0;a<o.length;a++){var r=o[a],c={id:"",instances:[]},u={uuid:"",title:"",key:"",seq:1};c.id=r.category.term,u.uuid=r._id,u.title=r.title,u.key="",u.seq=r.model.pending.seq,c.instances.push(u),i.push(c)}var p=util.success("Process indicator model updated.",i);e(p)}catch(e){n(e)}})}function assignUser(e,s,t,i,n,o){return new Promise(function(a,r){try{var c="";o.instance.processes.filter(function(n){n.id==e&&n.seq==s&&n.subProcesses.filter(function(e){e.id==t&&e.seq==i&&(c=e.uuid)})}),o.subprocesses.filter(function(s){if(s._id==c){s.step.assignedTo.userId=n.id,s.step.assignedTo.name=n.name;for(var t=s.indicators,i=0;i<t.length;i++)for(var r=t[i],u=0;u<r.instances.length;u++)for(var p=r.instances[u],d=0;d<o.indicators.length;d++){var l=o.indicators[d];p.uuid==l._id&&l.workflows.filter(function(s){s.id==o.config._id&&s.processes.filter(function(s){s.id==e&&(s.step.assignedTo.userId=n.id,s.step.assignedTo.name=n.name)})})}var f=util.success('User assigned successfully. UserId: "'+n.id+'", Name: "'+n.name+'"',s);a(f)}})}catch(e){r(e)}})}function indicatorDocs(e,s,t,i){return new Promise(function(n,o){try{if(void 0==s){util.error("WFIndicatorsUpdate","Indicators parameter is required. - Value: "+s);o(err)}else{for(var a=0;a<s.length;a++)for(var r=s[a],c=0;c<r.instances.length;c++)for(var u=r.instances[c],p=0;p<i.indicators.length;p++){var d=i.indicators[p];u.uuid==d._id&&d.workflows.filter(function(s){s.id==i.config._id&&s.processes.filter(function(s){s.id==e&&(s.step.id=t.id,s.step.seq=t.seq,s.step.status=t.status,s.step.message=t.message,s.step.assignedTo.userId=t.assignedTo.userId,s.step.assignedTo.name=t.assignedTo.name,s.step.comment=void 0!==t.comment?t.comment:"")})})}var l=util.success("Indicator documents workflow process model updated.",i);n(l)}}catch(e){o(e)}})}function actions(e,s,t,i,n,o,a,r,c,u){var p=[];return new Promise(function(d,l){util.syncLoop(e.length,function(d){var f=d.iteration();action(e[f],s,t,i,n,o,a,r,c,u).then(function(s){var t={id:e[f]._id,seq:f,data:s};p.push(t),d.next()},function(e){d.break(),l(e)})},function(){var e=util.success("Actions completed successfully.",p);d(e)})})}function action(e,s,t,i,n,o,a,r,c,u){return new Promise(function(i,p){if(void 0!=e.method){var d=["form","indicator","profile","subProcessInstance","step","community","application","user","sdo","performance","taxonomy","variables","notification"];switch(propertyExists(e.method,d)){case"form":if(void 0!=e.method.form.create){var l=[];l.push(s),l.push(o),l.push(a),l.push(e),l.push(t),l.push(n),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.create(l).then(function(e){i(e.data)},function(e){p(e)})}else if(void 0!=e.method.form.authorise){var l=[];l.push(s),l.push(o),l.push(t),l.push(n),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.authorise(l).then(function(e){i(e.data)},function(e){p(e)})}else if(void 0!=e.method.form.undraft){var l=[];l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.setUnDraft(l).then(function(e){i(e.data)},function(e){p(e)})}else if(void 0!=e.method.form.draft){var l=[];l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.setDraft(l).then(function(e){i(e.data)},function(e){p(e)})}else if(void 0!=e.method.form.close){var l=[];l.push(o.indicators),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.close(l).then(function(e){i(e.data)},function(e){p(e)})}else if(void 0!=e.method.form.authoriseAndCreateNewSeq){var l=[];l.push(s),l.push(o),l.push(t),l.push(n),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.authorise(l).then(function(d){var l=[];l.push(s),l.push(o),l.push(a),l.push(e),l.push(t),l.push(n),l.push(r),l.push(c.createType),l.push(u),l.push(u),l.push(c),form.create(l).then(function(e){i(e.data)},function(e){p(e)})},function(e){p(e)})}break;case"indicator":if(void 0!=e.method.indicator.create)i("Not implemented");else if(void 0!=e.method.indicator.instantiate)i("Not implemented");else if(void 0!=e.method.indicator.setValue){var f=e.method.indicator.setValue.path;helper.getNodeValue(e.method.indicator.setValue.data,r,u).then(function(e){var s=[];s.push(r),s.push(u),s.push(f),s.push(e),form.updateIndicator(s).then(function(e){i(e.data)},function(e){p(e)})},function(e){p(e)})}else if(void 0!=e.method.indicator.updateStatus){var m=e.method.indicator.indicatorSetId,l=[];if(l.push(r),l.push(u),void 0!=e.method.indicator.updateStatus){var h=e.method.indicator.updateStatus;l.push(h),l.push(m),form.markUpdateIndicator(l).then(function(e){i(e.data)},function(e){p(e)})}else i("Action indicator sub type not found.")}else if(void 0!=e.method.indicator.setWrapperElement){var f=e.method.indicator.setWrapperElement.path,m=e.method.indicator.setWrapperElement.indicatorSetId;helper.getNodeValue(e.method.indicator.setWrapperElement.data,r,u).then(function(e){var s=[];s.push(r),s.push(u),s.push(f),s.push(e),s.push(m),form.updateIndicatorWrapper(s).then(function(e){i(e.data)},function(e){p(e)})},function(e){p(e)})}break;case"profile":if(void 0!=e.method.profile.create){var l=[];l.push(s),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.createProfile(l).then(function(e){i(e.data)},function(e){p(e)})}else if(void 0!=e.method.profile.setStatusTo){var l=[],h=e.method.profile.setStatusTo;l.push(r),l.push(u),l.push(h),form.setStatus(l).then(function(e){i(e.data)},function(e){p(e)})}break;case"subProcessInstance":var v=["instantiate","authorise","close","setVariable","setStatusTo","setStatusMsgTo","setTitle","setValidDate"];switch(propertyExists(e.method.subProcessInstance,v)){case"setTitle":helper.getNodeValue(e.method.subProcessInstance.setTitle,r,u).then(function(s){actionsModule.subProcessInstance.setTitle(e.method.subProcessInstance.setTitle,u,s,r).then(function(e){i(e.data)},function(e){p(e)})},function(e){p(e)});break;case"setValidDate":helper.getNodeValue(e.method.subProcessInstance.setValidDate,r,u).then(function(s){actionsModule.subProcessInstance.setValidDate(e.method.subProcessInstance.setValidDate,u,s,r).then(function(e){i(e.data)},function(e){p(e)})},function(e){p(e)});break;default:p("No method found from implemented list in subprocess action.")}break;case"step":break;case"community":var b=["createCommunity","releaseAdoptedApplication","userJoinCommunity"];switch(propertyExists(e.method.community,b)){case"createCommunity":return actionsModule.community.createCommunity(e.method.community.createCommunity,u,r).then(function(e){i(e.data)},function(e){p(e)});case"releaseAdoptedApplication":return actionsModule.community.releaseAdoptedApplication(e.method.community.releaseAdoptedApplication,u,r).then(function(e){i(e.data)},function(e){p(e)});case"userJoinCommunity":return actionsModule.community.userJoinCommunity(e.method.community.userJoinCommunity,u,r).then(function(e){i(e.data)},function(e){p(e)});default:p("No method found from implemented list.")}break;case"application":var g=["createAppDefinition","buildApplication","applicationAdoption"];switch(propertyExists(e.method.application,g)){case"createAppDefinition":return actionsModule.application.createAppDefinition(e.method.application.createAppDefinition,u,r).then(function(e){i(e.data)},function(e){p(e)});case"buildApplication":return actionsModule.application.buildApplication(e.method.application.buildApplication,u,r).then(function(e){i(e.data)},function(e){p(e)});case"applicationAdoption":return actionsModule.application.applicationAdoption(e.method.application.applicationAdoption,u,r).then(function(e){i(e.data)},function(e){p(e)});default:p("No method found from implemented list.")}break;case"user":break;case"sdo":var I=["create","enrollCourse"];switch(propertyExists(e.method.sdo,I)){case"create":return actionsModule.sdo.create(e.method.sdo.create,u,r).then(function(e){i(e.data)},function(e){p(e)});case"enrollCourse":return actionsModule.sdo.enrollCourse(e.method.sdo.enrollCourse,u,r).then(function(e){i(e.data)},function(e){p(e)});default:p("No method found from implemented list.")}break;case"performance":var P=["create","configureNode","unlockPeriod","lockPerformanceModel","setModelStatus"];switch(propertyExists(e.method.performance,P)){case"create":return actionsModule.performance.create(e.method.performance.create,u,r).then(function(e){i(e.data)},function(e){p(e)});case"configureNode":return actionsModule.performance.configureNode(e.method.performance.configureNode,u,r).then(function(e){i(e.data)},function(e){p(e)});case"unlockPeriod":return actionsModule.performance.unlockPeriod(e.method.performance.unlockPeriod,u,r).then(function(e){i(e.data)},function(e){p(e)});case"setModelStatus":return actionsModule.performance.setModelStatus(e.method.performance.setModelStatus,u,r).then(function(e){i(e.data)},function(e){p(e)});case"lockPerformanceModel":return actionsModule.performance.lockPerformanceModel(e.method.performance.lockPerformanceModel,u,r).then(function(e){i(e.data)},function(e){p(e)});default:p("No method found from implemented list.")}break;case"taxonomy":var S=["create"];switch(propertyExists(e.method.taxonomy,S)){case"create":return actionsModule.taxonomy.create(e.method.taxonomy.create,u,r).then(function(e){i(e.data)},function(e){p(e)});default:p("No method found from implemented list.")}break;case"variables":var y=["setVariable"];switch(propertyExists(e.method.variables,y)){case"setVariable":return actionsModule.variables.setVariable(e.method.variables.setVariable,r,u).then(function(e){i(e.data)},function(e){p(e)});default:p("No method found from implemented list.")}break;case"notification":var _=["email","sms","pushAPI"];switch(propertyExists(e.method.notification,_)){case"email":return actionsModule.notification.email(e.method.notification.email,r,u).then(function(e){i(e.data)},function(e){p(e)});case"sms":p("SMS functionality not implemented");break;case"pushAPI":p("pushAPI functionality not implemented");break;default:p("No method found from implemented list.")}break;case"report":var q=["createPerformanceReport","createReport"];switch(propertyExists(e.method.report,q)){case"createPerformanceReport":return actionsModule.report.createPerformanceReport(e.method.report.createPerformanceReport,r,u).then(function(e){i(e.data)},function(e){p(e)});case"createReport":return actionsModule.report.createReport(e.method.report.createReport,r,u).then(function(e){i(e.data)},function(e){p(e)});default:p("No method found from implemented list.")}break;default:p("method not defined in configuration")}}else p("No method found from implemented list.")})}function task(e,s,t,i,n){return new Promise(function(e,s){var o=app.SCOPE.workflow,a=t.preActions;preActions(a,o).then(function(a){if(void 0!=t.assign.role){var r=o.profile,c="";"current"==t.assign.role.profile?c=o.profile:"community"==t.assign.role.profile&&(c=app.SCOPE.getCommunityId());var u=t.assign.role.roleId;library.getUsersListByRole(c,u).then(function(s){if(void 0!=s)if(s.length>1){var a=!1,p=library.getCurrentUserRoles(),d=p.profile.indexOf(u),l=p.community.indexOf(u),f=p.implicit.indexOf(u),m=p.adoption.indexOf(u),h=p.subprofile.indexOf(u);if(a=d>-1||l>-1||f>-1||m>-1||h>-1){var v=n.assignedTo;v.name=LOCAL_SETTINGS.SUBSCRIPTIONS.username+"",v.userId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+""}var b="";if(void 0!=t.assign.assignment){var b=n.assignment,g={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};b.accept=g,b.message=_getNameByLang(t.assign.assignment.message.i18n);var I={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};b.reject=I;var P={profileId:r,roleId:u,type:"role"};b.value=P,b.profileRoleId=c}if(a){var S=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+i+"']/id",o,{})[0],y=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+i+"']/id",o,{})[0],_=JSON.xpath("/subprocesses[_id eq '"+i+"']/step/id",o,{})[0];JSON.xpath("/processes[_id eq '"+S+"']/subProcesses[_id eq '"+y+"']/steps[_id eq '"+_+"']",o.config,{})[0];if(void 0!=t.preWorkActions){var q=t.preWorkActions;preWorkActions(q,o).then(function(s){e("Assignment is made. Pre work actions found and executed ")},function(e){I(e)})}else e("Assignment is made. No pre work actions found. ")}else e("Notifications request submitted for acceptance.")}else if(1==s.length){var N=s[0].id,k=s[0].name,v=n.assignedTo;v.name=k+"",v.userId=N+"";var b="";if(void 0!=t.assign.assignment){var b=n.assignment,g={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};b.accept=g,b.message=_getNameByLang(t.assign.assignment.message.i18n);var I={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};b.reject=I;var P={profileId:r,roleId:u,type:"role"};b.value=P,b.profileRoleId=c}var S=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+i+"']/id",o,{})[0],y=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+i+"']/id",o,{})[0],_=JSON.xpath("/subprocesses[_id eq '"+i+"']/step/id",o,{})[0];JSON.xpath("/processes[_id eq '"+S+"']/subProcesses[_id eq '"+y+"']/steps[_id eq '"+_+"']",o.config,{})[0];if(void 0!=t.preWorkActions){var q=t.preWorkActions;preWorkActions(q,o).then(function(s){e("Assigned to the only user in role. Pre work actions executed")},function(e){I(e)})}else e("Assigned to the only user in role. No pre work actions found.")}else{var v=n.assignedTo;v.name="",v.userId="";var b="";if(void 0!=t.assign.assignment){var b=n.assignment,g={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};b.accept=g,b.message=_getNameByLang(t.assign.assignment.message.i18n);var I={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};b.reject=I;var P={profileId:r,roleId:u,type:"role"};b.value=P,b.profileRoleId=c}e("No users found in list. Assigning blank ")}else console.log("Error in getUsersListByRole undefined"),I(err)},function(e){console.log("Error in getUsersListByRole"),s(e)})}else void 0!=t.assign.swimlane&&(e("swimlane"),console.log("Swimlane implementation !!"))},function(e){s(e)})})}function transition(e,s,t,i,n,o,a,r,c,u){return new Promise(function(p,d){try{for(var l=0,f="",m=0,h=[],v=r.config.processes.filter(function(s){if(s._id==e)return s}),b=v[0].subProcesses.filter(function(e){if(e._id==t)return e}),g=b[0].steps.filter(function(e){if(e._id==n)return e}),I=g[0].transition.filter(function(e){if(e._id==o)return e}),P=0;P<b[0].steps.length;P++)b[0].steps[P]._id==n&&(l=parseInt(b[0].steps[P]._seq));b[0].steps.filter(function(e){m=l+1,parseInt(e._seq)==m&&(f=e._id)}),r.instance.processes.filter(function(n){n.id==e&&n.seq==s&&n.subProcesses.filter(function(e){if(e.id==t&&e.seq==i){var s=e.uuid;c=s,r.subprocesses.filter(function(e){e._id==s&&(h=e)})}})});var S=b[0].steps.length,y=JSON.xpath("/subprocesses[_id eq '"+c+"']",r,{})[0],_=JSON.xpath("/subprocesses[_id eq '"+c+"']/step",r,{})[0];void 0==y.history&&(y.history=[]);var q=function(e){var s=JSON.xpath("/subprocesses[_id eq '"+c+"']/indicators",r,{}),t=!1;void 0!=s&&0!=s.length||(t=!0,s=JSON.xpath("/indicators[workflows/processes[subProcessUUID eq '"+c+"']]",r,{})),void 0==e.indicators&&(e.indicators=[]);for(var i=0;i<s.length;i++)if(t){var n=s[i]._id,o=s[i].model.pending.seq,a=s[i].model.pending.status,u={uuid:n,seq:o,status:a};e.indicators.push(u)}else{var n=s[i].instances[0].uuid,o=JSON.xpath("/indicators[_id eq '"+n+"']/model/pending/seq",r,{})[0],a=JSON.xpath("/indicators[_id eq '"+n+"']/model/pending/status",r,{})[0],u={uuid:n,seq:o,status:a};e.indicators.push(u)}return e};if(void 0!=u&&Object.keys(u).length>0?y.history.push(q(u)):y.history.push(q(_)),void 0!=I[0].transitionAction.goToStep){var N=parseInt(g[0]._seq)+parseInt(I[0].transitionAction.goToStep.default),k="";b[0].steps.filter(function(e){parseInt(e._seq)==m&&(k=e._id)}),step(e,s,t,i,k,N,a,r,c).then(function(e){if(N==S){var s=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});p(s)}else{var s=util.success("Step transition completed successfully.",{subProcessComplete:!1,step:e.data});p(s)}},function(e){d(e)})}else if(void 0!=I[0].transitionAction.goToStepId){var O=I[0].transitionAction.goToStepId.stepId,T=1;b[0].steps.filter(function(e){e._id==O&&(T=parseInt(e._seq))}),step(e,s,t,i,O,T,a,r,c).then(function(e){if(T==S){var s=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});p(s)}else{var s=util.success("Step transition completed successfully.",{subProcessComplete:!1,step:e.data});p(s)}},function(e){d(e)})}else if(void 0!=I[0].transitionAction.stop){var E=v[0].postActions;postActions(E,r).then(function(e){var s=util.success("Step transition completed successfully.Workflow stopped.",{subProcessComplete:!0,step:u});p(s)},function(e){d(e)})}}catch(e){d(e)}})}function postActions(e,s){return new Promise(function(t,i){var n=[];try{var o=JSON.xpath("/config/processes[_id eq '"+app.processID+"']/subProcesses[_id eq '"+app.processId+"']",s,{})[0],a=JSON.xpath("/subprocesses[_id eq '"+app.SCOPE.processUUID+"']/step",s,{})[0];util.syncLoop(e.length,function(t){var r=t.iteration();action(e[r],app.processID,app.processSEQ,app.processId,app.processSeq,o,a,s,{},app.SCOPE.processUUID).then(function(e){n.push(!0),t.next()},function(e){n.push(!1),t.break(),i(e)})},function(){if(n.every(Boolean)){var e=util.success("Post-actions completed successfully.",{});t(e)}else{var s=util.error("WFPreActionsError","Not all post-actions passed.");i(s)}})}catch(e){i(e)}})}function processWorkflowMessage(e,s){var t=e;if(t.indexOf("#INSTANCE_LABEL")!==-1){var i=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+s+"']/label",app.SCOPE.workflow,{})[0];t=t.replace("#INSTANCE_LABEL",i)}if(t.indexOf("#USER_NAME")!==-1){var i=JSON.xpath("/subprocesses[_id eq '"+s+"']/step/assignedTo/name",app.SCOPE.workflow,{})[0];t=t.replace("#USER_NAME",i)}if(t.indexOf("#PROFILE_TITLE")!==-1){var i=app.profile.title;t=t.replace("#PROFILE_TITLE",i)}if(t.indexOf("#PROFILE_TYPE")!==-1){var i=app.SCOPE.APP_CONFIG.name;t=t.replace("#PROFILE_TYPE",i)}if(t.indexOf("#VAR_SPUUID")!==-1){var i=s;t=t.replace("#VAR_SPUUID",i)}return t}function _getName(e,s){if(void 0!==e)for(var t=0;t<e.length;t++)if(e[t]._lang===s)return e[t].value}function _getNameByLang(e){return library.getNameByLang(e)}function preWorkActions(e,s){return new Promise(function(t,i){var n=[];try{var o=JSON.xpath("/config/processes[_id eq '"+app.processID+"']/subProcesses[_id eq '"+app.processId+"']",s,{})[0],a=JSON.xpath("/subprocesses[_id eq '"+app.SCOPE.processUUID+"']/step",s,{})[0];util.syncLoop(e.length,function(t){var r=t.iteration();action(e[r],app.processID,app.processSEQ,app.processId,app.processSeq,o,a,s,{},app.SCOPE.processUUID).then(function(e){n.push(!0),t.next()},function(e){n.push(!1),t.break(),i(e)})},function(){if(n.every(Boolean)){var e=util.success("PreWork-actions completed successfully.",{});t(e)}else{var s=util.error("WFPreActionsError","Not all pre-work-actions passed.");i(s)}})}catch(e){i(e)}})}var util=require("utility"),actionsModule=require("./actions"),helper=require("./helper"),form=require("./form");module.exports={preRequisites:preRequisites,preActions:preActions,postActions:postActions,preWorkActions:preWorkActions,subProcess:subProcess,indicatorDocs:indicatorDocs,task:task,transition:transition,assignUser:assignUser};

},{"./actions":2,"./form":3,"./helper":4,"utility":8}],8:[function(require,module,exports){
"use strict";function success(r,e){return{message:r,data:e}}function warn(r,e){return console.warn(e),{warning:r,data:e}}function error(r,e){var n=new Error("");return n.name=r,n.message=e,n}function syncLoop(r,e,n){var a=0,t=!1,o=!1,u={next:function(){return t&&o&&n?n():void(a<r?(a++,e(u)):(t=!0,n&&n()))},iteration:function(){return a-1},break:function(r){t=!0,o=r}};return u.next(),u}function compare(r,e,n){switch(e){case"greaterThan":return r>n;case"lessThan":return r<n;case"greaterThanEqual":return r>=n;case"lessThanEqual":return r<=n;case"equalTo":return r===n;case"notEqualTo":return r!==n}}function getName(r,e){if(void 0!==r)for(var n=0;n<r.length;n++)if(r[n].i18n._lang===e)return r[n].i18n.value}module.exports={success:success,warn:warn,error:error,syncLoop:syncLoop,compare:compare,getName:getName};

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
