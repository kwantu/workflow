(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Workflow = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function Workflow(e,s,t,o){var r=this;if(""==s||void 0==s)throw util.error("ParamRequired","A community id is required.");if("string"!=typeof s)throw new Error("The community id must be a javascript string.");if(r.communityId=s||"",""==e||void 0==e)throw util.error("ParamRequired","A profile id is required.");if("string"!=typeof e)throw new Error("The profile id must be a javascript string.");if(r.profile=e||"",""==t||void 0==t)throw util.error("ParamRequired","An app id is required.");if("string"!=typeof t)throw new Error("The app id must be a javascript string.");if(r.app=t||"",""==o||void 0==o)throw util.error("ParamRequired","A workflow configuration is required.");"object"!=typeof o?r.config=JSON.parse(o):r.config=o,r.instance,r.subprocesses=[],r.indicators=[]}var Process=require("./lib/process"),util=require("utility"),userInterface=require("./lib/interface"),helper=require("./lib/helper");Workflow.prototype.getProfile=function(){return this.profile},Workflow.prototype.getApp=function(){return this.app},Workflow.prototype.getConfig=function(){return this.config},Workflow.prototype.getInstance=function(){return this.instance},Workflow.prototype.setInstance=function(e){this.instance=e},Workflow.prototype.getSubProcesses=function(){return this.subprocesses},Workflow.prototype.setSubProcesses=function(e){this.subprocesses=e},Workflow.prototype.getIndicators=function(){return this.indicators},Workflow.prototype.setIndicators=function(e){this.indicators=e},Workflow.prototype.create=function(){var e=this;return new Promise(function(s,t){try{if(void 0!==e.instance){var o=util.warn("Instance already exists.",e);s(o)}else{var r={_id:"",version:"",type:"workflowInstance",processes:[],channels:["community_"+app.SCOPE.getCommunityId(),"profile_"+app.SCOPE.profileId,"application_"+app.SCOPE.applicationId,"community_"+app.SCOPE.getCommunityId()+"_application_"+app.SCOPE.applicationId]};r._id="_local/"+e.profile+":processes",r.version=e.config.version,e.instance=r;var i=util.success("Workflow processes instance created successfully.",e);s(i)}}catch(e){t(e)}})},Workflow.prototype.initialise=function(e,s,t){var o=this;return new Promise(function(r,i){try{var n=[];if(""!==e&&void 0!==e){if(n=o.config.processes.filter(function(s){if(s._id==e)return s}),void 0==n[0]._id){var c=util.error("WFConfigError","No valid process definition found with process id: "+e);i(c)}}else n.push(o.config.processes[0]),e=o.config.processes[0]._id;var a=function(e){for(var s="",t=0;t<e.length-1;t++)s=s+"'"+e[t]+"',";return"("+s+"'"+e[e.length-1]+"')"},u=n[0].subProcesses[0]._id,p=n[0].subProcesses[0].instanceType,f=JSON.xpath("indicators/_id",n[0].subProcesses[0],{}),d=function(e){var s=JSON.xpath("/indicators[setId = "+a(e)+" and cardinality eq 'single' ]/setId",app.SCOPE.APP_CONFIG,{}),t=s.length;if(t>0){var r=JSON.xpath("/processes/subProcesses[indicators/_id = "+a(s)+"]/_id",o.config,{}),i=JSON.xpath("count(/instance/processes/subProcesses[id = "+a(r)+" and complete = false()])",o,{})[0];return 0==i}if(void 0!=p.newSequence){var i=JSON.xpath("count(/instance/processes/subProcesses[id eq '"+u+"' and complete eq 'false'])",o,{})[0];return 0==i}return void 0!=p.newInstance,!0};if(d(f)){var l=[];o.instance.processes.filter(function(s){s.id==e&&l.push(s)});var h=l.length+1,v={id:"",seq:"",subProcesses:[]};v.id=e,v.seq=h,o.instance.processes.push(v);var m=n[0].subProcesses[0]._id,P=1;o.instance.processes.filter(function(s){s.id==e&&s.seq==h&&(P=s.subProcesses.length+1)});var b=generateUUID();void 0!=s.subprocessUUID&&s.subprocessUUID.length>0&&(b=s.subprocessUUID);var g={communityId:app.SCOPE.communityId,uuid:b,userId:_lclx.SUBSCRIPTIONS.userId,transactionType:"subProcess",documents:[{document:b,rev:"0"}]};dao.startTransaction(g).then(function(n){Process.subProcess(b,e,h,m,P,t,s,o).then(function(s){var n=s.data._id,c=s.data.groupKey;void 0==t&&(t="");var a={id:m,subprofileId:t,seq:s.data["meta-data"].subProcessInsSeq,uuid:n,groupKey:c,label:s.data.label};v.subProcesses.push(a);for(var u=0;u<o.instance.processes.length;u++){var p=o.instance.processes[u];p.id==e&&p.seq==h&&o.instance.processes.splice(u,1,v)}var f=s.data.indicators,d=s.data.step;Process.indicatorDocs(e,f,d,o,n).then(function(e){var s=util.success("Process: "+o.config.processes[0]._id+" initialized successfully.",a);r(s)},function(e){i(e)})},function(s){o.instance.processes=o.instance.processes.filter(function(s){return!(s.id==e&&s.seq==h)}),console.log(s),i(s)})}).catch(function(e){console.log(e),i(void 0!=e.responseJSON&&void 0!=e.responseJSON.message?e.responseJSON.message:void 0!=e.responseText?e.responseText:e)})}else i("Cannot create workflow as other process using same SDO is not complete")}catch(e){i(e)}})},Workflow.prototype.transition=function(e,s,t,o,r,i,n,c){var a=this;return new Promise(function(o,u){try{var p=JSON.xpath("/subprocesses[_id eq '"+c+"']/step",app.SCOPE.workflow,{})[0],f=JSON.xpath("/processes[_id eq '"+e+"']/subProcesses[_id eq '"+t+"']/steps[_id eq '"+r+"']",a.config,{})[0],d=JSON.xpath("/subprocesses[_id eq '"+c+"']/meta-data/subProcessInsSeq",app.SCOPE.workflow,{})[0],l=function(r,i){a.instance.processes.filter(function(n){n.id==e&&n.seq==s&&n.subProcesses.filter(function(e){e.id==t&&a.subprocesses.filter(function(e){if(e._id==c)if("step"==r){e.step=i.data.step;var s=util.success(i.message,e);o(s)}else if("stepComplete"==r){e.step=i.data.step,e.complete=!0;var t=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+e._id+"']",app.SCOPE.workflow,{})[0];t.complete=!0;var s=util.success(i.message,e.step);o(s)}})})})},h={};void 0!=f.function.task&&void 0!=f.function.task.postActions?(h=f.function.task.postActions,Process.postActions(h,a,c).then(function(o){Process.transition(e,s,t,d,r,i,n,a,c,p).then(function(e){e.data.subProcessComplete?l("stepComplete",e):l("step",e)},function(e){u(e)})},function(e){u(e)})):void 0!=f.function.server&&void 0!=f.function.server.postActions?(h=f.function.server.postActions,Process.postActions(h,a,c).then(function(o){Process.transition(e,s,t,d,r,i,n,a,c,p).then(function(e){e.data.subProcessComplete?l("stepComplete",e):l("step",e)},function(e){u(e)})},function(e){u(e)})):Process.transition(e,s,t,d,r,i,n,a,c,p).then(function(e){e.data.subProcessComplete?l("stepComplete",e):l("step",e)},function(e){u(e)})}catch(e){u(e)}})},Workflow.prototype.assignUser=function(e,s,t,o,r,i){var n=this;return new Promise(function(c,a){try{var u=JSON.xpath("/subprocesses[_id eq '"+i+"']",app.SCOPE.workflow,{})[0],p=u._rev;({communityId:app.SCOPE.communityId,uuid:i,userId:_lclx.SUBSCRIPTIONS.userId,transactionType:"subProcess",documents:[{document:i,rev:p}]});Process.assignUser(e,s,t,o,r,i,n).then(function(e){c(e)},function(e){a(e)})}catch(e){a(e)}})},Workflow.prototype.ui=function(){var e=this;return{getProcess:function(s,t){return new Promise(function(o,r){try{userInterface.getProcess(s,t,e).then(function(e){o(e)},function(e){r(e)})}catch(e){r(e)}})}}},Workflow.prototype.getNodeValue=function(e,s){var t=this;return new Promise(function(o,r){try{helper.getNodeValue(e,t,s).then(function(e){o(e)},function(e){r(e)})}catch(e){r(e)}})},Workflow.prototype.takeAssignment=function(e){var s=this;return new Promise(function(t,o){try{var r=JSON.xpath("/subprocesses[_id eq '"+e+"']",s,{})[0],i=JSON.xpath("/step/assignedTo",r,{})[0];void 0==r.step.assignmentHistory&&(r.step.assignmentHistory=[]),""!=i.userId&&""!=i.name&&r.step.assignmentHistory.push(JSON.parse(JSON.stringify(i))),i.name=_lclx.SESSION.firstName+" "+_lclx.SESSION.lastName,i.userId=_lclx.SUBSCRIPTIONS.userId+"",i.dateTime=moment().format(),i.type=ASSIGNMENT_TYPE_ACCEPTANCE,i.dueDateTime="",i.by=_lclx.SUBSCRIPTIONS.userId+"";var n=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+e+"']/id",s,{})[0],c=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+e+"']/id",s,{})[0],a=JSON.xpath("/subprocesses[_id eq '"+e+"']/step/id",s,{})[0],u=JSON.xpath("/processes[_id eq '"+n+"']/subProcesses[_id eq '"+c+"']/steps[_id eq '"+a+"']",s.config,{})[0];if(void 0!=u.function.task.preWorkActions){var p=u.function.task.preWorkActions;Process.preWorkActions(p,s).then(function(e){t(s)},function(e){o(e)})}else t(s)}catch(e){o(e)}})},Workflow.prototype.condition=function(e,s){var t=this;return new Promise(function(o,r){try{var i=e.operator,n=e.value.data;if(void 0!=e.subject.indicator){var c=e.subject.indicator.setId,a=e.subject.indicator.modelScope,u=e.subject.indicator.elementPath;if("subProcess"==e.subject.indicator.context){for(var p=JSON.xpath("/subprocesses[_id eq '"+s+"']/indicators[id eq '"+c+"']/instances[1]/uuid",t,{})[0],f=JSON.xpath("/indicators[_id eq '"+p+"']",t,{})[0],d=f.model[a].data[c],l=d,h=""==u?[]:u.split(/['"\[\].]+/),v=0;v<h.length;v++)""!=h[v]&&(l=l[h[v]]);var m=l;helper.getNodeValue(n,t,s).then(function(e){var s=helper.compare(m,i,e);o(s)},function(e){r(e)})}else if("subProfile"==e.subject.indicator.context){for(var f=JSON.xpath("/indicators[category/term eq '"+c+"']",t,{})[0],d=f.model[a].data[c],l=d,h=""==u?[]:u.split(/['"\[\].]+/),v=0;v<h.length;v++)""!=h[v]&&(l=l[h[v]]);var m=l;helper.getNodeValue(n,t,s).then(function(e){var s=helper.compare(m,i,e);o(s)},function(e){r(e)})}else r("Not implemented")}else if(void 0!=e.subject.indicatorWrapper)r("Not implemented");else if(void 0!=e.subject.variable)helper.getNodeValue(n,t,s).then(function(n){helper.getNodeValue(e.subject,t,s).then(function(e){var s=helper.compare(e,i,n);o(s)},function(e){r(e)})},function(e){r(e)});else if(void 0!=e.subject.subProcess){for(var u=e.subject.subProcess.elementPath,P=JSON.xpath("/subprocesses[_id eq '"+s+"']",t,{})[0],l=P,h=""==u?[]:u.split(/['"\[\].]+/),v=0;v<h.length;v++)""!=h[v]&&(l=l[h[v]]);var m=l;helper.getNodeValue(n,t,s).then(function(e){var s=helper.compare(m,i,e);o(s)},function(e){r(e)})}}catch(e){r(e)}})},module.exports=Workflow;

},{"./lib/helper":4,"./lib/interface":5,"./lib/process":7,"utility":8}],2:[function(require,module,exports){
"use strict";var util=require("utility"),nodeValue=require("./nodeValue"),form=require("./form"),helper=require("./helper"),gatekeeper=new GK,community=function(){return{createCommunity:function(e,i,t){return new Promise(function(e,o){var a=worker.getWorkerWrapper(),n="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(n=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=_lclx.SUBSCRIPTIONS.userId,a.profileId=t.profile,a.subProcessUUID=i,a.subprofileId=n,a.channels.push("follow"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=JSON.xpath("/indicators[category/term eq 'Community']/_id",t,{})[0],r={createCommunity:{newCommunityId:t.profile,indicatorUUID:{Community:s}}};a.action=r,worker.send(a).then(function(o){worker.setWorkerInfoInSubprocess(a,t,i);var n=util.success("Worker processed successfully.",o);e(n)},function(e){o(e)})})},userJoinCommunity:function(e,i,t){return new Promise(function(e,i){})},releaseAdoptedApplication:function(e,i,t){return new Promise(function(e,o){var a=worker.getWorkerWrapper(),n="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(n=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=_lclx.SUBSCRIPTIONS.userId,a.profileId=t.profile,a.subProcessUUID=i,a.subprofileId=n,a.channels.push("follow"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'adoptedApplication']/instances[1]/uuid",t,{})[0],r={releaseAdoptedApplication:{communityId:t.profile,indicatorUUID:{adoptedApplication:s}}};a.action=r,worker.send(a).then(function(o){worker.setWorkerInfoInSubprocess(a,t,i);var n=util.success("Worker processes successfully.",o);e(n)},function(e){o(e)})})}}}(),application=function(){return{createAppDefinition:function(e,i,t){return new Promise(function(e,o){var a=worker.getWorkerWrapper(),n="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(n=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=_lclx.SUBSCRIPTIONS.userId,a.profileId=t.profile,a.subProcessUUID=i,a.subprofileId=n,a.channels.push("follow"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=JSON.xpath("/indicators[category/term eq 'Application']/_id",t,{})[0],r={createApplication:{newApplicationId:t.profile,indicatorUUID:{Application:s}}};a.action=r,worker.send(a).then(function(o){worker.setWorkerInfoInSubprocess(a,t,i);var n=util.success("Worker processes successfully.",o);e(n)},function(e){o(e)})})},buildApplication:function(e,i,t){return new Promise(function(e,o){var a=worker.getWorkerWrapper(),n="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(n=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=_lclx.SUBSCRIPTIONS.userId,a.profileId=t.profile,a.subProcessUUID=i,a.subprofileId=n,a.channels.push("follow"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'PublishApplication']/instances[1]/uuid",t,{})[0],r=JSON.xpath("/indicators[category/term eq 'ApplicationDefinition']/_id",t,{})[0],c=JSON.xpath("/indicators[category/term eq 'Roles']/_id",t,{})[0],p=JSON.xpath("/indicators[category/term eq 'Application']/_id",t,{})[0],d=JSON.xpath("/indicators[category/term eq 'AppPermissions']/_id",t,{})[0],u={buildApplication:{applicationId:t.profile,indicatorUUID:{PublishApplication:s,ApplicationDefinition:r,Roles:c,Application:p,AppPermissions:d}}};a.action=u,worker.send(a).then(function(o){worker.setWorkerInfoInSubprocess(a,t,i);var n=util.success("Worker processes successfully.",o);e(n)},function(e){o(e)})})},applicationAdoption:function(e,i,t){return new Promise(function(e,o){var a=worker.getWorkerWrapper(),n="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(n=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=_lclx.SUBSCRIPTIONS.userId,a.profileId=t.profile,a.subProcessUUID=i,a.subprofileId=n,a.channels.push("follow"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'Adoption']/instances[1]/uuid",t,{})[0],r=JSON.xpath("/indicators[category/term eq 'PublishApplication']/_id",t,{})[0],c=JSON.xpath("/indicators[category/term eq 'Application']/_id",t,{})[0],p={adoptApplication:{applicationId:t.profile,indicatorUUID:{Adoption:s,PublishApplication:r,Application:c}}};a.action=p,worker.send(a).then(function(o){worker.setWorkerInfoInSubprocess(a,t,i);var n=util.success("Worker processes successfully.",o);e(n)},function(e){o(e)})})},createTaxonomy:function(e,i,t){return new Promise(function(e,o){var a=worker.getWorkerWrapper(),n="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(n=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=_lclx.SUBSCRIPTIONS.userId,a.profileId=t.profile,a.subProcessUUID=i,a.subprofileId=n,a.channels.push("follow"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'Taxonomy']/instances[1]/uuid",t,{})[0],r={createTaxonomy:{taxonomyUUID:s}};a.action=r,worker.send(a).then(function(o){worker.setWorkerInfoInSubprocess(a,t,i);var n=util.success("Worker processes successfully.",o);e(n)},function(e){o(e)})})}}}(),performance=function(){return{unlockPeriod:function(e,i,t){return new Promise(function(e,o){var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",t,{})[0],n=JSON.xpath("/indicators[id eq '"+PERIOD_SET_ID+"' or id eq '"+AUDIT_PERIOD_SET_ID+"']/instances/uuid",a,{})[0],s=a.dates.valid;library.unlockPeriod(n,s,i).then(function(i){var t=util.success("Unlock period.",i);e(t)},function(e){o(e)})})},setModelStatus:function(e,i,t){return new Promise(function(o,a){var n=JSON.xpath("/subprocesses[_id eq '"+i+"']",t,{})[0],s=JSON.xpath("/indicators[id eq '"+PERIOD_SET_ID+"' or id eq '"+AUDIT_PERIOD_SET_ID+"']/instances/uuid",n,{})[0],r=n.dates.valid,c=JSON.xpath("/label",e,{})[0],p=helper.getLanguageMessage(c);library.setPeriodStatus(s,r,p,i).then(function(e){var i=util.success("setModelStatus",e);o(i)},function(e){a(e)})})},lockPerformanceModel:function(e,i,t){return new Promise(function(e,o){var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",t,{})[0],n=JSON.xpath("/indicators[id eq '"+PERFORMANCE_SET_ID+"']/instances/uuid",a,{})[0],s=a.dates.valid;library.lockPerformanceModel(n,s,i).then(function(i){var t=util.success("Lock performance model.",i);e(t)},function(e){o(e)})})}}}(),sdo=function(){return{create:function(e,i,t){return new Promise(function(e,o){var a=worker.getWorkerWrapper(),n="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(n=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=_lclx.SUBSCRIPTIONS.userId,a.profileId=t.profile,a.subProcessUUID=i,a.subprofileId=n,a.channels.push("follow"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'SDO']/instances[1]/uuid",t,{})[0],r={createSDO:{sdoUUID:s}};a.action=r,worker.send(a).then(function(o){worker.setWorkerInfoInSubprocess(a,t,i);var n=util.success("Worker processes successfully.",o);e(n)},function(e){o(e)})})}}}(),taxonomy=function(){return{create:function(e,i,t){return new Promise(function(e,o){var a=worker.getWorkerWrapper(),n="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(n=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=_lclx.SUBSCRIPTIONS.userId,a.profileId=t.profile,a.subProcessUUID=i,a.subprofileId=n,a.channels.push("follow"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'Taxonomy']/instances[1]/uuid",t,{})[0],r={createTaxonomy:{taxonomyUUID:s}};a.action=r,worker.send(a).then(function(o){worker.setWorkerInfoInSubprocess(a,t,i);var n=util.success("Worker processes successfully.",o);e(n)},function(e){o(e)})})}}}(),subProcessInstance=function(){return{setTitle:function(e,i,t,o){return new Promise(function(e,a){var n=JSON.xpath("/subprocesses[_id eq '"+i+"']",app.SCOPE.workflow,{})[0],s=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+i+"']",app.SCOPE.workflow,{})[0];void 0!=s&&(s.label=t),n.label=t;var r=[],c={};c.model=o.subprocesses,r.push(c);var p=util.success("Subprocess setTitle success.",o.subprocesses);e(p)})},setValidDate:function(e,i,t,o){return new Promise(function(e,a){var n=JSON.xpath("/subprocesses[_id eq '"+i+"']",app.SCOPE.workflow,{})[0];n.dates.valid=t;var s=[],r={};r.model=n,s.push(r);var c=util.success("valid date set.",o.subprocesses);e(c)})},setSPStatus:function(e,i,t,o){return new Promise(function(e,a){var n=JSON.xpath("/subprocesses[_id eq '"+i+"']",app.SCOPE.workflow,{})[0];n.spStatus=t;var s=[],r={};r.model=o.subprocesses,s.push(r);var c=util.success("Subprocess spStatus success.",o.subprocesses);e(c)})}}}(),variables=function(){return{setVariable:function(e,i,t){return new Promise(function(o,a){helper.getNodeValue(e.data,i,t).then(function(n){var s=e.scope,r=e.name,c=e.variableType,p=JSON.xpath("/subprocesses[_id eq '"+t+"']/dates/valid",i,{})[0];switch(s){case"profile":var d=i.profile,u=d+":variables",l=app.SCOPE.txn;dao.get(u).then(function(e){for(var s={},d=function(){if("periodic"==c){var d=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+t+"']/id]/type",i,{})[0],u=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+t+"']/id])",i,{})[0]+1;if(d==PROCESS_TYPE_SUBPROFILE){var l=library.getSubprofileSubprocessIds();u=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+t+"']/id and uuid = "+l+"])",i,{})[0]+1}var f={subProcessUUID:t,user:{userName:_lclx.SUBSCRIPTIONS.username,userId:_lclx.SUBSCRIPTIONS.userProfileId},seq:u,validDate:p,value:n};if(void 0!=e[r]){for(var m=e,I=""==r?[]:r.split(/['"\[\].]+/),g=0;g<I.length;g++)""!=I[g]&&(m=m[I[g]]);m.push(f)}else e[r]=[f]}else e[r]=n;dao.save(e).then(function(e){s.rev=e.rev,o("Variable set successfully")}).catch(function(e){a("Failed to set Variable")})},f=!1,m=0;m<l.documents.length;m++)u==l.documents[m].document&&(s=l.documents[m],f=!0);f?d():(l=JSON.parse(JSON.stringify(app.SCOPE.txn)),l.documents=[],s={document:u,rev:void 0==e._rev?"0":e._rev},l.documents.push(s),app.SCOPE.txn.documents.push(s),dao.updateTransaction(l).then(function(e){d()}).catch(function(e){console.log(e),a(void 0!=e.responseJSON&&void 0!=e.responseJSON.message?e.responseJSON.message:void 0!=e.responseText?e.responseText:e)}))}).catch(function(e){var s={_id:u};if(s.channels=app.profile.channels,"periodic"==c){var d=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+t+"']/id]/type",i,{})[0],l=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+t+"']/id])",i,{})[0]+1;if(d==PROCESS_TYPE_SUBPROFILE){var f=library.getSubprofileSubprocessIds();l=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+t+"']/id and uuid = "+f+"])",i,{})[0]+1}s[r]=[{subProcessUUID:t,user:{userName:_lclx.SUBSCRIPTIONS.username,userId:_lclx.SUBSCRIPTIONS.userProfileId},seq:l,validDate:p,value:n}]}else s[r]=n;var m=JSON.parse(JSON.stringify(app.SCOPE.txn));m.documents=[];var I={document:u,rev:void 0==s._rev?"0":s._rev};m.documents.push(I),app.SCOPE.txn.documents.push(I),dao.updateTransaction(m).then(function(e){dao.save(s).then(function(e){I.rev=e.rev,o("Variable set successfully")}).catch(function(e){a("Failed to set Variable")})}).catch(function(e){console.log(e),a(void 0!=e.responseJSON&&void 0!=e.responseJSON.message?e.responseJSON.message:void 0!=e.responseText?e.responseText:e)})});break;case"subProcessInstance":o("not implemented");break;case"step":o("not implemented");break;case"subProfileSubProcessInstance":var f=app.profile.subprofileId,m=f+":variables",l=app.SCOPE.txn;dao.get(m).then(function(e){for(var s={},d=function(){if("periodic"==c){var d=library.getSubprofileSubprocessIds(),u=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+t+"']/id and uuid = "+d+"])",i,{})[0]+1,l={subProcessUUID:t,user:{userName:_lclx.SUBSCRIPTIONS.username,userId:_lclx.SUBSCRIPTIONS.userProfileId},seq:u,validDate:p,value:n};if(void 0!=e[r]){for(var f=e,m=""==r?[]:r.split(/['"\[\].]+/),I=0;I<m.length;I++)""!=m[I]&&(f=f[m[I]]);f.push(l)}else e[r]=[l]}else e[r]=n;dao.save(e).then(function(e){s.rev=e.rev,o("Variable at subprofile set successfully")}).catch(function(e){a("Failed to set Variable at subprofile")})},u=!1,f=0;f<l.documents.length;f++)m==l.documents[f].document&&(s=l.documents[f],u=!0);u?d():(l=JSON.parse(JSON.stringify(app.SCOPE.txn)),l.documents=[],s={document:m,rev:void 0==e._rev?"0":e._rev},l.documents.push(s),app.SCOPE.txn.documents.push(s),dao.updateTransaction(l).then(function(e){d()}).catch(function(e){console.log(e),a(void 0!=e.responseJSON&&void 0!=e.responseJSON.message?e.responseJSON.message:void 0!=e.responseText?e.responseText:e)}))}).catch(function(e){var s={_id:m};if(s.channels=app.profile.channels,"periodic"==c){var d=library.getSubprofileSubprocessIds(),u=JSON.xpath("count(/subprocesses[_id eq '"+t+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+t+"']/id and _id = /subprocesses[_id = "+d+"]/_id])",i,{})[0]+1;s[r]=[{subProcessUUID:t,user:{userName:_lclx.SUBSCRIPTIONS.username,userId:_lclx.SUBSCRIPTIONS.userProfileId},seq:u,validDate:p,value:n}]}else s[r]=n;var l=JSON.parse(JSON.stringify(app.SCOPE.txn));l.documents=[];var f={document:m,rev:void 0==s._rev?"0":s._rev};l.documents.push(f),app.SCOPE.txn.documents.push(f),dao.updateTransaction(l).then(function(e){dao.save(s).then(function(e){f.rev=e.rev,o("Variable at subprofile set successfully")}).catch(function(e){a("Failed to set Variable at subprofile")})}).catch(function(e){console.log(e),a(void 0!=e.responseJSON&&void 0!=e.responseJSON.message?e.responseJSON.message:void 0!=e.responseText?e.responseText:e)})})}},function(e){a("getNodeValue value not found.")})})}}}(),notification=function(){return{sendNotificationWorker:function(e,i,t){return new Promise(function(o,a){var n=function(e){return new Promise(function(o,a){var n={};if(void 0!=e.recipients.role)n.role=e.recipients.role,o(n);else if(void 0!=e.recipients.profileRole)n.profileRole={},n.profileRole.role=e.recipients.profileRole.role,n.profileRole.profile=e.recipients.profileRole.profile,o(n);else if(void 0!=e.recipients.subProfileRole)n.subProfileRole={},n.subProfileRole.role=e.recipients.subProfileRole.role,n.subProfileRole.subProfileCategory=e.recipients.subProfileRole.subProfileCategory,n.subProfileRole.profile=e.recipients.subProfileRole.profile,o(n);else if(void 0!=e.recipients.function)n.function={},n.function.users={},helper.getNodeValue(e.recipients.function.users,i,t).then(function(e){n.function.users=e,o(n)},function(e){rej(e)});else if(void 0!=e.recipients.stepAssignee)n.stepAssignee={},n.stepAssignee.role=e.recipients.stepAssignee.role,o(n);else if(void 0!=e.recipients.stepAssigneeFromStep){n.stepAssigneeFromStep={};var s=e.recipients.stepAssigneeFromStep.stepId;n.stepAssigneeFromStep.stepId=s;for(var r=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],c={},p=0;p<r.history.length;p++)r.history[p].id==s&&(c=r.history[p]);if(void 0!=c.assignmentHistory&&c.assignmentHistory.length>0){var d=c.assignmentHistory[c.assignmentHistory.length-1];n.stepAssigneeFromStep.userId=d.userId}o(n)}else if(void 0!=e.recipients.indicator){n.indicator={};var u=e.recipients.indicator.indicatorSetId,l=e.recipients.indicator.elementId,f=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+u+"']/instances/uuid",i,{})[0],m=JSON.xpath("/indicators[_id eq '"+f+"']",i,{})[0],I="/model/pending/data/"+u+"/"+l,g=JSON.xpath(I,m,{})[0];n.indicator.userId=g,o(n)}})},s=new NotificatioWorker(app),r=JSON.xpath("/subprocesses[_id eq '"+t+"']/meta-data/subprofileId",i,{})[0],c=DOMAIN.replace("exist/rest",""),p="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(p=app.profile.subprofileId);var d={notification:{message:{},messageType:"","meta-data":{applicationId:i.app,communityId:i.communityId,profileId:i.profile,subProcessUUID:t,subProfileId:r},notificationType:"",subprofileId:p,priority:"",recipients:{},url:c,keys:{profile:{name:"",id:""},community:{name:"",id:""},application:{name:"",id:""},currentUser:{name:"",id:""},subProcess:{name:"",id:"",validDate:"",dueDate:""},notification:{createdDateTime:moment().format()},step:{stepCreatedDateTime:"",stepName:"",stepId:""},node:{title:""},userDefined:[]}}},u=JSON.xpath("/indicators[_id eq '"+app.profile._id+"']/title",i,{})[0];d.notification.keys.profile.name=u,d.notification.keys.profile.id=app.profile._id,d.notification.keys.community.name=app.getNameByLang(_lclx.COMMUNITY_CONFIG.communityName),d.notification.keys.community.id=_lclx.COMMUNITY_CONFIG.communityId;var l=JSON.xpath("/applications[appId eq '"+app.SCOPE.applicationId+"']",_lclx.COMMUNITY_CONFIG,{})[0];d.notification.keys.application.name=app.getNameByLang(l.name),d.notification.keys.application.id=l.appId,d.notification.keys.currentUser.name=_lclx.SESSION.firstName+" "+_lclx.SESSION.lastName,d.notification.keys.currentUser.id=_lclx.SUBSCRIPTIONS.userId;var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];void 0!=e.sdoKeys&&e.sdoKeys.forEach(function(e){if(""!=e.field&&""!=e.repStr&&""!=e.setId){var t={};i.indicators.forEach(function(i){i.category.term==e.setId&&(t=i)});var o="";void 0!=t.model&&void 0!=t.model.pending&&void 0!=t.model.pending.data&&void 0!=t.model.pending.data[e.setId]&&void 0!=t.model.pending.data[e.setId][e.field]&&(o=t.model.pending.data[e.setId][e.field]),d.notification.keys.userDefined.push({key:"#"+e.field+"#",value:o})}}),d.notification.keys.subProcess.name=f.label,d.notification.keys.subProcess.id=t,d.notification.keys.subProcess.validDate=f.dates.valid,d.notification.keys.subProcess.dueDate=f.dates.due;try{var m=f.step;d.notification.keys.step.stepCreatedDateTime=m.dateTimeCreated,d.notification.keys.step.stepId=m.id;var I=JSON.xpath("/processes/subProcesses[_id eq '"+f.id+"']/steps[_id eq '"+m.id+"']",app.SCOPE.workflow.config,{})[0];d.notification.keys.step.stepName=app.getNameByLang(I.name)}catch(e){}var g=JSON.xpath("/indicators[_id eq '"+p+"']/title",app.SCOPE.workflow,{})[0];if(void 0==g?d.notification.keys.node.title="":d.notification.keys.node.title=g,d.notification.message.default=e.message.default,d.notification.message.title=e.message.title,void 0!=e.message.rtf&&(d.notification.message.rtf={},void 0!=e.message.rtf.template?d.notification.message.rtf.template=e.message.rtf.template:void 0!=e.message.rtf.markup&&(d.notification.message.rtf.markup=e.message.rtf.markup)),d.notification.messageType=e.messageType,d.notification.notificationType=e.notificationType,d.notification.priority=e.priority,void 0!=e.notificationAction&&(d.notification.notificationAction={},d.notification.notificationAction.label=e.notificationAction.label,void 0!=e.notificationAction.action.URI?(d.notification.notificationAction.action={},d.notification.notificationAction.action.URI=e.notificationAction.action.URI):void 0!=e.notificationAction.action.goto&&(d.notification.notificationAction.action={},d.notification.notificationAction.action.goto=e.notificationAction.action.goto)),void 0!=e.schedule){var y=e.schedule.executeCommand,S={dateTime:"",unit:"",factor:""};if(void 0!=y.now)S.dateTime=moment().format();else if(void 0!=y.exact)S.dateTime=y.exact.dateTime;else if(void 0!=y.dueDate){var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],h="",v=f.dates.due;h=""!=v?moment(v,"YYYY-MM-DD"):moment().format(),S.dateTime=h,S.factor=y.dueDate.factor,S.unit=y.dueDate.unit}else if(void 0!=y.validDate){var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],h="",v=f.dates.valid;h=""!=validDate?moment(validDate,"YYYY-MM-DD"):moment().format(),S.dateTime=h,S.factor=y.validDate.factor,S.unit=y.validDate.unit}else if(void 0!=y.stepCreatedDate){var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],h="",b=f.step.dueDateTime;h=""!=b?moment(b).format():moment().format(),S.dateTime=h,S.factor=y.stepCreatedDate.factor,S.unit=y.stepCreatedDate.unit}else S.dateTime=moment().format();s.setSchedule(S)}"string"==typeof e?dao.getConfig(e).then(function(r){e=assignmentObject,n(e).then(function(e){d.notification.recipients=e,s.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button."),s.setAction(d);var a=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];s.setContext({step:{stepDateTime:a.step.dateTimeCreated}}),s.send().then(function(e){console.log(s);var i=util.success("Notification Worker processes successfully.",e);o(i)},function(e){o(e)})}).catch(function(e){console.log("Notification - getRecipients failed with error "+e),a(e)})}).catch(function(e){o(e)}):n(e).then(function(e){d.notification.recipients=e,s.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button."),s.setAction(d);var a=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];s.setContext({step:{stepDateTime:a.step.dateTimeCreated}}),s.send().then(function(e){console.log(s);var i=util.success("Notification Worker processes successfully.",e);o(i)},function(e){o(e)})}).catch(function(e){console.log("Notification - getRecipients failed with error "+e),a(e)})})},reAssignmentNotification:function(e,i,t,o){return new Promise(function(a,n){var s=function(e){return new Promise(function(i,t){var o={};o.function={},o.function.users={},o.function.users=e.id,i(o)})},r=new NotificatioWorker(app),c=JSON.xpath("/subprocesses[_id eq '"+t+"']/meta-data/subprofileId",i,{})[0],p=DOMAIN.replace("exist/rest",""),d={notification:{message:{rtf:{}},messageType:"","meta-data":{applicationId:i.app,communityId:i.communityId,profileId:i.profile,subProcessUUID:t,subProfileId:c},notificationType:"workflow",priority:"",recipients:{},url:p,keys:{profile:{name:"",id:""},community:{name:"",id:""},application:{name:"",id:""},currentUser:{name:"",id:""},subProcess:{name:"",id:"",validDate:"",dueDate:""},notification:{createdDateTime:moment().format()},step:{stepCreatedDateTime:"",stepName:"",stepId:""},node:{title:""},userDefined:[]}}},u=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];void 0!=e.reAssignment.sdoKeys&&e.reAssignment.sdoKeys.forEach(function(e){if(""!=e.field&&""!=e.repStr&&""!=e.setId){var t={};i.indicators.forEach(function(i){i.category.term==e.setId&&(t=i)});var o="";void 0!=t.model&&void 0!=t.model.pending&&void 0!=t.model.pending.data&&void 0!=t.model.pending.data[e.setId]&&void 0!=t.model.pending.data[e.setId][e.field]&&(o=t.model.pending.data[e.setId][e.field]),d.notification.keys.userDefined.push({key:"#"+e.field+"#",value:o})}});var l=JSON.xpath("/indicators[_id eq '"+app.profile._id+"']/title",i,{})[0];d.notification.keys.profile.name=l,d.notification.keys.profile.id=app.profile._id,d.notification.keys.community.name=app.getNameByLang(_lclx.COMMUNITY_CONFIG.communityName),d.notification.keys.community.id=_lclx.COMMUNITY_CONFIG.communityId;var f=JSON.xpath("/applications[appId eq '"+app.SCOPE.applicationId+"']",_lclx.COMMUNITY_CONFIG,{})[0];d.notification.keys.application.name=app.getNameByLang(f.name),d.notification.keys.application.id=f.appId,d.notification.keys.currentUser.name=_lclx.SESSION.firstName+" "+_lclx.SESSION.lastName,d.notification.keys.currentUser.id=_lclx.SUBSCRIPTIONS.userId,d.notification.keys.subProcess.name=JSON.xpath("/subprocesses[_id eq '"+t+"']/label",i,{})[0],d.notification.keys.subProcess.id=t,d.notification.keys.subProcess.validDate=u.dates.valid,d.notification.keys.subProcess.dueDate=u.dates.due;var m=u.step;d.notification.keys.step.stepCreatedDateTime=m.dateTimeCreated,d.notification.keys.step.stepId=m.id;var I=JSON.xpath("/processes/subProcesses[_id eq '"+u.id+"']/steps[_id eq '"+m.id+"']",app.SCOPE.workflow.config,{})[0];d.notification.keys.step.stepName=app.getNameByLang(I.name);var g=JSON.xpath("/indicators[_id eq '"+c+"']/title",app.SCOPE.workflow,{})[0];if(void 0==g?d.notification.keys.node.title="":d.notification.keys.node.title=g,d.notification.message.default="",d.notification.message.title=e.reAssignment.title,d.notification.message=e.reAssignment.message,d.notification.messageType=e.reAssignment.messageType,d.notification.priority=e.reAssignment.priority,void 0!=e.reAssignment.notificationAction&&(d.notification.notificationAction={},d.notification.notificationAction.label=e.reAssignment.notificationAction.label,void 0!=e.reAssignment.notificationAction.action.URI?(d.notification.notificationAction.action={},d.notification.notificationAction.action.URI=e.reAssignment.notificationAction.action.URI):void 0!=e.reAssignment.notificationAction.action.goto&&(d.notification.notificationAction.action={},d.notification.notificationAction.action.goto=e.reAssignment.notificationAction.action.goto)),void 0!=e.reAssignment.schedule){var y=e.reAssignment.schedule.executeCommand,S={dateTime:"",unit:"",factor:""};if(void 0!=y.now)S.dateTime=moment().format();else if(void 0!=y.exact)S.dateTime=y.exact.dateTime;else if(void 0!=y.dueDate){var h="",v=u.dates.due;h=""!=v?moment(v,"YYYY-MM-DD"):moment().format(),S.dateTime=h,S.factor=y.dueDate.factor,S.unit=y.dueDate.unit}else if(void 0!=y.validDate){var u=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],h="",v=u.dates.valid;h=""!=validDate?moment(validDate,"YYYY-MM-DD"):moment().format(),S.dateTime=h,S.factor=y.validDate.factor,S.unit=y.validDate.unit}else if(void 0!=y.stepCreatedDate){var u=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],h="",b=u.step.dueDateTime;h=""!=b?moment(b).format():moment().format(),S.dateTime=h,S.factor=y.stepCreatedDate.factor,S.unit=y.stepCreatedDate.unit}else S.dateTime=moment().format();r.setSchedule(S)}s(o).then(function(e){d.notification.recipients=e,r.setAction(d),r.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button."),r.send().then(function(e){var i=util.success("Notification Worker processes successfully for reassignment.",e);a(i)},function(e){a(e)})}).catch(function(e){console.log("Notification - getRecipients failed with error "+e),n(e)})})},assignmentNotification:function(e,i,t,o){return new Promise(function(a,n){var s=function(e){return new Promise(function(i,t){var o={};o.function={},o.function.users={},o.function.users=e.id,i(o)})},r=new NotificatioWorker(app),c=JSON.xpath("/subprocesses[_id eq '"+t+"']/meta-data/subprofileId",i,{})[0],p=DOMAIN.replace("exist/rest",""),d={notification:{message:{rtf:{}},messageType:"","meta-data":{applicationId:i.app,communityId:i.communityId,profileId:i.profile,subProcessUUID:t,subProfileId:c},notificationType:"workflow",priority:"",recipients:{},url:p,keys:{profile:{name:"",id:""},community:{name:"",id:""},application:{name:"",id:""},currentUser:{name:"",id:""},subProcess:{name:"",id:"",validDate:"",dueDate:""},notification:{createdDateTime:moment().format()},step:{stepCreatedDateTime:"",stepName:"",stepId:""},node:{title:""},userDefined:[]}}},u=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];void 0!=e.assignment.sdoKeys&&e.assignment.sdoKeys.forEach(function(e){if(""!=e.field&&""!=e.repStr&&""!=e.setId){var t={};i.indicators.forEach(function(i){i.category.term==e.setId&&(t=i)});var o="";void 0!=t.model&&void 0!=t.model.pending&&void 0!=t.model.pending.data&&void 0!=t.model.pending.data[e.setId]&&void 0!=t.model.pending.data[e.setId][e.field]&&(o=t.model.pending.data[e.setId][e.field]),d.notification.keys.userDefined.push({key:"#"+e.field+"#",value:o})}});var l=JSON.xpath("/indicators[_id eq '"+app.profile._id+"']/title",i,{})[0];d.notification.keys.profile.name=l,d.notification.keys.profile.id=app.profile._id,d.notification.keys.community.name=app.getNameByLang(_lclx.COMMUNITY_CONFIG.communityName),d.notification.keys.community.id=_lclx.COMMUNITY_CONFIG.communityId;var f=JSON.xpath("/applications[appId eq '"+app.SCOPE.applicationId+"']",_lclx.COMMUNITY_CONFIG,{})[0];d.notification.keys.application.name=app.getNameByLang(f.name),d.notification.keys.application.id=f.appId,d.notification.keys.currentUser.name=_lclx.SESSION.firstName+" "+_lclx.SESSION.lastName,d.notification.keys.currentUser.id=_lclx.SUBSCRIPTIONS.userId,d.notification.keys.subProcess.name=JSON.xpath("/subprocesses[_id eq '"+t+"']/label",i,{})[0],d.notification.keys.subProcess.id=t,d.notification.keys.subProcess.validDate=u.dates.valid,d.notification.keys.subProcess.dueDate=u.dates.due;var m=u.step;d.notification.keys.step.stepCreatedDateTime=m.dateTimeCreated,d.notification.keys.step.stepId=m.id;var I=JSON.xpath("/processes/subProcesses[_id eq '"+u.id+"']/steps[_id eq '"+m.id+"']",app.SCOPE.workflow.config,{})[0];d.notification.keys.step.stepName=app.getNameByLang(I.name);var g=JSON.xpath("/indicators[_id eq '"+c+"']/title",app.SCOPE.workflow,{})[0];if(void 0==g?d.notification.keys.node.title="":d.notification.keys.node.title=g,d.notification.message.default="",d.notification.message.title=e.assignment.title,d.notification.message=e.assignment.message,d.notification.messageType=e.assignment.messageType,d.notification.priority=e.assignment.priority,void 0!=e.assignment.notificationAction&&(d.notification.notificationAction={},d.notification.notificationAction.label=e.assignment.notificationAction.label,void 0!=e.assignment.notificationAction.action.URI?(d.notification.notificationAction.action={},d.notification.notificationAction.action.URI=e.assignment.notificationAction.action.URI):void 0!=e.assignment.notificationAction.action.goto&&(d.notification.notificationAction.action={},d.notification.notificationAction.action.goto=e.assignment.notificationAction.action.goto)),void 0!=e.assignment.schedule){var y=e.assignment.schedule.executeCommand,S={dateTime:"",unit:"",factor:""};if(void 0!=y.now)S.dateTime=moment().format();else if(void 0!=y.exact)S.dateTime=y.exact.dateTime;else if(void 0!=y.dueDate){var h="",v=u.dates.due;h=""!=v?moment(v,"YYYY-MM-DD"):moment().format(),S.dateTime=h,S.factor=y.dueDate.factor,S.unit=y.dueDate.unit}else if(void 0!=y.validDate){var u=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],h="",v=u.dates.valid;h=""!=validDate?moment(validDate,"YYYY-MM-DD"):moment().format(),S.dateTime=h,S.factor=y.validDate.factor,S.unit=y.validDate.unit}else if(void 0!=y.stepCreatedDate){var u=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],h="",b=u.step.dueDateTime;h=""!=b?moment(b).format():moment().format(),S.dateTime=h,S.factor=y.stepCreatedDate.factor,S.unit=y.stepCreatedDate.unit}else S.dateTime=moment().format();r.setSchedule(S)}s(o).then(function(e){d.notification.recipients=e,r.setAction(d),r.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button."),r.send().then(function(e){console.log(r);var i=util.success("Notification Worker processes successfully for assignment.",e);a(i)},function(e){a(e)})}).catch(function(e){console.log("Notification - getRecipients failed with error "+e),n(e)})})},acceptanceNotification:function(e,i,t,o){return new Promise(function(a,n){var s=function(e){return new Promise(function(i,t){var o={};o.role=e,i(o)})},r=new NotificatioWorker(app),c=JSON.xpath("/subprocesses[_id eq '"+t+"']/meta-data/subprofileId",i,{})[0],p=DOMAIN.replace("exist/rest",""),d={
notification:{message:{rtf:{}},messageType:"","meta-data":{applicationId:i.app,communityId:i.communityId,profileId:i.profile,subProcessUUID:t,subProfileId:c},notificationType:"workflow",priority:"",recipients:{},url:p,keys:{profile:{name:"",id:""},community:{name:"",id:""},application:{name:"",id:""},currentUser:{name:"",id:""},subProcess:{name:"",id:"",validDate:"",dueDate:""},notification:{createdDateTime:moment().format()},step:{stepCreatedDateTime:"",stepName:"",stepId:""},node:{title:""},userDefined:[]}}},u=JSON.xpath("/indicators[_id eq '"+app.profile._id+"']/title",i,{})[0];d.notification.keys.profile.name=u,d.notification.keys.profile.id=app.profile._id,d.notification.keys.community.name=app.getNameByLang(_lclx.COMMUNITY_CONFIG.communityName),d.notification.keys.community.id=_lclx.COMMUNITY_CONFIG.communityId;var l=JSON.xpath("/applications[appId eq '"+app.SCOPE.applicationId+"']",_lclx.COMMUNITY_CONFIG,{})[0];d.notification.keys.application.name=app.getNameByLang(l.name),d.notification.keys.application.id=l.appId,d.notification.keys.currentUser.name=_lclx.SESSION.firstName+" "+_lclx.SESSION.lastName,d.notification.keys.currentUser.id=_lclx.SUBSCRIPTIONS.userId;var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];void 0!=e.assignmentAcceptance.sdoKeys&&e.assignmentAcceptance.sdoKeys.forEach(function(e){if(""!=e.field&&""!=e.repStr&&""!=e.setId){var t={};i.indicators.forEach(function(i){i.category.term==e.setId&&(t=i)});var o="";void 0!=t.model&&void 0!=t.model.pending&&void 0!=t.model.pending.data&&void 0!=t.model.pending.data[e.setId]&&void 0!=t.model.pending.data[e.setId][e.field]&&(o=t.model.pending.data[e.setId][e.field]),d.notification.keys.userDefined.push({key:"#"+e.field+"#",value:o})}}),d.notification.keys.subProcess.name=f.label,d.notification.keys.subProcess.id=t,d.notification.keys.subProcess.validDate=f.dates.valid,d.notification.keys.subProcess.dueDate=f.dates.due;var m=f.step;d.notification.keys.step.stepCreatedDateTime=m.dateTimeCreated,d.notification.keys.step.stepId=m.id;var I=JSON.xpath("/processes/subProcesses[_id eq '"+f.id+"']/steps[_id eq '"+m.id+"']",app.SCOPE.workflow.config,{})[0];d.notification.keys.step.stepName=app.getNameByLang(I.name);var g=JSON.xpath("/indicators[_id eq '"+c+"']/title",app.SCOPE.workflow,{})[0];if(void 0==g?d.notification.keys.node.title="":d.notification.keys.node.title=g,d.notification.message.default="",d.notification.message.title=e.assignmentAcceptance.title,d.notification.message=e.assignmentAcceptance.message,d.notification.messageType=e.assignmentAcceptance.messageType,d.notification.priority=e.assignmentAcceptance.priority,void 0!=e.assignmentAcceptance.notificationAction&&(d.notification.notificationAction={},d.notification.notificationAction.label=e.assignmentAcceptance.notificationAction.label,void 0!=e.assignmentAcceptance.notificationAction.action.URI?(d.notification.notificationAction.action={},d.notification.notificationAction.action.URI=e.assignmentAcceptance.notificationAction.action.URI):void 0!=e.assignmentAcceptance.notificationAction.action.goto&&(d.notification.notificationAction.action={},d.notification.notificationAction.action.goto=e.assignmentAcceptance.notificationAction.action.goto)),void 0!=e.assignmentAcceptance.schedule){var y=e.assignmentAcceptance.schedule.executeCommand,S={dateTime:"",unit:"",factor:""};if(void 0!=y.now)S.dateTime=moment().format();else if(void 0!=y.exact)S.dateTime=y.exact.dateTime;else if(void 0!=y.dueDate){var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],h="",v=f.dates.due;h=""!=v?moment(v,"YYYY-MM-DD"):moment().format(),S.dateTime=h,S.factor=y.dueDate.factor,S.unit=y.dueDate.unit}else if(void 0!=y.validDate){var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],h="",v=f.dates.valid;h=""!=validDate?moment(validDate,"YYYY-MM-DD"):moment().format(),S.dateTime=h,S.factor=y.validDate.factor,S.unit=y.validDate.unit}else if(void 0!=y.stepCreatedDate){var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],h="",b=f.step.dueDateTime;h=""!=b?moment(b).format():moment().format(),S.dateTime=h,S.factor=y.stepCreatedDate.factor,S.unit=y.stepCreatedDate.unit}else S.dateTime=moment().format();r.setSchedule(S)}s(o).then(function(e){d.notification.recipients=e,r.setAction(d),r.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button."),r.setContext({process:{}}),r.send(r).then(function(e){console.log(r);var i=util.success("Notification Worker processes successfully for assignment.",e);a(i)},function(e){a(e)})}).catch(function(e){console.log("Notification - getRecipients failed with error "+e),n(e)})})},acceptanceNotificationExternal:function(e,i,t,o){return new Promise(function(a,n){var s=function(e){return new Promise(function(i,t){var o={};o.function={},o.function.users=e,i(o)})},r=new NotificatioWorker(app),c=JSON.xpath("/subprocesses[_id eq '"+t+"']/meta-data/subprofileId",i,{})[0],p=DOMAIN.replace("exist/rest",""),d={notification:{message:{rtf:{}},messageType:"","meta-data":{applicationId:i.app,communityId:i.communityId,profileId:i.profile,subProcessUUID:t,subProfileId:c},notificationType:"workflow",priority:"",recipients:{},url:p,keys:{profile:{name:"",id:""},community:{name:"",id:""},application:{name:"",id:""},currentUser:{name:"",id:""},subProcess:{name:"",id:"",validDate:"",dueDate:""},notification:{createdDateTime:moment().format()},step:{stepCreatedDateTime:"",stepName:"",stepId:""},node:{title:""}}}},u=JSON.xpath("/indicators[_id eq '"+app.profile._id+"']/title",i,{})[0];d.notification.keys.profile.name=u,d.notification.keys.profile.id=app.profile._id,d.notification.keys.community.name=app.getNameByLang(_lclx.COMMUNITY_CONFIG.communityName),d.notification.keys.community.id=_lclx.COMMUNITY_CONFIG.communityId;var l=JSON.xpath("/applications[appId eq '"+app.SCOPE.applicationId+"']",_lclx.COMMUNITY_CONFIG,{})[0];d.notification.keys.application.name=app.getNameByLang(l.name),d.notification.keys.application.id=l.appId,d.notification.keys.currentUser.name=_lclx.SESSION.firstName+" "+_lclx.SESSION.lastName,d.notification.keys.currentUser.id=_lclx.SUBSCRIPTIONS.userId;var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];d.notification.keys.subProcess.name=f.label,d.notification.keys.subProcess.id=t,d.notification.keys.subProcess.validDate=f.dates.valid,d.notification.keys.subProcess.dueDate=f.dates.due;var m=f.step;d.notification.keys.step.stepCreatedDateTime=m.dateTimeCreated,d.notification.keys.step.stepId=m.id;var I=JSON.xpath("/processes/subProcesses[_id eq '"+f.id+"']/steps[_id eq '"+m.id+"']",app.SCOPE.workflow.config,{})[0];d.notification.keys.step.stepName=app.getNameByLang(I.name);var g=JSON.xpath("/indicators[_id eq '"+c+"']/title",app.SCOPE.workflow,{})[0];if(void 0==g?d.notification.keys.node.title="":d.notification.keys.node.title=g,d.notification.message.default="",d.notification.message.title=e.assignmentAcceptance.title,d.notification.message.rtf.markup=e.assignmentAcceptance.message,d.notification.messageType=e.assignmentAcceptance.messageType,d.notification.priority=e.assignmentAcceptance.priority,void 0!=e.assignmentAcceptance.notificationAction&&(d.notification.notificationAction={},d.notification.notificationAction.label=e.assignmentAcceptance.notificationAction.label,void 0!=e.assignmentAcceptance.notificationAction.action.URI?(d.notification.notificationAction.action={},d.notification.notificationAction.action.URI=e.assignmentAcceptance.notificationAction.action.URI):void 0!=e.assignmentAcceptance.notificationAction.action.goto&&(d.notification.notificationAction.action={},d.notification.notificationAction.action.goto=e.assignmentAcceptance.notificationAction.action.goto)),void 0!=e.assignmentAcceptance.schedule){var y=e.assignmentAcceptance.schedule.executeCommand,S={dateTime:"",unit:"",factor:""};if(void 0!=y.now)S.dateTime=moment().format();else if(void 0!=y.exact)S.dateTime=y.exact.dateTime;else if(void 0!=y.dueDate){var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],h="",v=f.dates.due;h=""!=v?moment(v,"YYYY-MM-DD"):moment().format(),S.dateTime=h,S.factor=y.dueDate.factor,S.unit=y.dueDate.unit}else if(void 0!=y.validDate){var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],h="",v=f.dates.valid;h=""!=validDate?moment(validDate,"YYYY-MM-DD"):moment().format(),S.dateTime=h,S.factor=y.validDate.factor,S.unit=y.validDate.unit}else if(void 0!=y.stepCreatedDate){var f=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],h="",b=f.step.dueDateTime;h=""!=b?moment(b).format():moment().format(),S.dateTime=h,S.factor=y.stepCreatedDate.factor,S.unit=y.stepCreatedDate.unit}else S.dateTime=moment().format();r.setSchedule(S)}s(o).then(function(e){d.notification.recipients=e,r.setAction(d),r.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button."),r.setContext({process:{}}),r.send(r).then(function(e){console.log(r);var i=util.success("Notification Worker processes successfully for assignment.",e);a(i)},function(e){a(e)})}).catch(function(e){console.log("Notification - getRecipients failed with error "+e),n(e)})})}}}(),report=function(){return{createPerformanceReport:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=_lclx.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=s,n.channels.push("createPerformanceReport"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.workplanSetId,c=e.configSetId,p=JSON.xpath("/indicators[category/term eq '"+r+"']/_id",app.SCOPE.workflow,{})[0],d=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+c+"']/instances[1]/uuid",i,{})[0],u={createPerformanceReport:{workplanUUID:p,configUUID:d,profilId:i.profile}};n.action=u,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("WorkplanReport Worker processed successfully.",e);o(a)},function(e){a(e)})})},createReport:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=_lclx.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=s,n.channels.push("executeReport"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.PerformanceReportDefinitionSetId,c=e.reportingSDOSetId,p=JSON.xpath("/indicators[category/term eq '"+r+"']/_id",i,{})[0],d=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+c+"']/instances[1]/uuid",i,{})[0],u={createReport:{performanceReportDefinition:p,reportingSDO:d,profilId:i.profile}};n.action=u,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("Reprot Worker processed successfully.",e);o(a)},function(e){a(e)})})},sdoReport:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=_lclx.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=s,n.channels.push("sdoReport"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.indicatorSetId,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],p={sdoReport:{sdoReportUUID:c,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};n.action=p,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("report Worker processed successfully.",e);o(a)},function(e){a(e)})})},executeReport:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=_lclx.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=s,n.channels.push("executeReport"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.SDOreportSetId,c=e.reportingSDOSetid,p=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],d=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+c+"']/instances[1]/uuid",i,{})[0];void 0==p&&(p=JSON.xpath("/indicators[category/term eq '"+r+"']/_id",i,{})[0]);var u={executeReport:{sdoReportUUID:p,reportingSDOUUID:d,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};n.action=u,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("report Worker processed successfully.",e);o(a)},function(e){a(e)})})},generateView:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=_lclx.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=s,n.channels.push("sdoReport"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.ViewConfigSetId,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],p={generateView:{viewConfigUUID:c,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};n.action=p,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("report Worker processed successfully.",e);o(a)},function(e){a(e)})})},requestReport:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=_lclx.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=s,n.channels.push("executeReport"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.sdoRequestReportSetId,c=e.sdoReportCreationSetId,p=e.performanceReportSetId,d=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],u=JSON.xpath("/indicators[category/term eq '"+c+"']/_id",i,{})[0],l=JSON.xpath("/indicators[category/term eq '"+p+"']/_id",i,{})[0],f={requestReport:{performanceReportUUID:l,sdoRequestReportUUID:d,sdoReportCreationUUID:u,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};n.action=f,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("Request report Worker processed successfully.",e);o(a)},function(e){a(e)})})},generateBasicView:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=_lclx.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=s,n.channels.push("sdoReport"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.sdoDataObjectViewSetId,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],p={generateBasicView:{sdoDataObjectViewUUID:c,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};n.action=p,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("generateBasicView Worker processed successfully.",e);o(a)},function(e){a(e)})})},generateUnionView:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=_lclx.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=s,n.channels.push("sdoReport"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.sdoDataObjectViewUnionSetId,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],p={generateUnionView:{sdoDataObjectViewUnionUUID:c,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};n.action=p,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("generateUnionView Worker processed successfully.",e);o(a)},function(e){a(e)})})},sdoReportMultiple:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=_lclx.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=s,n.channels.push("sdoReport"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.sdoReportCreationSetId,c=e.sdoReportViewsSetId,p=e.sdoReportJoinsSetId,d=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],u=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+c+"']/instances[1]/uuid",i,{})[0],l=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+p+"']/instances[1]/uuid",i,{})[0],f={sdoReportMultiple:{sdoReportCreationUUID:d,sdoReportViewsUUID:u,sdoReportJoinsUUID:l,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};n.action=f,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("sdoReportMultiple Worker processed successfully.",e);o(a)},function(e){a(e)})})},subprofileQuarterlyReport:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=_lclx.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=s,n.channels.push("executeReport"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.scheduleReportIndicator,c=JSON.xpath("/indicators[category/term eq '"+r+"']/_id",i,{})[0],p=e.sdoReportApprovalIndicator,d=JSON.xpath("/indicators[category/term eq '"+p+"' and workflows[1]/processes[1]/subProcessUUID eq '"+t+"']/_id",i,{})[0],u={subprofileQuarterlyReport:{scheduleReportIndicatorUUID:c,sdoReportApprovalIndicatorUUID:d,subprofileCode:app.profile.subProfile.code,subprofileTitle:app.profile.subProfile.title,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};n.action=u,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("QuarterlyReport report Worker processed successfully.",e);o(a)},function(e){a(e)})})}}}(),participants=function(){return{linkParticipants:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=_lclx.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=s,n.channels.push("follow"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.EPWPLinkParticipantsInBulkId,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],p=e.EPWPLocalityId,d=JSON.xpath("/indicators[category/term eq '"+p+"']/_id",i,{})[0],u=e.EPWPActiveParticipantsId,l=JSON.xpath("/indicators[category/term eq '"+u+"']/_id",i,{})[0],f={linkParticipants:{EPWPLinkParticipantsInBulkIdUUID:c,EPWPLocalityIdUUID:d,EPWPActiveParticipantsIdUUID:l,profilId:i.profile}};n.action=f,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("EPWPLinkParticipants Worker processed successfully.",e);o(a)},function(e){a(e)})})},monthlyAttendance:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=_lclx.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=s,n.channels.push("follow"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.EPWPMonthlyAttendanceBulkUploadUUID,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],p=e.EPWPActiveParticipantsIdUUID,d=JSON.xpath("/indicators[category/term eq '"+p+"']/_id",i,{})[0],u=e.EPWPMonthlyEmploymentPerLocalityUUID,l=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+u+"']/instances[1]/uuid",i,{})[0],f={monthlyAttendance:{EPWPMonthlyAttendanceBulkUploadUUID:c,EPWPActiveParticipantsIdUUID:d,EPWPMonthlyEmploymentPerLocalityUUID:l,profilId:i.profile}};n.action=f,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("monthlyAttendance Worker processed successfully.",e);o(a)},function(e){a(e)})})},monthlyProgressSummary:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=_lclx.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=s,n.channels.push("follow"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.EPWPMonthlyProgressSummaryIdUUID,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],p={monthlyProgressSummary:{EPWPMonthlyProgressSummaryIdUUID:c,profilId:i.profile}};n.action=p,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("monthlyAttendance Worker processed successfully.",e);o(a)},function(e){a(e)})})},participantContracts:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=_lclx.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=s,n.channels.push("follow"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=e.EPWPParticipantContractsIdUUID,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+r+"']/instances[1]/uuid",i,{})[0],p={participantContracts:{EPWPParticipantContractsIdUUID:c,profilId:i.profile}};n.action=p,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("participantContracts Worker processed successfully.",e);o(a)},function(e){a(e)})})},genericLinkParticipants:function(e,i,t){return new Promise(function(e,i){})}}}(),worker=function(){return{getWorkerWrapper:function(){var e={source:"remote",type:"workerObject",_id:"",channels:["workerObject"],profileId:"",communityId:"",applicationId:"",subProcessUUID:"",message:"",messageType:"info",createdDateTime:"",senderUserId:"",subProfileId:"",parentTransactionId:void 0==app.SCOPE.txn?"":app.SCOPE.txn.transactionId,action:{}};return e},send:function(e){return new Promise(function(i,t){console.log("Submitting Worker Object to server"),console.log(e),dao.save(e).then(function(e){i(e)}).catch(function(e){console.log("Error submitting worker response !!"+e),t(e)})})},sendWorker:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),s="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(s=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=_lclx.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=s,n.channels.push("sendWorker"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=function(e,o,a){return new Promise(function(n,s){helper.getNodeValue(e,i,t).then(function(e){n({seq:o,paramName:a,dataValue:e})},function(e){s(e)})})},c=function(e){return new Promise(function(o,a){for(var n=[],s=e.length,c=0;c<e.length;c++){var p=e[c].parameterValue,d=e[c].seq,u=e[c].parameterName;r(p,d,u).then(function(e){n.push({seq:e.seq,paramName:e.paramName,paramValue:e.dataValue}),s--,0==s&&(n.push({seq:s+1,paramName:"communityId",paramValue:i.communityId}),n.push({seq:s+2,paramName:"applicationId",paramValue:i.app}),n.push({seq:s+3,paramName:"profileId",paramValue:i.profile}),n.push({seq:s+4,paramName:"subProcessUUID",paramValue:t}),o(n))},function(e){s--,0==s&&(n.push({seq:s+1,paramName:"communityId",paramValue:i.communityId}),n.push({seq:s+2,paramName:"applicationId",paramValue:i.app}),n.push({seq:s+3,paramName:"profileId",paramValue:i.profile}),n.push({seq:s+4,paramName:"subProcessUUID",paramValue:t}),o(n))})}})};if(void 0!=e.rest){var p=e.rest.parameters;c(p).then(function(s){var r={sendWorker:{rest:{}}};r.sendWorker.rest.uri=e.rest.uri,r.sendWorker.rest.profilId=i.profile,r.sendWorker.rest.parameters=s,n.action=r,worker.send(n).then(function(e){var s=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];s.spStatus="submitted",void 0==s.messages&&(s.messages=[]);var r={message:{i18n:{_id:"",en:"The server is processing your request. Please wait a few seconds and then click the refresh button.",pt:"The server is processing your request. Please wait a few seconds and then click the refresh button."}},type:"info"};s.messages.push(r),void 0==s.workers&&(s.workers=[]),s.workers.push({workerId:n._id,dateTime:moment().format()}),persistData("subprocesses",app.SCOPE.workflow,t).then(function(i){var t=util.success("Worker Rest processed successfully.",e);o(t)}).catch(function(e){console.log("Worker submitted subprocess file update failed"),a(e)})},function(e){console.log("Worker failed "),a(e)})},function(e){console.log("parameter creation failed. Abording worker object")})}else if(void 0!=e.functional){var p=e.functional.parameters;c(p).then(function(s){var r={sendWorker:{functional:{}}};r.sendWorker.functional.methodName=e.functional.methodName,r.sendWorker.functional.profilId=i.profile,r.sendWorker.functional.parameters=s,n.action=r,worker.send(n).then(function(e){var s=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];s.spStatus="submitted",void 0==s.messages&&(s.messages=[]);var r={message:{i18n:{_id:"",en:"The server is processing your request. Please wait a few seconds and then click the refresh button.",pt:"The server is processing your request. Please wait a few seconds and then click the refresh button."}},type:"info"};s.messages.push(r),void 0==s.workers&&(s.workers=[]),s.workers.push({workerId:n._id,dateTime:moment().format()}),persistData("subprocesses",app.SCOPE.workflow,t).then(function(i){var t=util.success("Worker functional processed successfully.",e);o(t)}).catch(function(e){console.log("Worker submitted subprocess file update failed"),a(e)})},function(e){console.log("Worker failed "),a(e)})},function(e){console.log("parameter creation failed. Abording worker object")})}})},executeLocal:function(workerConfig,_WFInstance,uuid){return new Promise(function(resolve,reject){var processGetNodeValue=function(e,i,t){return new Promise(function(o,a){helper.getNodeValue(e,_WFInstance,uuid).then(function(e){o({seq:i,dataType:t,dataValue:e})},function(e){a(e)})})},processParams=function(e){return new Promise(function(i,t){for(var o=[],a=e.length,n=0;n<e.length;n++){var s=e[n].parameterValue,r=e[n].seq,c=e[n].dataType.dataType;processGetNodeValue(s,r,c).then(function(e){o.push({seq:e.seq,dataType:e.dataType,paramValue:e.dataValue}),a--,0==a&&i(o)},function(e){a--,0==a&&i(o)})}})},fixParamType=function(e,i){switch(i){case"string":var t=e.replace(/'/g,"\\'");return""+t;case"date":case"dateTime":return""+e;case"number":case"decimal":return e}},methodName=workerConfig.methodName,configParam=workerConfig.parameters;processParams(configParam).then(function(paramsArray){for(var pList="",i=0;i<paramsArray.length-1;i++)pList=pList+fixParamType(paramsArray[i].paramValue,paramsArray[i].dataType)+",";pList+=fixParamType(paramsArray[i].paramValue,paramsArray[i].dataType);var callbackSuccess=function(){return console.log("S"),resolve("Function '"+methodName+"' executed. Response success.")},callbackFailure=function(){return console.log("E"),reject("Function '"+methodName+"' executed. Response failed.")},spUUID=""+uuid;console.log("Going to execute == "+methodName),0==paramsArray.length?eval(methodName)(callbackSuccess,callbackFailure,spUUID):1==paramsArray.length?eval(methodName)(paramsArray[0].paramValue,callbackSuccess,callbackFailure,spUUID):2==paramsArray.length?eval(methodName)(paramsArray[0].paramValue,paramsArray[1].paramValue,callbackSuccess,callbackFailure,spUUID):3==paramsArray.length?eval(methodName)(paramsArray[0].paramValue,paramsArray[1].paramValue,paramsArray[2].paramValue,callbackSuccess,callbackFailure,spUUID):4==paramsArray.length?eval(methodName)(paramsArray[0].paramValue,paramsArray[1].paramValue,paramsArray[2].paramValue,paramsArray[3].paramValue,callbackSuccess,callbackFailure,spUUID):5==paramsArray.length?eval(methodName)(paramsArray[0].paramValue,paramsArray[1].paramValue,paramsArray[2].paramValue,paramsArray[3].paramValue,paramsArray[4].paramValue,callbackSuccess,callbackFailure,spUUID):6==paramsArray.length?eval(methodName)(paramsArray[0].paramValue,paramsArray[1].paramValue,paramsArray[2].paramValue,paramsArray[3].paramValue,paramsArray[4].paramValue,paramsArray[5].paramValue,callbackSuccess,callbackFailure,spUUID):7==paramsArray.length?eval(methodName)(paramsArray[0].paramValue,paramsArray[1].paramValue,paramsArray[2].paramValue,paramsArray[3].paramValue,paramsArray[4].paramValue,paramsArray[5].paramValue,paramsArray[6].paramValue,callbackSuccess,callbackFailure,spUUID):8==paramsArray.length&&eval(methodName)(paramsArray[0].paramValue,paramsArray[1].paramValue,paramsArray[2].paramValue,paramsArray[3].paramValue,paramsArray[4].paramValue,paramsArray[5].paramValue,paramsArray[6].paramValue,paramsArray[7].paramValue,callbackSuccess,callbackFailure,spUUID)},function(e){console.log("parameter creation failed. Abording worker object"),reject(e)})})},setWorkerInfoInSubprocess:function(e,i,t){var o=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],a={message:{i18n:{_id:"",en:"The server is processing your request. Please wait a few seconds and then click the refresh button.",
pt:"O servidor está processando sua solicitação. Por favor aguarde alguns segundos e depois clique no botão atualizar."}},type:"info"};o.messages=[],o.messages.push(a),void 0==o.workers&&(o.workers=[]),o.workers.push({workerId:e._id,dateTime:moment().format()})},create:function(e,i,t){return new Promise(function(o,a){var n=e.channel,s=e.action,r=worker.getWorkerWrapper(),c="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(c=app.profile.subprofileId),r._id=generateUUID(),r.communityId=app.SCOPE.getCommunityId(),r.applicationId=app.SCOPE.applicationId,r.createdDateTime=moment().format(),r.senderUserId=_lclx.SUBSCRIPTIONS.userId,r.profileId=i.profile,r.subProcessUUID=t,r.subprofileId=c,r.channels.push(n),r.channels.push("community_"+app.SCOPE.getCommunityId());var p={};p[s]={};for(var d=0;d<e.indicators.length;d++){var u=e.indicators[d].label,l=e.indicators[d].setId,f=e.indicators[d].context,m="";if("subProcess"==f||"currentSubProcessInstance"==f||"currentSubProcess"==f){if(m=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+l+"']/instances[1]/uuid",i,{})[0],void 0==m){var I=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];void 0!=I&&I.indicators.length>0&&(m=JSON.xpath("/indicators[category/term eq '"+l+"']/_id",i,{})[0])}}else m=JSON.xpath("/indicators[category/term eq '"+l+"']/_id",i,{})[0];p[s][u]=m}if(p[s].profilId=i.profile,void 0!=e.fixed)for(var d=0;d<e.fixed.length;d++){var g=e.fixed[d],y=Object.keys(g)[0];p[s][y]=g[y]}void 0!=e.dataFields&&(p[s].dataFields=e.dataFields),r.action=p,worker.send(r).then(function(e){worker.setWorkerInfoInSubprocess(r,i,t);var a=util.success(s+" worker processed successfully.",e);o(a)},function(e){a(e)})})}}}(),user=function(){return{addToRole:function(e,i,t){return new Promise(function(o,a){helper.getNodeValue(e.userName,t,i).then(function(n){helper.getNodeValue(e.userId,t,i).then(function(s){helper.getNodeValue(e.roleId,t,i).then(function(e){if("string"!=typeof n&&"string"!=typeof s&&Array.isArray([n])&&Array.isArray([s]))if("string"!=typeof e&&Array.isArray([e]))if(n.length!=s.length||s.length!=e.length)a({isError:!0,message:"Config issue in role assignment action."});else{var i=function(t){if(n.length==t){var a=util.success("Role assignment complete",{});o(a)}else if(void 0==e[t]||""==e[t]||void 0==s[t]||""==s[t]||void 0==n[t]||""==n[t])i(t+1);else{var r=JSON.xpath("/roles[id eq '"+e[t]+"']/type",app.SCOPE.APP_CONFIG,{})[0];"instance"==r?rolesManager.doUserRegistration(s[t],n[t],e[t],"instance").then(function(e){i(t+1)}).catch(function(e){i(t+1)}):"subprofile"==r?rolesManager.doUserRegistration_node(s[t],n[t],e[t],"subprofile").then(function(e){i(t+1)}).catch(function(e){i(t+1)}):"adoption"==r?rolesManager.doUserRegistration_adoption(s[t],n[t],e[t],"adoption").then(function(e){i(t+1)}).catch(function(e){i(t+1)}):i(t+1)}};i(0)}else{var i=function(t){if(n.length==t){var a=util.success("Role assignment complete",{});o(a)}else if(void 0==e||""==e||void 0==s[t]||""==s[t]||void 0==n[t]||""==n[t])i(t+1);else{var r=JSON.xpath("/roles[id eq '"+e+"']/type",app.SCOPE.APP_CONFIG,{})[0];"instance"==r?rolesManager.doUserRegistration(s[t],n[t],e,"instance").then(function(e){i(t+1)}).catch(function(e){i(t+1)}):"subprofile"==r?rolesManager.doUserRegistration_node(s[t],n[t],e,"subprofile").then(function(e){i(t+1)}).catch(function(e){i(t+1)}):"adoption"==r?rolesManager.doUserRegistration_adoption(s[t],n[t],e,"adoption").then(function(e){i(t+1)}).catch(function(e){i(t+1)}):i(t+1)}};i(0)}else{var t=JSON.xpath("/roles[id eq '"+e+"']/type",app.SCOPE.APP_CONFIG,{})[0];"instance"==t?rolesManager.doUserRegistration(s,n,e,"instance").then(function(e){var i=util.success("Role assigned to user in context instance",e);o(i)}).catch(function(e){console.log("rolesManager- instance fail"),o("role update failed")}):"subprofile"==t?rolesManager.doUserRegistration_node(s,n,e,"subprofile").then(function(e){var i=util.success("Role assigned to user in context subprofile",e);o(i)}).catch(function(e){console.log("rolesManager- subprofile fail"),o("role update failed")}):"adoption"==t?rolesManager.doUserRegistration_adoption(s,n,e,"adoption").then(function(e){var i=util.success("Role assigned to user in context adoption",e);o(i)}).catch(function(e){console.log("rolesManager- adoption fail"),o("role update failed")}):(console.log("Role not found in any context"),a("Role not found in any context"))}}).catch(function(e){a(e)})}).catch(function(e){a(e)})}).catch(function(e){a(e)})})}}}(),generalFunctions=function(){return{addToFavourites:function(e,i,t){return new Promise(function(i,o){var a=e.context;"profile"==a?library.addToFavouritesProfile().then(function(e){i(e)}).catch(function(e){o(e)}):"subprofile"==a?library.addToFavouritesSubProfile().then(function(e){i(e)}).catch(function(e){o(e)}):"subprocess"==a&&library.addToFavouritesSubProcess(t).then(function(e){i(e)}).catch(function(e){o(e)})})},addToUserFavourites:function(e,i,t){return new Promise(function(o,a){var n=e.context,s=e.user,r="";if(void 0!=s.stepAssigneeFromStep){for(var c=s.stepAssigneeFromStep.stepId,p=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],d={},u=0;u<p.history.length;u++)p.history[u].id==c&&(d=p.history[u]);if(void 0!=d.assignmentHistory&&d.assignmentHistory.length>0){var l=d.assignmentHistory[d.assignmentHistory.length-1];r=l.userId}}else if(void 0!=s.indicator){var f=s.indicator.indicatorSetId,m=s.indicator.elementId,I=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+f+"']/instances/uuid",i,{})[0],g=JSON.xpath("/indicators[_id eq '"+I+"']",i,{})[0],y="/model/pending/data/"+f+"/"+m,S=JSON.xpath(y,g,{})[0];r=S}"profile"==n?library.addToFavouritesProfileForUser(r).then(function(e){console.log("Workflow ****** Profile Done"),o(e)}).catch(function(e){a(e)}):"subprofile"==n?library.addToFavouritesSubprofileForUser(r).then(function(e){console.log("Workflow ****** SubProfile Done"),o(e)}).catch(function(e){a(e)}):"subprocess"==n&&library.addToUsersFavouritesSubProcessForUser(r,t).then(function(e){console.log("Workflow ****** Subprocess Done"),o(e)}).catch(function(e){a(e)})})}}}();module.exports={community:community,application:application,performance:performance,worker:worker,sdo:sdo,taxonomy:taxonomy,subProcessInstance:subProcessInstance,variables:variables,notification:notification,report:report,participants:participants,user:user,generalFunctions:generalFunctions};

},{"./form":3,"./helper":4,"./nodeValue":6,"utility":8}],3:[function(require,module,exports){
"use strict";function create(e){var t=e[0]||"",s=e[1]||{},i=e[2]||{},r=e[3]||{},o=e[6]||{},a=(e[6]||{},s.indicators||[]),n=(r._type,e[4]||"",e[5]||"",e[7]||"",s._id),c=e[8]||"",d=e[9]||"",u=(o.profile,e[10]||{}),l=r.method.form.create;void 0!=r.method.form.authoriseAndCreateNewSeq?l=r.method.form.authoriseAndCreateNewSeq:void 0!=r.method.form.createNewSeq&&(l=r.method.form.createNewSeq);var p=r.method.form.type,f={formCreateType:l,formType:p};return new Promise(function(e,p){var h=a.length,m=!1,v=[],g=function(){if(0==m){var t=util.success("Form create indicator persist success.",o.indicators);e(t)}else{for(var s=[],i=0;i<o.instance.processes.length;i++)o.instance.processes[i].subProcesses.length>0&&s.push(o.instance.processes[i]);o.instance.processes=[],o.instance.processes=s;var r=[],a=JSON.xpath("/subprocesses[_id eq '"+c+"']",o,{})[0],n=a.id,d=JSON.xpath("/config/processes/subProcesses[_id eq '"+n+"']",o,{})[0];if(void 0!=d.instanceType.newSequence){for(var i=0;i<d.indicators.length;i++){var u=d.indicators[i],l=u._id,f=JSON.xpath("distinct-values(/subprocesses[groupKey = '"+a.groupKey+"']/indicators[id = '"+l+"']/instances/uuid)",o,{})[0];if(void 0!=f){var h=JSON.xpath("/indicators[_id eq '"+f+"']",o,{})[0];void 0!=h&&(h.model.pending=h.model.approved)}}for(var g="",i=0;i<d.indicators.length-1;i++)g=g+"'"+d.indicators[i]._id+"',";g=g+"'"+d.indicators[d.indicators.length-1]._id+"'",r=JSON.xpath("distinct-values(/indicators[category/term = ("+g+")]/model/approved/subProcessUUID)",o,{});var I=function(e,t){if(e==t.length){for(var s=[],i=0;i<o.subprocesses.length;i++)o.subprocesses[i].indicators.length>0&&s.push(o.subprocesses[i]);o.subprocesses=[],o.subprocesses=s;var r=util.success("Process failed",v);p(r)}else persistData("indicators",o,t[e]).then(function(s){I(e+1,t)}).catch(function(s){I(e+1,t)})};I(0,r)}else{for(var S=[],i=0;i<o.subprocesses.length;i++)o.subprocesses[i].indicators.length>0&&S.push(o.subprocesses[i]);o.subprocesses=[],o.subprocesses=S;var _=util.success("Process failed",v);p(_)}}},I=JSON.xpath("/config/processes/subProcesses[_id eq '"+n+"']/type",o,{})[0],S=function(e,a,l,p){return new Promise(function(S,_){gatekeeper.instantiate(d,e,a,o.profile,l,n,I).then(function(e){for(var n=0;n<e.length;n++){for(var d=e[n],I=0;I<o.indicators.length;I++){var _=o.indicators[I];if(_._id==d.model._id){o.indicators.splice(I,1),o.indicators.push(d.model);break}}if(!d.model._id.endsWith(":approved")&&!d.model._id.endsWith(":rejected")){d.model.model.pending.validDate=l,d.model.model.pending.subProcessUUID=c;var O={id:o.config._id,instance:o.instance._id,processes:[{id:t,subProcessId:s._id,subProcessUUID:c,step:{id:i.id,seq:i.seq,startDate:"",status:i.status,message:i.message,assignedTo:{userId:i.assignedTo.userId,name:i.assignedTo.name},comment:i.comment,complete:!1,endDate:""}}]};1==d.model.model.pending.seq&&void 0!=r.setWorkflowLabelInTitle&&""!=r.setWorkflowLabelInTitle&&1==r.setWorkflowLabelInTitle&&(d.model.title=u.label),void 0!=r.setDraft&&""!=r.setDraft&&1==r.setDraft&&(d.model.control.draft=!0);var N=!1,b=-1;d.model.workflows.forEach(function(e,t){c==e.processes[0].subProcessUUID&&(N=!0,b=t)}),N?d.model.workflows[b]=O:d.model.workflows.push(O);var D=d.model._id;gatekeeper.persist(e).then(function(e){dao.get(D).then(function(e){var t=ko.mapping.fromJS({defaultModel:{setId:a}}),s=e.model.pending.seq;gatekeeper.instantiateData(D,p,t,e.model.pending.seq,f).then(function(e){if("200"==e[0].status){for(var t=0;t<o.indicators.length;t++){var i=o.indicators[t];if(i._id==e[0].model._id){o.indicators.splice(t,1),o.indicators.push(e[0].model);break}}if(1==s&&void 0!=r.setWorkflowLabelInField&&""!=r.setWorkflowLabelInField){var n=r.setWorkflowLabelInField.split(".")[0];if(n==a){console.log(e[0]);var d=u.label,l=d.replace(/'/g,"\\'"),p=e[0].model.model.pending.data,f=""==r.setWorkflowLabelInField?[]:r.setWorkflowLabelInField.split(/['"\[\].]+/),I=0;for(I=0;I<f.length-1;I++)""!=f[I]&&(p=p[f[I]]);p[f[I]]=l}}gatekeeper.persist(e).then(function(e){dao.get(D).then(function(e){if(0==o.indicators.length)o.indicators.push(e),h--,0==h&&persistData("indicators",o,c).then(function(e){util.success("Form create indicator persist success.",o.indicators);g()}).catch(function(e){v.push({error:"persistData "+c,errorBlock:e}),console.error(e);util.success("Form create indicator persist failed.",{});m=!0,g()}),S({});else{for(var t=!1,s=0;s<o.indicators.length;s++){var i=o.indicators[s];i._id==e._id&&(t=!0,o.indicators.splice(s,1),o.indicators.push(e),s=o.indicators.length,h--,0==h&&persistData("indicators",o,c).then(function(e){util.success("Form create indicator persist success.",o.indicators);g()}).catch(function(e){v.push({error:"persistData "+c,errorBlock:e}),console.error(e);util.success("Form create indicator persist failed.",{});m=!0,g()}),S({}))}0==t&&(o.indicators.push(e),h--,0==h&&persistData("indicators",o,c).then(function(e){util.success("Form create indicator persist success.",o.indicators);g()}).catch(function(e){v.push({error:"persistData "+c,errorBlock:e}),console.error(e);util.success("Form create indicator persist failed.",{});m=!0,g()}),S({}))}}).catch(function(e){v.push({error:"dao.get(mainId) "+D,errorBlock:e}),console.error(e);util.success("1 Gatekeeper initialisation failed with initialiseData message ",{});m=!0,h--,0==h&&g(),S({})})},function(e){v.push({error:"gatekeeper.persist(data) - Persisting all docs ",errorBlock:e}),console.error(e);util.success("2 Gatekeeper initialisation failed with initialiseData message ",{});m=!0,h--,0==h&&g(),S({})})}else{v.push({error:"gatekeeper.instantiateData"+D+" "+e[0].status,errorBlock:{}});util.success("3 Gatekeeper initialisation failed with initialiseData message ",{});m=!0,h--,0==h&&g(),S({})}},function(e){v.push({error:"gatekeeper.instantiateData"+D,errorBlock:e});util.success("4 Gatekeeper initialisation failed with initialiseData message ",{});m=!0,h--,0==h&&g(),S({})})}).catch(function(e){v.push({error:"dao.get(mainId) "+D,errorBlock:e}),console.error(e);util.success("5 Gatekeeper initialisation failed with initialiseData message ",{});m=!0,h--,0==h&&g(),S({})})},function(e){v.push({error:"gatekeeper.persist savedArray",errorBlock:e}),console.error(e);util.success("6 Gatekeeper initialisation failed with initialiseData message ",{});m=!0,h--,0==h&&g(),S({})})}}},function(e){v.push({error:"gatekeeper.instantiate",errorBlock:e}),m=!0,h--,0==h&&g(),S({})})})},_=FROM_DEFINITION,O=function(e,t){if(0==e.length)h--,0==h&&g();else if(t<e.length){var i=e[t]._id,r=(util.getName(e[t].name,"en"),e[t].initiateData,"");void 0!=s.instanceType.newSequence?r=INSTANCE_TYPE_NEW_SEQ:void 0!=s.instanceType.newInstance&&(r=INSTANCE_TYPE_NEW_INS);var a=function(){S(r,i,u.validDate,_).then(function(s){O(e,t+1)}).catch(function(e){m=!0,h--,0==h&&g()})};if(void 0!=d&&""!=d&&d.length>0){var p=JSON.xpath("/subprocesses[_id eq '"+d+"']",o,{})[0];void 0==s.periodType.periodic&&d!=c&&(p.active=!1),_=l==BLANK_MODEL?FROM_DEFINITION:FROM_AUTHORISED,a()}else{var f=JSON.xpath("/indicators[setId eq '"+i+"']/cardinality",app.SCOPE.APP_CONFIG,{})[0];if(r==INSTANCE_TYPE_NEW_INS)f==INDICATOR_CARDINALITY_SINGLE?library.getSingleIndicator(i).then(function(e){_=e.length>0?FROM_AUTHORISED:FROM_DEFINITION,a()}).catch(function(e){_=FROM_DEFINITION,a()}):(_=FROM_DEFINITION,a());else if(f==INDICATOR_CARDINALITY_SINGLE)library.getSingleIndicator(i).then(function(e){_=e.length>0?FROM_AUTHORISED:FROM_DEFINITION,a()}).catch(function(e){_=FROM_DEFINITION,a()});else{var v="/indicators[category/term eq '"+i+"' and id = /subprocesses[id = '"+n+"']/indicators/instances/uuid]/_id",N=library.getSubprofileSubprocessIds();I==PROCESS_TYPE_SUBPROFILE&&(v="/indicators[category/term eq '"+i+"' and id = /subprocesses[id = '"+n+"' and id = "+N+"]/indicators/instances/uuid]/_id");var b=JSON.xpath(v,o,{});_=b.length>0?FROM_AUTHORISED:FROM_DEFINITION,a()}}}};O(a,0)})}function setInstanceTitle(e){var t=e[0]||{},s=e[2]||"",i=e[4]||{},r=i.label;return new Promise(function(e,i){for(var o=JSON.xpath("/subprocesses[_id eq '"+s+"']",t,{})[0],a=o.indicators,n=0;n<a.length;n++){var c=a[n].instances[0].uuid,d=JSON.xpath("/indicators[_id eq '"+c+"']",t,{})[0];d.title=a[n].id+" "+r}e("Set Title Success",a)})}function deleteProfile(e){var t=e[0]||{},s=t.profile;return new Promise(function(e,i){var r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId);var o={source:"remote",type:"workerObject",_id:generateUUID(),channels:["deleteProfile","community_"+app.SCOPE.getCommunityId(),"workerObject"],communityId:app.SCOPE.getCommunityId(),applicationId:app.SCOPE.applicationId,profileId:t.profile,message:"",subprofileId:r,messageType:"info",createdDateTime:moment().format(),senderUserId:_lclx.SUBSCRIPTIONS.userId,parentTransactionId:void 0==app.SCOPE.txn?"":app.SCOPE.txn.transactionId,notification:{},profile:{action:"deleteProfile",profileId:s}};console.log(o),dao.save(o).then(function(t){console.log("Worker Object submitted for profile("+s+") deletion."),console.log(t),e(t)}).catch(function(e){console.log(e),i(data)})})}function createProfile(e){var t=e[1]||{},s=t.communityId,i=t.profile;return new Promise(function(e,t){library.createProfileDocuments(s,i).then(function(t){var s=util.success("Form created successfully.",t);e(s)}).catch(function(e){console.error(e);var s=util.success("ERROR: Profile creation failed",{});t(s)})})}function setDraft(e){var t=e[0]||{},s=(t.communityId,t.profile,e[2]||"");return new Promise(function(e,i){for(var r=JSON.xpath("/subprocesses[_id eq '"+s+"']",t,{})[0],o=r.indicators,a=0;a<o.length;a++){var n=o[a].instances[0].uuid,c=JSON.xpath("/indicators[_id eq '"+n+"']",t,{})[0];c.control.draft=!0}e("Set Draft Success",o)})}function setUnDraft(e){var t=e[0]||{},s=(t.communityId,t.profile,e[2]||"");return new Promise(function(e,i){for(var r=JSON.xpath("/subprocesses[_id eq '"+s+"']",t,{})[0],o=r.indicators,a=0;a<o.length;a++){var n=o[a].instances[0].uuid,c=JSON.xpath("/indicators[_id eq '"+n+"']",t,{})[0];c.control.draft=!1}e("Set Draft Success",o)})}function save(e){var t={complete:!0,data:[]};return new Promise(function(e,s){var i=util.success("Form indicator set saved successfully.",t);e(i)})}function submit(e){var t={complete:!0,data:[]};return new Promise(function(e,s){var i=util.success("Form submitted successfully.",t);e(i)})}function authorise(e){var t=(e[0]||"",e[1]||{}),s=(t._id,e[2]||"",e[3]||"",e[4]||{}),i=e[6]||"";return new Promise(function(e,t){var r=(JSON.xpath("/subprocesses[_id eq '"+i+"']",app.SCOPE.workflow,{})[0],JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators/instances/uuid",s,{})),o=r.length,a=[],n=[],c=function(d){gatekeeper.authorise(r[d]).then(function(r){gatekeeper.persist(r).then(function(r){for(var u="",l=0;l<r.length;l++)r[l].id.endsWith(":approved")||(u=r[l].id);dao.get(u).then(function(r){if(0==s.indicators.length)s.indicators.push(r),o--,0==o?persistData("indicators",s,i).then(function(t){var s=util.success("Form authorised successfully.",a);e(s)}).catch(function(e){console.error(e);var s=util.success("Form authorised persist failed.",{});t(s)}):o>0&&c(d+1);else{for(var u=!1,l=0;l<s.indicators.length;l++){var p=s.indicators[l];if(p._id==r._id&&(u=!0,n.push(r),o--,0==o)){for(var f=s.indicators.length,h=n.length,m=0;m<f;m++){for(var v=!1,g=0;g<h;g++)s.indicators[m]._id==n[g]._id&&(v=!0);v||n.push(s.indicators[m])}s.indicators=n;break}}1==u&&0==o?persistData("indicators",s,i).then(function(t){var s=util.success("Form authorised successfully.",a);e(s)}).catch(function(e){console.error(e);var s=util.success("Form authorised persist failed.",{});t(s)}):o>0&&c(d+1)}}).catch(function(e){console.error(e);var s=util.success("Form authorised persist failed 2.",{});t(s)})},function(e){console.error(e);var s=util.success("Form authorised persist failed 3.",{});t(s)})},function(e){var s=util.success("Form authorised persist failed 4.",{});t(s)})};c(0)})}function close(e){var t={complete:!0,data:[]};return new Promise(function(e,s){var i=util.success("Form closed successfully.",t);e(i)})}function updateIndicator(e){var t=e[0]||{},s=e[1]||"",i=e[2]||"",r=e[3]||"";return new Promise(function(e,o){var a=i.split(".",1)[0],n=JSON.xpath("/indicators[workflows/processes/subProcessUUID = '"+s+"' and category/term = '"+a+"']",t,{})[0];if(void 0==n&&"appProfile"==a&&(n=JSON.xpath("/indicators[model/pending/status = 'Authorised' and category/term = '"+a+"']",t,{})[0],void 0==n)){var c=[],d={};d.model={},c.push(d);var u=util.success("Indicator updated skipped.",c);return void e(u)}var l=(r+"").replace(/'/g,"\\'"),l=l.split("\n").join(" "),p=n.model.pending.data,f=""==i?[]:i.split(/['"\[\].]+/),h=0;for(h=0;h<f.length-1;h++)""!=f[h]&&(p=p[f[h]]);p[f[h]]=l;var c=[],d={};d.model=n,c.push(d);var m=JSON.parse(JSON.stringify(app.SCOPE.txn));m.documents=[];var v={document:n._id,rev:n._rev};m.documents.push(v),app.SCOPE.txn.documents.push(v),dao.updateTransaction(m).then(function(t){dao.save(n).then(function(t){v.rev=t.rev;var s=util.success("Indicator updated.",c);e(s)}).catch(function(t){console.log(t);var s=util.success("Indicator updated.",c);e(s)})}).catch(function(t){console.log(t);var s=util.success("Indicator updated.",c);e(s)})})}function updateIndicatorWrapper(e){var t=e[0]||{},s=e[1]||"",i=e[2]||"",r=e[3]||"",o=e[4]||"";return new Promise(function(e,a){var n=JSON.xpath("/indicators[workflows/processes/subProcessUUID = '"+s+"' and category/term = '"+o+"']",t,{})[0];if(void 0==n&&"appProfile"==o&&(n=JSON.xpath("/indicators[model/pending/status = 'Authorised' and category/term = '"+o+"']",t,{})[0],void 0==n)){var c=[],d={};d.model={},c.push(d);var u=util.success("Indicator updated skipped.",c);return void e(u)}var l=r.replace(/'/g,"\\'"),l=l.split("\n").join(" "),p=n,f=""==i?[]:i.split(/['"\[\].]+/),h=0;for(h=0;h<f.length-1;h++)""!=f[h]&&(p=p[f[h]]);p[f[h]]=l;var c=[],d={};d.model=n,c.push(d);var m=JSON.parse(JSON.stringify(app.SCOPE.txn));m.documents=[];var v={document:n._id,rev:n._rev};m.documents.push(v),app.SCOPE.txn.documents.push(v),dao.updateTransaction(m).then(function(t){dao.save(n).then(function(t){v.rev=t.rev;var s=util.success("Indicator updated.",c);e(s)}).catch(function(t){console.log(t);var s=util.success("Indicator updated.",c);e(s)})}).catch(function(t){console.log(t);var s=util.success("Indicator updated.",c);e(s)})})}function markUpdateIndicator(e){var t=e[0]||{},s=e[1]||"",i=e[2]||"",r=e[3]||"";return new Promise(function(e,o){var a=JSON.xpath("/indicators[workflows/processes/subProcessUUID = '"+s+"' and category/term = '"+r+"']",t,{})[0];a.model.pending.status=i;var n=[],c={};c.model=a,n.push(c);var d=util.success("Indicator updated.",n);e(d)})}function setStatus(e){var t=e[0]||{},s=e[1]||"",i=e[2]||"";return new Promise(function(e,r){var o=JSON.xpath("/subprocesses[_id eq '"+s+"']",t,{})[0];o.step.message=i,e("Set profile status Success",o)})}var util=require("utility"),gatekeeper=new GK;module.exports={create:create,save:save,submit:submit,authorise:authorise,close:close,setDraft:setDraft,setUnDraft:setUnDraft,createProfile:createProfile,setInstanceTitle:setInstanceTitle,deleteProfile:deleteProfile,updateIndicator:updateIndicator,markUpdateIndicator:markUpdateIndicator,updateIndicatorWrapper:updateIndicatorWrapper};

},{"utility":8}],4:[function(require,module,exports){
"use strict";function getLanguageMessage(e){var a=service.getLanguage(),t=e.i18n[a];return t}function getNodeValue(e,a,t){return new Promise(function(r,i){if("string"==typeof e)r(e);else if(void 0!=e.value){var s="string";s=void 0!=e.value.datatype.dataType?e.value.datatype.dataType:e.value.datatype;var o=e.value.data;r("number"==s?Number(o):"string"==s?o:"integer"==s?parseInt(o):"decimal"==s?parseFloat(o):"date"==s||"dateTime"==s?o:o)}else if(void 0!=e.indicatorUUID){var n=null,c=JSON.xpath("/subprocesses[_id eq '"+t+"']",a,{})[0];0==c.indicators.length?n=JSON.xpath("/indicators[category/term eq '"+e.indicatorUUID.indicatorSetId+"']/_id",a,{})[0]:(n=JSON.xpath("/indicators[id eq '"+e.indicatorUUID.indicatorSetId+"']/instances/uuid",c,{})[0],void 0==n&&(n=JSON.xpath("/indicators[category/term eq '"+e.indicatorUUID.indicatorSetId+"']/_id",a,{})[0])),r(n)}else if(void 0!=e.indicator){var n=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+e.indicator.indicatorSetId+"']/instances/uuid",a,{})[0],d=JSON.xpath("/indicators[_id eq '"+n+"']",a,{})[0],p="";void 0!=e.indicator.basepath&&(p=e.indicator.basepath);var l="/model/pending/data/"+e.indicator.indicatorSetId+p+"/"+e.indicator.elementId,u=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+t+"']/id]/type",a,{})[0],v=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+t+"']/id])",a,{})[0]+1;if(u==PROCESS_TYPE_SUBPROFILE){var f=library.getSubprofileSubprocessIds();v=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+t+"']/id and uuid = "+f+"])",a,{})[0]+1}var S=replaceAll(l,"#SEQUENCE#",v),b=JSON.xpath("/subprocesses[_id eq '"+t+"']/dates/valid",a,{})[0],h="'"+b+"'",m=replaceAll(S,"#END_DATE#",h),O=replaceAll(m,"[.]","/");if(p.length>0){var x=JSON.xpath(O,d,{});r(x)}else{var x=JSON.xpath(O,d,{})[0];void 0!=e.indicator.addString&&""!=e.indicator.addString&&(x+=e.indicator.addString),r(x)}}else if(void 0!=e.system)r("ERROR: Unimplemented system type found.");else if(void 0!=e.variable)if(void 0!=e.variable.profile){var N=e.variable.profile,g=a.profile,I=g+":variables";dao.get(I).then(function(s){if(void 0!=e.variable.type)"count"==e.variable.type?r(s[e.variable.name].length):i("ERROR: Profile variables type implementation - Case not found");else{for(var o=s,n=""==N?[]:N.split(/['"\[\].]+/),c=0;c<n.length;c++)""!=n[c]&&(o=o[n[c]]);var d=o;if(void 0==d)i("Variable not found");else if("object"==typeof d){var p=function(){return new Promise(function(r,i){var s=0;if(void 0==e.variable.periodic||void 0==e.variable.periodic.seq){var o=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+t+"']/id]/type",a,{})[0];if(s=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+t+"']/id])",a,{})[0]+1,o==PROCESS_TYPE_SUBPROFILE){var n=library.getSubprofileSubprocessIds();s=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+t+"']/id and uuid = "+n+"])",a,{})[0]+1}r(s)}else getNodeValue(e.variable.periodic.seq,a,t).then(function(e){r(e)}).catch(function(e){i(e)})})},l=function(){return new Promise(function(r,i){var s="value";void 0!=e.variable.periodic&&void 0!=e.variable.periodic.value?getNodeValue(e.variable.periodic.value,a,t).then(function(e){r(e)}).catch(function(e){i(e)}):r(s)})};p().then(function(e){l().then(function(a){var t="/"+N+"["+e+"]/"+a,i=JSON.xpath(t,s,{})[0];r(i)}).catch(function(e){i(e)})}).catch(function(e){i(e)})}else"string"==typeof d&&r(d)}}).catch(function(e){i("ERROR: Profile variables not found")})}else if(void 0!=e.variable.subProfile){var N=e.variable.subProfile,q=app.profile.subprofileId;void 0!=e.variable.subprofileId&&""!=e.variable.subprofileId&&(q=e.variable.subprofileId);var I=q+":variables";dao.get(I).then(function(s){for(var o=s,n=""==N?[]:N.split(/['"\[\].]+/),c=0;c<n.length;c++)""!=n[c]&&(o=o[n[c]]);var d=o;if(void 0==d)i("Variable not found");else if("object"==typeof d){var p=0;if(void 0==e.variable.periodic||void 0==e.variable.periodic.seq){var l=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+t+"']/id]/type",a,{})[0];if(p=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+t+"']/id])",a,{})[0]+1,l==PROCESS_TYPE_SUBPROFILE){var u=library.getSubprofileSubprocessIds();p=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+t+"']/id and uuid = "+u+"])",a,{})[0]+1}}else p=getNodeValue(e.variable.periodic.seq,a,t);var v="value";void 0!=e.variable.periodic&&void 0!=e.variable.periodic.value&&(v=getNodeValue(e.variable.periodic.value,a,t));var f="/"+N+"["+p+"]/"+v,S=JSON.xpath(f,s,{})[0];r(S)}else"string"==typeof d&&r(d)}).catch(function(e){i("ERROR: sub Profile variables not found")})}else i("ERROR: Unimplemented profile type found.");else if(void 0!=e.indicatorWrapper){var J=e.indicatorWrapper.indicatorSetId,n=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+J+"']/instances/uuid",a,{})[0],d=JSON.xpath("/indicators[_id eq '"+n+"']",a,{})[0],_=replaceAll(e.indicatorWrapper.path,"[.]","/"),l="/"+_,E=JSON.xpath(l,d,{})[0];r(E)}else if(void 0!=e.calculated){for(var E="",P=e.calculated.separator,R=0;R<e.calculated.elements.length-1;R++){var y=e.calculated.elements,D=["fromRepeat","elementProperty","constantValue","elementWrapper","currentDate","randomDigits","profileObjectElement","profileObjectWrapper","currentFinancialYear","scopeVariable","xpath"];switch(propertyExists(y[R],D)){case"elementProperty":var J=y[R].elementProperty.indicatorSetId,n=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+J+"']/instances/uuid",a,{})[0],d=JSON.xpath("/indicators[_id eq '"+n+"']",a,{})[0],_=replaceAll(y[R].elementProperty.elementId,"[.]","/"),l="/model/pending/data/"+J+"/"+_,k=JSON.xpath(l,d,{})[0];E=E+k+P;break;case"constantValue":var k=y[R].constantValue.value;E=E+k+P;break;case"scopeVariable":var A=y[R].scopeVariable,k="";"#USER_ID"==A?k=_lclx.SUBSCRIPTIONS.userId:"#USERNAME"==A?k=_lclx.SESSION.username:"#FIRSTNAME"==A?k=_lclx.SESSION.firstName:"#LASTNAME"==A&&(k=_lclx.SESSION.lastName),k.length>0&&(E=E+k+P);break;case"elementWrapper":var J=y[R].elementWrapper.indicatorSetId,n=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+J+"']/instances/uuid",a,{})[0],d=JSON.xpath("/indicators[_id eq '"+n+"']",a,{})[0],_=replaceAll(y[R].elementWrapper.elementId,"[.]","/"),l="/"+_,k=JSON.xpath(l,d,{})[0];E=E+k+P;break;case"currentDate":E=E+formatDate(new Date)+P;break;case"randomDigits":var w=y[R].randomDigits.digits,U=Math.random(),V=Math.pow(10,w),W=U*V^0;E=E+W+P;break;case"profileObjectElement":var J=y[R].profileObjectElement.indicatorSetId,d=JSON.xpath("/indicators[category/term eq 'appProfile']",app.SCOPE.workflow,{})[0],_=replaceAll(y[R].profileObjectElement.elementId,"[.]","/"),l="/model/pending/data/"+J+"/"+_,k=JSON.xpath(l,d,{})[0];E=E+k+P;break;case"profileObjectWrapper":var J=y[R].profileObjectWrapper.indicatorSetId,d=JSON.xpath("/indicators[category/term eq 'appProfile']",app.SCOPE.workflow,{})[0],_=replaceAll(y[R].profileObjectWrapper.wrapperElementId,"[.]","/"),l="/"+_,k=JSON.xpath(l,d,{})[0];E=E+k+P;break;case"currentFinancialYear":var j=y[R].currentFinancialYear.startDate,F=y[R].currentFinancialYear.startMonth,M=(new Date).getFullYear()+"-"+F+"-"+j;E=E+M+P;break;case"fromRepeat":var J=y[R].fromRepeat.indicatorSetId,n=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+J+"']/instances/uuid",a,{})[0],d=JSON.xpath("/indicators[_id eq '"+n+"']",a,{})[0],_=replaceAll(y[R].fromRepeat.path,"[.]","/"),l="/model/pending/data/"+J+"/"+_,Y="";if("validDate"==y[R].fromRepeat.filter){var T=JSON.xpath("/subprocesses[_id eq '"+t+"']",a,{})[0],C=T.dates.valid;Y="[enddate eq '"+C+"']/"}l=l+Y+replaceAll(y[R].fromRepeat.element,"[.]","/");var k=JSON.xpath(l,d,{})[0];E=E+k+P;break;case"xpath":if(void 0!=y[R].xpath.indicatorSetId&&y[R].xpath.indicatorSetId.length>0){var J=y[R].xpath.indicatorSetId,n=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+J+"']/instances/uuid",a,{})[0],d=JSON.xpath("/indicators[_id eq '"+n+"']",a,{})[0],k=JSON.xpath(y[R].xpath.expr,d,{})[0];E=E+k+P;break}var k=JSON.xpath(y[R].xpath.expr,a,{})[0];E=E+k+P;break;default:i("No method found from implemented list.")}}var R=e.calculated.elements.length-1,y=e.calculated.elements,D=["fromRepeat","elementProperty","constantValue","elementWrapper","currentDate","randomDigits","profileObjectElement","profileObjectWrapper","currentFinancialYear","scopeVariable","xpath"];switch(propertyExists(y[R],D)){case"elementProperty":var J=y[R].elementProperty.indicatorSetId,n=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+J+"']/instances/uuid",a,{})[0],d=JSON.xpath("/indicators[_id eq '"+n+"']",a,{})[0],_=replaceAll(y[R].elementProperty.elementId,"[.]","/"),l="/model/pending/data/"+J+"/"+_,k=JSON.xpath(l,d,{})[0];E+=k;break;case"constantValue":var k=y[R].constantValue.value;E+=k;break;case"scopeVariable":var A=y[R].scopeVariable,k="";"#USER_ID"==A?k=_lclx.SUBSCRIPTIONS.userId:"#USERNAME"==A?k=_lclx.SESSION.username:"#FIRSTNAME"==A?k=_lclx.SESSION.firstName:"#LASTNAME"==A&&(k=_lclx.SESSION.lastName),k.length>0&&(E+=k);break;case"elementWrapper":var J=y[R].elementWrapper.indicatorSetId,n=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+J+"']/instances/uuid",a,{})[0],d=JSON.xpath("/indicators[_id eq '"+n+"']",a,{})[0],_=replaceAll(y[R].elementWrapper.elementId,"[.]","/"),l="/"+_,k=JSON.xpath(l,d,{})[0];E+=k;break;case"currentDate":E+=formatDate(new Date);break;case"randomDigits":var w=y[R].randomDigits.digits,U=Math.random(),V=Math.pow(10,w),W=U*V^0;E+=W;break;case"profileObjectElement":var J=y[R].profileObjectElement.indicatorSetId,d=JSON.xpath("/indicators[category/term eq 'appProfile']",app.SCOPE.workflow,{})[0],_=replaceAll(y[R].profileObjectElement.elementId,"[.]","/"),l="/model/pending/data/"+J+"/"+_,k=JSON.xpath(l,d,{})[0];E+=k;break;case"profileObjectWrapper":var J=y[R].profileObjectWrapper.indicatorSetId,d=JSON.xpath("/indicators[category/term eq 'appProfile']",app.SCOPE.workflow,{})[0],_=replaceAll(y[R].profileObjectWrapper.wrapperElementId,"[.]","/"),l="/"+_,k=JSON.xpath(l,d,{})[0];E+=k;break;case"currentFinancialYear":var j=y[R].currentFinancialYear.startDate,F=y[R].currentFinancialYear.startMonth,M=(new Date).getFullYear()+"-"+F+"-"+j;E+=M;break;case"fromRepeat":var J=y[R].fromRepeat.indicatorSetId,n=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+J+"']/instances/uuid",a,{})[0],d=JSON.xpath("/indicators[_id eq '"+n+"']",a,{})[0],_=replaceAll(y[R].fromRepeat.path,"[.]","/"),l="/model/pending/data/"+J+"/"+_,Y="";if("validDate"==y[R].fromRepeat.filter){var T=JSON.xpath("/subprocesses[_id eq '"+t+"']",a,{})[0],C=T.dates.valid;Y="[enddate eq '"+C+"']/"}l=l+Y+replaceAll(y[R].fromRepeat.element,"[.]","/");var k=JSON.xpath(l,d,{})[0];E+=k;break;case"xpath":if(void 0!=y[R].xpath.indicatorSetId&&y[R].xpath.indicatorSetId.length>0){var J=y[R].xpath.indicatorSetId,n=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+J+"']/instances/uuid",a,{})[0],d=JSON.xpath("/indicators[_id eq '"+n+"']",a,{})[0],k=JSON.xpath(y[R].xpath.expr,d,{})[0];E=E+k+P;break}var k=JSON.xpath(y[R].xpath.expr,a,{})[0];E=E+k+P;break;default:i("No method found from implemented list.")}r(E)}else if(void 0!=e.subProcess)if(void 0!=e.subProcess.path){for(var L=e.subProcess.path,B=L.split("."),Q="",R=0;R<B.length;R++)Q=Q+"['"+B[R]+"']";for(var c=JSON.xpath("/subprocesses[_id eq '"+t+"']",a,{})[0],z=c,G=""==Q?[]:Q.split(/['"\[\].]+/),H=0;H<G.length;H++)""!=G[H]&&(z=z[G[H]]);var E=z;r(E)}else void 0!=e.subProcess.stepUser})}function replaceAll(e,a,t){return"function"!=typeof e.replace&&(console.log(a+" "+t),console.log(e)),e.replace(new RegExp(a,"g"),t)}function formatDate(e){var a=e.getDate(),t=e.getMonth(),r=e.getFullYear();return a+"-"+t+"-"+r}function compare(e,a,t){switch(a){case">":return e>t;case"<":return e<t;case">=":return e>=t;case"<=":return e<=t;case"==":return void 0==e&&(e=""),e===t;case"!=":return e!==t}}module.exports={getLanguageMessage:getLanguageMessage,getNodeValue:getNodeValue,compare:compare};

},{}],5:[function(require,module,exports){
"use strict";function getProcess(e,s,t){return new Promise(function(n,i){try{var c=[],r=[];t.instance.processes.filter(function(s){s.id==e&&(r=s)}),util.syncLoop(r.subProcesses.length,function(n){var o=n.iteration(),u=r.seq,f=r.subProcesses[o].id,a=r.subProcesses[o].seq;getSubProcess(e,u,f,a,s,t).then(function(e){c.push(e),n.next()},function(e){n.break(),i(e)})},function(){n(c)})}catch(e){i(e)}})}function getSubProcess(e,s,t,n,i,c){return new Promise(function(r,o){try{var u={id:"",seq:"",name:"",help:"",dates:"",step:""},f=[],a=[];c.instance.processes.filter(function(i){if(i.id==e&&i.seq==s){i.subProcesses.length;i.subProcesses.filter(function(e){e.id==t&&e.seq==n&&0==e.complete&&(f=e)})}}),c.config.processes.filter(function(s){s._id==e&&s.subProcesses.filter(function(e){e._id==t&&(a=e)})}),u.id=a._id,u.seq=f.seq,u.name=util.getName(a.name,i),u.help=util.getName(a.help,i),u.dates=f.dates,u.step=f.step,r(u)}catch(e){o(e)}})}function prepareNotificationScreen(){""}var util=require("utility");module.exports={getProcess:getProcess};

},{"utility":8}],6:[function(require,module,exports){
"use strict";function get(){return new Promise(function(e,t){})}module.exports={get:get};

},{}],7:[function(require,module,exports){
"use strict";function count(e){return void 0!==e?e.length:0}function preRequisites(e,s,t){return new Promise(function(n,i){var o=[];try{util.syncLoop(e.length,function(n){var a=n.iteration();preRequisite(e[a],s,t).then(function(e){o.push(!0),n.next()},function(e){o.push(!1),n.break(),i(e)})},function(){if(o.every(Boolean)){var e=util.success("Pre-requisites completed successfully.",{});n(e)}else{var s=util.error("WFPreRequisiteError","Not all pre-requisites passed.");i(s)}})}catch(e){i(e)}})}function preRequisite(e,s,t){return new Promise(function(n,i){if(void 0!=e.check.numberProcessInstances){var o=e.check.numberProcessInstances,a=o.operator,r="";switch(a){case"greaterThan":r="gt";break;case"lessThan":r="lt";break;case"greaterThanEqual":r="ge";break;case"lessThanEqual":r="le";break;case"equalTo":r="eq";break;case"notEqualTo":r="ne"}var c=o.subProcessId,u=o.type,d="";d="all"==u?"":"[complete eq 'true']";var p="";void 0!=o.filter&&o.filter.length>0&&(p="["+o.filter+"]");var l="count(/instance/processes/subProcesses[id eq '"+c+"']"+d+p+")",f=JSON.xpath("/config/processes/subProcesses[_id eq '"+c+"']/type",s,{})[0],m=library.getSubprofileSubprocessIds();void 0!=app.profile.subprofileId&&""!=app.profile.subprofileId&&void 0!=f&&f==PROCESS_TYPE_SUBPROFILE&&(l="count(/instance/processes/subProcesses[id eq '"+c+"' and uuid = "+m+"]"+d+")");var h=JSON.xpath(l,s,{})[0],g=e.check.numberProcessInstances.count,v=util.compare(h,e.check.numberProcessInstances.operator,parseInt(g));if(v){var S=util.success("Pre-requisites passed.",{});n(S)}else{var I=helper.getLanguageMessage(e.message),N=util.error("WFPreRequisiteError",I);i(N)}}else if(void 0!=e.check.variable){var b=e.check.variable.scope,y="";if("profile"==b){var P=s.profile;y=P+":variables"}else if("subProfileSubProcessInstance"==b){var _=app.profile.subprofileId;y=_+":variables"}else i("ERROR: Scope '"+b+"' not implemented in pre-requisites");dao.get(y).then(function(o){for(var a=e.check.variable.name,r=e.check.variable.type,c=o,u=""==a?[]:a.split(/['"\[\].]+/),d=0;d<u.length;d++)""!=u[d]&&(c=c[u[d]]);var p,l=c;if(void 0!=r&&"array"==r)p=l;else if("object"==typeof l){var f=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+t+"']/id]/type",s,{})[0],m=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+t+"']/id])",s,{})[0]+1;if(f==PROCESS_TYPE_SUBPROFILE){var h=library.getSubprofileSubprocessIds();m=JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '"+t+"']/id and uuid = "+h+"])",s,{})[0]+1}var g="/"+a+"["+m+"]/value";p=JSON.xpath(g,o,{})[0]}else"string"==typeof l&&(p=l);var v=e.check.variable.value.data,S=e.check.variable.value.dataType.dataType;if(0==v.indexOf("xpath:")){var I=v.substring(6);v=JSON.xpath(I,s,{})[0]}if("#VALID_DATE"==v){var N=JSON.xpath("/subprocesses[_id eq '"+t+"']",s,{})[0];void 0!=N&&(v=N.dates.valid)}var c;if("number"==S?c=Number(v):"string"==S?c=v:"integer"==S?(c=parseInt(v),void 0!=r&&"array"==r&&(p=void 0==p?0:p.length)):"decimal"==S?c=parseFloat(v):"date"!=S&&"dateTime"!=S||(c=v),void 0==p&&void 0!=e.check.variable.allowBlank&&1==e.check.variable.allowBlank){var b=util.success("Variable Pre-requisites passed.",{});n(b)}else{var y=util.compare(p,e.check.variable.operator,c);if(y){var b=util.success("Variable Pre-requisites passed.",{});n(b)}else{var P=helper.getLanguageMessage(e.message);P=P.replace("#VALID_DATE",p);var _=util.error("WFPreRequisiteError",P);i(_)}}}).catch(function(s){if(void 0!=e.check.variable.allowBlank&&1==e.check.variable.allowBlank){var t=util.success("Variable Pre-requisites passed.",{});n(t)}else{var o=helper.getLanguageMessage(e.message),s=util.error("WFPreRequisiteError:",o);i(s)}})}else{var N=util.error("WFPreRequisiteError","Pre-requisite type not defined.");i(N)}})}function preActions(e,s,t){return new Promise(function(n,i){var o=[];try{var a=JSON.xpath("/subprocesses[_id eq '"+t+"']",s,{})[0],r=a["meta-data"].processConfigId,c=a["meta-data"].subProcessConfigId,u=a["meta-data"].subProcessInsSeq,d=a["meta-data"].subProcessInsSeq,p=JSON.xpath("/processes[_id eq '"+r+"']/subProcesses[_id eq '"+c+"']",s.config,{})[0],l=JSON.xpath("/subprocesses[_id eq '"+t+"']/step",s,{})[0];util.syncLoop(e.length,function(n){var a=n.iteration();action(e[a],r,u,c,d,p,l,s,{},t).then(function(e){o.push(!0),n.next()},function(e){o.push(!1),n.break(),i(e)})},function(){if(o.every(Boolean)){var e=util.success("Pre-actions completed successfully.",{});n(e)}else{var s=util.error("WFPreRequisiteError","Not all pre-actions passed.");i(s)}})}catch(e){i(e)}})}function getSubProcess(e,s){return void 0==s.subprocesses?[]:void s.subprocesses.filter(function(s){if(s.id==e)return s})}function subProcess(e,s,t,n,i,o,a,r){var c=[],u=[],d=[];r.subprocesses.filter(function(s){s._id==e&&(c=s)}),r.config.processes.filter(function(e){e._id==s&&(u=e,e.subProcesses.filter(function(e){e._id==n&&(d=e)}))});var p="",l=a.baseUUID,f=0;if(void 0!=l&&""!=l&&l.length>0){var m=JSON.xpath("/subprocesses[_id eq '"+l+"']",r,{})[0];p=m.groupKey,f=m["meta-data"].subProcessInsSeq}else{for(var h="",g=0;g<d.indicators.length-1;g++)h=h+"'"+d.indicators[g]._id+"',";h=h+"'"+d.indicators[g]._id+"'";var v=JSON.xpath("/indicators[setId = ("+h+") and cardinality eq 'single']",app.SCOPE.APP_CONFIG,{}).length;if(void 0!=d.instanceType.newSequence||v>0){var m=JSON.xpath("/instance/processes[id eq '"+s+"']",r,{})[0];p=void 0!=m&&m.subProcesses.length>0?m.subProcesses[0].groupKey:generateUUID()}else p=generateUUID();f=JSON.xpath("count(/processes/subProcesses[groupKey eq '"+p+"'])",r.instance,{})[0]}var S=a.label,I=e,N={_id:I,id:n,type:"workflowInstanceSubProcess",dateTimeCreated:moment().format(),dueDateTime:moment().format(),seq:i,initiated:!1,dates:{created:"",valid:"",start:"",due:"",closed:""},complete:!1,indicators:[],step:{},active:!0,groupKey:p,label:S,channels:["community_"+app.SCOPE.getCommunityId(),"profile_"+app.SCOPE.profileId,"application_"+app.SCOPE.applicationId,"community_"+app.SCOPE.getCommunityId()+"_application_"+app.SCOPE.applicationId],history:[],"meta-data":{applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.profileId,subprofileId:void 0==o?"":o,processConfigId:s,subProcessConfigId:n,subProcessInsSeq:f+1},messages:[],spStatus:""};return void 0!=a.validDate&&a.validDate.length>0&&(void 0!=d.periodType.periodic?N.dates.valid=moment(a.validDate).endOf("month").format("YYYY-MM-DD"):N.dates.valid=a.validDate),void 0!=app.profile.subprofileId&&""!=app.profile.subprofileId?(N.channels.push("profile_"+app.SCOPE.profileId+"_subprofile_"+app.profile.subprofileId),N.channels.push("subprofile_"+app.profile.subprofileId)):(N.channels.push("profile_"+app.SCOPE.profileId+"_subprofile_0"),N.channels.push("subprofile_0")),r.subprocesses.push(N),new Promise(function(e,o){try{var p=u.preActions;preActions(p,r,I).then(function(p){var l=u.prerequisites;preRequisites(l,r,I).then(function(u){var p=d.initiate;initiate(p,c,a).then(function(c){N.initiated=c.data.initiated,N.dates=c.data.dates;var u=d.steps[0]._id,p=(d.steps[0].transition[0]._id,1);step(s,t,n,i,u,p,a,r,I).then(function(s){N.step=s.data,indicators(d.indicators,r,N._id).then(function(s){N.indicators=s.data;var t=util.success(s.message,N);e(t)},function(e){o(e)})},function(e){console.log(e),o(e)})},function(e){r.subprocesses=r.subprocesses.filter(function(e){return!(e._id==I)}),o(e)})},function(e){r.subprocesses=r.subprocesses.filter(function(e){return!(e._id==I)}),o(e)})},function(e){r.subprocesses=r.subprocesses.filter(function(e){return!(e._id==I)}),o(e)})}catch(e){o(e)}})}function initiate(e,s,t){var n={initiated:!1,dates:{created:"",valid:"",start:"",due:"",closed:""}};return new Promise(function(i,o){var a=function(){if(void 0!=e.user){n.dates.created=t.createdDate,"userSelected"!=e.user.validDate._type&&"autoSelected"!=e.user.validDate._type||(void 0!=t.validDate?n.dates.valid=t.validDate:n.dates.valid=(new Date).toISOString().substring(0,10)),"userSelected"!=e.user.dueDate._type&&"autoSelected"!=e.user.dueDate._type||void 0!==t.dueDate&&(n.dates.due=t.dueDate),n.dates.start=t.firstDate,n.initiated=!0;var s=util.success("Sub-Process initiate completed successfully.",n);i(s)}else if(void 0!=e.auto);else{var a=util.error("WFInitiateError","Initiate type: "+e._type+" not defined.");o(a)}};if(void 0==s.complete)a();else if(!s.complete)if(e.parallelInstances)a();else{var r=util.error("WFInitiateError","Sub-process: "+s.id+" still active and parallel instances are not allowed.");o(r)}})}function step(e,s,t,n,i,o,a,r,c){var u,d={key:generateUUID(),id:"",seq:"",status:"",message:"",assignedTo:{userId:"",name:"",dateTime:"",type:"",dueDateTime:"",by:""},assignmentHistory:[],dateTimeCreated:moment().format(),dueDateTime:moment().format(),transition:{transitionId:"",dateTime:"",userId:""},assignment:{},comment:""},p={},l="",f={};return new Promise(function(m,h){try{r.subprocesses.filter(function(e){e._id==app.SCOPE.processUUID&&(u=e)}),r.config.processes.filter(function(s){s._id==e&&s.subProcesses.filter(function(e){e._id==t&&(p=e,e.steps.filter(function(e){e._id==i&&(f=e)}))})}),d.id=i,d.seq=o;var g="";void 0!=f.setInstanceStatusTo.NotStarted?g="NotStarted":void 0!=f.setInstanceStatusTo.Created?g="Created":void 0!=f.setInstanceStatusTo.InProgress?g="InProgress":void 0!=f.setInstanceStatusTo.Submitted?g="Submitted":void 0!=f.setInstanceStatusTo.Complete&&(g="Complete");var v=service.getLanguage();d.status=g,d.message=f.setInstanceStatusTo[g].label.i18n[v],d.comment=void 0!==a.comment?a.comment:"";var S=void 0!==u?u.indicators:[],I=function(e,s){var t=d.assignedTo;if(e.length>0)for(var n=0;n<e.length;n++){var i=e[n],o=i.instances[0].uuid,a=JSON.xpath("/indicators[_id eq '"+o+"']",s,{})[0];i.instances[0].seq=a.model.pending.seq;for(var r=0;r<a.workflows.length;r++)void 0!=a.workflows[r].processes[0]&&void 0!=a.workflows[r].processes[0].subProcessUUID&&void 0!=a.workflows[r].processes[0].step&&c==a.workflows[r].processes[0].subProcessUUID&&(a.workflows[r].processes[0].step.assignedTo=t)}},N=function(e){var s=JSON.xpath("/subprocesses[_id eq '"+e+"']",r,{})[0];s.spStatus=""};indicatorDocs(e,S,d,r,c).then(function(o){l=c,void 0!=f.function.actions?actions(f.function.actions,e,s,t,n,p,d,r,a,c).then(function(o){var u=d.assignedTo;u.name=_lclx.SESSION.firstName+" "+_lclx.SESSION.lastName,u.userId=_lclx.SUBSCRIPTIONS.userId+"",u.dateTime=moment().format(),u.type=ASSIGNMENT_TYPE_AUTO,u.dueDateTime="",u.by=_lclx.SUBSCRIPTIONS.userId+"",I(S,r);var p=f.transition[0]._id;transition(e,s,t,n,i,p,a,r,c,d).then(function(e){var s=util.success("Transition completed successfully.",e.data.step);m(s)},function(e){h(e)})},function(e){console.log(e),h(e)}):void 0!=f.function.task?task(e,s,f.function.task,c,d).then(function(e){I(S,r);var s=util.success("Task awaiting user action.",d);m(s)},function(e){h(e)}):void 0!=f.function.server&&(N(c),server(f.function.server,e,s,t,n,p,d,r,a,c).then(function(e){I(S,r);var s=util.success("Server awaiting server response.",d);m(s)},function(e){h(e)}))},function(e){h(e)})}catch(e){h(e)}})}function indicators(e,s,t){var n=[];return new Promise(function(e,i){try{for(var o=JSON.xpath("indicators[fn:count(./workflows/processes[subProcessUUID eq '"+t+"']) gt 0]",s,{}),a=0;a<o.length;a++){var r=o[a],c={id:"",instances:[]},u={uuid:"",title:"",key:"",seq:1,rev:""};c.id=r.category.term,u.uuid=r._id,u.rev=r._rev,u.title=r.title,u.key="",u.seq=r.model.pending.seq,c.instances.push(u),n.push(c)}var d=util.success("Process indicator model updated.",n);e(d)}catch(e){i(e)}})}function assignUser(e,s,t,n,i,o,a){return new Promise(function(s,t){try{a.subprocesses.filter(function(t){if(t._id==o){void 0==t.step.assignmentHistory&&(t.step.assignmentHistory=[]),""!=t.step.assignedTo.userId&&""!=t.step.assignedTo.name&&t.step.assignmentHistory.push(JSON.parse(JSON.stringify(t.step.assignedTo))),t.step.assignedTo.userId=i.id,t.step.assignedTo.name=i.name,t.step.assignedTo.dateTime=moment().format(),t.step.assignedTo.type=ASSIGNMENT_TYPE_REASSIGNMENT,t.step.assignedTo.dueDateTime="",t.step.assignedTo.by=_lclx.SUBSCRIPTIONS.userId+"";for(var n=t.indicators,r=0;r<n.length;r++)for(var c=n[r],u=0;u<c.instances.length;u++)for(var d=c.instances[u],p=0;p<a.indicators.length;p++){var l=a.indicators[p];d.uuid==l._id&&l.workflows.filter(function(s){s.processes.filter(function(s){s.id==e&&(s.step.assignedTo.userId=i.id,s.step.assignedTo.name=i.name)})})}var f=JSON.xpath("/processes[_id eq '"+e+"']/notifications",a.config,{})[0];if(void 0!=f&&void 0!=f.reAssignment)if("string"==typeof f.reAssignment){var m=f.reAssignment;dao.getConfig(m).then(function(e){f.reAssignment=e,actionsModule.notification.reAssignmentNotification(f,a,o,i).then(function(e){var e=util.success('User assigned successfully. UserId: "'+i.id+'", Name: "'+i.name+'"',t);s(e)}).catch(function(e){s(e)})}).catch(function(e){s(e)})}else actionsModule.notification.reAssignmentNotification(f,a,o,i).then(function(e){var e=util.success('User assigned successfully. UserId: "'+i.id+'", Name: "'+i.name+'"',t);s(e)}).catch(function(e){s(e)});else{var h=util.success('User assigned successfully. UserId: "'+i.id+'", Name: "'+i.name+'"',t);s(h)}}})}catch(e){t(e)}})}function indicatorDocs(e,s,t,n,i){return new Promise(function(e,o){try{if(void 0==s){util.error("WFIndicatorsUpdate","Indicators parameter is required. - Value: "+s);o(err)}else{for(var a=0;a<s.length;a++)for(var r=s[a],c=0;c<r.instances.length;c++)for(var u=r.instances[c],d=0;d<n.indicators.length;d++){var p=n.indicators[d];u.uuid==p._id&&p.workflows.filter(function(e){e.processes.filter(function(e){e.subProcessUUID==i&&(e.step.id=t.id,e.step.seq=t.seq,e.step.status=t.status,e.step.message=t.message,e.step.assignedTo.userId=t.assignedTo.userId,e.step.assignedTo.name=t.assignedTo.name,e.step.comment=void 0!==t.comment?t.comment:"")})})}var l=util.success("Indicator documents workflow process model updated.",n);e(l)}}catch(e){o(e)}})}function actions(e,s,t,n,i,o,a,r,c,u){var d=[];return new Promise(function(p,l){util.syncLoop(e.length,function(p){var f=p.iteration();action(e[f],s,t,n,i,o,a,r,c,u).then(function(s){var t={id:e[f]._id,seq:f,data:s};d.push(t),p.next()},function(e){p.break(),l(e)})},function(){var e=util.success("Actions completed successfully.",d);p(e)})})}function action(e,s,t,n,i,o,a,r,c,u){return new Promise(function(n,d){if(void 0!=e.method){var p=["form","indicator","profile","subProcessInstance","step","community","application","user","sdo","performance","taxonomy","variables","notification","report","worker","participants","generalFunctions"];switch(propertyExists(e.method,p)){case"form":if(void 0!=e.method.form.create){var l=[];l.push(s),l.push(o),l.push(a),l.push(e),l.push(t),l.push(i),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.create(l).then(function(e){n(e.data)},function(e){d(e)})}else if(void 0!=e.method.form.authorise){var l=[];l.push(s),l.push(o),l.push(t),l.push(i),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.authorise(l).then(function(e){n(e.data)},function(e){d(e)})}else if(void 0!=e.method.form.undraft){var l=[];l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.setUnDraft(l).then(function(e){n(e.data)},function(e){d(e)})}else if(void 0!=e.method.form.draft){var l=[];l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.setDraft(l).then(function(e){n(e.data)},function(e){d(e)})}else if(void 0!=e.method.form.close){var l=[];l.push(o.indicators),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.close(l).then(function(e){n(e.data)},function(e){d(e)})}else if(void 0!=e.method.form.authoriseAndCreateNewSeq){var l=[];l.push(s),l.push(o),l.push(t),l.push(i),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.authorise(l).then(function(p){var l=[];l.push(s),l.push(o),l.push(a),l.push(e),l.push(t),l.push(i),l.push(r),l.push(c.createType),l.push(u),l.push(u),l.push(c),form.create(l).then(function(e){n(e.data)},function(e){d(e)})},function(e){d(e)})}else if(void 0!=e.method.form.createNewSeq){var l=[];l.push(s),l.push(o),l.push(a),l.push(e),l.push(t),l.push(i),l.push(r),l.push(c.createType),l.push(u),l.push(u),l.push(c),form.create(l).then(function(e){n(e.data)},function(e){d(e)})}break;case"indicator":if(void 0!=e.method.indicator.create)n("Not implemented");else if(void 0!=e.method.indicator.instantiate)n("Not implemented");else if(void 0!=e.method.indicator.setValue){var f=e.method.indicator.setValue.path;helper.getNodeValue(e.method.indicator.setValue.data,r,u).then(function(e){var s=[];s.push(r),s.push(u),s.push(f),s.push(e),form.updateIndicator(s).then(function(e){n(e.data)},function(e){d(e)})},function(e){d(e)})}else if(void 0!=e.method.indicator.updateStatus){var m=e.method.indicator.indicatorSetId,l=[];if(l.push(r),l.push(u),void 0!=e.method.indicator.updateStatus){var h=e.method.indicator.updateStatus;l.push(h),l.push(m),form.markUpdateIndicator(l).then(function(e){n(e.data)},function(e){d(e)})}else n("Action indicator sub type not found.")}else if(void 0!=e.method.indicator.setWrapperElement){var f=e.method.indicator.setWrapperElement.path,m=e.method.indicator.setWrapperElement.indicatorSetId;helper.getNodeValue(e.method.indicator.setWrapperElement.data,r,u).then(function(e){var s=[];s.push(r),s.push(u),s.push(f),s.push(e),s.push(m),form.updateIndicatorWrapper(s).then(function(e){n(e.data)},function(e){d(e)})},function(e){d(e)})}break;case"profile":if(void 0!=e.method.profile.create){var l=[];l.push(s),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.createProfile(l).then(function(e){n(e.data)},function(e){d(e)})}else if(void 0!=e.method.profile.setStatusTo){var l=[],h=e.method.profile.setStatusTo;l.push(r),l.push(u),l.push(h),form.setStatus(l).then(function(e){n(e.data)},function(e){d(e)})}break;case"subProcessInstance":var g=["instantiate","authorise","close","setVariable","setStatusTo","setStatusMsgTo","setTitle","setValidDate","setSPStatus"];switch(propertyExists(e.method.subProcessInstance,g)){case"setTitle":helper.getNodeValue(e.method.subProcessInstance.setTitle,r,u).then(function(s){actionsModule.subProcessInstance.setTitle(e.method.subProcessInstance.setTitle,u,s,r).then(function(e){n(e.data)},function(e){d(e)})},function(e){d(e)});break;case"setValidDate":helper.getNodeValue(e.method.subProcessInstance.setValidDate,r,u).then(function(s){actionsModule.subProcessInstance.setValidDate(e.method.subProcessInstance.setValidDate,u,s,r).then(function(e){n(e.data)},function(e){d(e)})},function(e){d(e)});break;case"setSPStatus":helper.getNodeValue(e.method.subProcessInstance.setSPStatus,r,u).then(function(s){actionsModule.subProcessInstance.setSPStatus(e.method.subProcessInstance.setSPStatus,u,s,r).then(function(e){n(e.data)},function(e){d(e)})},function(e){d(e)});break;default:d("No method found from implemented list in subprocess action.")}break;case"step":break;case"community":var v=["createCommunity","releaseAdoptedApplication","userJoinCommunity"];switch(propertyExists(e.method.community,v)){case"createCommunity":return actionsModule.community.createCommunity(e.method.community.createCommunity,u,r).then(function(e){n(e.data)},function(e){d(e)});case"releaseAdoptedApplication":return actionsModule.community.releaseAdoptedApplication(e.method.community.releaseAdoptedApplication,u,r).then(function(e){n(e.data)},function(e){d(e)});case"userJoinCommunity":return actionsModule.community.userJoinCommunity(e.method.community.userJoinCommunity,u,r).then(function(e){n(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"application":var S=["createAppDefinition","buildApplication","applicationAdoption"];switch(propertyExists(e.method.application,S)){case"createAppDefinition":return actionsModule.application.createAppDefinition(e.method.application.createAppDefinition,u,r).then(function(e){n(e.data)},function(e){d(e)});case"buildApplication":return actionsModule.application.buildApplication(e.method.application.buildApplication,u,r).then(function(e){n(e.data)},function(e){d(e)});case"applicationAdoption":return actionsModule.application.applicationAdoption(e.method.application.applicationAdoption,u,r).then(function(e){n(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"user":var I=["addToRole"];switch(propertyExists(e.method.user,I)){case"addToRole":return actionsModule.user.addToRole(e.method.user.addToRole,u,r).then(function(e){n(e.data)},function(e){d(e)})}break;case"sdo":var N=["create","enrollCourse"];switch(propertyExists(e.method.sdo,N)){case"create":return actionsModule.sdo.create(e.method.sdo.create,u,r).then(function(e){n(e.data)},function(e){d(e)});case"enrollCourse":return actionsModule.sdo.enrollCourse(e.method.sdo.enrollCourse,u,r).then(function(e){n(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"performance":var b=["unlockPeriod","lockPerformanceModel","setModelStatus"];switch(propertyExists(e.method.performance,b)){case"unlockPeriod":return actionsModule.performance.unlockPeriod(e.method.performance.unlockPeriod,u,r).then(function(e){n(e.data)},function(e){d(e)});case"setModelStatus":return actionsModule.performance.setModelStatus(e.method.performance.setModelStatus,u,r).then(function(e){n(e.data)},function(e){d(e)});case"lockPerformanceModel":return actionsModule.performance.lockPerformanceModel(e.method.performance.lockPerformanceModel,u,r).then(function(e){n(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"taxonomy":var y=["create"];switch(propertyExists(e.method.taxonomy,y)){case"create":return actionsModule.taxonomy.create(e.method.taxonomy.create,u,r).then(function(e){n(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"variables":var P=["setVariable"];switch(propertyExists(e.method.variables,P)){case"setVariable":return actionsModule.variables.setVariable(e.method.variables.setVariable,r,u).then(function(e){n(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"notification":if("string"==typeof e.method.notification){var _=e.method.notification;dao.getConfig(_).then(function(s){e.method.notification=s,actionsModule.notification.sendNotificationWorker(e.method.notification,r,u).then(function(e){n(e.data)},function(e){d(e)})}).catch(function(e){n(e)})}else actionsModule.notification.sendNotificationWorker(e.method.notification,r,u).then(function(e){n(e.data)},function(e){d(e)});break;case"report":var O=["createPerformanceReport","createReport","sdoReport","executeReport","requestReport","generateView","generateBasicView","generateUnionView","sdoReportMultiple","subprofileQuarterlyReport"];switch(propertyExists(e.method.report,O)){case"createPerformanceReport":return actionsModule.report.createPerformanceReport(e.method.report.createPerformanceReport,r,u).then(function(e){n(e.data)},function(e){d(e)});case"createReport":return actionsModule.report.createReport(e.method.report.createReport,r,u).then(function(e){n(e.data)},function(e){d(e)});case"sdoReport":return actionsModule.report.sdoReport(e.method.report.sdoReport,r,u).then(function(e){n(e.data)},function(e){d(e)});case"executeReport":return actionsModule.report.executeReport(e.method.report.executeReport,r,u).then(function(e){n(e.data)},function(e){d(e)});case"generateView":return actionsModule.report.generateView(e.method.report.generateView,r,u).then(function(e){n(e.data)},function(e){d(e)});case"requestReport":return actionsModule.report.requestReport(e.method.report.requestReport,r,u).then(function(e){n(e.data)},function(e){d(e)});case"generateBasicView":return actionsModule.report.generateBasicView(e.method.report.generateBasicView,r,u).then(function(e){n(e.data)},function(e){d(e)});case"generateUnionView":return actionsModule.report.generateUnionView(e.method.report.generateUnionView,r,u).then(function(e){n(e.data)},function(e){d(e)});case"sdoReportMultiple":return actionsModule.report.sdoReportMultiple(e.method.report.sdoReportMultiple,r,u).then(function(e){n(e.data)},function(e){d(e)});case"subprofileQuarterlyReport":return actionsModule.report.subprofileQuarterlyReport(e.method.report.subprofileQuarterlyReport,r,u).then(function(e){n(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"worker":var T=["sendWorker","executeLocal","create"];switch(propertyExists(e.method.worker,T)){case"sendWorker":return actionsModule.worker.sendWorker(e.method.worker.sendWorker,r,u).then(function(e){n(e.data)},function(e){d(e)});case"executeLocal":return actionsModule.worker.executeLocal(e.method.worker.executeLocal,r,u).then(function(e){n(e.data)},function(e){d(e)});case"create":return actionsModule.worker.create(e.method.worker.create,r,u).then(function(e){n(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"participants":var x=["linkParticipants","monthlyAttendance","monthlyProgressSummary","participantContracts"];switch(propertyExists(e.method.participants,x)){case"linkParticipants":return actionsModule.participants.linkParticipants(e.method.participants.linkParticipants,r,u).then(function(e){n(e.data)},function(e){d(e)});case"monthlyAttendance":return actionsModule.participants.monthlyAttendance(e.method.participants.monthlyAttendance,r,u).then(function(e){n(e.data)},function(e){d(e)});case"monthlyProgressSummary":return actionsModule.participants.monthlyProgressSummary(e.method.participants.monthlyProgressSummary,r,u).then(function(e){n(e.data)},function(e){d(e)});case"participantContracts":return actionsModule.participants.participantContracts(e.method.participants.participantContracts,r,u).then(function(e){n(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"generalFunctions":var q=["addToFavourites","addToUserFavourites"];switch(propertyExists(e.method.generalFunctions,q)){case"addToFavourites":return actionsModule.generalFunctions.addToFavourites(e.method.generalFunctions.addToFavourites,r,u).then(function(e){n(e.data)},function(e){d(e)});case"addToUserFavourites":return actionsModule.generalFunctions.addToUserFavourites(e.method.generalFunctions.addToUserFavourites,r,u).then(function(e){n(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;default:d("method not defined in configuration")}}else d("No method found from implemented list.")})}function task(e,s,t,n,i){return new Promise(function(s,o){var a=app.SCOPE.workflow,r=t.preActions;preActions(r,a,n).then(function(r){var c=[];if(void 0!=t.assign.role){var u=a.profile,d="",p=function(){var r=t.assign.role.roleId;library.getUsersFromProfileRole(d,r).then(function(o){if(void 0!=o)if(o.length>1){for(var r=!1,c=0;c<o.length;c++){o[c].id;_lclx.SUBSCRIPTIONS.userId==o[c].id&&(r=!0)}if(r){void 0==i.assignmentHistory&&(i.assignmentHistory=[]);var u=i.assignedTo;if(""!=u.userId&&""!=u.name){var p=JSON.parse(JSON.stringify(u));i.assignmentHistory.push(p)}u.name=_lclx.SESSION.firstName+" "+_lclx.SESSION.lastName,u.userId=_lclx.SUBSCRIPTIONS.userId+"",u.dateTime=moment().format(),u.type=ASSIGNMENT_TYPE_AUTO,u.dueDateTime="",u.by=_lclx.SUBSCRIPTIONS.userId+"";var l=JSON.xpath("/processes[_id eq '"+e+"']/notifications",a.config,{})[0];if(void 0!=l&&void 0!=l.assignment){var f={id:_lclx.SUBSCRIPTIONS.userId,name:_lclx.SUBSCRIPTIONS.username};if("string"==typeof l.assignment){var m=l.assignment;dao.getConfig(m).then(function(e){l.assignment=e,actionsModule.notification.assignmentNotification(l,a,n,f).then(function(e){console.log('User assigned successfully. UserId: "'+f.id+'", Name: "'+f.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+f.id+'", Name: "'+f.name+'"')})}).catch(function(e){s(e)})}else actionsModule.notification.assignmentNotification(l,a,n,f).then(function(e){console.log('User assigned successfully. UserId: "'+f.id+'", Name: "'+f.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+f.id+'", Name: "'+f.name+'"')})}}var h="";if(void 0!=t.assign.assignment){var h=i.assignment,g={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};h.accept=g,h.message=_getNameByLang(t.assign.assignment.message.i18n);var v={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};h.reject=v;var S={profileId:d,type:"user",userId:o};h.value=S,h.profileRoleId=d}if(r){var I=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+n+"']/id",a,{})[0],N=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+n+"']/id",a,{})[0],b=JSON.xpath("/subprocesses[_id eq '"+n+"']/step/id",a,{})[0];JSON.xpath("/processes[_id eq '"+I+"']/subProcesses[_id eq '"+N+"']/steps[_id eq '"+b+"']",a.config,{})[0];if(void 0!=t.preWorkActions){var y=t.preWorkActions;preWorkActions(y,a).then(function(e){s("Assignment is made. Pre work actions found and executed ")},function(e){v(e)})}else s("Assignment is made. No pre work actions found. ")}else{var l=JSON.xpath("/processes[_id eq '"+e+"']/notifications",a.config,{})[0];if(void 0!=l&&void 0!=l.assignmentAcceptance){var f={id:_lclx.SUBSCRIPTIONS.userId,name:_lclx.SUBSCRIPTIONS.username};actionsModule.notification.acceptanceNotificationExternal(l,a,n,o).then(function(e){s("Notifications request submitted for acceptance.")}).catch(function(e){s("Notifications failed"),console.log('User assignment notification failed to user UserId: "'+f.id+'", Name: "'+f.name+'"')})}else s("Notifications not found")}}else if(1==o.length){var P=o[0].id,_=o[0].name;void 0==i.assignmentHistory&&(i.assignmentHistory=[]);var u=i.assignedTo;if(""!=u.userId&&""!=u.name){var p=JSON.parse(JSON.stringify(u));i.assignmentHistory.push(p)}u.name=_+"",u.userId=P+"",u.dateTime=moment().format(),u.type=ASSIGNMENT_TYPE_AUTO,u.dueDateTime="",u.by=_lclx.SUBSCRIPTIONS.userId+"";var h="";if(void 0!=t.assign.assignment){var h=i.assignment,g={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};h.accept=g,h.message=_getNameByLang(t.assign.assignment.message.i18n);var v={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};h.reject=v;var S={profileId:d,userId:o,type:"user"};h.value=S,h.profileRoleId=d}var l=JSON.xpath("/processes[_id eq '"+e+"']/notifications",a.config,{})[0];if(void 0!=l&&void 0!=l.assignment){var f={id:P,name:_};if("string"==typeof l.assignment){var m=l.assignment;dao.getConfig(m).then(function(e){l.assignment=e,actionsModule.notification.assignmentNotification(l,a,n,f).then(function(e){console.log('User assigned successfully. UserId: "'+f.id+'", Name: "'+f.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+f.id+'", Name: "'+f.name+'"')})}).catch(function(e){s(e)})}else actionsModule.notification.assignmentNotification(l,a,n,f).then(function(e){console.log('User assigned successfully. UserId: "'+f.id+'", Name: "'+f.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+f.id+'", Name: "'+f.name+'"')})}var I=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+n+"']/id",a,{})[0],N=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+n+"']/id",a,{})[0],b=JSON.xpath("/subprocesses[_id eq '"+n+"']/step/id",a,{})[0];JSON.xpath("/processes[_id eq '"+I+"']/subProcesses[_id eq '"+N+"']/steps[_id eq '"+b+"']",a.config,{})[0];if(void 0!=t.preWorkActions){var y=t.preWorkActions;preWorkActions(y,a).then(function(e){s("Assigned to the only user in role. Pre work actions executed")},function(e){v(e)})}else s("Assigned to the only user in role. No pre work actions found.")}else{var u=i.assignedTo;u.name="",u.userId="";var h="";if(void 0!=t.assign.assignment){var h=i.assignment,g={
show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};h.accept=g,h.message=_getNameByLang(t.assign.assignment.message.i18n);var v={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};h.reject=v;var S={profileId:d,userId:o,type:"user"};h.value=S,h.profileRoleId=d}s("No users found in list. Assigning blank ")}else v("Error in getUsersFromProfileRole ")}).catch(function(e){o(e)})},l=function(){var r=t.assign.role.roleId;library.getUsersListByRole(d,r).then(function(o){if(void 0!=o)if(o.length>1){var c=!1,p=library.getCurrentUserRoles(),l=p.profile.indexOf(r),f=p.community.indexOf(r),m=p.implicit.indexOf(r),h=p.adoption.indexOf(r),g=p.subprofile.indexOf(r);if(c=l>-1||f>-1||m>-1||h>-1||g>-1){void 0==i.assignmentHistory&&(i.assignmentHistory=[]);var v=i.assignedTo;if(""!=v.userId&&""!=v.name){var S=JSON.parse(JSON.stringify(v));i.assignmentHistory.push(S)}v.name=_lclx.SESSION.firstName+" "+_lclx.SESSION.lastName,v.userId=_lclx.SUBSCRIPTIONS.userId+"",v.dateTime=moment().format(),v.type=ASSIGNMENT_TYPE_AUTO,v.dueDateTime="",v.by=_lclx.SUBSCRIPTIONS.userId+"";var I=JSON.xpath("/processes[_id eq '"+e+"']/notifications",a.config,{})[0];if(void 0!=I&&void 0!=I.assignment){var N={id:_lclx.SUBSCRIPTIONS.userId,name:_lclx.SUBSCRIPTIONS.username};if("string"==typeof I.assignment){var b=I.assignment;dao.getConfig(b).then(function(e){I.assignment=e,actionsModule.notification.assignmentNotification(I,a,n,N).then(function(e){console.log('User assigned successfully. UserId: "'+N.id+'", Name: "'+N.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+N.id+'", Name: "'+N.name+'"')})}).catch(function(e){s(e)})}else actionsModule.notification.assignmentNotification(I,a,n,N).then(function(e){console.log('User assigned successfully. UserId: "'+N.id+'", Name: "'+N.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+N.id+'", Name: "'+N.name+'"')})}}var y="";if(void 0!=t.assign.assignment){var y=i.assignment,P={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};y.accept=P,y.message=_getNameByLang(t.assign.assignment.message.i18n);var _={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};y.reject=_;var O={profileId:u,roleId:r,type:"role"};y.value=O,y.profileRoleId=d}if(c){var T=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+n+"']/id",a,{})[0],x=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+n+"']/id",a,{})[0],q=JSON.xpath("/subprocesses[_id eq '"+n+"']/step/id",a,{})[0];JSON.xpath("/processes[_id eq '"+T+"']/subProcesses[_id eq '"+x+"']/steps[_id eq '"+q+"']",a.config,{})[0];if(void 0!=t.preWorkActions){var U=t.preWorkActions;preWorkActions(U,a).then(function(e){s("Assignment is made. Pre work actions found and executed ")},function(e){_(e)})}else s("Assignment is made. No pre work actions found. ")}else{var I=JSON.xpath("/processes[_id eq '"+e+"']/notifications",a.config,{})[0];if(void 0!=I&&void 0!=I.assignmentAcceptance){var N={id:_lclx.SUBSCRIPTIONS.userId,name:_lclx.SUBSCRIPTIONS.username};if("string"==typeof I.assignmentAcceptance){var b=I.assignmentAcceptance;dao.getConfig(b).then(function(e){I.assignmentAcceptance=e,actionsModule.notification.acceptanceNotification(I,a,n,r).then(function(e){s("Notifications request submitted for acceptance.")}).catch(function(e){s("Notifications failed"),console.log('User assignment notification failed to user UserId: "'+N.id+'", Name: "'+N.name+'"')})}).catch(function(e){s(e)})}else actionsModule.notification.acceptanceNotification(I,a,n,r).then(function(e){s("Notifications request submitted for acceptance.")}).catch(function(e){s("Notifications failed"),console.log('User assignment notification failed to user UserId: "'+N.id+'", Name: "'+N.name+'"')})}else s("Notifications not found")}}else if(1==o.length){var k=o[0].id,w=o[0].name;void 0==i.assignmentHistory&&(i.assignmentHistory=[]);var v=i.assignedTo;if(""!=v.userId&&""!=v.name){var S=JSON.parse(JSON.stringify(v));i.assignmentHistory.push(S)}v.name=w+"",v.userId=k+"",v.dateTime=moment().format(),v.type=ASSIGNMENT_TYPE_AUTO,v.dueDateTime="",v.by=_lclx.SUBSCRIPTIONS.userId+"";var y="";if(void 0!=t.assign.assignment){var y=i.assignment,P={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};y.accept=P,y.message=_getNameByLang(t.assign.assignment.message.i18n);var _={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};y.reject=_;var O={profileId:u,roleId:r,type:"role"};y.value=O,y.profileRoleId=d}var I=JSON.xpath("/processes[_id eq '"+e+"']/notifications",a.config,{})[0];if(void 0!=I&&void 0!=I.assignment){var N={id:k,name:w};if("string"==typeof I.assignment){var b=I.assignment;dao.getConfig(b).then(function(e){I.assignment=e,actionsModule.notification.assignmentNotification(I,a,n,N).then(function(e){console.log('User assigned successfully. UserId: "'+N.id+'", Name: "'+N.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+N.id+'", Name: "'+N.name+'"')})}).catch(function(e){s(e)})}else actionsModule.notification.assignmentNotification(I,a,n,N).then(function(e){console.log('User assigned successfully. UserId: "'+N.id+'", Name: "'+N.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+N.id+'", Name: "'+N.name+'"')})}var T=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+n+"']/id",a,{})[0],x=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+n+"']/id",a,{})[0],q=JSON.xpath("/subprocesses[_id eq '"+n+"']/step/id",a,{})[0];JSON.xpath("/processes[_id eq '"+T+"']/subProcesses[_id eq '"+x+"']/steps[_id eq '"+q+"']",a.config,{})[0];if(void 0!=t.preWorkActions){var U=t.preWorkActions;preWorkActions(U,a).then(function(e){s("Assigned to the only user in role. Pre work actions executed")},function(e){_(e)})}else s("Assigned to the only user in role. No pre work actions found.")}else{var v=i.assignedTo;v.name="",v.userId="";var y="";if(void 0!=t.assign.assignment){var y=i.assignment,P={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};y.accept=P,y.message=_getNameByLang(t.assign.assignment.message.i18n);var _={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};y.reject=_;var O={profileId:u,roleId:r,type:"role"};y.value=O,y.profileRoleId=d}s("No users found in list. Assigning blank ")}else _(err)},function(e){o(e)})};void 0!=t.assign.role.profile?("current"==t.assign.role.profile?d=a.profile:"community"==t.assign.role.profile&&(d=app.SCOPE.getCommunityId()),l()):void 0!=t.assign.role.profileId&&helper.getNodeValue(t.assign.role.profileId,a,n).then(function(e){d=e,p()}).catch(function(e){o(e)})}else if(void 0!=t.assign.user)helper.getNodeValue(t.assign.user.userName,a,n).then(function(r){helper.getNodeValue(t.assign.user.userId,a,n).then(function(o){var o=o,u=r,p=a.profile;void 0==i.assignmentHistory&&(i.assignmentHistory=[]);var l=i.assignedTo;if(""!=l.userId&&""!=l.name){var f=JSON.parse(JSON.stringify(l));i.assignmentHistory.push(f)}l.name=u+"",l.userId=o+"",l.dateTime=moment().format(),l.type=ASSIGNMENT_TYPE_AUTO,l.dueDateTime="",l.by=_lclx.SUBSCRIPTIONS.userId+"";var m="";if(void 0!=t.assign.assignment){var m=i.assignment,h={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};m.accept=h,m.message=_getNameByLang(t.assign.assignment.message.i18n);var g={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)},v={id:o,name:r};c.push(v),m.reject=g;var S={profileId:p,userId:c,type:"user"};m.value=S,m.profileRoleId=d}var I=JSON.xpath("/processes[_id eq '"+e+"']/notifications",a.config,{})[0];if(void 0!=I&&void 0!=I.assignment){var N={id:o,name:u};if("string"==typeof I.assignment){var b=I.assignment;dao.getConfig(b).then(function(e){I.assignment=e,actionsModule.notification.assignmentNotification(I,a,n,N).then(function(e){console.log('User assigned successfully. UserId: "'+N.id+'", Name: "'+N.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+N.id+'", Name: "'+N.name+'"')})}).catch(function(e){s(e)})}else actionsModule.notification.assignmentNotification(I,a,n,N).then(function(e){console.log('User assigned successfully. UserId: "'+N.id+'", Name: "'+N.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+N.id+'", Name: "'+N.name+'"')})}var y=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+n+"']/id",a,{})[0],P=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+n+"']/id",a,{})[0],_=JSON.xpath("/subprocesses[_id eq '"+n+"']/step/id",a,{})[0];JSON.xpath("/processes[_id eq '"+y+"']/subProcesses[_id eq '"+P+"']/steps[_id eq '"+_+"']",a.config,{})[0];if(void 0!=t.preWorkActions){var O=t.preWorkActions;preWorkActions(O,a).then(function(e){s("Assigned to the only user in role. Pre work actions executed")},function(e){g(e)})}else s("Assigned to the only user in role. No pre work actions found.")},function(e){o(e)})},function(e){o(e)});else if(void 0!=t.assign.swimlane){var f=t.assign.swimlane.stepId,m=t.assign.swimlane.sequence,h=JSON.xpath("/subprocesses[_id eq '"+n+"']",a,{})[0],g=JSON.xpath("/history[id eq '"+f+"']",h,{}),v="";v="last"==m?JSON.xpath("max(for $s in /* return xs:dateTime($s/dateTimeCreated))",g,{})[0]:JSON.xpath("min(for $s in /* return xs:dateTime($s/dateTimeCreated))",g,{})[0];var S=JSON.xpath("/*[xs:dateTime(dateTimeCreated) eq xs:dateTime('"+v+"')]",g,{})[0],I=JSON.xpath("/assignmentHistory[last()]",S,{})[0],N=I.userId,b=I.name;void 0==i.assignmentHistory&&(i.assignmentHistory=[]);var y=i.assignedTo;if(""!=y.userId&&""!=y.name){var P=JSON.parse(JSON.stringify(y));i.assignmentHistory.push(P)}y.name=b+"",y.userId=N+"",y.dateTime=moment().format(),y.type=ASSIGNMENT_TYPE_SWIMLANE,y.dueDateTime="",y.by=_lclx.SUBSCRIPTIONS.userId+"";var _=JSON.xpath("/processes[_id eq '"+e+"']/notifications",a.config,{})[0];if(void 0!=_&&void 0!=_.assignment){var O={id:N,name:b};if("string"==typeof _.assignment){var T=_.assignment;dao.getConfig(T).then(function(e){_.assignment=e,actionsModule.notification.assignmentNotification(_,a,n,O).then(function(e){console.log('User assigned successfully. UserId: "'+O.id+'", Name: "'+O.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+O.id+'", Name: "'+O.name+'"')})}).catch(function(e){s(e)})}else actionsModule.notification.assignmentNotification(_,a,n,O).then(function(e){console.log('User assigned successfully. UserId: "'+O.id+'", Name: "'+O.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+O.id+'", Name: "'+O.name+'"')})}var x=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+n+"']/id",a,{})[0],q=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+n+"']/id",a,{})[0],f=JSON.xpath("/subprocesses[_id eq '"+n+"']/step/id",a,{})[0];JSON.xpath("/processes[_id eq '"+x+"']/subProcesses[_id eq '"+q+"']/steps[_id eq '"+f+"']",a.config,{})[0];if(void 0!=t.preWorkActions){var U=t.preWorkActions;preWorkActions(U,a).then(function(e){s("Assigned to the only user in role. Pre work actions executed")},function(e){o(e)})}else s("Assigned to the only user in role. No pre work actions found.")}},function(e){o(e)})})}function server(e,s,t,n,i,o,a,r,c,u){return new Promise(function(d,p){var l=(r.profile,e.serverAction[0]);void 0==a.assignmentHistory&&(a.assignmentHistory=[]);var f=a.assignedTo;if(""!=f.userId&&""!=f.name){var m=JSON.parse(JSON.stringify(f));a.assignmentHistory.push(m)}f.name=_lclx.SESSION.firstName+" "+_lclx.SESSION.lastName,f.userId=_lclx.SUBSCRIPTIONS.userId+"",f.dateTime=moment().format(),f.type=ASSIGNMENT_TYPE_AUTO,f.dueDateTime="",f.by=_lclx.SUBSCRIPTIONS.userId+"",action(l,s,t,n,i,o,a,r,c,u).then(function(e){d("No users found in list. Assigning blank ")},function(e){p("Server action error found rejected")})})}function transition(e,s,t,n,i,o,a,r,c,u){return new Promise(function(d,p){try{for(var l=0,f="",m=0,h=r.config.processes.filter(function(s){if(s._id==e)return s}),g=h[0].subProcesses.filter(function(e){if(e._id==t)return e}),v=g[0].steps.filter(function(e){if(e._id==i)return e}),S=v[0].transition.filter(function(e){if(e._id==o)return e}),I=0;I<g[0].steps.length;I++)g[0].steps[I]._id==i&&(l=parseInt(g[0].steps[I]._seq));g[0].steps.filter(function(e){m=l+1,parseInt(e._seq)==m&&(f=e._id)});var N=g[0].steps.length,b=JSON.xpath("/subprocesses[_id eq '"+c+"']",r,{})[0],y=JSON.xpath("/subprocesses[_id eq '"+c+"']/step",r,{})[0];void 0==b.history&&(b.history=[]);var P=function(e){var s=JSON.xpath("/subprocesses[_id eq '"+c+"']/indicators",r,{}),t=!1;void 0!=s&&0!=s.length||(t=!0,s=JSON.xpath("/indicators[workflows/processes[subProcessUUID eq '"+c+"']]",r,{})),void 0==e.indicators&&(e.indicators=[]);for(var n=0;n<s.length;n++)if(t){var i=s[n]._id,o=JSON.xpath("/indicators[_id eq '"+i+"']/_rev",r,{})[0],a=s[n].model.pending.seq,u=s[n].model.pending.status,d={uuid:i,rev:o,seq:a,status:u};e.indicators.push(d)}else{var i=s[n].instances[0].uuid,o=JSON.xpath("/indicators[_id eq '"+i+"']/_rev",r,{})[0],a=JSON.xpath("/indicators[_id eq '"+i+"']/model/pending/seq",r,{})[0],u=JSON.xpath("/indicators[_id eq '"+i+"']/model/pending/status",r,{})[0],d={uuid:i,rev:o,seq:a,status:u};e.indicators.push(d)}return delete e.assignedTo,delete e.assignment,e},_={transitionId:S[0]._id,dateTime:moment().format(),userId:_lclx.SUBSCRIPTIONS.userId+""};if(void 0!=u&&Object.keys(u).length>0?u.transition=_:y.transition=_,void 0!=u&&Object.keys(u).length>0){void 0==u.assignmentHistory&&(u.assignmentHistory=[]);var O=JSON.parse(JSON.stringify(u.assignedTo));""!=O.userId&&""!=O.name&&u.assignmentHistory.push(O)}else{void 0==y.assignmentHistory&&(y.assignmentHistory=[]);var O=JSON.parse(JSON.stringify(y.assignedTo));""!=O.userId&&""!=O.name&&y.assignmentHistory.push(O)}var T;T=void 0!=u&&Object.keys(u).length>0?JSON.parse(JSON.stringify(u)):JSON.parse(JSON.stringify(y));var x=P(T);if(b.history.push(x),void 0!=S[0].transitionAction.goToStep){var q=parseInt(v[0]._seq)+parseInt(S[0].transitionAction.goToStep.default),U="";g[0].steps.filter(function(e){parseInt(e._seq)==m&&(U=e._id)}),step(e,s,t,n,U,q,a,r,c).then(function(e){if(q==N){var s=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});d(s)}else{var s=util.success("Step transition completed successfully.",{subProcessComplete:!1,step:e.data});d(s)}},function(e){p(e)})}else if(void 0!=S[0].transitionAction.goToStepId){var k=S[0].transitionAction.goToStepId.stepId,w=1;g[0].steps.filter(function(e){e._id==k&&(w=parseInt(e._seq))}),step(e,s,t,n,k,w,a,r,c).then(function(e){if(w==N||"Complete"==e.data.status){var s=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});d(s)}else{var s=util.success("Step transition completed successfully.",{subProcessComplete:!1,step:e.data});d(s)}},function(e){p(e)})}else if(void 0!=S[0].transitionAction.stop){b.messages=[];var A=h[0].postActions;postActions(A,r,c).then(function(e){var s=util.success("Step transition completed successfully.Workflow stopped.",{subProcessComplete:!0,step:u});d(s)},function(e){p(e)})}}catch(e){p(e)}})}function postActions(e,s,t){return new Promise(function(n,i){var o=[];try{var a=JSON.xpath("/subprocesses[_id eq '"+t+"']",s,{})[0],r=a["meta-data"].processConfigId,c=a["meta-data"].subProcessConfigId,u=a["meta-data"].subProcessInsSeq,d=a["meta-data"].subProcessInsSeq,p=JSON.xpath("/config/processes[_id eq '"+r+"']/subProcesses[_id eq '"+c+"']",s,{})[0],l=JSON.xpath("/subprocesses[_id eq '"+t+"']/step",s,{})[0];util.syncLoop(e.length,function(n){var a=n.iteration();action(e[a],r,u,c,d,p,l,s,{},t).then(function(e){o.push(!0),n.next()},function(e){o.push(!1),n.break(),i(e)})},function(){if(o.every(Boolean)){var e=util.success("Post-actions completed successfully.",{});n(e)}else{var s=util.error("WFPreActionsError","Not all post-actions passed.");i(s)}})}catch(e){i(e)}})}function processWorkflowMessage(e,s){var t=e;if(t.indexOf("#INSTANCE_LABEL")!==-1){var n=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+s+"']/label",app.SCOPE.workflow,{})[0];t=t.replace("#INSTANCE_LABEL",n)}if(t.indexOf("#USER_NAME")!==-1){var n=JSON.xpath("/subprocesses[_id eq '"+s+"']/step/assignedTo/name",app.SCOPE.workflow,{})[0];t=t.replace("#USER_NAME",n)}if(t.indexOf("#PROFILE_TITLE")!==-1){var n=app.profile.title;t=t.replace("#PROFILE_TITLE",n)}if(t.indexOf("#PROFILE_TYPE")!==-1){var n=app.SCOPE.APP_CONFIG.name;t=t.replace("#PROFILE_TYPE",n)}if(t.indexOf("#VAR_SPUUID")!==-1){var n=s;t=t.replace("#VAR_SPUUID",n)}return t}function _getName(e,s){if(void 0!==e)for(var t=0;t<e.length;t++)if(e[t]._lang===s)return e[t].value}function _getNameByLang(e){return library.getNameByLang(e)}function preWorkActions(e,s){return new Promise(function(t,n){var i=[];try{var o=JSON.xpath("/config/processes[_id eq '"+app.SCOPE.spo.pObject.id+"']/subProcesses[_id eq '"+app.SCOPE.spo.spObject.id+"']",s,{})[0],a=JSON.xpath("/subprocesses[_id eq '"+app.SCOPE.processUUID+"']/step",s,{})[0];util.syncLoop(e.length,function(t){var r=t.iteration();action(e[r],app.SCOPE.spo.pObject.id,app.SCOPE.spo.pObject.seq,app.SCOPE.spo.spObject.id,app.SCOPE.spo.spObject.seq,o,a,s,{},app.SCOPE.processUUID).then(function(e){i.push(!0),t.next()},function(e){i.push(!1),t.break(),n(e)})},function(){if(i.every(Boolean)){var e=util.success("PreWork-actions completed successfully.",{});t(e)}else{var s=util.error("WFPreActionsError","Not all pre-work-actions passed.");n(s)}})}catch(e){n(e)}})}var util=require("utility"),actionsModule=require("./actions"),helper=require("./helper"),form=require("./form");module.exports={preRequisites:preRequisites,preActions:preActions,postActions:postActions,preWorkActions:preWorkActions,subProcess:subProcess,indicatorDocs:indicatorDocs,task:task,transition:transition,assignUser:assignUser};

},{"./actions":2,"./form":3,"./helper":4,"utility":8}],8:[function(require,module,exports){
"use strict";function success(r,e){return{message:r,data:e}}function warn(r,e){return console.warn(e),{warning:r,data:e}}function error(r,e){var n=new Error("");return n.name=r,n.message=e,n}function syncLoop(r,e,n){var a=0,t=!1,o=!1,u={next:function(){return t&&o&&n?n():void(a<r?(a++,e(u)):(t=!0,n&&n()))},iteration:function(){return a-1},break:function(r){t=!0,o=r}};return u.next(),u}function compare(r,e,n){switch(e){case"greaterThan":return r>n;case"lessThan":return r<n;case"greaterThanEqual":return r>=n;case"lessThanEqual":return r<=n;case"equalTo":return r===n;case"notEqualTo":return r!==n}}function getName(r,e){if(void 0!==r)for(var n=0;n<r.length;n++)if(r[n].i18n._lang===e)return r[n].i18n.value}module.exports={success:success,warn:warn,error:error,syncLoop:syncLoop,compare:compare,getName:getName};

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
