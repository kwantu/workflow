(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Workflow = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function Workflow(e,s,t,i){var r=this;if(""==s||void 0==s)throw util.error("ParamRequired","A community id is required.");if("string"!=typeof s)throw new Error("The community id must be a javascript string.");if(r.communityId=s||"",""==e||void 0==e)throw util.error("ParamRequired","A profile id is required.");if("string"!=typeof e)throw new Error("The profile id must be a javascript string.");if(r.profile=e||"",""==t||void 0==t)throw util.error("ParamRequired","An app id is required.");if("string"!=typeof t)throw new Error("The app id must be a javascript string.");if(r.app=t||"",""==i||void 0==i)throw util.error("ParamRequired","A workflow configuration is required.");"object"!=typeof i?r.config=JSON.parse(i):r.config=i,r.instance,r.subprocesses=[],r.indicators=[],r.history=[]}var Process=require("./lib/process"),util=require("utility"),userInterface=require("./lib/interface");Workflow.prototype.getProfile=function(){return this.profile},Workflow.prototype.getApp=function(){return this.app},Workflow.prototype.getConfig=function(){return this.config},Workflow.prototype.getInstance=function(){return this.instance},Workflow.prototype.setInstance=function(e){this.instance=e},Workflow.prototype.getSubProcesses=function(){return this.subprocesses},Workflow.prototype.setSubProcesses=function(e){this.subprocesses=e},Workflow.prototype.getIndicators=function(){return this.indicators},Workflow.prototype.setIndicators=function(e){this.indicators=e},Workflow.prototype.create=function(){var e=this;return new Promise(function(s,t){try{if(void 0!==e.instance){var i=util.warn("Instance already exists.",e);s(i)}else{var r={_id:"",version:"",type:"workflowInstance",processes:[],channels:["community_"+app.SCOPE.getCommunityId(),"profile_"+app.SCOPE.profileId,"application_"+app.SCOPE.applicationId,"community_"+app.SCOPE.getCommunityId()+"_application_"+app.SCOPE.applicationId]};r._id=e.profile+":processes",r.version=e.config.version,e.instance=r;var o=util.success("Workflow processes instance created successfully.",e);s(o)}}catch(e){t(e)}})},Workflow.prototype.initialise=function(e,s){var t=this;return new Promise(function(i,r){try{var o=[];if(""!==e&&void 0!==e){if(o=t.config.processes.filter(function(s){if(s._id==e)return s}),void 0==o[0]._id){var n=util.error("WFConfigError","No valid process definition found with process id: "+e);r(n)}}else o.push(t.config.processes[0]),e=t.config.processes[0]._id;var c=[];t.instance.processes.filter(function(s){s.id==e&&c.push(s)});var a=c.length+1,u={id:"",seq:"",subProcesses:[]};u.id=e,u.seq=a,t.instance.processes.push(u);var p=o[0].subProcesses[0]._id,f=1;t.instance.processes.filter(function(s){s.id==e&&s.seq==a&&(f=s.subProcesses.length+1)}),Process.subProcess(e,a,p,f,s,t).then(function(o){var n=o.data._id,c=s.label,l={id:p,seq:f,uuid:n,label:c};u.subProcesses.push(l);for(var d=0;d<t.instance.processes.length;d++){var h=t.instance.processes[d];h.id==e&&h.seq==a&&t.instance.processes.splice(d,1,u)}var w=o.data.indicators,v=o.data.step;Process.indicatorDocs(e,w,v,t).then(function(e){var s=util.success("Process: "+t.config.processes[0]._id+" initialized successfully.",t);i(s)},function(e){r(e)})},function(s){t.instance.processes=t.instance.processes.filter(function(s){return!(s.id==e&&s.seq==a)}),console.log(s),r(s)})}catch(e){r(e)}})},Workflow.prototype.transition=function(e,s,t,i,r,o,n){var c=this;return new Promise(function(a,u){try{Process.transition(e,s,t,i,r,o,n,c).then(function(r){var o=function(o){c.instance.processes.filter(function(n){n.id==e&&n.seq==s&&n.subProcesses.filter(function(e){e.id==t&&e.seq==i&&c.subprocesses.filter(function(s){if(s._id==e.uuid)if("step"==o){s.step=r.data;var t=util.success(r.message,s);a(t)}else if("stepComplete"==o){s.step=r.data.step,s.complete=!0;var t=util.success(r.message,s);a(t)}})})})};o(r.data.subProcessComplete?"stepComplete":"step")},function(e){u(e)})}catch(e){u(e)}})},Workflow.prototype.assignUser=function(e,s,t,i,r){var o=this;return new Promise(function(n,c){try{Process.assignUser(e,s,t,i,r,o).then(function(e){n(e)},function(e){c(e)})}catch(e){c(e)}})},Workflow.prototype.ui=function(){var e=this;return{getProcess:function(s,t){return new Promise(function(i,r){try{userInterface.getProcess(s,t,e).then(function(e){i(e)},function(e){r(e)})}catch(e){r(e)}})}}},module.exports=Workflow;

},{"./lib/interface":5,"./lib/process":7,"utility":8}],2:[function(require,module,exports){
"use strict";var util=require("utility"),nodeValue=require("./nodeValue"),form=require("./form"),community=function(){return{createCommunity:function(e,i,t){return new Promise(function(e,i){var n=worker.getWorkerWrapper();n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=(new Date).toString(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var r=JSON.xpath("/indicators[category/term eq 'Community']/_id",t,{})[0],o={createCommunity:{newCommunityId:t.profile,indicatorUUID:{Community:r}}};n.action=o,worker.send(n).then(function(i){var t=util.success("Worker processed successfully.",i);e(t)},function(e){i(e)})})},userJoinCommunity:function(e,i,t){return new Promise(function(e,i){})},releaseAdoptedApplication:function(e,i,t){return new Promise(function(e,n){var r=worker.getWorkerWrapper();r._id=generateUUID(),r.communityId=app.SCOPE.getCommunityId(),r.applicationId=app.SCOPE.applicationId,r.createdDateTime=(new Date).toString(),r.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var o=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'adoptedApplication']/instances[1]/uuid",t,{})[0],a={releaseAdoptedApplication:{communityId:t.profile,indicatorUUID:{adoptedApplication:o}}};r.action=a,worker.send(r).then(function(i){var t=util.success("Worker processes successfully.",i);e(t)},function(e){n(e)})})}}}(),application=function(){return{createAppDefinition:function(e,i,t){return new Promise(function(e,i){var n=worker.getWorkerWrapper();n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=(new Date).toString(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var r=JSON.xpath("/indicators[category/term eq 'Application']/_id",t,{})[0],o={createApplication:{newApplicationId:t.profile,indicatorUUID:{Application:r}}};n.action=o,worker.send(n).then(function(i){var t=util.success("Worker processes successfully.",i);e(t)},function(e){i(e)})})},buildApplication:function(e,i,t){return new Promise(function(e,n){var r=worker.getWorkerWrapper();r._id=generateUUID(),r.communityId=app.SCOPE.getCommunityId(),r.applicationId=app.SCOPE.applicationId,r.createdDateTime=(new Date).toString(),r.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var o=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'PublishApplication']/instances[1]/uuid",t,{})[0],a=JSON.xpath("/indicators[category/term eq 'ApplicationDefinition']/_id",t,{})[0],c=JSON.xpath("/indicators[category/term eq 'Roles']/_id",t,{})[0],p=JSON.xpath("/indicators[category/term eq 'Application']/_id",t,{})[0],s=JSON.xpath("/indicators[category/term eq 'AppPermissions']/_id",t,{})[0],d={buildApplication:{applicationId:t.profile,indicatorUUID:{PublishApplication:o,ApplicationDefinition:a,Roles:c,Application:p,AppPermissions:s}}};r.action=d,worker.send(r).then(function(i){var t=util.success("Worker processes successfully.",i);e(t)},function(e){n(e)})})},applicationAdoption:function(e,i,t){return new Promise(function(e,n){var r=worker.getWorkerWrapper();r._id=generateUUID(),r.communityId=app.SCOPE.getCommunityId(),r.applicationId=app.SCOPE.applicationId,r.createdDateTime=(new Date).toString(),r.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var o=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'Adoption']/instances[1]/uuid",t,{})[0],a=JSON.xpath("/indicators[category/term eq 'PublishApplication']/_id",t,{})[0],c=JSON.xpath("/indicators[category/term eq 'Application']/_id",t,{})[0],p={adoptApplication:{applicationId:t.profile,indicatorUUID:{Adoption:o,PublishApplication:a,Application:c}}};r.action=p,worker.send(r).then(function(i){var t=util.success("Worker processes successfully.",i);e(t)},function(e){n(e)})})}}}(),worker=function(){return{getWorkerWrapper:function(){var e={source:"remote",type:"workerObject",_id:"",channels:[],communityId:"",applicationId:"",message:"",messageType:"info",createdDateTime:"",senderUserId:"",notification:{},action:{}};return e},send:function(e){return new Promise(function(i,t){console.log("Submitting Worker Object to server"),console.log(e),dao.save(e).done(function(e){i(e)}).fail(function(e){console.log("Error submitting worker response !!"+e),t(e)})})}}}();module.exports={community:community,application:application,worker:worker};

},{"./form":3,"./nodeValue":6,"utility":8}],3:[function(require,module,exports){
"use strict";function create(args){var processId=args[0]||"",subProcess=args[1]||{},step=args[2]||{},action=args[3]||{},_WFInstance=args[6]||{},data=args[6]||{},indicators=subProcess.indicators||[],result=[],indicatorType=action._type,processSeq=args[4]||"",subProcessSeq=args[5]||"",createType=args[7]||"",subProcessId=subProcess._id,uuid=args[8]||"",baseUUID=args[9]||"",profile=_WFInstance.profile,inputData=args[10]||{};return new Promise(function(resolve,reject){for(var toProcess=indicators.length,formCreateFn=function(id,indicatorType,indicatorId,validDate,instantiateSource){gatekeeper.instantiate(id,indicatorType,indicatorId,_WFInstance.profile,validDate).then(function(docArray){for(var i=0;i<docArray.length;i++){var object=docArray[i];if(!object.model._id.endsWith(":approved")&&!object.model._id.endsWith(":rejected")){var workflowObj={id:_WFInstance.config._id,instance:_WFInstance.instance._id,processes:[{id:processId,subProcessId:subProcess._id,subProcessUUID:uuid,step:{id:step.id,seq:step.seq,startDate:"",status:step.status,message:step.message,assignedTo:{userId:step.assignedTo.userId,name:step.assignedTo.name},comment:step.comment,complete:!1,endDate:""}}]};void 0!=action.setWorkflowLabelInTitle&&""!=action.setWorkflowLabelInTitle&&1==action.setWorkflowLabelInTitle&&(object.model.title=inputData.label),void 0!=action.setDraft&&""!=action.setDraft&&1==action.setDraft&&(object.model.control.draft=!0),object.model.workflows.push(workflowObj);var mainId=object.model._id;gatekeeper.persist(docArray).then(function(savedArray){dao.get(mainId).done(function(data){var indicatorModel=ko.mapping.fromJS({defaultModel:{setId:indicatorId}});gatekeeper.instantiateData(mainId,instantiateSource,indicatorModel,data.model.pending.seq).then(function(data){if("200"==data[0].status){if(void 0!=action.setWorkflowLabelInField&&""!=action.setWorkflowLabelInField&&mainId==profile){console.log(data[0]);var path="data[0].model.model.pending.data."+action.setWorkflowLabelInField+"='"+inputData.label+"'";eval(path)}gatekeeper.persist(data).then(function(e){dao.get(mainId).done(function(e){if(0==_WFInstance.indicators.length){if(_WFInstance.indicators.push(e),toProcess--,0==toProcess){var s=util.success("Form created successfully.",_WFInstance.indicators);resolve(s)}}else{for(var i=!1,t=0;t<_WFInstance.indicators.length;t++){var a=_WFInstance.indicators[t];if(a._id==e._id&&(i=!0,_WFInstance.indicators.splice(t,1),_WFInstance.indicators.push(e),toProcess--,0==toProcess)){var s=util.success("Form created successfully.",_WFInstance.indicators);resolve(s)}}if(0==i&&(_WFInstance.indicators.push(e),toProcess--,0==toProcess)){var s=util.success("Form created successfully.",_WFInstance.indicators);resolve(s)}}}).fail(function(e){console.error(e);var s=util.success("1 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(s)})},function(e){console.error(e);var s=util.success("2 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(s)})}else{var failure=util.success("3 Gatekeeper initialisation failed with initialiseData message "+err[0].message,{});reject(failure)}},function(e){var s=util.success("4 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(s)})}).fail(function(e){console.error(e);var s=util.success("5 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(s)})},function(e){console.error(e);var s=util.success("6 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(s)})}}},function(e){for(var s=[],i=0;i<_WFInstance.instance.processes.length;i++)_WFInstance.instance.processes[i].subProcesses.length>0&&s.push(_WFInstance.instance.processes[i]);_WFInstance.instance.processes=[],_WFInstance.instance.processes=s;for(var t=[],i=0;i<_WFInstance.subprocesses.length;i++)_WFInstance.subprocesses[i].indicators.length>0&&t.push(_WFInstance.subprocesses[i]);_WFInstance.subprocesses=[],_WFInstance.subprocesses=t,console.error(e);var a=util.success("7 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(a)})},instantiateSource="fromDefinition",counter=0;counter<indicators.length;counter++){var indicatorId=indicators[counter]._id,indicatorName=util.getName(indicators[counter].name,"en"),initType="";void 0!=subProcess.instanceType.newSequence?initType="newSequence":void 0!=subProcess.instanceType.newInstance&&(initType="newInstance");var id="",indicatorDoc={};if("newInstance"==initType)if(void 0!=baseUUID&&""!=baseUUID&&baseUUID.length>0){var existingUUID=JSON.xpath("/subprocesses[_id eq '"+baseUUID+"']/indicators[id eq '"+indicatorId+"']/instances[1]/uuid",_WFInstance,{})[0];id=existingUUID,initType="newSequence";var sp=JSON.xpath("/subprocesses[_id eq '"+baseUUID+"']",app.SCOPE.workflow,{})[0];sp.active=!1,instantiateSource="fromAuthorised"}else id=void 0==subProcess.isProfile||!subProcess.isProfile||indicatorId!=PROFILE_SET_ID&&1!=app.SCOPE.APP_CONFIG.indicators.length?indicatorId+"-"+generateUUID():profile;else{var spLastUuid=JSON.xpath("/instance/processes[id eq '"+processId+"' and subProcesses/id eq '"+subProcessId+"'][1]/subProcesses/uuid",_WFInstance,{})[0],indId=JSON.xpath("/subprocesses[_id eq '"+spLastUuid+"']/indicators[id eq '"+indicatorId+"']/instances/uuid",app.SCOPE.workflow,{})[0];if(id=""==spLastUuid||void 0==spLastUuid||""==indId||void 0==indId?void 0==subProcess.isProfile||!subProcess.isProfile||indicatorId!=PROFILE_SET_ID&&1!=app.SCOPE.APP_CONFIG.indicators.length?indicatorId+"-"+generateUUID():profile:indId,void 0!=baseUUID&&""!=baseUUID&&baseUUID.length>0){var sp=JSON.xpath("/subprocesses[_id eq '"+baseUUID+"']",app.SCOPE.workflow,{})[0];sp.active=!1,instantiateSource="fromAuthorised"}}console.log(id),console.log(initType),console.log(indicatorId),console.log(instantiateSource),formCreateFn(id,initType,indicatorId,"",instantiateSource)}})}function setInstanceTitle(e){var s=e[0]||{},i=e[2]||"",t=e[4]||{},a=t.label;return new Promise(function(e,t){for(var n=JSON.xpath("/subprocesses[_id eq '"+i+"']",s,{})[0],o=n.indicators,r=0;r<o.length;r++){var c=o[r].instances[0].uuid,d=JSON.xpath("/indicators[_id eq '"+c+"']",s,{})[0];d.title=o[r].id+" "+a}e("Set Title Success",o)})}function deleteProfile(e){var s=e[0]||{},i=s.profile;return new Promise(function(e,s){var t={source:"remote",type:"workerObject",_id:generateUUID(),channels:[],communityId:app.SCOPE.getCommunityId(),applicationId:app.SCOPE.applicationId,message:"",messageType:"info",createdDateTime:moment().format(),senderUserId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,notification:{},profile:{action:"deleteProfile",profileId:i}};console.log(t),dao.upsert(t).done(function(s){console.log("Worker Object submitted for profile("+i+") deletion."),console.log(s),e(s)}).fail(function(e){console.log(e),s(data)})})}function createProfile(e){var s=e[1]||{},i=s.communityId,t=s.profile;return new Promise(function(e,s){library.createProfileDocuments(i,t).done(function(s){var i=util.success("Form created successfully.",s);e(i)}).fail(function(e){console.error(e);var i=util.success("ERROR: Profile creation failed"+e[0].message,{});s(i)})})}function setDraft(e){var s=e[0]||{},i=(s.communityId,s.profile,e[2]||"");return new Promise(function(e,t){for(var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",s,{})[0],n=a.indicators,o=0;o<n.length;o++){var r=n[o].instances[0].uuid,c=JSON.xpath("/indicators[_id eq '"+r+"']",s,{})[0];c.control.draft=!0}e("Set Draft Success",n)})}function setUnDraft(e){var s=e[0]||{},i=(s.communityId,s.profile,e[2]||"");return new Promise(function(e,t){for(var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",s,{})[0],n=a.indicators,o=0;o<n.length;o++){var r=n[o].instances[0].uuid,c=JSON.xpath("/indicators[_id eq '"+r+"']",s,{})[0];c.control.draft=!1}e("Set Draft Success",n)})}function save(e){var s={complete:!0,data:[]};return new Promise(function(e,i){var t=util.success("Form indicator set saved successfully.",s);e(t)})}function submit(e){var s={complete:!0,data:[]};return new Promise(function(e,i){var t=util.success("Form submitted successfully.",s);e(t)})}function authorise(e){var s=e[0]||"",i=e[1]||{},t=i._id,a=e[2]||"",n=e[3]||"",o=e[4]||{};return new Promise(function(e,i){for(var r=JSON.xpath("/processes[id eq '"+s+"' and seq eq '"+a+"']/subProcesses[id eq '"+t+"' and seq eq '"+n+"']/uuid",o.instance,{})[0],c=JSON.xpath("/subprocesses[_id eq '"+r+"']/indicators/instances/uuid",o,{}),d=c.length,u=[],l=0;l<d;l++)gatekeeper.authorise(c[l]).then(function(s){gatekeeper.persist(s).then(function(s){for(var i="",t=0;t<s.length;t++)s[t].id.endsWith(":approved")||(i=s[t].id);dao.get(i).done(function(s){if(0==o.indicators.length){if(o.indicators.push(s),d--,0==d){var i=util.success("Form authorised successfully.",u);e(i)}}else{for(var t=!1,a=0;a<o.indicators.length;a++){var n=o.indicators[a];if(n._id==s._id&&(t=!0,o.indicators.splice(a,1),o.indicators.push(s),d--,0==d)){var i=util.success("Form authorised successfully.",u);e(i)}}if(0==t&&(o.indicators.push(s),d--,0==d)){var i=util.success("Form authorised successfully.",u);e(i)}}}).fail(function(e){console.error(e)})},function(e){console.error(err)})},function(s){if(d--,0==d){var i=util.success("Form authorised successfully.",u);e(i)}})})}function close(e){var s={complete:!0,data:[]};return new Promise(function(e,i){var t=util.success("Form closed successfully.",s);e(t)})}var util=require("utility"),gatekeeper=new GK;module.exports={create:create,save:save,submit:submit,authorise:authorise,close:close,setDraft:setDraft,setUnDraft:setUnDraft,createProfile:createProfile,setInstanceTitle:setInstanceTitle,deleteProfile:deleteProfile};

},{"utility":8}],4:[function(require,module,exports){
"use strict";function getLanguageMessage(message){var language=service.getLanguage(),res=eval("message.i18n."+language);return console.log(res),res}module.exports={getLanguageMessage:getLanguageMessage};

},{}],5:[function(require,module,exports){
"use strict";function getProcess(e,s,t){return new Promise(function(n,i){try{var c=[],r=[];t.instance.processes.filter(function(s){s.id==e&&(r=s)}),util.syncLoop(r.subProcesses.length,function(n){var o=n.iteration(),u=r.seq,f=r.subProcesses[o].id,a=r.subProcesses[o].seq;getSubProcess(e,u,f,a,s,t).then(function(e){c.push(e),n.next()},function(e){n.break(),i(e)})},function(){n(c)})}catch(e){i(e)}})}function getSubProcess(e,s,t,n,i,c){return new Promise(function(r,o){try{var u={id:"",seq:"",name:"",help:"",dates:"",step:""},f=[],a=[];c.instance.processes.filter(function(i){if(i.id==e&&i.seq==s){i.subProcesses.length;i.subProcesses.filter(function(e){e.id==t&&e.seq==n&&0==e.complete&&(f=e)})}}),c.config.processes.filter(function(s){s._id==e&&s.subProcesses.filter(function(e){e._id==t&&(a=e)})}),u.id=a._id,u.seq=f.seq,u.name=util.getName(a.name,i),u.help=util.getName(a.help,i),u.dates=f.dates,u.step=f.step,r(u)}catch(e){o(e)}})}function prepareNotificationScreen(){""}var util=require("utility");module.exports={getProcess:getProcess};

},{"utility":8}],6:[function(require,module,exports){
"use strict";function get(){return new Promise(function(e,t){})}module.exports={get:get};

},{}],7:[function(require,module,exports){
"use strict";function count(e){return void 0!==e?e.length:0}function preRequisites(e,s){return new Promise(function(t,i){var n=[];try{util.syncLoop(e.length,function(t){var o=t.iteration();preRequisite(e[o],s).then(function(e){n.push(!0),t.next()},function(e){n.push(!1),t.break(),i(e)})},function(){if(n.every(Boolean)){var e=util.success("Pre-requisites completed successfully.",{});t(e)}else{var s=util.error("WFPreRequisiteError","Not all pre-requisites passed.");i(s)}})}catch(e){i(e)}})}function preRequisite(e,s){return new Promise(function(t,i){var n="";if(void 0!=e.check.numberProcessInstances){var o=e.check.numberProcessInstances,a=o.operator,r="";switch(a){case"greaterThan":r="gt";break;case"lessThan":r="lt";break;case"greaterThanEqual":r="ge";break;case"lessThanEqual":r="le";break;case"equalTo":r="eq";break;case"notEqualTo":r="ne"}var c=o.subProcessId,u="step/status",d=o.type,p="/"+u+"[. eq '"+d+"']",l="count(/subprocesses[id eq '"+c+"']"+p+")";n=JSON.xpath(l,s,{})[0]}else if(void 0!=e.check.variableConfirm);else{var f=util.error("WFPreRequisiteError","Pre-requisite type not defined.");i(f)}var m="";if(e.check.numberProcessInstances?m=util.compare(n,e.check.numberProcessInstances.operator,parseInt(e.check.numberProcessInstances.count)):e.check.variableConfirm,m){var h=util.success("Pre-requisites passed.",{});t(h)}else{var v=helper.getLanguageMessage(e.message),f=util.error("WFPreRequisiteError",v);i(f)}})}function preActions(e,s){return new Promise(function(t,i){var n=[];try{util.syncLoop(e.length,function(t){var o=t.iteration();action(e[o],s).then(function(e){n.push(!0),t.next()},function(e){n.push(!1),t.break(),i(e)})},function(){if(n.every(Boolean)){var e=util.success("Pre-actions completed successfully.",{});t(e)}else{var s=util.error("WFPreRequisiteError","Not all pre-actions passed.");i(s)}})}catch(e){i(e)}})}function getSubProcess(e,s){return void 0==s.subprocesses?[]:void s.subprocesses.filter(function(s){if(s.id==e)return s})}function subProcess(e,s,t,i,n,o){var a=[],r=[],c=[];o.instance.processes.filter(function(n){if(n.id==e&&n.seq==s){n.subProcesses.length;n.subProcesses.filter(function(e){if(e.id==t&&e.seq==i){var s=e.uuid;o.subprocesses.filter(function(e){e._id==s&&(a=e)})}})}}),o.config.processes.filter(function(s){s._id==e&&(r=s,s.subProcesses.filter(function(e){e._id==t&&(c=e)}))});var u="",d=n.baseUUID;if(void 0!=d&&""!=d&&d.length>0){var p=JSON.xpath("/subprocesses[_id eq '"+d+"']",o,{})[0];u=p.groupKey}else u=generateUUID();var l=o.profile+":"+o.app+":"+e+":"+s+":"+t+":"+i,f={_id:l,id:t,type:"workflowInstanceSubProcess",seq:i,initiated:!1,dates:{created:"",valid:"",due:"",closed:""},complete:!1,indicators:[],step:{},active:!0,groupKey:u,channels:["community_"+app.SCOPE.getCommunityId(),"profile_"+app.SCOPE.profileId,"application_"+app.SCOPE.applicationId,"community_"+app.SCOPE.getCommunityId()+"_application_"+app.SCOPE.applicationId]};return o.subprocesses.push(f),new Promise(function(u,d){try{var p=r.preActions;preActions(p,o).then(function(p){var m=r.prerequisites;preRequisites(m,o).then(function(p){var m=c.initiate;initiate(m,a,n).then(function(a){f.initiated=a.data.initiated,f.dates=a.data.dates;var p=c.steps[0]._id,l=c.steps[0].transition[0]._id,m=1;step(e,s,t,i,p,m,n,o).then(function(a){f.step=a.data,indicators(c.indicators,o,f._id).then(function(a){f.indicators=a.data,transition(e,s,t,i,p,l,n,o).then(function(e){var s=e;f.step=e.data;var t=r.postActions;postActions(t,o).then(function(e){var t=util.success(s.message,f);u(t)},function(e){d(e)})},function(e){d(e)})},function(e){d(e)})},function(e){d(e)})},function(e){o.subprocesses=o.subprocesses.filter(function(e){return!(e._id==l)}),d(e)})},function(e){o.subprocesses=o.subprocesses.filter(function(e){return!(e._id==l)}),d(e)})},function(e){o.subprocesses=o.subprocesses.filter(function(e){return!(e._id==l)}),d(e)})}catch(e){d(e)}})}function initiate(e,s,t){var i={initiated:!1,dates:{created:"",valid:"",due:"",closed:""}};return new Promise(function(n,o){var a=function(){if(void 0!=e.user){i.dates.created=t.createdDate,"userSelected"!=e.user.validDate.valid._type&&"autoSelected"!=e.user.validDate.valid._type||(void 0!==t.validDate?i.dates.valid=t.validDate:util.warn("WFInitiateError","No valid date passed in - {data.validDate}")),"userSelected"!=e.user.validDate.due._type&&"autoSelected"!=e.user.validDate.due._type||(void 0!==t.dueDate?i.dates.due=t.dueDate:util.warn("WFInitiateError","No due date passed in - {data.dueDate}")),i.initiated=!0;var s=util.success("Sub-Process initiate completed successfully.",i);n(s)}else if(void 0!=e.auto);else{var a=util.error("WFInitiateError","Initiate type: "+e._type+" not defined.");o(a)}};if(void 0==s.complete)a();else if(!s.complete)if(e.parallelInstances)a();else{var r=util.error("WFInitiateError","Sub-process: "+s.id+" still active and parallel instances are not allowed.");o(r)}})}function step(processId,processSeq,subProcessId,subProcessSeq,stepId,stepSeq,data,_WFInstance){var model={id:"",seq:"",status:"",message:"",assignedTo:{userId:"",name:""},assignment:{},comment:""},subProcess={},uuid="",instSubProcess,step={},transitionId="";return new Promise(function(resolve,reject){try{_WFInstance.instance.processes.filter(function(e){e.id==processId&&e.seq==processSeq&&e.subProcesses.filter(function(e){e.id==subProcessId&&e.seq==subProcessSeq&&(uuid=e.uuid,console.log("uuid==="+uuid))})}),_WFInstance.subprocesses.filter(function(e){e._id==uuid&&(instSubProcess=e)}),_WFInstance.config.processes.filter(function(e){e._id==processId&&e.subProcesses.filter(function(e){e._id==subProcessId&&(subProcess=e,e.steps.filter(function(e){e._id==stepId&&(step=e)}))})}),model.id=stepId,model.seq=stepSeq;var instanceStatus="";void 0!=step.setInstanceStatusTo.NotStarted?instanceStatus="NotStarted":void 0!=step.setInstanceStatusTo.Created?instanceStatus="Created":void 0!=step.setInstanceStatusTo.InProgress?instanceStatus="InProgress":void 0!=step.setInstanceStatusTo.Submitted?instanceStatus="Submitted":void 0!=step.setInstanceStatusTo.Complete&&(instanceStatus="Complete");var language=service.getLanguage();model.status=instanceStatus,model.message=eval("step.setInstanceStatusTo."+instanceStatus+".label."+language),model.comment=void 0!==data.comment?data.comment:"";var indicators=void 0!==instSubProcess?instSubProcess.indicators:[];indicatorDocs(processId,indicators,model,_WFInstance).then(function(e){var s=_WFInstance.profile+":"+_WFInstance.app+":"+processId+":"+processSeq+":"+subProcessId+":"+subProcessSeq;uuid=s,void 0!=step.function.actions?actions(step.function.actions,processId,processSeq,subProcessId,subProcessSeq,subProcess,model,_WFInstance,data,uuid).then(function(e){var s=util.success("Actions completed successfully.",model);resolve(s)},function(e){reject(e)}):void 0!=step.function.task&&task(processId,processSeq,step.function.task,s,model).then(function(e){console.log("Task complete.");var s=util.success("Task awaiting user action.",model);resolve(s)},function(e){reject(e)})},function(e){reject(e)})}catch(e){reject(e)}})}function indicators(e,s,t){var i=[];return new Promise(function(e,n){try{for(var o=JSON.xpath("indicators[fn:count(./workflows/processes[subProcessUUID eq '"+t+"']) gt 0]",s,{}),a=0;a<o.length;a++){var r=o[a],c={id:"",instances:[]},u={uuid:"",title:"",key:"",seq:1};c.id=r.category.term,u.uuid=r._id,u.title=r.title,u.key="",u.seq=r.model.pending.seq,c.instances.push(u),i.push(c)}var d=util.success("Process indicator model updated.",i);e(d)}catch(e){n(e)}})}function assignUser(e,s,t,i,n,o){return new Promise(function(a,r){try{var c="";o.instance.processes.filter(function(n){n.id==e&&n.seq==s&&n.subProcesses.filter(function(e){e.id==t&&e.seq==i&&(c=e.uuid)})}),o.subprocesses.filter(function(s){if(s._id==c){s.step.assignedTo.userId=n.id,s.step.assignedTo.name=n.name;for(var t=s.indicators,i=0;i<t.length;i++)for(var r=t[i],u=0;u<r.instances.length;u++)for(var d=r.instances[u],p=0;p<o.indicators.length;p++){var l=o.indicators[p];d.uuid==l._id&&l.workflows.filter(function(s){s.id==o.config._id&&s.processes.filter(function(s){s.id==e&&(s.step.assignedTo.userId=n.id,s.step.assignedTo.name=n.name)})})}var f=util.success('User assigned successfully. UserId: "'+n.id+'", Name: "'+n.name+'"',s);a(f)}})}catch(e){r(e)}})}function indicatorDocs(e,s,t,i){return new Promise(function(n,o){try{if(void 0==s){util.error("WFIndicatorsUpdate","Indicators parameter is required. - Value: "+s);o(err)}else{for(var a=0;a<s.length;a++)for(var r=s[a],c=0;c<r.instances.length;c++)for(var u=r.instances[c],d=0;d<i.indicators.length;d++){var p=i.indicators[d];u.uuid==p._id&&p.workflows.filter(function(s){s.id==i.config._id&&s.processes.filter(function(s){s.id==e&&(s.step.id=t.id,s.step.seq=t.seq,s.step.status=t.status,s.step.message=t.message,s.step.assignedTo.userId=t.assignedTo.userId,s.step.assignedTo.name=t.assignedTo.name,s.step.comment=void 0!==t.comment?t.comment:"")})})}var l=util.success("Indicator documents workflow process model updated.",i);n(l)}}catch(e){o(e)}})}function actions(e,s,t,i,n,o,a,r,c,u){var d=[];return new Promise(function(p,l){util.syncLoop(e.length,function(p){var f=p.iteration();action(e[f],s,t,i,n,o,a,r,c,u).then(function(s){var t={id:e[f]._id,seq:f,data:s};d.push(t),p.next()},function(e){p.break(),l(e)})},function(){var e=util.success("Actions completed successfully.",d);p(e)})})}function action(e,s,t,i,n,o,a,r,c,u){return new Promise(function(d,p){if(void 0!=e.method){var l=["form","indicator","profile","subProcessInstance","step","community","application","user","sdo"];switch(propertyExists(e.method,l)){case"form":if(void 0!=e.method.form.create){var f=[];f.push(s),f.push(o),f.push(a),f.push(e),f.push(t),f.push(n),f.push(r),f.push(c.createType),f.push(u),f.push(c.baseUUID),f.push(c),form.create(f).then(function(e){d(e.data)},function(e){p(e)})}else if(void 0!=e.method.form.authorise){var f=[];f.push(s),f.push(o),f.push(t),f.push(n),f.push(r),f.push(c.createType),f.push(u),f.push(c.baseUUID),f.push(c),form.authorise(f).then(function(e){d(e.data)},function(e){p(e)})}else if(void 0!=e.method.form.undraft){var f=[];f.push(r),f.push(c.createType),f.push(u),f.push(c.baseUUID),f.push(c),form.setUnDraft(f).then(function(e){d(e.data)},function(e){p(e)})}else if(void 0!=e.method.form.draft){var f=[];f.push(r),f.push(c.createType),f.push(u),f.push(c.baseUUID),f.push(c),form.setDraft(f).then(function(e){d(e.data)},function(e){p(e)})}else if(void 0!=e.method.form.close){var f=[];f.push(o.indicators),f.push(r),f.push(c.createType),f.push(u),f.push(c.baseUUID),f.push(c),form.close(f).then(function(e){d(e.data)},function(e){p(e)})}break;case"indicator":break;case"profile":if(void 0!=e.method.profile.create){var f=[];f.push(s),f.push(r),f.push(c.createType),f.push(u),f.push(c.baseUUID),f.push(c),form.createProfile(f).then(function(e){d(e.data)},function(e){p(e)})}else void 0!=e.method.profile.X;break;case"subProcessInstance":break;case"step":break;case"community":var m=["createCommunity","releaseAdoptedApplication","userJoinCommunity"];switch(propertyExists(e.method.community,m)){case"createCommunity":return actionsModule.community.createCommunity(e.method.community.createCommunity,u,r).then(function(e){d(e.data)},function(e){p(e)});case"releaseAdoptedApplication":return actionsModule.community.releaseAdoptedApplication(e.method.community.releaseAdoptedApplication,u,r).then(function(e){d(e.data)},function(e){p(e)});case"userJoinCommunity":return actionsModule.community.userJoinCommunity(e.method.community.userJoinCommunity,u,r).then(function(e){d(e.data)},function(e){p(e)});default:p("No method found from implemented list.")}break;case"application":var h=["createAppDefinition","buildApplication","applicationAdoption"];switch(propertyExists(e.method.application,h)){case"createAppDefinition":return actionsModule.application.createAppDefinition(e.method.application.createAppDefinition,u,r).then(function(e){d(e.data)},function(e){p(e)});case"buildApplication":return actionsModule.application.buildApplication(e.method.application.buildApplication,u,r).then(function(e){d(e.data)},function(e){p(e)});case"applicationAdoption":return actionsModule.application.applicationAdoption(e.method.application.applicationAdoption,u,r).then(function(e){d(e.data)},function(e){p(e)});default:p("No method found from implemented list.")}break;case"user":break;case"sdo":break;default:p("No method found from implemented list.")}}else{var f=[],v="global",g="";void 0!==e._id&&(v=e._id.split(".")[0]),void 0!==e._id&&(g=e._id.split(".")[1]),f.length=0;for(var b=0;b<e._args.length;b++){var I=e._args[b];switch(I){case"processId":f.push(s);break;case"processSeq":f.push(t);break;case"subProcessId":f.push(i);break;case"subProcessSeq":f.push(n);break;case"subProcess":f.push(o);break;case"step":f.push(a);break;case"action":f.push(e);break;default:f=[]}}if(f.push(r),f.push(c.createType),f.push(u),f.push(c.baseUUID),f.push(c),"form.create"==e._id)form.create(f).then(function(e){d(e.data)},function(e){p(e)});else if("form.authorise"==e._id)form.authorise(f).then(function(e){d(e.data)},function(e){p(e)});else if("form.close"==e._id)form.close(f).then(function(e){d(e.data)},function(e){p(e)});else if("form.setDraft"==e._id)form.setDraft(f).then(function(e){d(e.data)},function(e){p(e)});else if("form.setUnDraft"==e._id)form.setUnDraft(f).then(function(e){d(e.data)},function(e){p(e)});else if("form.createProfile"==e._id)form.createProfile(f).then(function(e){d(e.data)},function(e){p(e)});else if("form.setInstanceTitle"==e._id)form.setInstanceTitle(f).then(function(e){d(e.data)},function(e){p(e)});else if("profile.delete"==e._id)form.deleteProfile(f).then(function(e){d(e.data)},function(e){p(e)});else{var P=util.error("WFActionError","Method: "+action_id+" not defined.");p(P)}}})}function task(e,s,t,i,n){return new Promise(function(o,a){if(void 0!=t.assign.role){var r=app.SCOPE.workflow.profile,c="";"current"==t.assign.role.profile?c=app.SCOPE.workflow.profile:"community"==t.assign.role.profile&&(c=app.SCOPE.getCommunityId());var u=t.assign.role.roleId;library.getUsersListByRole(c,u).then(function(a){if(void 0!=a)if(a.length>1){var d=JSON.xpath("/subprocesses[_id eq '"+i+"']",app.SCOPE.workflow,{})[0],p=JSON.xpath("/subprocesses[_id eq '"+i+"']/channels",app.SCOPE.workflow,{}),l=processWorkflowMessage(NOTIFICATION_USER_MSG_ACCEPT,i),f=d.id,m=d.seq,h=i,v=d.dates.valid,g=JSON.xpath("/config/processes[_id eq '"+e+"']",app.SCOPE.workflow,{})[0],b=JSON.xpath("/subProcesses[_id eq '"+f+"']",g,{})[0],I=d.step.seq+0,P=JSON.xpath("/steps[_seq eq '"+I+"']/name/i18n",b,{})[0],_=_getNameByLang(P),y=_getNameByLang(b.name.i18n),S={source:"remote",type:"notificationRequest",_id:i+":notificationRequest",channels:p,communityId:app.SCOPE.getCommunityId(),applicationId:app.SCOPE.applicationId,message:l,messageType:"info",createdDateTime:moment().format(),senderUserId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,actions:[{label:"View",function:"app.openSubprocess",params:[r,f,m,y,e,s,h,v,_]}],receiver:{value:[{type:"role",name:u,profileId:c}]}};dao.upsert(S).done(function(e){console.log(e)}).fail(function(e){console.log(e)});var q="";if(void 0!=t.assign.assignment){var q=n.assignment,w={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};q.accept=w,q.message=_getNameByLang(t.assign.assignment.message.i18n);var k={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};q.reject=k;var E={profileId:r,roleId:u,type:"role"};q.value=E,q.profileRoleId=c}o("Notifications request submitted for acceptance.")}else if(1==a.length){var T=a[0].id,A=a[0].name,C=n.assignedTo;C.name=A+"",C.userId=T+"",o("Assigned to the only user in role.")}else if(void 0!=t.assign.default){var T=t.assign.default.userId,A=t.assign.default.userName,C=n.assignedTo;C.name=A+"",C.userId=T+"",o("Assigned to default user")}else console.log("Error in assignment. Default user not specified."),k("Error in assignment. Default user not specified.");else console.log("Error in getUsersListByRole undefined"),k(err)},function(e){console.log("Error in getUsersListByRole"),a(e)})}else void 0!=t.assign.swimlane&&(o("swimlane"),console.log("Swimlane implementation !!"))})}function transition(e,s,t,i,n,o,a,r){return new Promise(function(c,u){try{for(var d=0,p="",l=0,f=[],m=r.config.processes.filter(function(s){if(s._id==e)return s}),h=m[0].subProcesses.filter(function(e){if(e._id==t)return e}),v=h[0].steps.filter(function(e){if(e._id==n)return e}),g=v[0].transition.filter(function(e){if(e._id==o)return e}),b=0;b<h[0].steps.length;b++)h[0].steps[b]._id==n&&(d=parseInt(h[0].steps[b]._seq));h[0].steps.filter(function(e){l=d+1,parseInt(e._seq)==l&&(p=e._id)}),r.instance.processes.filter(function(n){n.id==e&&n.seq==s&&n.subProcesses.filter(function(e){if(e.id==t&&e.seq==i){var s=e.uuid;r.subprocesses.filter(function(e){e._id==s&&(f=e)})}})});var I=h[0].steps.length;if(void 0!=g[0].transitionAction.goToStep){var P=parseInt(v[0]._seq)+parseInt(g[0].transitionAction.goToStep.default),_="";h[0].steps.filter(function(e){parseInt(e._seq)==l&&(_=e._id)}),step(e,s,t,i,_,P,a,r).then(function(e){if(P==I){var s=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});c(s)}else{var s=util.success("Step transition completed successfully.",e.data);c(s)}},function(e){u(e)})}else if(void 0!=g[0].transitionAction.goToStepId){var y=g[0].transitionAction.goToStepId.stepId,S=1;h[0].steps.filter(function(e){e._id==y&&(S=parseInt(e._seq))}),step(e,s,t,i,y,S,a,r).then(function(e){if(S==I){var s=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});c(s)}else{var s=util.success("Step transition completed successfully.",e.data);c(s)}},function(e){u(e)})}}catch(e){u(e)}})}function postActions(e,s){return new Promise(function(t,i){var n=[];try{util.syncLoop(e.length,function(t){var o=t.iteration();action(e[o],s).then(function(e){n.push(!0),t.next()},function(e){n.push(!1),t.break(),i(e)})},function(){if(n.every(Boolean)){var e=util.success("Post-actions completed successfully.",{});t(e)}else{var s=util.error("WFPreActionsError","Not all post-actions passed.");i(s)}})}catch(e){i(e)}})}function processWorkflowMessage(e,s){var t=e;if(t.indexOf("#INSTANCE_LABEL")!==-1){var i=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+s+"']/label",app.SCOPE.workflow,{})[0];t=t.replace("#INSTANCE_LABEL",i)}if(t.indexOf("#USER_NAME")!==-1){var i=JSON.xpath("/subprocesses[_id eq '"+s+"']/step/assignedTo/name",app.SCOPE.workflow,{})[0];t=t.replace("#USER_NAME",i)}if(t.indexOf("#PROFILE_TITLE")!==-1){var i=app.profile.title;t=t.replace("#PROFILE_TITLE",i)}if(t.indexOf("#PROFILE_TYPE")!==-1){var i=app.SCOPE.APP_CONFIG.name;t=t.replace("#PROFILE_TYPE",i)}if(t.indexOf("#VAR_SPUUID")!==-1){var i=s;t=t.replace("#VAR_SPUUID",i)}return t}function _getName(e,s){if(void 0!==e)for(var t=0;t<e.length;t++)if(e[t]._lang===s)return e[t].value}function _getNameByLang(obj){var lang=service.getLanguage(),expr="obj."+lang;return eval(expr)}var util=require("utility"),actionsModule=require("./actions"),helper=require("./helper"),form=require("./form");module.exports={preRequisites:preRequisites,preActions:preActions,subProcess:subProcess,indicatorDocs:indicatorDocs,task:task,transition:transition,assignUser:assignUser};

},{"./actions":2,"./form":3,"./helper":4,"utility":8}],8:[function(require,module,exports){
"use strict";function success(r,e){return{message:r,data:e}}function warn(r,e){return console.warn(e),{warning:r,data:e}}function error(r,e){var n=new Error("");return n.name=r,n.message=e,n}function syncLoop(r,e,n){var a=0,t=!1,o=!1,u={next:function(){return t&&o&&n?n():void(a<r?(a++,e(u)):(t=!0,n&&n()))},iteration:function(){return a-1},break:function(r){t=!0,o=r}};return u.next(),u}function compare(r,e,n){switch(e){case"greaterThan":return r>n;case"lessThan":return r<n;case"greaterThanEqual":return r>=n;case"lessThanEqual":return r<=n;case"equalTo":return r===n;case"notEqualTo":return r!==n}}function getName(r,e){if(void 0!==r)for(var n=0;n<r.length;n++)if(r[n].i18n._lang===e)return r[n].i18n.value}module.exports={success:success,warn:warn,error:error,syncLoop:syncLoop,compare:compare,getName:getName};

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
