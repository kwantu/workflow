(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Workflow = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function Workflow(e,s,t,r){var i=this;if(""==s||void 0==s)throw util.error("ParamRequired","A community id is required.");if("string"!=typeof s)throw new Error("The community id must be a javascript string.");if(i.communityId=s||"",""==e||void 0==e)throw util.error("ParamRequired","A profile id is required.");if("string"!=typeof e)throw new Error("The profile id must be a javascript string.");if(i.profile=e||"",""==t||void 0==t)throw util.error("ParamRequired","An app id is required.");if("string"!=typeof t)throw new Error("The app id must be a javascript string.");if(i.app=t||"",""==r||void 0==r)throw util.error("ParamRequired","A workflow configuration is required.");"object"!=typeof r?i.config=JSON.parse(r):i.config=r,i.instance,i.subprocesses=[],i.indicators=[],i.history=[]}var Process=require("./lib/process"),util=require("utility"),userInterface=require("./lib/interface");Workflow.prototype.getProfile=function(){return this.profile},Workflow.prototype.getApp=function(){return this.app},Workflow.prototype.getConfig=function(){return this.config},Workflow.prototype.getInstance=function(){return this.instance},Workflow.prototype.setInstance=function(e){this.instance=e},Workflow.prototype.getSubProcesses=function(){return this.subprocesses},Workflow.prototype.setSubProcesses=function(e){this.subprocesses=e},Workflow.prototype.getIndicators=function(){return this.indicators},Workflow.prototype.setIndicators=function(e){this.indicators=e},Workflow.prototype.create=function(){var e=this;return new Promise(function(s,t){try{if(void 0!==e.instance){var r=util.warn("Instance already exists.",e);s(r)}else{var i={_id:"",version:"",type:"workflowInstance",processes:[],channels:["community_"+app.SCOPE.getCommunityId(),"profile_"+app.SCOPE.profileId,"application_"+app.SCOPE.applicationId,"community_"+app.SCOPE.getCommunityId()+"_application_"+app.SCOPE.applicationId]};i._id=e.profile+":processes",i.version=e.config.version,e.instance=i;var o=util.success("Workflow processes instance created successfully.",e);s(o)}}catch(e){t(e)}})},Workflow.prototype.initialise=function(e,s,t){var r=this;return new Promise(function(i,o){try{var n=[];if(""!==e&&void 0!==e){if(n=r.config.processes.filter(function(s){if(s._id==e)return s}),void 0==n[0]._id){var c=util.error("WFConfigError","No valid process definition found with process id: "+e);o(c)}}else n.push(r.config.processes[0]),e=r.config.processes[0]._id;var a=[];r.instance.processes.filter(function(s){s.id==e&&a.push(s)});var u=a.length+1,p={id:"",seq:"",subProcesses:[]};p.id=e,p.seq=u,r.instance.processes.push(p);var f=n[0].subProcesses[0]._id,l=1;r.instance.processes.filter(function(s){s.id==e&&s.seq==u&&(l=s.subProcesses.length+1)}),Process.subProcess(e,u,f,l,s,r).then(function(n){var c=n.data._id,a=s.label,d={id:f,subprofileId:t,seq:l,uuid:c,label:a};p.subProcesses.push(d);for(var h=0;h<r.instance.processes.length;h++){var w=r.instance.processes[h];w.id==e&&w.seq==u&&r.instance.processes.splice(h,1,p)}var v=n.data.indicators,y=n.data.step;Process.indicatorDocs(e,v,y,r).then(function(e){var s=util.success("Process: "+r.config.processes[0]._id+" initialized successfully.",r);i(s)},function(e){o(e)})},function(s){r.instance.processes=r.instance.processes.filter(function(s){return!(s.id==e&&s.seq==u)}),console.log(s),o(s)})}catch(e){o(e)}})},Workflow.prototype.transition=function(e,s,t,r,i,o,n,c){var a=this;return new Promise(function(u,p){try{var f=JSON.xpath("/subprocesses[_id eq '"+c+"']/step/data",app.SCOPE.workflow,{})[0];Process.transition(e,s,t,r,i,o,n,a,c,f).then(function(i){var o=function(o){a.instance.processes.filter(function(n){n.id==e&&n.seq==s&&n.subProcesses.filter(function(e){e.id==t&&e.seq==r&&a.subprocesses.filter(function(s){if(s._id==e.uuid)if("step"==o){s.step=i.data.step;var t=util.success(i.message,s);u(t)}else if("stepComplete"==o){s.step=i.data.step,s.complete=!0;var t=util.success(i.message,s.step);u(t)}})})})};o(i.data.subProcessComplete?"stepComplete":"step")},function(e){p(e)})}catch(e){p(e)}})},Workflow.prototype.assignUser=function(e,s,t,r,i){var o=this;return new Promise(function(n,c){try{Process.assignUser(e,s,t,r,i,o).then(function(e){n(e)},function(e){c(e)})}catch(e){c(e)}})},Workflow.prototype.ui=function(){var e=this;return{getProcess:function(s,t){return new Promise(function(r,i){try{userInterface.getProcess(s,t,e).then(function(e){r(e)},function(e){i(e)})}catch(e){i(e)}})}}},module.exports=Workflow;

},{"./lib/interface":5,"./lib/process":7,"utility":8}],2:[function(require,module,exports){
"use strict";var util=require("utility"),nodeValue=require("./nodeValue"),form=require("./form"),gatekeeper=new GK,community=function(){return{createCommunity:function(e,n,t){return new Promise(function(e,n){var r=worker.getWorkerWrapper();r._id=generateUUID(),r.communityId=app.SCOPE.getCommunityId(),r.applicationId=app.SCOPE.applicationId,r.createdDateTime=(new Date).toString(),r.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var i=JSON.xpath("/indicators[category/term eq 'Community']/_id",t,{})[0],o={createCommunity:{newCommunityId:t.profile,indicatorUUID:{Community:i}}};r.action=o,worker.send(r).then(function(n){var t=util.success("Worker processed successfully.",n);e(t)},function(e){n(e)})})},userJoinCommunity:function(e,n,t){return new Promise(function(e,n){})},releaseAdoptedApplication:function(e,n,t){return new Promise(function(e,r){var i=worker.getWorkerWrapper();i._id=generateUUID(),i.communityId=app.SCOPE.getCommunityId(),i.applicationId=app.SCOPE.applicationId,i.createdDateTime=(new Date).toString(),i.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var o=JSON.xpath("/subprocesses[_id eq '"+n+"']/indicators[id eq 'adoptedApplication']/instances[1]/uuid",t,{})[0],a={releaseAdoptedApplication:{communityId:t.profile,indicatorUUID:{adoptedApplication:o}}};i.action=a,worker.send(i).then(function(n){var t=util.success("Worker processes successfully.",n);e(t)},function(e){r(e)})})}}}(),application=function(){return{createAppDefinition:function(e,n,t){return new Promise(function(e,n){var r=worker.getWorkerWrapper();r._id=generateUUID(),r.communityId=app.SCOPE.getCommunityId(),r.applicationId=app.SCOPE.applicationId,r.createdDateTime=(new Date).toString(),r.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var i=JSON.xpath("/indicators[category/term eq 'Application']/_id",t,{})[0],o={createApplication:{newApplicationId:t.profile,indicatorUUID:{Application:i}}};r.action=o,worker.send(r).then(function(n){var t=util.success("Worker processes successfully.",n);e(t)},function(e){n(e)})})},buildApplication:function(e,n,t){return new Promise(function(e,r){var i=worker.getWorkerWrapper();i._id=generateUUID(),i.communityId=app.SCOPE.getCommunityId(),i.applicationId=app.SCOPE.applicationId,i.createdDateTime=(new Date).toString(),i.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var o=JSON.xpath("/subprocesses[_id eq '"+n+"']/indicators[id eq 'PublishApplication']/instances[1]/uuid",t,{})[0],a=JSON.xpath("/indicators[category/term eq 'ApplicationDefinition']/_id",t,{})[0],c=JSON.xpath("/indicators[category/term eq 'Roles']/_id",t,{})[0],s=JSON.xpath("/indicators[category/term eq 'Application']/_id",t,{})[0],p=JSON.xpath("/indicators[category/term eq 'AppPermissions']/_id",t,{})[0],u={buildApplication:{applicationId:t.profile,indicatorUUID:{PublishApplication:o,ApplicationDefinition:a,Roles:c,Application:s,AppPermissions:p}}};i.action=u,worker.send(i).then(function(n){var t=util.success("Worker processes successfully.",n);e(t)},function(e){r(e)})})},applicationAdoption:function(e,n,t){return new Promise(function(e,r){var i=worker.getWorkerWrapper();i._id=generateUUID(),i.communityId=app.SCOPE.getCommunityId(),i.applicationId=app.SCOPE.applicationId,i.createdDateTime=(new Date).toString(),i.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var o=JSON.xpath("/subprocesses[_id eq '"+n+"']/indicators[id eq 'Adoption']/instances[1]/uuid",t,{})[0],a=JSON.xpath("/indicators[category/term eq 'PublishApplication']/_id",t,{})[0],c=JSON.xpath("/indicators[category/term eq 'Application']/_id",t,{})[0],s={adoptApplication:{applicationId:t.profile,indicatorUUID:{Adoption:o,PublishApplication:a,Application:c}}};i.action=s,worker.send(i).then(function(n){var t=util.success("Worker processes successfully.",n);e(t)},function(e){r(e)})})},createTaxonomy:function(e,n,t){return new Promise(function(e,r){var i=worker.getWorkerWrapper();i._id=generateUUID(),i.communityId=app.SCOPE.getCommunityId(),i.applicationId=app.SCOPE.applicationId,i.createdDateTime=(new Date).toString(),i.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var o=JSON.xpath("/subprocesses[_id eq '"+n+"']/indicators[id eq 'Taxonomy']/instances[1]/uuid",t,{})[0],a={createTaxonomy:{taxonomyUUID:o}};i.action=a,worker.send(i).then(function(n){var t=util.success("Worker processes successfully.",n);e(t)},function(e){r(e)})})}}}(),worker=function(){return{getWorkerWrapper:function(){var e={source:"remote",type:"workerObject",_id:"",channels:[],communityId:"",applicationId:"",message:"",messageType:"info",createdDateTime:"",senderUserId:"",notification:{},action:{}};return e},send:function(e){return new Promise(function(n,t){console.log("Submitting Worker Object to server"),console.log(e),dao.save(e).done(function(e){n(e)}).fail(function(e){console.log("Error submitting worker response !!"+e),t(e)})})}}}(),performance=function(){return{create:function(e,n,t){return new Promise(function(e,n){var r=worker.getWorkerWrapper();r._id=generateUUID(),r.communityId=app.SCOPE.getCommunityId(),r.applicationId=app.SCOPE.applicationId,r.createdDateTime=(new Date).toString(),r.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var i=JSON.xpath("/indicators[category/term eq 'plan']/_id",t,{})[0],o={createPlan:{planUUID:i}};r.action=o,worker.send(r).then(function(n){var t=util.success("Worker processed successfully.",n);e(t)},function(e){n(e)})})},configureNode:function(e,n,t){return new Promise(function(e,r){var i=worker.getWorkerWrapper();i._id=generateUUID(),i.communityId=app.SCOPE.getCommunityId(),i.applicationId=app.SCOPE.applicationId,i.createdDateTime=(new Date).toString(),i.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var o=JSON.xpath("/subprocesses[_id eq '"+n+"']/indicators[id eq 'node']/instances[1]/uuid",t,{})[0],a={configureNode:{nodeUUID:o}};i.action=a,worker.send(i).then(function(n){var t=util.success("Worker processed successfully.",n);e(t)},function(e){r(e)})})}}}(),sdo=function(){return{create:function(e,n,t){return new Promise(function(e,r){var i=worker.getWorkerWrapper();i._id=generateUUID(),i.communityId=app.SCOPE.getCommunityId(),i.applicationId=app.SCOPE.applicationId,i.createdDateTime=(new Date).toString(),i.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var o=JSON.xpath("/subprocesses[_id eq '"+n+"']/indicators[id eq 'SDO']/instances[1]/uuid",t,{})[0],a={createSDO:{sdoUUID:o}};i.action=a,worker.send(i).then(function(n){var t=util.success("Worker processes successfully.",n);e(t)},function(e){r(e)})})}}}(),taxonomy=function(){return{create:function(e,n,t){return new Promise(function(e,r){var i=worker.getWorkerWrapper();i._id=generateUUID(),i.communityId=app.SCOPE.getCommunityId(),i.applicationId=app.SCOPE.applicationId,i.createdDateTime=(new Date).toString(),i.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var o=JSON.xpath("/subprocesses[_id eq '"+n+"']/indicators[id eq 'Taxonomy']/instances[1]/uuid",t,{})[0],a={createTaxonomy:{taxonomyUUID:o}};i.action=a,worker.send(i).then(function(n){var t=util.success("Worker processes successfully.",n);e(t)},function(e){r(e)})})}}}(),subProcessInstance=function(){return{setTitle:function(e,n,t,r){return new Promise(function(e,i){var o=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+n+"']",app.SCOPE.workflow,{})[0];o.label=t;var a=[],c={};c.model=r.instance,a.push(c),gatekeeper.persist(a).then(function(n){for(var t="",i=0;i<n.length;i++)n[i].id.endsWith(":approved")||(t=n[i].id);dao.get(t).done(function(n){r.instance=n;var t=util.success("Subprocess setTitle success.",r.instance);e(t)}).fail(function(e){console.error(e)})},function(e){console.error(e)})})}}}();module.exports={community:community,application:application,performance:performance,worker:worker,sdo:sdo,taxonomy:taxonomy,subProcessInstance:subProcessInstance};

},{"./form":3,"./nodeValue":6,"utility":8}],3:[function(require,module,exports){
"use strict";function create(args){var processId=args[0]||"",subProcess=args[1]||{},step=args[2]||{},action=args[3]||{},_WFInstance=args[6]||{},data=args[6]||{},indicators=subProcess.indicators||[],result=[],indicatorType=action._type,processSeq=args[4]||"",subProcessSeq=args[5]||"",createType=args[7]||"",subProcessId=subProcess._id,uuid=args[8]||"",baseUUID=args[9]||"",profile=_WFInstance.profile,inputData=args[10]||{};return new Promise(function(resolve,reject){for(var toProcess=indicators.length,formCreateFn=function(id,indicatorType,indicatorId,validDate,instantiateSource){gatekeeper.instantiate(id,indicatorType,indicatorId,_WFInstance.profile,validDate).then(function(docArray){for(var i=0;i<docArray.length;i++){var object=docArray[i];if(!object.model._id.endsWith(":approved")&&!object.model._id.endsWith(":rejected")){var workflowObj={id:_WFInstance.config._id,instance:_WFInstance.instance._id,processes:[{id:processId,subProcessId:subProcess._id,subProcessUUID:uuid,step:{id:step.id,seq:step.seq,startDate:"",status:step.status,message:step.message,assignedTo:{userId:step.assignedTo.userId,name:step.assignedTo.name},comment:step.comment,complete:!1,endDate:""}}]};void 0!=action.setWorkflowLabelInTitle&&""!=action.setWorkflowLabelInTitle&&1==action.setWorkflowLabelInTitle&&(object.model.title=inputData.label),void 0!=action.setDraft&&""!=action.setDraft&&1==action.setDraft&&(object.model.control.draft=!0),object.model.workflows.push(workflowObj);var mainId=object.model._id;gatekeeper.persist(docArray).then(function(savedArray){dao.get(mainId).done(function(data){var indicatorModel=ko.mapping.fromJS({defaultModel:{setId:indicatorId}});gatekeeper.instantiateData(mainId,instantiateSource,indicatorModel,data.model.pending.seq).then(function(data){if("200"==data[0].status){if(void 0!=action.setWorkflowLabelInField&&""!=action.setWorkflowLabelInField&&mainId==profile){console.log(data[0]);var path="data[0].model.model.pending.data."+action.setWorkflowLabelInField+"='"+inputData.label+"'";eval(path)}gatekeeper.persist(data).then(function(e){dao.get(mainId).done(function(e){if(0==_WFInstance.indicators.length){if(_WFInstance.indicators.push(e),toProcess--,0==toProcess){var s=util.success("Form created successfully.",_WFInstance.indicators);resolve(s)}}else{for(var i=!1,t=0;t<_WFInstance.indicators.length;t++){var a=_WFInstance.indicators[t];if(a._id==e._id&&(i=!0,_WFInstance.indicators.splice(t,1),_WFInstance.indicators.push(e),toProcess--,0==toProcess)){var s=util.success("Form created successfully.",_WFInstance.indicators);resolve(s)}}if(0==i&&(_WFInstance.indicators.push(e),toProcess--,0==toProcess)){var s=util.success("Form created successfully.",_WFInstance.indicators);resolve(s)}}}).fail(function(e){console.error(e);var s=util.success("1 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(s)})},function(e){console.error(e);var s=util.success("2 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(s)})}else{var failure=util.success("3 Gatekeeper initialisation failed with initialiseData message "+err[0].message,{});reject(failure)}},function(e){var s=util.success("4 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(s)})}).fail(function(e){console.error(e);var s=util.success("5 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(s)})},function(e){console.error(e);var s=util.success("6 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(s)})}}},function(e){for(var s=[],i=0;i<_WFInstance.instance.processes.length;i++)_WFInstance.instance.processes[i].subProcesses.length>0&&s.push(_WFInstance.instance.processes[i]);_WFInstance.instance.processes=[],_WFInstance.instance.processes=s;for(var t=[],i=0;i<_WFInstance.subprocesses.length;i++)_WFInstance.subprocesses[i].indicators.length>0&&t.push(_WFInstance.subprocesses[i]);_WFInstance.subprocesses=[],_WFInstance.subprocesses=t,console.error(e);var a=util.success("7 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(a)})},instantiateSource="fromDefinition",counter=0;counter<indicators.length;counter++){var indicatorId=indicators[counter]._id,indicatorName=util.getName(indicators[counter].name,"en"),initType="";void 0!=subProcess.instanceType.newSequence?initType="newSequence":void 0!=subProcess.instanceType.newInstance&&(initType="newInstance");var id="",indicatorDoc={};if("newInstance"==initType)if(void 0!=baseUUID&&""!=baseUUID&&baseUUID.length>0){var existingUUID=JSON.xpath("/subprocesses[_id eq '"+baseUUID+"']/indicators[id eq '"+indicatorId+"']/instances[1]/uuid",_WFInstance,{})[0];id=existingUUID,initType="newSequence";var sp=JSON.xpath("/subprocesses[_id eq '"+baseUUID+"']",app.SCOPE.workflow,{})[0];sp.active=!1,instantiateSource="fromAuthorised"}else id=void 0==subProcess.isProfile||!subProcess.isProfile||indicatorId!=PROFILE_SET_ID&&1!=app.SCOPE.APP_CONFIG.indicators.length?"node"==indicatorId?app.profile.subprofileId:indicatorId+"-"+generateUUID():profile;else{var spLastUuid=JSON.xpath("/instance/processes[id eq '"+processId+"' and subProcesses/id eq '"+subProcessId+"'][1]/subProcesses/uuid",_WFInstance,{})[0],indId=JSON.xpath("/subprocesses[_id eq '"+spLastUuid+"']/indicators[id eq '"+indicatorId+"']/instances/uuid",app.SCOPE.workflow,{})[0];if(id=""==spLastUuid||void 0==spLastUuid||""==indId||void 0==indId?void 0==subProcess.isProfile||!subProcess.isProfile||indicatorId!=PROFILE_SET_ID&&1!=app.SCOPE.APP_CONFIG.indicators.length?"node"==indicatorId?app.profile.subprofileId:indicatorId+"-"+generateUUID():profile:indId,void 0!=baseUUID&&""!=baseUUID&&baseUUID.length>0){var sp=JSON.xpath("/subprocesses[_id eq '"+baseUUID+"']",app.SCOPE.workflow,{})[0];sp.active=!1,instantiateSource="fromAuthorised"}}formCreateFn(id,initType,indicatorId,"",instantiateSource)}})}function setInstanceTitle(e){var s=e[0]||{},i=e[2]||"",t=e[4]||{},a=t.label;return new Promise(function(e,t){for(var n=JSON.xpath("/subprocesses[_id eq '"+i+"']",s,{})[0],r=n.indicators,o=0;o<r.length;o++){var c=r[o].instances[0].uuid,d=JSON.xpath("/indicators[_id eq '"+c+"']",s,{})[0];d.title=r[o].id+" "+a}e("Set Title Success",r)})}function deleteProfile(e){var s=e[0]||{},i=s.profile;return new Promise(function(e,s){var t={source:"remote",type:"workerObject",_id:generateUUID(),channels:[],communityId:app.SCOPE.getCommunityId(),applicationId:app.SCOPE.applicationId,message:"",messageType:"info",createdDateTime:moment().format(),senderUserId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,notification:{},profile:{action:"deleteProfile",profileId:i}};console.log(t),dao.upsert(t).done(function(s){console.log("Worker Object submitted for profile("+i+") deletion."),console.log(s),e(s)}).fail(function(e){console.log(e),s(data)})})}function createProfile(e){var s=e[1]||{},i=s.communityId,t=s.profile;return new Promise(function(e,s){library.createProfileDocuments(i,t).done(function(s){var i=util.success("Form created successfully.",s);e(i)}).fail(function(e){console.error(e);var i=util.success("ERROR: Profile creation failed"+e[0].message,{});s(i)})})}function setDraft(e){var s=e[0]||{},i=(s.communityId,s.profile,e[2]||"");return new Promise(function(e,t){for(var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",s,{})[0],n=a.indicators,r=0;r<n.length;r++){var o=n[r].instances[0].uuid,c=JSON.xpath("/indicators[_id eq '"+o+"']",s,{})[0];c.control.draft=!0}e("Set Draft Success",n)})}function setUnDraft(e){var s=e[0]||{},i=(s.communityId,s.profile,e[2]||"");return new Promise(function(e,t){for(var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",s,{})[0],n=a.indicators,r=0;r<n.length;r++){var o=n[r].instances[0].uuid,c=JSON.xpath("/indicators[_id eq '"+o+"']",s,{})[0];c.control.draft=!1}e("Set Draft Success",n)})}function save(e){var s={complete:!0,data:[]};return new Promise(function(e,i){var t=util.success("Form indicator set saved successfully.",s);e(t)})}function submit(e){var s={complete:!0,data:[]};return new Promise(function(e,i){var t=util.success("Form submitted successfully.",s);e(t)})}function authorise(e){var s=e[0]||"",i=e[1]||{},t=i._id,a=e[2]||"",n=e[3]||"",r=e[4]||{};return new Promise(function(e,i){for(var o=JSON.xpath("/processes[id eq '"+s+"' and seq eq '"+a+"']/subProcesses[id eq '"+t+"' and seq eq '"+n+"']/uuid",r.instance,{})[0],c=JSON.xpath("/subprocesses[_id eq '"+o+"']/indicators/instances/uuid",r,{}),d=c.length,u=[],l=0;l<d;l++)gatekeeper.authorise(c[l]).then(function(s){gatekeeper.persist(s).then(function(s){for(var i="",t=0;t<s.length;t++)s[t].id.endsWith(":approved")||(i=s[t].id);dao.get(i).done(function(s){if(0==r.indicators.length){if(r.indicators.push(s),d--,0==d){var i=util.success("Form authorised successfully.",u);e(i)}}else{for(var t=!1,a=0;a<r.indicators.length;a++){var n=r.indicators[a];if(n._id==s._id&&(t=!0,r.indicators.splice(a,1),r.indicators.push(s),d--,0==d)){var i=util.success("Form authorised successfully.",u);e(i)}}if(0==t&&(r.indicators.push(s),d--,0==d)){var i=util.success("Form authorised successfully.",u);e(i)}}}).fail(function(e){console.error(e)})},function(e){console.error(err)})},function(s){if(d--,0==d){var i=util.success("Form authorised successfully.",u);e(i)}})})}function close(e){var s={complete:!0,data:[]};return new Promise(function(e,i){var t=util.success("Form closed successfully.",s);e(t)})}function updateIndicator(args){var _WFInstance=args[0]||{},uuid=args[1]||"",path=args[2]||"",dataValue=args[3]||"";return new Promise(function(resolve,reject){var subProcessInstance=JSON.xpath("/subprocesses[_id eq '"+uuid+"']",_WFInstance,{})[0],indicatorInstances=subProcessInstance.indicators,setId=path.split(".",1)[0],indicatorUUID=JSON.xpath("/*[id eq '"+setId+"']/instances/uuid",indicatorInstances,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],expr="indObject.model.pending.data."+path+' = "'+dataValue+'"';eval(expr);var itemsToProcess=1,stuff=[],obj={};obj.model=indObject,stuff.push(obj),gatekeeper.persist(stuff).then(function(e){for(var s="",i=0;i<e.length;i++)e[i].id.endsWith(":approved")||(s=e[i].id);dao.get(s).done(function(e){if(0==_WFInstance.indicators.length){if(_WFInstance.indicators.push(e),itemsToProcess--,0==itemsToProcess){var s=util.success("Indicator updated.",stuff);resolve(s)}}else{for(var i=!1,t=0;t<_WFInstance.indicators.length;t++){var a=_WFInstance.indicators[t];if(a._id==e._id&&(i=!0,_WFInstance.indicators.splice(t,1),_WFInstance.indicators.push(e),itemsToProcess--,0==itemsToProcess)){var s=util.success("Indicator updated.",stuff);resolve(s)}}if(0==i&&(_WFInstance.indicators.push(e),itemsToProcess--,0==itemsToProcess)){var s=util.success("Indicator updated.",stuff);resolve(s)}}}).fail(function(e){console.error(e)})},function(e){console.error(e)})})}function markUpdateIndicator(e){var s=e[0]||{},i=(e[1]||"",e[2]||""),t=e[3]||"";return new Promise(function(e,a){var n=JSON.xpath("/indicators[category/term eq '"+t+"']",s,{})[0];n.model.pending.status=i;var r=1,o=[],c={};c.model=n,o.push(c),gatekeeper.persist(o).then(function(i){for(var t="",a=0;a<i.length;a++)i[a].id.endsWith(":approved")||(t=i[a].id);dao.get(t).done(function(i){if(0==s.indicators.length){if(s.indicators.push(i),r--,0==r){var t=util.success("Indicator updated.",o);e(t)}}else{for(var a=!1,n=0;n<s.indicators.length;n++){var c=s.indicators[n];if(c._id==i._id&&(a=!0,s.indicators.splice(n,1),s.indicators.push(i),r--,0==r)){var t=util.success("Indicator updated.",o);e(t)}}if(0==a&&(s.indicators.push(i),r--,0==r)){var t=util.success("Indicator updated.",o);e(t)}}}).fail(function(e){console.error(e)})},function(e){console.error(e)})})}var util=require("utility"),gatekeeper=new GK;module.exports={create:create,save:save,submit:submit,authorise:authorise,close:close,setDraft:setDraft,setUnDraft:setUnDraft,createProfile:createProfile,setInstanceTitle:setInstanceTitle,deleteProfile:deleteProfile,updateIndicator:updateIndicator,markUpdateIndicator:markUpdateIndicator};

},{"utility":8}],4:[function(require,module,exports){
"use strict";function getLanguageMessage(message){var language=service.getLanguage(),res=eval("message.i18n."+language);return console.log(res),res}function getNodeValue(data,_WFInstance,uuid){if(void 0!=data.value);else if(void 0!=data.currentIndicator);else{if(void 0!=data.indicator){var indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+data.indicator.indicatorSetId+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],value="indObject.model.pending.data."+data.indicator.indicatorSetId+"."+data.indicator.elementId;return eval(value)}void 0!=data.system||void 0!=data.variable}}module.exports={getLanguageMessage:getLanguageMessage,getNodeValue:getNodeValue};

},{}],5:[function(require,module,exports){
"use strict";function getProcess(e,s,t){return new Promise(function(n,i){try{var c=[],r=[];t.instance.processes.filter(function(s){s.id==e&&(r=s)}),util.syncLoop(r.subProcesses.length,function(n){var o=n.iteration(),u=r.seq,f=r.subProcesses[o].id,a=r.subProcesses[o].seq;getSubProcess(e,u,f,a,s,t).then(function(e){c.push(e),n.next()},function(e){n.break(),i(e)})},function(){n(c)})}catch(e){i(e)}})}function getSubProcess(e,s,t,n,i,c){return new Promise(function(r,o){try{var u={id:"",seq:"",name:"",help:"",dates:"",step:""},f=[],a=[];c.instance.processes.filter(function(i){if(i.id==e&&i.seq==s){i.subProcesses.length;i.subProcesses.filter(function(e){e.id==t&&e.seq==n&&0==e.complete&&(f=e)})}}),c.config.processes.filter(function(s){s._id==e&&s.subProcesses.filter(function(e){e._id==t&&(a=e)})}),u.id=a._id,u.seq=f.seq,u.name=util.getName(a.name,i),u.help=util.getName(a.help,i),u.dates=f.dates,u.step=f.step,r(u)}catch(e){o(e)}})}function prepareNotificationScreen(){""}var util=require("utility");module.exports={getProcess:getProcess};

},{"utility":8}],6:[function(require,module,exports){
"use strict";function get(){return new Promise(function(e,t){})}module.exports={get:get};

},{}],7:[function(require,module,exports){
"use strict";function count(e){return void 0!==e?e.length:0}function preRequisites(e,t){return new Promise(function(s,n){var i=[];try{util.syncLoop(e.length,function(s){var o=s.iteration();preRequisite(e[o],t).then(function(e){i.push(!0),s.next()},function(e){i.push(!1),s.break(),n(e)})},function(){if(i.every(Boolean)){var e=util.success("Pre-requisites completed successfully.",{});s(e)}else{var t=util.error("WFPreRequisiteError","Not all pre-requisites passed.");n(t)}})}catch(e){n(e)}})}function preRequisite(e,t){return new Promise(function(s,n){var i="";if(void 0!=e.check.numberProcessInstances){var o=e.check.numberProcessInstances,a=o.operator,r="";switch(a){case"greaterThan":r="gt";break;case"lessThan":r="lt";break;case"greaterThanEqual":r="ge";break;case"lessThanEqual":r="le";break;case"equalTo":r="eq";break;case"notEqualTo":r="ne"}var c=o.subProcessId,u="step/status",d=o.type,p="/"+u+"[. eq '"+d+"']",l="count(/subprocesses[id eq '"+c+"']"+p+")";i=JSON.xpath(l,t,{})[0]}else if(void 0!=e.check.variableConfirm);else{var f=util.error("WFPreRequisiteError","Pre-requisite type not defined.");n(f)}var m="";if(e.check.numberProcessInstances?m=util.compare(i,e.check.numberProcessInstances.operator,parseInt(e.check.numberProcessInstances.count)):e.check.variableConfirm,m){var h=util.success("Pre-requisites passed.",{});s(h)}else{var v=helper.getLanguageMessage(e.message),f=util.error("WFPreRequisiteError",v);n(f)}})}function preActions(e,t){return new Promise(function(s,n){var i=[];try{util.syncLoop(e.length,function(s){var o=s.iteration();action(e[o],t).then(function(e){i.push(!0),s.next()},function(e){i.push(!1),s.break(),n(e)})},function(){if(i.every(Boolean)){var e=util.success("Pre-actions completed successfully.",{});s(e)}else{var t=util.error("WFPreRequisiteError","Not all pre-actions passed.");n(t)}})}catch(e){n(e)}})}function getSubProcess(e,t){return void 0==t.subprocesses?[]:void t.subprocesses.filter(function(t){if(t.id==e)return t})}function subProcess(e,t,s,n,i,o){var a=[],r=[],c=[];o.instance.processes.filter(function(i){if(i.id==e&&i.seq==t){i.subProcesses.length;i.subProcesses.filter(function(e){if(e.id==s&&e.seq==n){var t=e.uuid;o.subprocesses.filter(function(e){e._id==t&&(a=e)})}})}}),o.config.processes.filter(function(t){t._id==e&&(r=t,t.subProcesses.filter(function(e){e._id==s&&(c=e)}))});var u="",d=i.baseUUID;if(void 0!=d&&""!=d&&d.length>0){var p=JSON.xpath("/subprocesses[_id eq '"+d+"']",o,{})[0];u=p.groupKey}else u=generateUUID();var l=generateUUID(),f={_id:l,id:s,type:"workflowInstanceSubProcess",seq:n,initiated:!1,dates:{created:"",valid:"",due:"",closed:""},complete:!1,indicators:[],step:{},active:!0,groupKey:u,channels:["community_"+app.SCOPE.getCommunityId(),"profile_"+app.SCOPE.profileId,"application_"+app.SCOPE.applicationId,"community_"+app.SCOPE.getCommunityId()+"_application_"+app.SCOPE.applicationId]};return o.subprocesses.push(f),new Promise(function(u,d){try{var p=r.preActions;preActions(p,o).then(function(p){var m=r.prerequisites;preRequisites(m,o).then(function(p){var m=c.initiate;initiate(m,a,i).then(function(a){f.initiated=a.data.initiated,f.dates=a.data.dates;var p=c.steps[0]._id,m=(c.steps[0].transition[0]._id,1);step(e,t,s,n,p,m,i,o,l).then(function(e){f.step=e.data,indicators(c.indicators,o,f._id).then(function(e){f.indicators=e.data;var t=r.postActions;postActions(t,o).then(function(e){var t=util.success(e.message,f);u(t)},function(e){d(e)})},function(e){d(e)})},function(e){d(e)})},function(e){o.subprocesses=o.subprocesses.filter(function(e){return!(e._id==l)}),d(e)})},function(e){o.subprocesses=o.subprocesses.filter(function(e){return!(e._id==l)}),d(e)})},function(e){o.subprocesses=o.subprocesses.filter(function(e){return!(e._id==l)}),d(e)})}catch(e){d(e)}})}function initiate(e,t,s){var n={initiated:!1,dates:{created:"",valid:"",due:"",closed:""}};return new Promise(function(i,o){var a=function(){if(void 0!=e.user){n.dates.created=s.createdDate,"userSelected"!=e.user.validDate._type&&"autoSelected"!=e.user.validDate._type||(void 0!==s.validDate?n.dates.valid=s.validDate:util.warn("WFInitiateError","No valid date passed in - {data.validDate}")),"userSelected"!=e.user.dueDate._type&&"autoSelected"!=e.user.dueDate._type||(void 0!==s.dueDate?n.dates.due=s.dueDate:util.warn("WFInitiateError","No due date passed in - {data.dueDate}")),n.initiated=!0;var t=util.success("Sub-Process initiate completed successfully.",n);i(t)}else if(void 0!=e.auto);else{var a=util.error("WFInitiateError","Initiate type: "+e._type+" not defined.");o(a)}};if(void 0==t.complete)a();else if(!t.complete)if(e.parallelInstances)a();else{var r=util.error("WFInitiateError","Sub-process: "+t.id+" still active and parallel instances are not allowed.");o(r)}})}function step(processId,processSeq,subProcessId,subProcessSeq,stepId,stepSeq,data,_WFInstance,spuuid){var model={id:"",seq:"",status:"",message:"",assignedTo:{userId:"",name:""},assignment:{},comment:""},subProcess={},uuid="",instSubProcess,step={},transitionId="";return new Promise(function(resolve,reject){try{_WFInstance.instance.processes.filter(function(e){e.id==processId&&e.seq==processSeq&&e.subProcesses.filter(function(e){e.id==subProcessId&&e.seq==subProcessSeq&&(uuid=e.uuid)})}),_WFInstance.subprocesses.filter(function(e){e._id==uuid&&(instSubProcess=e)}),_WFInstance.config.processes.filter(function(e){e._id==processId&&e.subProcesses.filter(function(e){e._id==subProcessId&&(subProcess=e,e.steps.filter(function(e){e._id==stepId&&(step=e)}))})}),model.id=stepId,model.seq=stepSeq;var instanceStatus="";void 0!=step.setInstanceStatusTo.NotStarted?instanceStatus="NotStarted":void 0!=step.setInstanceStatusTo.Created?instanceStatus="Created":void 0!=step.setInstanceStatusTo.InProgress?instanceStatus="InProgress":void 0!=step.setInstanceStatusTo.Submitted?instanceStatus="Submitted":void 0!=step.setInstanceStatusTo.Complete&&(instanceStatus="Complete");var language=service.getLanguage();model.status=instanceStatus,model.message=eval("step.setInstanceStatusTo."+instanceStatus+".label.i18n."+language),model.comment=void 0!==data.comment?data.comment:"";var indicators=void 0!==instSubProcess?instSubProcess.indicators:[];indicatorDocs(processId,indicators,model,_WFInstance).then(function(e){uuid=spuuid,void 0!=step.function.actions?actions(step.function.actions,processId,processSeq,subProcessId,subProcessSeq,subProcess,model,_WFInstance,data,spuuid).then(function(e){var t=step.transition[0]._id;transition(processId,processSeq,subProcessId,subProcessSeq,stepId,t,data,_WFInstance,spuuid,model).then(function(e){var t=util.success("Transition completed successfully.",e.data.step);resolve(t)},function(e){reject(e)})},function(e){reject(e)}):void 0!=step.function.task&&task(processId,processSeq,step.function.task,spuuid,model).then(function(e){console.log("Task complete.");var t=util.success("Task awaiting user action.",model);resolve(t)},function(e){reject(e)})},function(e){reject(e)})}catch(e){reject(e)}})}function indicators(e,t,s){var n=[];return new Promise(function(e,i){try{for(var o=JSON.xpath("indicators[fn:count(./workflows/processes[subProcessUUID eq '"+s+"']) gt 0]",t,{}),a=0;a<o.length;a++){var r=o[a],c={id:"",instances:[]},u={uuid:"",title:"",key:"",seq:1};c.id=r.category.term,u.uuid=r._id,u.title=r.title,u.key="",u.seq=r.model.pending.seq,c.instances.push(u),n.push(c)}var d=util.success("Process indicator model updated.",n);e(d)}catch(e){i(e)}})}function assignUser(e,t,s,n,i,o){return new Promise(function(a,r){try{var c="";o.instance.processes.filter(function(i){i.id==e&&i.seq==t&&i.subProcesses.filter(function(e){e.id==s&&e.seq==n&&(c=e.uuid)})}),o.subprocesses.filter(function(t){if(t._id==c){t.step.assignedTo.userId=i.id,t.step.assignedTo.name=i.name;for(var s=t.indicators,n=0;n<s.length;n++)for(var r=s[n],u=0;u<r.instances.length;u++)for(var d=r.instances[u],p=0;p<o.indicators.length;p++){var l=o.indicators[p];d.uuid==l._id&&l.workflows.filter(function(t){t.id==o.config._id&&t.processes.filter(function(t){t.id==e&&(t.step.assignedTo.userId=i.id,t.step.assignedTo.name=i.name)})})}var f=util.success('User assigned successfully. UserId: "'+i.id+'", Name: "'+i.name+'"',t);a(f)}})}catch(e){r(e)}})}function indicatorDocs(e,t,s,n){return new Promise(function(i,o){try{if(void 0==t){util.error("WFIndicatorsUpdate","Indicators parameter is required. - Value: "+t);o(err)}else{for(var a=0;a<t.length;a++)for(var r=t[a],c=0;c<r.instances.length;c++)for(var u=r.instances[c],d=0;d<n.indicators.length;d++){var p=n.indicators[d];u.uuid==p._id&&p.workflows.filter(function(t){t.id==n.config._id&&t.processes.filter(function(t){t.id==e&&(t.step.id=s.id,t.step.seq=s.seq,t.step.status=s.status,t.step.message=s.message,t.step.assignedTo.userId=s.assignedTo.userId,t.step.assignedTo.name=s.assignedTo.name,t.step.comment=void 0!==s.comment?s.comment:"")})})}var l=util.success("Indicator documents workflow process model updated.",n);i(l)}}catch(e){o(e)}})}function actions(e,t,s,n,i,o,a,r,c,u){var d=[];return new Promise(function(p,l){util.syncLoop(e.length,function(p){var f=p.iteration();action(e[f],t,s,n,i,o,a,r,c,u).then(function(t){var s={id:e[f]._id,seq:f,data:t};d.push(s),p.next()},function(e){p.break(),l(e)})},function(){var e=util.success("Actions completed successfully.",d);p(e)})})}function action(e,t,s,n,i,o,a,r,c,u){return new Promise(function(n,d){if(void 0!=e.method){var p=["form","indicator","profile","subProcessInstance","step","community","application","user","sdo","performance","taxonomy"];switch(propertyExists(e.method,p)){case"form":if(void 0!=e.method.form.create){var l=[];l.push(t),l.push(o),l.push(a),l.push(e),l.push(s),l.push(i),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.create(l).then(function(e){n(e.data)},function(e){d(e)})}else if(void 0!=e.method.form.authorise){var l=[];l.push(t),l.push(o),l.push(s),l.push(i),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.authorise(l).then(function(e){n(e.data)},function(e){d(e)})}else if(void 0!=e.method.form.undraft){var l=[];l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.setUnDraft(l).then(function(e){n(e.data)},function(e){d(e)})}else if(void 0!=e.method.form.draft){var l=[];l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.setDraft(l).then(function(e){n(e.data)},function(e){d(e)})}else if(void 0!=e.method.form.close){var l=[];l.push(o.indicators),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.close(l).then(function(e){n(e.data)},function(e){d(e)})}break;case"indicator":if(void 0!=e.method.indicator.create);else if(void 0!=e.method.indicator.instantiate);else if(void 0!=e.method.indicator.setValue){var f=e.method.indicator.setValue.path,m=helper.getNodeValue(e.method.indicator.setValue.data,r,u),l=[];l.push(r),l.push(u),l.push(f),l.push(m),form.updateIndicator(l).then(function(e){n(e.data)},function(e){d(e)})}else if(void 0!=e.method.indicator.updateStatus){var h=e.method.indicator.updateStatus,v=e.method.indicator.indicatorSetId,l=[];l.push(r),l.push(u),l.push(h),l.push(v),form.markUpdateIndicator(l).then(function(e){n(e.data)},function(e){d(e)})}break;case"profile":if(void 0!=e.method.profile.create){var l=[];l.push(t),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.createProfile(l).then(function(e){n(e.data)},function(e){d(e)})}else void 0!=e.method.profile.X;break;case"subProcessInstance":var g=["instantiate","authorise","close","setVariable","setStatusTo","setStatusMsgTo","setTitle"];switch(propertyExists(e.method.subProcessInstance,g)){case"setTitle":var m=helper.getNodeValue(e.method.subProcessInstance.setTitle,r,u);return actionsModule.subProcessInstance.setTitle(e.method.subProcessInstance.setTitle,u,m,r).then(function(e){n(e.data)},function(e){d(e)});default:d("No method found from implemented list in subprocess action.")}break;case"step":break;case"community":var b=["createCommunity","releaseAdoptedApplication","userJoinCommunity"];switch(propertyExists(e.method.community,b)){case"createCommunity":return actionsModule.community.createCommunity(e.method.community.createCommunity,u,r).then(function(e){n(e.data)},function(e){d(e)});case"releaseAdoptedApplication":return actionsModule.community.releaseAdoptedApplication(e.method.community.releaseAdoptedApplication,u,r).then(function(e){n(e.data)},function(e){d(e)});case"userJoinCommunity":return actionsModule.community.userJoinCommunity(e.method.community.userJoinCommunity,u,r).then(function(e){n(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"application":var I=["createAppDefinition","buildApplication","applicationAdoption"];switch(propertyExists(e.method.application,I)){case"createAppDefinition":return actionsModule.application.createAppDefinition(e.method.application.createAppDefinition,u,r).then(function(e){n(e.data)},function(e){d(e)});case"buildApplication":return actionsModule.application.buildApplication(e.method.application.buildApplication,u,r).then(function(e){n(e.data)},function(e){d(e)});case"applicationAdoption":return actionsModule.application.applicationAdoption(e.method.application.applicationAdoption,u,r).then(function(e){n(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"user":break;case"sdo":var P=["create"];switch(propertyExists(e.method.sdo,P)){case"create":return actionsModule.sdo.create(e.method.sdo.create,u,r).then(function(e){n(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"performance":var y=["create","configureNode"];switch(propertyExists(e.method.performance,y)){case"create":return actionsModule.performance.create(e.method.performance.create,u,r).then(function(e){n(e.data)},function(e){d(e)});case"configureNode":return actionsModule.performance.configureNode(e.method.performance.configureNode,u,r).then(function(e){n(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"taxonomy":var S=["create"];switch(propertyExists(e.method.taxonomy,S)){case"create":return actionsModule.taxonomy.create(e.method.taxonomy.create,u,r).then(function(e){n(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;default:d("method not defined in configuration")}}else d("No method found from implemented list.")})}function task(e,t,s,n,i){return new Promise(function(o,a){if(void 0!=s.assign.role){var r=app.SCOPE.workflow.profile,c="";"current"==s.assign.role.profile?c=app.SCOPE.workflow.profile:"community"==s.assign.role.profile&&(c=app.SCOPE.getCommunityId());var u=s.assign.role.roleId;library.getUsersListByRole(c,u).then(function(a){if(void 0!=a)if(a.length>1){var d=JSON.xpath("/subprocesses[_id eq '"+n+"']",app.SCOPE.workflow,{})[0],p=JSON.xpath("/subprocesses[_id eq '"+n+"']/channels",app.SCOPE.workflow,{}),l=processWorkflowMessage(NOTIFICATION_USER_MSG_ACCEPT,n),f=d.id,m=d.seq,h=n,v=d.dates.valid,g=JSON.xpath("/config/processes[_id eq '"+e+"']",app.SCOPE.workflow,{})[0],b=JSON.xpath("/subProcesses[_id eq '"+f+"']",g,{})[0],I=d.step.seq+0,P=JSON.xpath("/steps[_seq eq '"+I+"']/name/i18n",b,{})[0],y=_getNameByLang(P),S=_getNameByLang(b.name.i18n),_={source:"remote",type:"notificationRequest",_id:n+":notificationRequest",channels:p,communityId:app.SCOPE.getCommunityId(),applicationId:app.SCOPE.applicationId,message:l,messageType:"info",createdDateTime:moment().format(),senderUserId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,actions:[{label:"View",function:"app.openSubprocess",params:[r,f,m,S,e,t,h,v,y]}],receiver:{value:[{type:"role",name:u,profileId:c}]}};dao.upsert(_).done(function(e){console.log(e)}).fail(function(e){console.log(e)});var q="";if(void 0!=s.assign.assignment){var q=i.assignment,w={show:s.assign.assignment.accept.show,label:_getNameByLang(s.assign.assignment.accept.label.i18n)};q.accept=w,q.message=_getNameByLang(s.assign.assignment.message.i18n);var T={show:s.assign.assignment.reject.show,label:_getNameByLang(s.assign.assignment.reject.label.i18n)};q.reject=T;var E={profileId:r,roleId:u,type:"role"};q.value=E,q.profileRoleId=c}o("Notifications request submitted for acceptance.")}else if(1==a.length){var k=a[0].id,N=a[0].name,A=i.assignedTo;A.name=N+"",A.userId=k+"";var q="";if(void 0!=s.assign.assignment){var q=i.assignment,w={show:s.assign.assignment.accept.show,label:_getNameByLang(s.assign.assignment.accept.label.i18n)};q.accept=w,q.message=_getNameByLang(s.assign.assignment.message.i18n);var T={show:s.assign.assignment.reject.show,label:_getNameByLang(s.assign.assignment.reject.label.i18n)};q.reject=T;var E={profileId:r,roleId:u,type:"role"};q.value=E,q.profileRoleId=c}o("Assigned to the only user in role.")}else{var A=i.assignedTo;A.name="",A.userId="",o("No users found in list. Assigning blank ")}else console.log("Error in getUsersListByRole undefined"),T(err)},function(e){console.log("Error in getUsersListByRole"),a(e)})}else void 0!=s.assign.swimlane&&(o("swimlane"),console.log("Swimlane implementation !!"))})}function transition(e,t,s,n,i,o,a,r,c,u){return new Promise(function(d,p){try{for(var l=0,f="",m=0,h=[],v=r.config.processes.filter(function(t){if(t._id==e)return t}),g=v[0].subProcesses.filter(function(e){if(e._id==s)return e}),b=g[0].steps.filter(function(e){if(e._id==i)return e}),I=b[0].transition.filter(function(e){if(e._id==o)return e}),P=0;P<g[0].steps.length;P++)g[0].steps[P]._id==i&&(l=parseInt(g[0].steps[P]._seq));g[0].steps.filter(function(e){m=l+1,parseInt(e._seq)==m&&(f=e._id)}),r.instance.processes.filter(function(i){i.id==e&&i.seq==t&&i.subProcesses.filter(function(e){if(e.id==s&&e.seq==n){var t=e.uuid;c=t,r.subprocesses.filter(function(e){e._id==t&&(h=e)})}})});var y=g[0].steps.length;if(void 0!=I[0].transitionAction.goToStep){var S=parseInt(b[0]._seq)+parseInt(I[0].transitionAction.goToStep.default),_="";g[0].steps.filter(function(e){parseInt(e._seq)==m&&(_=e._id)}),step(e,t,s,n,_,S,a,r,c).then(function(e){if(S==y){var t=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});d(t)}else{var t=util.success("Step transition completed successfully.",{subProcessComplete:!1,step:e.data});d(t)}},function(e){p(e)})}else if(void 0!=I[0].transitionAction.goToStepId){var q=I[0].transitionAction.goToStepId.stepId,w=1;g[0].steps.filter(function(e){e._id==q&&(w=parseInt(e._seq))}),step(e,t,s,n,q,w,a,r,c).then(function(e){if(w==y){var t=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});d(t)}else{var t=util.success("Step transition completed successfully.",{subProcessComplete:!1,step:e.data});d(t)}},function(e){p(e)})}else if(void 0!=I[0].transitionAction.stop){var T=util.success("Step transition completed successfully.Workflow stopped.",{subProcessComplete:!0,step:u});d(T)}}catch(e){p(e)}})}function postActions(e,t){return new Promise(function(s,n){var i=[];try{util.syncLoop(e.length,function(s){var o=s.iteration();action(e[o],t).then(function(e){i.push(!0),s.next()},function(e){i.push(!1),s.break(),n(e)})},function(){if(i.every(Boolean)){var e=util.success("Post-actions completed successfully.",{});s(e)}else{var t=util.error("WFPreActionsError","Not all post-actions passed.");n(t)}})}catch(e){n(e)}})}function processWorkflowMessage(e,t){var s=e;if(s.indexOf("#INSTANCE_LABEL")!==-1){var n=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+t+"']/label",app.SCOPE.workflow,{})[0];s=s.replace("#INSTANCE_LABEL",n)}if(s.indexOf("#USER_NAME")!==-1){var n=JSON.xpath("/subprocesses[_id eq '"+t+"']/step/assignedTo/name",app.SCOPE.workflow,{})[0];s=s.replace("#USER_NAME",n)}if(s.indexOf("#PROFILE_TITLE")!==-1){var n=app.profile.title;s=s.replace("#PROFILE_TITLE",n)}if(s.indexOf("#PROFILE_TYPE")!==-1){var n=app.SCOPE.APP_CONFIG.name;s=s.replace("#PROFILE_TYPE",n)}if(s.indexOf("#VAR_SPUUID")!==-1){var n=t;s=s.replace("#VAR_SPUUID",n)}return s}function _getName(e,t){if(void 0!==e)for(var s=0;s<e.length;s++)if(e[s]._lang===t)return e[s].value}function _getNameByLang(obj){var lang=service.getLanguage(),expr="obj."+lang;return eval(expr)}var util=require("utility"),actionsModule=require("./actions"),helper=require("./helper"),form=require("./form");module.exports={preRequisites:preRequisites,preActions:preActions,subProcess:subProcess,indicatorDocs:indicatorDocs,task:task,transition:transition,assignUser:assignUser};

},{"./actions":2,"./form":3,"./helper":4,"utility":8}],8:[function(require,module,exports){
"use strict";function success(r,e){return{message:r,data:e}}function warn(r,e){return console.warn(e),{warning:r,data:e}}function error(r,e){var n=new Error("");return n.name=r,n.message=e,n}function syncLoop(r,e,n){var a=0,t=!1,o=!1,u={next:function(){return t&&o&&n?n():void(a<r?(a++,e(u)):(t=!0,n&&n()))},iteration:function(){return a-1},break:function(r){t=!0,o=r}};return u.next(),u}function compare(r,e,n){switch(e){case"greaterThan":return r>n;case"lessThan":return r<n;case"greaterThanEqual":return r>=n;case"lessThanEqual":return r<=n;case"equalTo":return r===n;case"notEqualTo":return r!==n}}function getName(r,e){if(void 0!==r)for(var n=0;n<r.length;n++)if(r[n].i18n._lang===e)return r[n].i18n.value}module.exports={success:success,warn:warn,error:error,syncLoop:syncLoop,compare:compare,getName:getName};

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
