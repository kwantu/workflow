(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Workflow = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function Workflow(e,t,s,o){var i=this;if(""==t||void 0==t)throw util.error("ParamRequired","A community id is required.");if("string"!=typeof t)throw new Error("The community id must be a javascript string.");if(i.communityId=t||"",""==e||void 0==e)throw util.error("ParamRequired","A profile id is required.");if("string"!=typeof e)throw new Error("The profile id must be a javascript string.");if(i.profile=e||"",""==s||void 0==s)throw util.error("ParamRequired","An app id is required.");if("string"!=typeof s)throw new Error("The app id must be a javascript string.");if(i.app=s||"",""==o||void 0==o)throw util.error("ParamRequired","A workflow configuration is required.");"object"!=typeof o?i.config=JSON.parse(o):i.config=o,i.instance,i.subprocesses=[],i.indicators=[]}var Process=require("./lib/process"),util=require("utility"),userInterface=require("./lib/interface"),helper=require("./lib/helper");Workflow.prototype.getProfile=function(){return this.profile},Workflow.prototype.getApp=function(){return this.app},Workflow.prototype.getConfig=function(){return this.config},Workflow.prototype.getInstance=function(){return this.instance},Workflow.prototype.setInstance=function(e){this.instance=e},Workflow.prototype.getSubProcesses=function(){return this.subprocesses},Workflow.prototype.setSubProcesses=function(e){this.subprocesses=e},Workflow.prototype.getIndicators=function(){return this.indicators},Workflow.prototype.setIndicators=function(e){this.indicators=e},Workflow.prototype.create=function(){var e=this;return new Promise(function(t,s){try{if(void 0!==e.instance){var o=util.warn("Instance already exists.",e);t(o)}else{var i={_id:"",version:"",type:"workflowInstance",processes:[],channels:["community_"+app.SCOPE.getCommunityId(),"profile_"+app.SCOPE.profileId,"application_"+app.SCOPE.applicationId,"community_"+app.SCOPE.getCommunityId()+"_application_"+app.SCOPE.applicationId]};i._id="_local/"+e.profile+":processes:local",i.version=e.config.version,e.instance=i;var r=util.success("Workflow processes instance created successfully.",e);t(r)}}catch(e){s(e)}})},Workflow.prototype.initialise=function(e,t,s){var o=this;return new Promise(function(i,r){try{var n=[];if(""!==e&&void 0!==e){if(n=o.config.processes.filter(function(t){if(t._id==e)return t}),void 0==n[0]._id){var c=util.error("WFConfigError","No valid process definition found with process id: "+e);r(c)}}else n.push(o.config.processes[0]),e=o.config.processes[0]._id;var a=[];o.instance.processes.filter(function(t){t.id==e&&a.push(t)});var u=a.length+1,p={id:"",seq:"",subProcesses:[]};p.id=e,p.seq=u,o.instance.processes.push(p);var d=n[0].subProcesses[0]._id,f=1;o.instance.processes.filter(function(t){t.id==e&&t.seq==u&&(f=t.subProcesses.length+1)}),Process.subProcess(e,u,d,f,s,t,o).then(function(t){var n=t.data._id,c=t.data.groupKey;void 0==s&&(s="");var a={id:d,subprofileId:s,seq:t.data["meta-data"].subProcessInsSeq,uuid:n,groupKey:c};p.subProcesses.push(a);for(var f=0;f<o.instance.processes.length;f++){var l=o.instance.processes[f];l.id==e&&l.seq==u&&o.instance.processes.splice(f,1,p)}var h=t.data.indicators,m=t.data.step;Process.indicatorDocs(e,h,m,o).then(function(e){var t=util.success("Process: "+o.config.processes[0]._id+" initialized successfully.",a);i(t)},function(e){r(e)})},function(t){o.instance.processes=o.instance.processes.filter(function(t){return!(t.id==e&&t.seq==u)}),console.log(t),r(t)})}catch(e){r(e)}})},Workflow.prototype.transition=function(e,t,s,o,i,r,n,c){var a=this;return new Promise(function(o,u){try{var p=JSON.xpath("/subprocesses[_id eq '"+c+"']/step",app.SCOPE.workflow,{})[0],d=JSON.xpath("/processes[_id eq '"+e+"']/subProcesses[_id eq '"+s+"']/steps[_id eq '"+i+"']",a.config,{})[0],f=JSON.xpath("/subprocesses[_id eq '"+c+"']/meta-data/subProcessInsSeq",app.SCOPE.workflow,{})[0],l=function(i,r){a.instance.processes.filter(function(n){n.id==e&&n.seq==t&&n.subProcesses.filter(function(e){e.id==s&&a.subprocesses.filter(function(e){if(e._id==c)if("step"==i){e.step=r.data.step;var t=util.success(r.message,e);o(t)}else if("stepComplete"==i){e.step=r.data.step,e.complete=!0;var t=util.success(r.message,e.step);o(t)}})})})};if(void 0!=d.function.task&&void 0!=d.function.task.postActions){var h=d.function.task.postActions;Process.postActions(h,a,c).then(function(o){Process.transition(e,t,s,f,i,r,n,a,c,p).then(function(e){e.data.subProcessComplete?l("stepComplete",e):l("step",e)},function(e){u(e)})},function(e){u(e)})}else Process.transition(e,t,s,f,i,r,n,a,c,p).then(function(e){e.data.subProcessComplete?l("stepComplete",e):l("step",e)},function(e){u(e)})}catch(e){u(e)}})},Workflow.prototype.assignUser=function(e,t,s,o,i,r){var n=this;return new Promise(function(c,a){try{Process.assignUser(e,t,s,o,i,r,n).then(function(e){c(e)},function(e){a(e)})}catch(e){a(e)}})},Workflow.prototype.ui=function(){var e=this;return{getProcess:function(t,s){return new Promise(function(o,i){try{userInterface.getProcess(t,s,e).then(function(e){o(e)},function(e){i(e)})}catch(e){i(e)}})}}},Workflow.prototype.getNodeValue=function(e,t){var s=this;return new Promise(function(o,i){try{helper.getNodeValue(e,s,t).then(function(e){o(e)},function(e){i(e)})}catch(e){i(e)}})},Workflow.prototype.takeAssignment=function(e){var t=this;return new Promise(function(s,o){try{var i=JSON.xpath("/subprocesses[_id eq '"+e+"']",t,{})[0],r=JSON.xpath("/step/assignedTo",i,{})[0];void 0==i.step.assignmentHistory&&(i.step.assignmentHistory=[]),""!=r.userId&&""!=r.name&&i.step.assignmentHistory.push(JSON.parse(JSON.stringify(r))),r.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,r.userId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"",r.dateTime=moment().format(),r.type=ASSIGNMENT_TYPE_ACCEPTANCE,r.dueDateTime="",r.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"";var n=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+e+"']/id",t,{})[0],c=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+e+"']/id",t,{})[0],a=JSON.xpath("/subprocesses[_id eq '"+e+"']/step/id",t,{})[0],u=JSON.xpath("/processes[_id eq '"+n+"']/subProcesses[_id eq '"+c+"']/steps[_id eq '"+a+"']",t.config,{})[0];if(void 0!=u.function.task.preWorkActions){var p=u.function.task.preWorkActions;Process.preWorkActions(p,t).then(function(e){s(t)},function(e){o(e)})}else s(t)}catch(e){o(e)}})},Workflow.prototype.condition=function(condition,spuuid){var _this=this;return new Promise(function(resolve,reject){try{var operator=condition.operator,dataBlock=condition.value.data;if(void 0!=condition.subject.indicator){var setId=condition.subject.indicator.setId,modelScope=condition.subject.indicator.modelScope,elementPath=condition.subject.indicator.elementPath;if("subProcess"==condition.subject.indicator.context){var indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+spuuid+"']/indicators[id eq '"+setId+"']/instances[1]/uuid",_this,{})[0],indicatorModel=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_this,{})[0],dataElement=indicatorModel.model[modelScope].data[setId],value=eval("dataElement."+elementPath);helper.getNodeValue(dataBlock,_this,spuuid).then(function(e){var t=helper.compare(value,operator,e);resolve(t)},function(e){reject(e)})}else reject("Not implemented")}else void 0!=condition.subject.indicatorWrapper?reject("Not implemented"):void 0!=condition.subject.variable?reject("Not implemented"):void 0!=condition.subject.subProcess&&reject("Not implemented")}catch(e){reject(e)}})},module.exports=Workflow;

},{"./lib/helper":4,"./lib/interface":5,"./lib/process":7,"utility":8}],2:[function(require,module,exports){
"use strict";var util=require("utility"),nodeValue=require("./nodeValue"),form=require("./form"),helper=require("./helper"),gatekeeper=new GK,community=function(){return{createCommunity:function(e,i,o){return new Promise(function(e,t){var n=worker.getWorkerWrapper(),a="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(a=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=o.profile,n.subProcessUUID=i,n.subprofileId=a,n.channels.push("dataRegistry"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=JSON.xpath("/indicators[category/term eq 'Community']/_id",o,{})[0],s={createCommunity:{newCommunityId:o.profile,indicatorUUID:{Community:r}}};n.action=s,worker.send(n).then(function(t){worker.setWorkerInfoInSubprocess(n,o,i);var a=util.success("Worker processed successfully.",t);e(a)},function(e){t(e)})})},userJoinCommunity:function(e,i,o){return new Promise(function(e,i){})},releaseAdoptedApplication:function(e,i,o){return new Promise(function(e,t){var n=worker.getWorkerWrapper(),a="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(a=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=o.profile,n.subProcessUUID=i,n.subprofileId=a,n.channels.push("dataRegistry"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'adoptedApplication']/instances[1]/uuid",o,{})[0],s={releaseAdoptedApplication:{communityId:o.profile,indicatorUUID:{adoptedApplication:r}}};n.action=s,worker.send(n).then(function(t){worker.setWorkerInfoInSubprocess(n,o,i);var a=util.success("Worker processes successfully.",t);e(a)},function(e){t(e)})})}}}(),application=function(){return{createAppDefinition:function(e,i,o){return new Promise(function(e,t){var n=worker.getWorkerWrapper(),a="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(a=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=o.profile,n.subProcessUUID=i,n.subprofileId=a,n.channels.push("dataRegistry"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=JSON.xpath("/indicators[category/term eq 'Application']/_id",o,{})[0],s={createApplication:{newApplicationId:o.profile,indicatorUUID:{Application:r}}};n.action=s,worker.send(n).then(function(t){worker.setWorkerInfoInSubprocess(n,o,i);var a=util.success("Worker processes successfully.",t);e(a)},function(e){t(e)})})},buildApplication:function(e,i,o){return new Promise(function(e,t){var n=worker.getWorkerWrapper(),a="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(a=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=o.profile,n.subProcessUUID=i,n.subprofileId=a,n.channels.push("dataRegistry"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'PublishApplication']/instances[1]/uuid",o,{})[0],s=JSON.xpath("/indicators[category/term eq 'ApplicationDefinition']/_id",o,{})[0],p=JSON.xpath("/indicators[category/term eq 'Roles']/_id",o,{})[0],c=JSON.xpath("/indicators[category/term eq 'Application']/_id",o,{})[0],u=JSON.xpath("/indicators[category/term eq 'AppPermissions']/_id",o,{})[0],d={buildApplication:{applicationId:o.profile,indicatorUUID:{PublishApplication:r,ApplicationDefinition:s,Roles:p,Application:c,AppPermissions:u}}};n.action=d,worker.send(n).then(function(t){worker.setWorkerInfoInSubprocess(n,o,i);var a=util.success("Worker processes successfully.",t);e(a)},function(e){t(e)})})},applicationAdoption:function(e,i,o){return new Promise(function(e,t){var n=worker.getWorkerWrapper(),a="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(a=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=o.profile,n.subProcessUUID=i,n.subprofileId=a,n.channels.push("dataRegistry"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'Adoption']/instances[1]/uuid",o,{})[0],s=JSON.xpath("/indicators[category/term eq 'PublishApplication']/_id",o,{})[0],p=JSON.xpath("/indicators[category/term eq 'Application']/_id",o,{})[0],c={adoptApplication:{applicationId:o.profile,indicatorUUID:{Adoption:r,PublishApplication:s,Application:p}}};n.action=c,worker.send(n).then(function(t){worker.setWorkerInfoInSubprocess(n,o,i);var a=util.success("Worker processes successfully.",t);e(a)},function(e){t(e)})})},createTaxonomy:function(e,i,o){return new Promise(function(e,t){var n=worker.getWorkerWrapper(),a="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(a=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=o.profile,n.subProcessUUID=i,n.subprofileId=a,n.channels.push("dataRegistry"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'Taxonomy']/instances[1]/uuid",o,{})[0],s={createTaxonomy:{taxonomyUUID:r}};n.action=s,worker.send(n).then(function(t){worker.setWorkerInfoInSubprocess(n,o,i);var a=util.success("Worker processes successfully.",t);e(a)},function(e){t(e)})})}}}(),performance=function(){return{unlockPeriod:function(e,i,o){return new Promise(function(e,t){var n=JSON.xpath("/subprocesses[_id eq '"+i+"']",o,{})[0],a=JSON.xpath("/indicators[id eq '"+PERIOD_SET_ID+"']/instances/uuid",n,{})[0],r=n.dates.valid;library.unlockPeriod(a,r,i).then(function(i){var o=util.success("Unlock period.",i);e(o)},function(e){t(e)})})},setModelStatus:function(e,i,o){return new Promise(function(t,n){var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",o,{})[0],r=JSON.xpath("/indicators[id eq '"+PERIOD_SET_ID+"']/instances/uuid",a,{})[0],s=a.dates.valid,p=JSON.xpath("/label",e,{})[0],c=helper.getLanguageMessage(p);library.setPeriodStatus(r,s,c,i).then(function(e){var i=util.success("setModelStatus",e);t(i)},function(e){n(e)})})},lockPerformanceModel:function(e,i,o){return new Promise(function(e,t){var n=JSON.xpath("/subprocesses[_id eq '"+i+"']",o,{})[0],a=JSON.xpath("/indicators[id eq '"+PERFORMANCE_SET_ID+"']/instances/uuid",n,{})[0],r=n.dates.valid;library.lockPerformanceModel(a,r,i).then(function(i){var o=util.success("Lock performance model.",i);e(o)},function(e){t(e)})})}}}(),sdo=function(){return{create:function(e,i,o){return new Promise(function(e,t){var n=worker.getWorkerWrapper(),a="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(a=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=o.profile,n.subProcessUUID=i,n.subprofileId=a,n.channels.push("dataRegistry"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'SDO']/instances[1]/uuid",o,{})[0],s={createSDO:{sdoUUID:r}};n.action=s,worker.send(n).then(function(t){worker.setWorkerInfoInSubprocess(n,o,i);var a=util.success("Worker processes successfully.",t);e(a)},function(e){t(e)})})}}}(),taxonomy=function(){return{create:function(e,i,o){return new Promise(function(e,t){var n=worker.getWorkerWrapper(),a="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(a=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=o.profile,n.subProcessUUID=i,n.subprofileId=a,n.channels.push("dataRegistry"),n.channels.push("community_"+app.SCOPE.getCommunityId());var r=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'Taxonomy']/instances[1]/uuid",o,{})[0],s={createTaxonomy:{taxonomyUUID:r}};n.action=s,worker.send(n).then(function(t){worker.setWorkerInfoInSubprocess(n,o,i);var a=util.success("Worker processes successfully.",t);e(a)},function(e){t(e)})})}}}(),subProcessInstance=function(){return{setTitle:function(e,i,o,t){return new Promise(function(e,n){var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",app.SCOPE.workflow,{})[0];a.label=o;var r=[],s={};s.model=t.subprocesses,r.push(s);var p=util.success("Subprocess setTitle success.",t.subprocesses);e(p)})},setValidDate:function(e,i,o,t){return new Promise(function(e,n){var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",app.SCOPE.workflow,{})[0];a.dates.valid=o;var r=[],s={};s.model=a,r.push(s);var p=util.success("valid date set.",t.subprocesses);e(p)})},setSPStatus:function(e,i,o,t){return new Promise(function(e,n){var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",app.SCOPE.workflow,{})[0];a.spStatus=o;var r=[],s={};s.model=t.subprocesses,r.push(s);var p=util.success("Subprocess spStatus success.",t.subprocesses);e(p)})}}}(),variables=function(){return{setVariable:function(setVariable,_WFInstance,uuid){return new Promise(function(resolve,reject){helper.getNodeValue(setVariable.data,_WFInstance,uuid).then(function(dataValue){var scope=setVariable.scope,variableName=setVariable.name,variableType=setVariable.variableType,validDate=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/dates/valid",_WFInstance,{})[0];switch(scope){case"profile":var profileId=_WFInstance.profile,profileVariableFileName=profileId+":variables";dao.get(profileVariableFileName).then(function(file){if("periodic"==variableType){var processObj=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+uuid+"']",_WFInstance,{})[0],seq=processObj.seq,obj={subProcessUUID:uuid,user:{userName:LOCAL_SETTINGS.SUBSCRIPTIONS.username,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userProfileId},seq:seq,validDate:validDate,value:dataValue};void 0!=file[variableName]?eval("file."+variableName+".push(obj)"):file[variableName]=[obj]}else file[variableName]=dataValue;dao.upsert(file).then(function(e){resolve("Variable set successfully")}).catch(function(e){reject("Failed to set Variable")})}).catch(function(e){var i={_id:profileVariableFileName};if(i.channels=app.profile.channels,"periodic"==variableType){var o=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+uuid+"']",_WFInstance,{})[0],t=o.seq;i[variableName]=[{subProcessUUID:uuid,user:{userName:LOCAL_SETTINGS.SUBSCRIPTIONS.username,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userProfileId},seq:t,validDate:validDate,value:dataValue}]}else i[variableName]=dataValue;dao.upsert(i).then(function(e){resolve("Variable set successfully")}).catch(function(e){reject("Failed to set Variable")})});break;case"subProcessInstance":resolve("not implemented");break;case"step":resolve("not implemented");break;case"subProfileSubProcessInstance":var subProfileId=app.profile.subprofileId,subProfileVariableFileName=subProfileId+":variables";dao.get(subProfileVariableFileName).then(function(file){if("periodic"==variableType){var part=library.getSubprofileSubprocessIds(),seq=JSON.xpath("count(/subprocesses[_id eq '"+uuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+uuid+"']/id and _id = /subprocesses[_id = "+part+"]/_id])",_WFInstance,{})[0]+1,obj={subProcessUUID:uuid,user:{userName:LOCAL_SETTINGS.SUBSCRIPTIONS.username,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userProfileId},seq:seq,validDate:validDate,value:dataValue};void 0!=file[variableName]?eval("file."+variableName+".push(obj)"):file[variableName]=[obj]}else file[variableName]=dataValue;dao.upsert(file).then(function(e){resolve("Variable at subprofile set successfully")}).catch(function(e){reject("Failed to set Variable at subprofile")})}).catch(function(e){var i={_id:subProfileVariableFileName};if(i.channels=app.profile.channels,"periodic"==variableType){var o=library.getSubprofileSubprocessIds(),t=JSON.xpath("count(/subprocesses[_id eq '"+uuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+uuid+"']/id and _id = /subprocesses[_id = "+o+"]/_id])",_WFInstance,{})[0]+1;i[variableName]=[{subProcessUUID:uuid,user:{userName:LOCAL_SETTINGS.SUBSCRIPTIONS.username,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userProfileId},seq:t,validDate:validDate,value:dataValue}]}else i[variableName]=dataValue;dao.upsert(i).then(function(e){resolve("Variable at subprofile set successfully")}).catch(function(e){reject("Failed to set Variable at subprofile")})})}},function(e){reject("getNodeValue value not found.")})})}}}(),notification=function(){return{sendNotificationWorker:function(e,i,o){return new Promise(function(t,n){var a=function(e){return new Promise(function(t,n){var a={};void 0!=e.recipients.role?(a.role=e.recipients.role,t(a)):void 0!=e.recipients.profileRole?(a.profileRole={},a.profileRole.role=e.recipients.profileRole.role,a.profileRole.profile=e.recipients.profileRole.profile,t(a)):void 0!=e.recipients.subProfileRole?(a.subProfileRole={},a.subProfileRole.role=e.recipients.subProfileRole.role,a.subProfileRole.subProfileCategory=e.recipients.subProfileRole.subProfileCategory,a.subProfileRole.profile=e.recipients.subProfileRole.profile,t(a)):void 0!=e.recipients.function?(a.function={},a.function.users={},helper.getNodeValue(e.recipients.function.users,i,o).then(function(e){a.function.users=e,t(a)},function(e){rej(e)})):void 0!=e.recipients.stepAssignee&&(a.stepAssignee={},a.stepAssignee.role=e.recipients.stepAssignee.role,t(a))})},r=new NotificatioWorker(app),s=JSON.xpath("/subprocesses[_id eq '"+o+"']/meta-data/subprofileId",i,{})[0],p=window.location.pathname.split("/"),c=window.location.protocol+"//"+window.location.host+"/"+p[1],u="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(u=app.profile.subprofileId);var d={notification:{message:{},messageType:"","meta-data":{applicationId:i.app,communityId:i.communityId,profileId:i.profile,subProcessUUID:o,subProfileId:s},notificationType:"",subprofileId:u,priority:"",recipients:{},url:c,keys:{profile:{name:"",id:""},community:{name:"",id:""},application:{name:"",id:""},currentUser:{name:"",id:""},subProcess:{name:"",id:""}}}};d.notification.keys.profile.name=app.profile.title,d.notification.keys.profile.id=app.profile._id,d.notification.keys.community.name=app.getNameByLang(LOCAL_SETTINGS.COMMUNITY_CONFIG.communityName),d.notification.keys.community.id=LOCAL_SETTINGS.COMMUNITY_CONFIG.communityId;var l=JSON.xpath("/applications[appId eq '"+app.SCOPE.applicationId+"']",LOCAL_SETTINGS.COMMUNITY_CONFIG,{})[0];if(d.notification.keys.application.name=app.getNameByLang(l.name),d.notification.keys.application.id=l.appId,d.notification.keys.currentUser.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,d.notification.keys.currentUser.id=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,d.notification.keys.subProcess.name=JSON.xpath("/subprocesses[_id eq '"+o+"']/label",i,{})[0],d.notification.keys.subProcess.id=o,d.notification.message.default=e.message.default,d.notification.message.title=e.message.title,void 0!=e.message.rtf&&(d.notification.message.rtf={},void 0!=e.message.rtf.template?d.notification.message.rtf.template=e.message.rtf.template:void 0!=e.message.rtf.markup&&(d.notification.message.rtf.markup=e.message.rtf.markup)),d.notification.messageType=e.messageType,d.notification.notificationType=e.notificationType,d.notification.priority=e.priority,void 0!=e.notificationAction&&(d.notification.notificationAction={},d.notification.notificationAction.label=e.notificationAction.label,void 0!=e.notificationAction.action.URI?(d.notification.notificationAction.action={},d.notification.notificationAction.action.URI=e.notificationAction.action.URI):void 0!=e.notificationAction.action.goto&&(d.notification.notificationAction.action={},d.notification.notificationAction.action.goto=e.notificationAction.action.goto)),void 0!=e.schedule){var f=e.schedule.executeCommand,m={dateTime:"",unit:"",factor:""};if(void 0!=f.now)m.dateTime=moment().format();else if(void 0!=f.exact)m.dateTime=f.exact.dateTime;else if(void 0!=f.dueDate){var I=JSON.xpath("/subprocesses[_id eq '"+o+"']",i,{})[0],S="",b=I.dates.due;S=""!=b?moment(b,"YYYY-MM-DD"):moment().format(),m.dateTime=S,m.factor=f.dueDate.factor,m.unit=f.dueDate.unit}else if(void 0!=f.validDate){var I=JSON.xpath("/subprocesses[_id eq '"+o+"']",i,{})[0],S="",b=I.dates.valid;S=""!=validDate?moment(validDate,"YYYY-MM-DD"):moment().format(),m.dateTime=S,m.factor=f.validDate.factor,m.unit=f.validDate.unit}else if(void 0!=f.stepCreatedDate){var I=JSON.xpath("/subprocesses[_id eq '"+o+"']",i,{})[0],S="",v=I.step.dueDateTime;S=""!=v?moment(v).format():moment().format(),m.dateTime=S,m.factor=f.stepCreatedDate.factor,m.unit=f.stepCreatedDate.unit}else m.dateTime=moment().format();r.setMessage("Worker submitted for execution"),r.setSchedule(m)}a(e).then(function(e){d.notification.recipients=e,r.setAction(d);var n=JSON.xpath("/subprocesses[_id eq '"+o+"']",i,{})[0];r.setContext({step:{stepDateTime:n.step.dateTimeCreated}}),r.send().then(function(e){console.log(r);var i=util.success("Notification Worker processes successfully.",e);t(i)},function(e){t(e)})}).catch(function(e){console.log("Notification - getRecipients failed with error "+e),n(e)})})},reAssignmentNotification:function(e,i,o,t){return new Promise(function(n,a){var r=function(e){return new Promise(function(i,o){var t={};t.function={},t.function.users={},t.function.users=e.id,i(t)})},s=new NotificatioWorker(app),p=JSON.xpath("/subprocesses[_id eq '"+o+"']/meta-data/subprofileId",i,{})[0],c=window.location.pathname.split("/"),u=window.location.protocol+"//"+window.location.host+"/"+c[1],d={notification:{message:{rtf:{}},messageType:"","meta-data":{applicationId:i.app,communityId:i.communityId,profileId:i.profile,subProcessUUID:o,subProfileId:p},notificationType:"workflow",priority:"",recipients:{},url:u,keys:{profile:{name:"",id:""},community:{name:"",id:""},application:{name:"",id:""},currentUser:{name:"",id:""},subProcess:{name:"",id:""}}}};d.notification.keys.profile.name=app.profile.title,d.notification.keys.profile.id=app.profile._id,d.notification.keys.community.name=app.getNameByLang(LOCAL_SETTINGS.COMMUNITY_CONFIG.communityName),d.notification.keys.community.id=LOCAL_SETTINGS.COMMUNITY_CONFIG.communityId;var l=JSON.xpath("/applications[appId eq '"+app.SCOPE.applicationId+"']",LOCAL_SETTINGS.COMMUNITY_CONFIG,{})[0];if(d.notification.keys.application.name=app.getNameByLang(l.name),d.notification.keys.application.id=l.appId,d.notification.keys.currentUser.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,d.notification.keys.currentUser.id=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,d.notification.keys.subProcess.name=JSON.xpath("/subprocesses[_id eq '"+o+"']/label",i,{})[0],d.notification.keys.subProcess.id=o,d.notification.message.default="",d.notification.message.title=e.reAssignment.title,d.notification.message.rtf.markup=e.reAssignment.message,d.notification.messageType=e.reAssignment.messageType,d.notification.priority=e.reAssignment.priority,void 0!=e.reAssignment.notificationAction&&(d.notification.notificationAction={},d.notification.notificationAction.label=e.reAssignment.notificationAction.label,void 0!=e.reAssignment.notificationAction.action.URI?(d.notification.notificationAction.action={},d.notification.notificationAction.action.URI=e.reAssignment.notificationAction.action.URI):void 0!=e.reAssignment.notificationAction.action.goto&&(d.notification.notificationAction.action={},d.notification.notificationAction.action.goto=e.reAssignment.notificationAction.action.goto)),void 0!=e.reAssignment.schedule){var f=e.reAssignment.schedule.executeCommand,m={dateTime:"",unit:"",factor:""};if(void 0!=f.now)m.dateTime=moment().format();else if(void 0!=f.exact)m.dateTime=f.exact.dateTime;else if(void 0!=f.dueDate){var I=JSON.xpath("/subprocesses[_id eq '"+o+"']",i,{})[0],S="",b=I.dates.due;S=""!=b?moment(b,"YYYY-MM-DD"):moment().format(),m.dateTime=S,m.factor=f.dueDate.factor,m.unit=f.dueDate.unit}else if(void 0!=f.validDate){var I=JSON.xpath("/subprocesses[_id eq '"+o+"']",i,{})[0],S="",b=I.dates.valid;S=""!=validDate?moment(validDate,"YYYY-MM-DD"):moment().format(),m.dateTime=S,m.factor=f.validDate.factor,m.unit=f.validDate.unit}else if(void 0!=f.stepCreatedDate){var I=JSON.xpath("/subprocesses[_id eq '"+o+"']",i,{})[0],S="",v=I.step.dueDateTime;S=""!=v?moment(v).format():moment().format(),m.dateTime=S,m.factor=f.stepCreatedDate.factor,m.unit=f.stepCreatedDate.unit}else m.dateTime=moment().format();s.setMessage("Worker submitted for execution"),s.setSchedule(m)}r(t).then(function(e){d.notification.recipients=e,s.setAction(d),s.send().then(function(e){var i=util.success("Notification Worker processes successfully for reassignment.",e);n(i)},function(e){n(e)})}).catch(function(e){console.log("Notification - getRecipients failed with error "+e),a(e)})})},assignmentNotification:function(e,i,o,t){return new Promise(function(n,a){var r=function(e){return new Promise(function(i,o){var t={};t.function={},t.function.users={},t.function.users=e.id,i(t)})},s=new NotificatioWorker(app),p=JSON.xpath("/subprocesses[_id eq '"+o+"']/meta-data/subprofileId",i,{})[0],c=window.location.pathname.split("/"),u=window.location.protocol+"//"+window.location.host+"/"+c[1],d={notification:{message:{rtf:{}},messageType:"","meta-data":{applicationId:i.app,communityId:i.communityId,profileId:i.profile,subProcessUUID:o,subProfileId:p},notificationType:"workflow",priority:"",recipients:{},url:u,keys:{profile:{name:"",id:""},community:{name:"",id:""},application:{name:"",id:""},currentUser:{name:"",id:""},subProcess:{name:"",id:""}}}};d.notification.keys.profile.name=app.profile.title,d.notification.keys.profile.id=app.profile._id,d.notification.keys.community.name=app.getNameByLang(LOCAL_SETTINGS.COMMUNITY_CONFIG.communityName),d.notification.keys.community.id=LOCAL_SETTINGS.COMMUNITY_CONFIG.communityId;var l=JSON.xpath("/applications[appId eq '"+app.SCOPE.applicationId+"']",LOCAL_SETTINGS.COMMUNITY_CONFIG,{})[0];if(d.notification.keys.application.name=app.getNameByLang(l.name),d.notification.keys.application.id=l.appId,d.notification.keys.currentUser.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,d.notification.keys.currentUser.id=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,d.notification.keys.subProcess.name=JSON.xpath("/subprocesses[_id eq '"+o+"']/label",i,{})[0],d.notification.keys.subProcess.id=o,d.notification.message.default="",d.notification.message.title=e.assignment.title,d.notification.message.rtf.markup=e.assignment.message,d.notification.messageType=e.assignment.messageType,d.notification.priority=e.assignment.priority,void 0!=e.assignment.notificationAction&&(d.notification.notificationAction={},d.notification.notificationAction.label=e.assignment.notificationAction.label,void 0!=e.assignment.notificationAction.action.URI?(d.notification.notificationAction.action={},d.notification.notificationAction.action.URI=e.assignment.notificationAction.action.URI):void 0!=e.assignment.notificationAction.action.goto&&(d.notification.notificationAction.action={},d.notification.notificationAction.action.goto=e.assignment.notificationAction.action.goto)),void 0!=e.assignment.schedule){var f=e.assignment.schedule.executeCommand,m={dateTime:"",unit:"",factor:""};if(void 0!=f.now)m.dateTime=moment().format();else if(void 0!=f.exact)m.dateTime=f.exact.dateTime;else if(void 0!=f.dueDate){var I=JSON.xpath("/subprocesses[_id eq '"+o+"']",i,{})[0],S="",b=I.dates.due;S=""!=b?moment(b,"YYYY-MM-DD"):moment().format(),m.dateTime=S,m.factor=f.dueDate.factor,m.unit=f.dueDate.unit}else if(void 0!=f.validDate){var I=JSON.xpath("/subprocesses[_id eq '"+o+"']",i,{})[0],S="",b=I.dates.valid;S=""!=validDate?moment(validDate,"YYYY-MM-DD"):moment().format(),m.dateTime=S,m.factor=f.validDate.factor,m.unit=f.validDate.unit}else if(void 0!=f.stepCreatedDate){var I=JSON.xpath("/subprocesses[_id eq '"+o+"']",i,{})[0],S="",v=I.step.dueDateTime;S=""!=v?moment(v).format():moment().format(),m.dateTime=S,m.factor=f.stepCreatedDate.factor,m.unit=f.stepCreatedDate.unit}else m.dateTime=moment().format();s.setMessage("Worker submitted for execution"),s.setSchedule(m)}r(t).then(function(e){d.notification.recipients=e,s.setAction(d),s.send().then(function(e){console.log(s);var i=util.success("Notification Worker processes successfully for assignment.",e);n(i)},function(e){n(e)})}).catch(function(e){console.log("Notification - getRecipients failed with error "+e),a(e)})})},acceptanceNotification:function(e,i,o,t){return new Promise(function(n,a){var r=function(e){return new Promise(function(i,o){var t={};t.role=e,i(t)})},s=new NotificatioWorker(app),p=JSON.xpath("/subprocesses[_id eq '"+o+"']/meta-data/subprofileId",i,{})[0],c=window.location.pathname.split("/"),u=window.location.protocol+"//"+window.location.host+"/"+c[1],d={notification:{message:{rtf:{}},messageType:"","meta-data":{applicationId:i.app,communityId:i.communityId,profileId:i.profile,subProcessUUID:o,subProfileId:p},notificationType:"workflow",priority:"",recipients:{},url:u,keys:{profile:{name:"",id:""},community:{name:"",id:""},application:{name:"",id:""},currentUser:{name:"",id:""},subProcess:{name:"",id:""}}}};d.notification.keys.profile.name=app.profile.title,d.notification.keys.profile.id=app.profile._id,d.notification.keys.community.name=app.getNameByLang(LOCAL_SETTINGS.COMMUNITY_CONFIG.communityName),d.notification.keys.community.id=LOCAL_SETTINGS.COMMUNITY_CONFIG.communityId;var l=JSON.xpath("/applications[appId eq '"+app.SCOPE.applicationId+"']",LOCAL_SETTINGS.COMMUNITY_CONFIG,{})[0];if(d.notification.keys.application.name=app.getNameByLang(l.name),d.notification.keys.application.id=l.appId,d.notification.keys.currentUser.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,d.notification.keys.currentUser.id=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,d.notification.keys.subProcess.name=JSON.xpath("/subprocesses[_id eq '"+o+"']/label",i,{})[0],d.notification.keys.subProcess.id=o,d.notification.message.default="",d.notification.message.title=e.assignmentAcceptance.title,d.notification.message.rtf.markup=e.assignmentAcceptance.message,d.notification.messageType=e.assignmentAcceptance.messageType,d.notification.priority=e.assignmentAcceptance.priority,void 0!=e.assignmentAcceptance.notificationAction&&(d.notification.notificationAction={},d.notification.notificationAction.label=e.assignmentAcceptance.notificationAction.label,void 0!=e.assignmentAcceptance.notificationAction.action.URI?(d.notification.notificationAction.action={},d.notification.notificationAction.action.URI=e.assignmentAcceptance.notificationAction.action.URI):void 0!=e.assignmentAcceptance.notificationAction.action.goto&&(d.notification.notificationAction.action={},d.notification.notificationAction.action.goto=e.assignmentAcceptance.notificationAction.action.goto)),void 0!=e.assignmentAcceptance.schedule){var f=e.assignmentAcceptance.schedule.executeCommand,m={dateTime:"",unit:"",factor:""};if(void 0!=f.now)m.dateTime=moment().format();else if(void 0!=f.exact)m.dateTime=f.exact.dateTime;else if(void 0!=f.dueDate){var I=JSON.xpath("/subprocesses[_id eq '"+o+"']",i,{})[0],S="",b=I.dates.due;S=""!=b?moment(b,"YYYY-MM-DD"):moment().format(),m.dateTime=S,m.factor=f.dueDate.factor,m.unit=f.dueDate.unit}else if(void 0!=f.validDate){var I=JSON.xpath("/subprocesses[_id eq '"+o+"']",i,{})[0],S="",b=I.dates.valid;S=""!=validDate?moment(validDate,"YYYY-MM-DD"):moment().format(),m.dateTime=S,m.factor=f.validDate.factor,m.unit=f.validDate.unit}else if(void 0!=f.stepCreatedDate){var I=JSON.xpath("/subprocesses[_id eq '"+o+"']",i,{})[0],S="",v=I.step.dueDateTime;S=""!=v?moment(v).format():moment().format(),m.dateTime=S,m.factor=f.stepCreatedDate.factor,m.unit=f.stepCreatedDate.unit}else m.dateTime=moment().format();s.setMessage("Worker submitted for execution"),s.setSchedule(m)}r(t).then(function(e){d.notification.recipients=e,s.setAction(d),s.setContext({process:{}}),s.send(s).then(function(e){console.log(s);var i=util.success("Notification Worker processes successfully for assignment.",e);n(i)},function(e){n(e)})}).catch(function(e){console.log("Notification - getRecipients failed with error "+e),a(e)})})}}}(),report=function(){return{createPerformanceReport:function(e,i,o){return new Promise(function(t,n){var a=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=o,a.subprofileId=r,a.channels.push("createPerformanceReport"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.workplanSetId,p=e.configSetId,c=JSON.xpath("/indicators[category/term eq '"+s+"']/_id",app.SCOPE.workflow,{})[0],u=JSON.xpath("/subprocesses[_id eq '"+o+"']/indicators[id eq '"+p+"']/instances[1]/uuid",i,{})[0],d={createPerformanceReport:{workplanUUID:c,configUUID:u,profilId:i.profile}};a.action=d,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,o);var n=util.success("WorkplanReport Worker processed successfully.",e);t(n)},function(e){n(e)})})},createReport:function(e,i,o){return new Promise(function(t,n){var a=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=o,a.subprofileId=r,a.channels.push("createReport"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.PerformanceReportDefinitionSetId,p=e.reportingSDOSetId,c=JSON.xpath("/indicators[category/term eq '"+s+"']/_id",i,{})[0],u=JSON.xpath("/subprocesses[_id eq '"+o+"']/indicators[id eq '"+p+"']/instances[1]/uuid",i,{})[0],d={createReport:{performanceReportDefinition:c,reportingSDO:u,profilId:i.profile}};a.action=d,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,o);var n=util.success("Reprot Worker processed successfully.",e);t(n)},function(e){n(e)})})},sdoReport:function(e,i,o){return new Promise(function(t,n){var a=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=o,a.subprofileId=r,a.channels.push("sdoReport"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.indicatorSetId,p=JSON.xpath("/subprocesses[_id eq '"+o+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],c={sdoReport:{sdoReportUUID:p,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:o}};a.action=c,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,o);var n=util.success("report Worker processed successfully.",e);t(n)},function(e){n(e)})})},executeReport:function(e,i,o){return new Promise(function(t,n){var a=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),
a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=o,a.subprofileId=r,a.channels.push("executeReport"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.SDOreportSetId,p=e.reportingSDOSetid,c=JSON.xpath("/subprocesses[_id eq '"+o+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],u=JSON.xpath("/subprocesses[_id eq '"+o+"']/indicators[id eq '"+p+"']/instances[1]/uuid",i,{})[0];void 0==c&&(c=JSON.xpath("/indicators[category/term eq '"+s+"']/_id",i,{})[0]);var d={executeReport:{sdoReportUUID:c,reportingSDOUUID:u,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:o}};a.action=d,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,o);var n=util.success("report Worker processed successfully.",e);t(n)},function(e){n(e)})})},generateView:function(e,i,o){return new Promise(function(t,n){var a=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=o,a.subprofileId=r,a.channels.push("generateView"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.ViewConfigSetId,p=JSON.xpath("/subprocesses[_id eq '"+o+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],c={generateView:{viewConfigUUID:p,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:o}};a.action=c,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,o);var n=util.success("report Worker processed successfully.",e);t(n)},function(e){n(e)})})},requestReport:function(e,i,o){return new Promise(function(t,n){var a=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=o,a.subprofileId=r,a.channels.push("requestReport"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.sdoRequestReportSetId,p=e.sdoReportCreationSetId,c=e.performanceReportSetId,u=JSON.xpath("/subprocesses[_id eq '"+o+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],d=JSON.xpath("/indicators[category/term eq '"+p+"']/_id",i,{})[0],l=JSON.xpath("/indicators[category/term eq '"+c+"']/_id",i,{})[0],f={requestReport:{performanceReportUUID:l,sdoRequestReportUUID:u,sdoReportCreationUUID:d,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:o}};a.action=f,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,o);var n=util.success("Request report Worker processed successfully.",e);t(n)},function(e){n(e)})})},generateBasicView:function(e,i,o){return new Promise(function(t,n){var a=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=o,a.subprofileId=r,a.channels.push("generateBasicView"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.sdoDataObjectViewSetId,p=JSON.xpath("/subprocesses[_id eq '"+o+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],c={generateBasicView:{sdoDataObjectViewUUID:p,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:o}};a.action=c,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,o);var n=util.success("generateBasicView Worker processed successfully.",e);t(n)},function(e){n(e)})})},generateUnionView:function(e,i,o){return new Promise(function(t,n){var a=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=o,a.subprofileId=r,a.channels.push("generateUnionView"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.sdoDataObjectViewUnionSetId,p=JSON.xpath("/subprocesses[_id eq '"+o+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],c={generateUnionView:{sdoDataObjectViewUnionUUID:p,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:o}};a.action=c,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,o);var n=util.success("generateUnionView Worker processed successfully.",e);t(n)},function(e){n(e)})})},sdoReportMultiple:function(e,i,o){return new Promise(function(t,n){var a=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=o,a.subprofileId=r,a.channels.push("sdoReportMultiple"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.sdoReportCreationSetId,p=e.sdoReportViewsSetId,c=e.sdoReportJoinsSetId,u=JSON.xpath("/subprocesses[_id eq '"+o+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],d=JSON.xpath("/subprocesses[_id eq '"+o+"']/indicators[id eq '"+p+"']/instances[1]/uuid",i,{})[0],l=JSON.xpath("/subprocesses[_id eq '"+o+"']/indicators[id eq '"+c+"']/instances[1]/uuid",i,{})[0],f={sdoReportMultiple:{sdoReportCreationUUID:u,sdoReportViewsUUID:d,sdoReportJoinsUUID:l,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:o}};a.action=f,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,o);var n=util.success("sdoReportMultiple Worker processed successfully.",e);t(n)},function(e){n(e)})})},subprofileQuarterlyReport:function(e,i,o){return new Promise(function(t,n){var a=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=o,a.subprofileId=r,a.channels.push("requestReport"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.scheduleReportIndicator,p=JSON.xpath("/indicators[category/term eq '"+s+"']/_id",i,{})[0],c=e.sdoReportApprovalIndicator,u=JSON.xpath("/indicators[category/term eq '"+c+"' and workflows[1]/processes[1]/subProcessUUID eq '"+o+"']/_id",i,{})[0],d={subprofileQuarterlyReport:{scheduleReportIndicatorUUID:p,sdoReportApprovalIndicatorUUID:u,subprofileCode:app.profile.subProfile.code,subprofileTitle:app.profile.subProfile.title,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:o}};a.action=d,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,o);var n=util.success("QuarterlyReport report Worker processed successfully.",e);t(n)},function(e){n(e)})})}}}(),participants=function(){return{linkParticipants:function(e,i,o){return new Promise(function(t,n){var a=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=o,a.subprofileId=r,a.channels.push("navigation"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.EPWPLinkParticipantsInBulkId,p=JSON.xpath("/subprocesses[_id eq '"+o+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],c=e.EPWPLocalityId,u=JSON.xpath("/indicators[category/term eq '"+c+"']/_id",i,{})[0],d=e.EPWPActiveParticipantsId,l=JSON.xpath("/indicators[category/term eq '"+d+"']/_id",i,{})[0],f={linkParticipants:{EPWPLinkParticipantsInBulkIdUUID:p,EPWPLocalityIdUUID:u,EPWPActiveParticipantsIdUUID:l,profilId:i.profile}};a.action=f,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,o);var n=util.success("EPWPLinkParticipants Worker processed successfully.",e);t(n)},function(e){n(e)})})},monthlyAttendance:function(e,i,o){return new Promise(function(t,n){var a=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=o,a.subprofileId=r,a.channels.push("navigation"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.EPWPMonthlyAttendanceBulkUploadUUID,p=JSON.xpath("/subprocesses[_id eq '"+o+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],c=e.EPWPActiveParticipantsIdUUID,u=JSON.xpath("/indicators[category/term eq '"+c+"']/_id",i,{})[0],d={monthlyAttendance:{EPWPMonthlyAttendanceBulkUploadUUID:p,EPWPActiveParticipantsIdUUID:u,profilId:i.profile}};a.action=d,worker.send(a).then(function(e){worker.setWorkerInfoInSubprocess(a,i,o);var n=util.success("monthlyAttendance Worker processed successfully.",e);t(n)},function(e){n(e)})})}}}(),worker=function(){return{getWorkerWrapper:function(){var e={source:"remote",type:"workerObject",_id:"",channels:[],profileId:"",communityId:"",applicationId:"",subProcessUUID:"",message:"",messageType:"info",createdDateTime:"",senderUserId:"",subProfileId:"",action:{}};return e},send:function(e){return new Promise(function(i,o){console.log("Submitting Worker Object to server"),console.log(e),dao.save(e).then(function(e){i(e)}).catch(function(e){console.log("Error submitting worker response !!"+e),o(e)})})},sendWorker:function(e,i,o){return new Promise(function(t,n){var a=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=i.profile,a.subProcessUUID=o,a.subprofileId=r,a.channels.push("sendWorker"),a.channels.push("community_"+app.SCOPE.getCommunityId());var s=function(e,t,n){return new Promise(function(a,r){helper.getNodeValue(e,i,o).then(function(e){a({seq:t,paramName:n,dataValue:e})},function(e){r(e)})})},p=function(e){return new Promise(function(t,n){for(var a=[],r=e.length,p=0;p<e.length;p++){var c=e[p].parameterValue,u=e[p].seq,d=e[p].parameterName;s(c,u,d).then(function(e){a.push({seq:e.seq,paramName:e.paramName,paramValue:e.dataValue}),r--,0==r&&(a.push({seq:r+1,paramName:"communityId",paramValue:i.communityId}),a.push({seq:r+2,paramName:"applicationId",paramValue:i.app}),a.push({seq:r+3,paramName:"profileId",paramValue:i.profile}),a.push({seq:r+4,paramName:"subProcessUUID",paramValue:o}),t(a))},function(e){r--,0==r&&(a.push({seq:r+1,paramName:"communityId",paramValue:i.communityId}),a.push({seq:r+2,paramName:"applicationId",paramValue:i.app}),a.push({seq:r+3,paramName:"profileId",paramValue:i.profile}),a.push({seq:r+4,paramName:"subProcessUUID",paramValue:o}),t(a))})}})};if(void 0!=e.rest){var c=e.rest.parameters;p(c).then(function(r){var s={sendWorker:{rest:{}}};s.sendWorker.rest.uri=e.rest.uri,s.sendWorker.rest.profilId=i.profile,s.sendWorker.rest.parameters=r,a.action=s,worker.send(a).then(function(e){var r=JSON.xpath("/subprocesses[_id eq '"+o+"']",i,{})[0];r.spStatus="submitted",void 0==r.messages&&(r.messages=[]);var s={message:{i18n:{_id:"",en:"Server request is pending",pt:"Server request is pending"}},type:"info"};r.messages.push(s),void 0==r.workers&&(r.workers=[]),r.workers.push({workerId:a._id,dateTime:moment().format()}),persistData("subprocesses",app.SCOPE.workflow,o).then(function(i){var o=util.success("Worker Rest processed successfully.",e);t(o)}).catch(function(e){console.log("Worker submitted subprocess file update failed"),n(e)})},function(e){console.log("Worker failed "),n(e)})},function(e){console.log("parameter creation failed. Abording worker object")})}else if(void 0!=e.functional){var c=e.functional.parameters;p(c).then(function(r){var s={sendWorker:{functional:{}}};s.sendWorker.functional.methodName=e.functional.methodName,s.sendWorker.functional.profilId=i.profile,s.sendWorker.functional.parameters=r,a.action=s,worker.send(a).then(function(e){var r=JSON.xpath("/subprocesses[_id eq '"+o+"']",i,{})[0];r.spStatus="submitted",void 0==r.messages&&(r.messages=[]);var s={message:{i18n:{_id:"",en:"Server request is pending",pt:"Server request is pending"}},type:"info"};r.messages.push(s),void 0==r.workers&&(r.workers=[]),r.workers.push({workerId:a._id,dateTime:moment().format()}),persistData("subprocesses",app.SCOPE.workflow,o).then(function(i){var o=util.success("Worker functional processed successfully.",e);t(o)}).catch(function(e){console.log("Worker submitted subprocess file update failed"),n(e)})},function(e){console.log("Worker failed "),n(e)})},function(e){console.log("parameter creation failed. Abording worker object")})}})},executeLocal:function(workerConfig,_WFInstance,uuid){return new Promise(function(resolve,reject){var processGetNodeValue=function(e,i,o){return new Promise(function(t,n){helper.getNodeValue(e,_WFInstance,uuid).then(function(e){t({seq:i,dataType:o,dataValue:e})},function(e){n(e)})})},processParams=function(e){return new Promise(function(i,o){for(var t=[],n=e.length,a=0;a<e.length;a++){var r=e[a].parameterValue,s=e[a].seq,p=e[a].dataType.dataType;processGetNodeValue(r,s,p).then(function(e){t.push({seq:e.seq,dataType:e.dataType,paramValue:e.dataValue}),n--,0==n&&i(t)},function(e){n--,0==n&&i(t)})}})},fixParamType=function(e,i){switch(i){case"string":var o=e.replace(/'/g,"\\'");return"'"+o+"'";case"date":case"dateTime":return"'"+e+"'";case"number":case"decimal":return e}},methodName=workerConfig.methodName,configParam=workerConfig.parameters;processParams(configParam).then(function(paramsArray){for(var pList="",i=0;i<paramsArray.length-1;i++)pList=pList+fixParamType(paramsArray[i].paramValue,paramsArray[i].dataType)+",";pList+=fixParamType(paramsArray[i].paramValue,paramsArray[i].dataType);var callbackSuccess=function(){return resolve("Function '"+methodName+"' executed. Response success.")},callbackFailure=function(){return reject("Function '"+methodName+"' executed. Response failed.")},spUUID="'"+uuid+"'",func=methodName+"("+pList+",callbackSuccess, callbackFailure,"+spUUID+")",exe=eval(func);console.log(exe),resolve("Local function executed")},function(e){console.log("parameter creation failed. Abording worker object"),reject(e)})})},setWorkerInfoInSubprocess:function(e,i,o){var t=JSON.xpath("/subprocesses[_id eq '"+o+"']",i,{})[0],n={message:{i18n:{_id:"",en:"Worker submitted",pt:"Worker submitted"}},type:"info"};t.messages=[],t.messages.push(n),void 0==t.workers&&(t.workers=[]),t.workers.push({workerId:e._id,dateTime:moment().format()})}}}();module.exports={community:community,application:application,performance:performance,worker:worker,sdo:sdo,taxonomy:taxonomy,subProcessInstance:subProcessInstance,variables:variables,notification:notification,report:report,participants:participants};

},{"./form":3,"./helper":4,"./nodeValue":6,"utility":8}],3:[function(require,module,exports){
"use strict";function create(args){var processId=args[0]||"",subProcess=args[1]||{},step=args[2]||{},action=args[3]||{},_WFInstance=args[6]||{},data=args[6]||{},indicators=subProcess.indicators||[],result=[],indicatorType=action._type,processSeq=args[4]||"",subProcessSeq=args[5]||"",createType=args[7]||"",subProcessId=subProcess._id,uuid=args[8]||"",baseUUID=args[9]||"",profile=_WFInstance.profile,inputData=args[10]||{},formCreateType=action.method.form.create,formType=action.method.form.type,paramObject={formCreateType:formCreateType,formType:formType};return new Promise(function(resolve,reject){for(var toProcess=indicators.length,subprocessType=JSON.xpath("/config/processes/subProcesses[_id eq '"+subProcessId+"']/type",_WFInstance,{})[0],formCreateFn=function(indicatorType,indicatorId,validDate,instantiateSource){gatekeeper.instantiate(baseUUID,indicatorType,indicatorId,_WFInstance.profile,validDate,subProcessId,subprocessType).then(function(docArray){for(var i=0;i<docArray.length;i++){var object=docArray[i];if(!object.model._id.endsWith(":approved")&&!object.model._id.endsWith(":rejected")){object.model.model.pending.validDate=validDate,object.model.model.pending.subProcessUUID=uuid;var workflowObj={id:_WFInstance.config._id,instance:_WFInstance.instance._id,processes:[{id:processId,subProcessId:subProcess._id,subProcessUUID:uuid,step:{id:step.id,seq:step.seq,startDate:"",status:step.status,message:step.message,assignedTo:{userId:step.assignedTo.userId,name:step.assignedTo.name},comment:step.comment,complete:!1,endDate:""}}]};void 0!=action.setWorkflowLabelInTitle&&""!=action.setWorkflowLabelInTitle&&1==action.setWorkflowLabelInTitle&&(object.model.title=inputData.label),void 0!=action.setDraft&&""!=action.setDraft&&1==action.setDraft&&(object.model.control.draft=!0),object.model.workflows.push(workflowObj);var mainId=object.model._id;gatekeeper.persist(docArray).then(function(savedArray){dao.get(mainId).then(function(data){var indicatorModel=ko.mapping.fromJS({defaultModel:{setId:indicatorId}});gatekeeper.instantiateData(mainId,instantiateSource,indicatorModel,data.model.pending.seq,paramObject).then(function(data){if("200"==data[0].status){if(void 0!=action.setWorkflowLabelInField&&""!=action.setWorkflowLabelInField){var assignmentSetId=action.setWorkflowLabelInField.split(".")[0];if(assignmentSetId==indicatorId){console.log(data[0]);var txt=inputData.label,squote=txt.replace(/'/g,"\\'"),path="data[0].model.model.pending.data."+action.setWorkflowLabelInField+"='"+squote+"'";eval(path)}}gatekeeper.persist(data).then(function(e){dao.get(mainId).then(function(e){if(0==_WFInstance.indicators.length)_WFInstance.indicators.push(e),toProcess--,0==toProcess&&persistData("indicators",_WFInstance,uuid).then(function(e){var t=util.success("Form create indicator persist success.",_WFInstance.indicators);resolve(t)}).catch(function(e){console.error(e);var t=util.success("Form create indicator persist failed."+e[0].message,{});reject(t)});else{for(var t=!1,s=0;s<_WFInstance.indicators.length;s++){var i=_WFInstance.indicators[s];i._id==e._id&&(t=!0,_WFInstance.indicators.splice(s,1),_WFInstance.indicators.push(e),toProcess--,0==toProcess&&persistData("indicators",_WFInstance,uuid).then(function(e){var t=util.success("Form create indicator persist success.",_WFInstance.indicators);resolve(t)}).catch(function(e){console.error(e);var t=util.success("Form create indicator persist failed."+e[0].message,{});reject(t)}))}0==t&&(_WFInstance.indicators.push(e),toProcess--,0==toProcess&&persistData("indicators",_WFInstance,uuid).then(function(e){var t=util.success("Form create indicator persist success.",_WFInstance.indicators);resolve(t)}).catch(function(e){console.error(e);var t=util.success("Form create indicator persist failed."+e[0].message,{});reject(t)}))}}).catch(function(e){console.error(e);var t=util.success("1 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(t)})},function(e){console.error(e);var t=util.success("2 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(t)})}else{var failure=util.success("3 Gatekeeper initialisation failed with initialiseData message "+err[0].message,{});reject(failure)}},function(e){var t=util.success("4 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(t)})}).catch(function(e){console.error(e);var t=util.success("5 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(t)})},function(e){console.error(e);var t=util.success("6 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(t)})}}},function(e){for(var t=[],s=0;s<_WFInstance.instance.processes.length;s++)_WFInstance.instance.processes[s].subProcesses.length>0&&t.push(_WFInstance.instance.processes[s]);_WFInstance.instance.processes=[],_WFInstance.instance.processes=t;for(var i=[],s=0;s<_WFInstance.subprocesses.length;s++)_WFInstance.subprocesses[s].indicators.length>0&&i.push(_WFInstance.subprocesses[s]);_WFInstance.subprocesses=[],_WFInstance.subprocesses=i,console.error(e);var a=util.success("7 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(a)})},instantiateSource=FROM_DEFINITION,counter=0;counter<indicators.length;counter++){var indicatorId=indicators[counter]._id,indicatorName=util.getName(indicators[counter].name,"en"),source=indicators[counter].initiateData,initType="";void 0!=subProcess.instanceType.newSequence?initType=INSTANCE_TYPE_NEW_SEQ:void 0!=subProcess.instanceType.newInstance&&(initType=INSTANCE_TYPE_NEW_INS);var indicatorDoc={};if(void 0!=baseUUID&&""!=baseUUID&&baseUUID.length>0){var sp=JSON.xpath("/subprocesses[_id eq '"+baseUUID+"']",_WFInstance,{})[0];void 0==subProcess.periodType.periodic&&baseUUID!=uuid&&(sp.active=!1),instantiateSource=FROM_AUTHORISED}else{var cardinality=JSON.xpath("/indicators[setId eq '"+indicatorId+"']/cardinality",app.SCOPE.APP_CONFIG,{})[0];if(initType==INSTANCE_TYPE_NEW_INS)if(cardinality==INDICATOR_CARDINALITY_SINGLE){var existingUUID=JSON.xpath("/indicators[category/term eq '"+indicatorId+"']/_id",_WFInstance,{});instantiateSource=existingUUID.length>0?FROM_AUTHORISED:FROM_DEFINITION}else instantiateSource=FROM_DEFINITION;else if(cardinality==INDICATOR_CARDINALITY_SINGLE){var existingUUID=JSON.xpath("/indicators[category/term eq '"+indicatorId+"']/_id",app.SCOPE.workflow,{});instantiateSource=existingUUID.length>0?FROM_AUTHORISED:FROM_DEFINITION}else{var path="/indicators[category/term eq '"+indicatorId+"' and id = /subprocesses[id = '"+subProcessId+"']/indicators/instances/uuid]/_id",part=library.getSubprofileSubprocessIds();subprocessType==PROCESS_TYPE_SUBPROFILE&&(path="/indicators[category/term eq '"+indicatorId+"' and id = /subprocesses[id = '"+subProcessId+"' and id = "+part+"]/indicators/instances/uuid]/_id");var existingUUID=JSON.xpath(path,_WFInstance,{});instantiateSource=existingUUID.length>0?FROM_AUTHORISED:FROM_DEFINITION}}formCreateFn(initType,indicatorId,"",instantiateSource)}})}function setInstanceTitle(e){var t=e[0]||{},s=e[2]||"",i=e[4]||{},a=i.label;return new Promise(function(e,i){for(var r=JSON.xpath("/subprocesses[_id eq '"+s+"']",t,{})[0],n=r.indicators,o=0;o<n.length;o++){var c=n[o].instances[0].uuid,d=JSON.xpath("/indicators[_id eq '"+c+"']",t,{})[0];d.title=n[o].id+" "+a}e("Set Title Success",n)})}function deleteProfile(e){var t=e[0]||{},s=t.profile;return new Promise(function(e,i){var a="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(a=app.profile.subprofileId);var r={source:"remote",type:"workerObject",_id:generateUUID(),channels:["deleteProfile","community_"+app.SCOPE.getCommunityId()],communityId:app.SCOPE.getCommunityId(),applicationId:app.SCOPE.applicationId,profileId:t.profile,message:"",subprofileId:a,messageType:"info",createdDateTime:moment().format(),senderUserId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,notification:{},profile:{action:"deleteProfile",profileId:s}};console.log(r),dao.upsert(r).then(function(t){console.log("Worker Object submitted for profile("+s+") deletion."),console.log(t),e(t)}).catch(function(e){console.log(e),i(data)})})}function createProfile(e){var t=e[1]||{},s=t.communityId,i=t.profile;return new Promise(function(e,t){library.createProfileDocuments(s,i).then(function(t){var s=util.success("Form created successfully.",t);e(s)}).catch(function(e){console.error(e);var s=util.success("ERROR: Profile creation failed"+e[0].message,{});t(s)})})}function setDraft(e){var t=e[0]||{},s=(t.communityId,t.profile,e[2]||"");return new Promise(function(e,i){for(var a=JSON.xpath("/subprocesses[_id eq '"+s+"']",t,{})[0],r=a.indicators,n=0;n<r.length;n++){var o=r[n].instances[0].uuid,c=JSON.xpath("/indicators[_id eq '"+o+"']",t,{})[0];c.control.draft=!0}e("Set Draft Success",r)})}function setUnDraft(e){var t=e[0]||{},s=(t.communityId,t.profile,e[2]||"");return new Promise(function(e,i){for(var a=JSON.xpath("/subprocesses[_id eq '"+s+"']",t,{})[0],r=a.indicators,n=0;n<r.length;n++){var o=r[n].instances[0].uuid,c=JSON.xpath("/indicators[_id eq '"+o+"']",t,{})[0];c.control.draft=!1}e("Set Draft Success",r)})}function save(e){var t={complete:!0,data:[]};return new Promise(function(e,s){var i=util.success("Form indicator set saved successfully.",t);e(i)})}function submit(e){var t={complete:!0,data:[]};return new Promise(function(e,s){var i=util.success("Form submitted successfully.",t);e(i)})}function authorise(e){var t=(e[0]||"",e[1]||{}),s=(t._id,e[2]||"",e[3]||"",e[4]||{}),i=e[6]||"";return new Promise(function(e,t){for(var a=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators/instances/uuid",s,{}),r=a.length,n=[],o=[],c=0;c<a.length;c++)gatekeeper.authorise(a[c]).then(function(a){gatekeeper.persist(a).then(function(a){for(var c="",d=0;d<a.length;d++)a[d].id.endsWith(":approved")||(c=a[d].id);dao.get(c).then(function(a){if(0==s.indicators.length)s.indicators.push(a),r--,0==r&&persistData("indicators",s,i).then(function(t){var s=util.success("Form authorised successfully.",n);e(s)}).catch(function(e){console.error(e);var s=util.success("Form authorised persist failed."+e[0].message,{});t(s)});else{for(var c=!1,d=0;d<s.indicators.length;d++){var u=s.indicators[d];if(u._id==a._id&&(c=!0,o.push(a),r--,0==r)){for(var l=s.indicators.length,p=o.length,f=0;f<l;f++){for(var I=!1,m=0;m<p;m++)s.indicators[f]._id==o[m]._id&&(I=!0);I||o.push(s.indicators[f])}s.indicators=o;break}}1==c&&0==r&&persistData("indicators",s,i).then(function(t){var s=util.success("Form authorised successfully.",n);e(s)}).catch(function(e){console.error(e);var s=util.success("Form authorised persist failed."+e[0].message,{});t(s)})}}).catch(function(e){console.error(e)})},function(e){console.error(err)})},function(t){if(r--,0==r){var s=util.success("Form authorised successfully.",n);e(s)}})})}function close(e){var t={complete:!0,data:[]};return new Promise(function(e,s){var i=util.success("Form closed successfully.",t);e(i)})}function updateIndicator(args){var _WFInstance=args[0]||{},uuid=args[1]||"",path=args[2]||"",dataValue=args[3]||"";return new Promise(function(resolve,reject){var setId=path.split(".",1)[0],indObject=JSON.xpath("/indicators[workflows/processes/subProcessUUID = '"+uuid+"' and category/term = '"+setId+"']",_WFInstance,{})[0],squote=dataValue.replace(/'/g,"\\'"),expr="indObject.model.pending.data."+path+" = '"+squote+"'";eval(expr);var itemsToProcess=1,stuff=[],obj={};obj.model=indObject,stuff.push(obj);var success=util.success("Indicator updated.",stuff);resolve(success)})}function updateIndicatorWrapper(args){var _WFInstance=args[0]||{},uuid=args[1]||"",path=args[2]||"",dataValue=args[3]||"",indicatorSetId=args[4]||"";return new Promise(function(resolve,reject){var indObject=JSON.xpath("/indicators[workflows/processes/subProcessUUID = '"+uuid+"' and category/term = '"+indicatorSetId+"']",_WFInstance,{})[0],squote=dataValue.replace(/'/g,"\\'"),expr="indObject."+path+" = '"+squote+"'";eval(expr);var itemsToProcess=1,stuff=[],obj={};obj.model=indObject,stuff.push(obj);var success=util.success("Indicator updated.",stuff);resolve(success)})}function markUpdateIndicator(e){var t=e[0]||{},s=e[1]||"",i=e[2]||"",a=e[3]||"";return new Promise(function(e,r){var n=JSON.xpath("/indicators[workflows/processes/subProcessUUID = '"+s+"' and category/term = '"+a+"']",t,{})[0];n.model.pending.status=i;var o=[],c={};c.model=n,o.push(c);var d=util.success("Indicator updated.",o);e(d)})}function setStatus(e){var t=e[0]||{},s=e[1]||"",i=e[2]||"";return new Promise(function(e,a){var r=JSON.xpath("/subprocesses[_id eq '"+s+"']",t,{})[0];r.step.message=i,e("Set profile status Success",r)})}var util=require("utility"),gatekeeper=new GK;module.exports={create:create,save:save,submit:submit,authorise:authorise,close:close,setDraft:setDraft,setUnDraft:setUnDraft,createProfile:createProfile,setInstanceTitle:setInstanceTitle,deleteProfile:deleteProfile,updateIndicator:updateIndicator,markUpdateIndicator:markUpdateIndicator,updateIndicatorWrapper:updateIndicatorWrapper};

},{"utility":8}],4:[function(require,module,exports){
"use strict";function getLanguageMessage(message){var language=service.getLanguage(),res=eval("message.i18n."+language);return res}function getNodeValue(data,_WFInstance,uuid){return new Promise(function(resolve,reject){if(void 0!=data.value){var inputDataType="string";inputDataType=void 0!=data.value.datatype.dataType?data.value.datatype.dataType:data.value.datatype;var inputValue=data.value.data;resolve("number"==inputDataType?Number(inputValue):"string"==inputDataType?inputValue:"integer"==inputDataType?parseInt(inputValue):"decimal"==inputDataType?parseFloat(inputValue):"date"==inputDataType||"dateTime"==inputDataType?inputValue:inputValue)}else if(void 0!=data.indicatorUUID){var indicatorUUID=null,subprocess=JSON.xpath("/subprocesses[_id eq '"+uuid+"']",_WFInstance,{})[0];0==subprocess.indicators.length?indicatorUUID=JSON.xpath("/indicators[category/term eq '"+data.indicatorUUID.indicatorSetId+"']/_id",_WFInstance,{})[0]:(indicatorUUID=JSON.xpath("/indicators[id eq '"+data.indicatorUUID.indicatorSetId+"']/instances/uuid",subprocess,{})[0],void 0==indicatorUUID&&(indicatorUUID=JSON.xpath("/indicators[category/term eq '"+data.indicatorUUID.indicatorSetId+"']/_id",_WFInstance,{})[0])),resolve(indicatorUUID)}else if(void 0!=data.indicator){var indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+data.indicator.indicatorSetId+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],xpath="/model/pending/data/"+data.indicator.indicatorSetId+"/"+data.indicator.elementId,seq=JSON.xpath("count(/subprocesses[_id eq '"+uuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+uuid+"']/id])",_WFInstance,{})[0]+1,subprocessType=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+uuid+"']/id]/type",_WFInstance,{})[0],part=library.getSubprofileSubprocessIds();subprocessType==PROCESS_TYPE_SUBPROFILE&&(seq=JSON.xpath("count(/subprocesses[_id eq '"+uuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+uuid+"']/id and _id = /subprocesses[_id = "+part+"]/_id])",_WFInstance,{})[0]+1);var replacedPath=replaceAll(xpath,"#SEQUENCE#",seq),validDate=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/dates/valid",_WFInstance,{})[0],concatValidDate="'"+validDate+"'",newPath=replaceAll(replacedPath,"#END_DATE#",concatValidDate),dotReplaced=replaceAll(newPath,"[.]","/"),retValue=JSON.xpath(dotReplaced,indObject,{})[0];resolve(retValue)}else if(void 0!=data.system)resolve("ERROR: Unimplemented system type found.");else if(void 0!=data.variable)if(void 0!=data.variable.profile){var variableName=data.variable.profile,profileId=_WFInstance.profile,profileVariableFileName=profileId+":variables";dao.get(profileVariableFileName).then(function(file){var obj=eval("file."+variableName);if("object"==typeof obj){var seq=JSON.xpath("count(/subprocesses[_id eq '"+uuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+uuid+"']/id])",_WFInstance,{})[0]+1,subprocessType=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+uuid+"']/id]/type",_WFInstance,{})[0],part=library.getSubprofileSubprocessIds();subprocessType==PROCESS_TYPE_SUBPROFILE&&(seq=JSON.xpath("count(/subprocesses[_id eq '"+uuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+uuid+"']/id and _id = /subprocesses[_id = "+part+"]/_id])",_WFInstance,{})[0]+1);var valuePath="/"+variableName+"[seq eq '"+seq+"']/value",retValue=JSON.xpath(valuePath,file,{})[0];resolve(retValue)}else"string"==typeof obj&&resolve(obj)}).catch(function(e){reject("ERROR: Profile variables not found")})}else reject("ERROR: Unimplemented profile type found.");else if(void 0!=data.indicatorWrapper){var indicatorSet=data.indicatorWrapper.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(data.indicatorWrapper.path,"[.]","/"),xpath="/"+elementpath,value=JSON.xpath(xpath,indObject,{})[0];resolve(value)}else if(void 0!=data.calculated){for(var value="",separator=data.calculated.separator,i=0;i<data.calculated.elements.length-1;i++){var elements=data.calculated.elements,possibleItems=["elementProperty","constantValue","elementWrapper","currentDate","randomDigits","profileObjectElement","profileObjectWrapper","currentFinancialYear"];switch(propertyExists(elements[i],possibleItems)){case"elementProperty":var indicatorSet=elements[i].elementProperty.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(elements[i].elementProperty.elementId,"[.]","/"),xpath="/model/pending/data/"+indicatorSet+"/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value=value+itemValue+separator;break;case"constantValue":var itemValue=elements[i].constantValue.value;value=value+itemValue+separator;break;case"elementWrapper":var indicatorSet=elements[i].elementWrapper.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(elements[i].elementWrapper.elementId,"[.]","/"),xpath="/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value=value+itemValue+separator;break;case"currentDate":value=value+formatDate(new Date)+separator;break;case"randomDigits":var digits=elements[i].randomDigits.digits,random=Math.random(),exp=Math.pow(10,digits),intPart=random*exp^0;value=value+intPart+separator;break;case"profileObjectElement":var indicatorSet=elements[i].profileObjectElement.indicatorSetId,indObject=JSON.xpath("/indicators[category/term eq 'appProfile']",app.SCOPE.workflow,{})[0],elementpath=replaceAll(elements[i].profileObjectElement.elementId,"[.]","/"),xpath="/model/pending/data/"+indicatorSet+"/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value=value+itemValue+separator;break;case"profileObjectWrapper":var indicatorSet=elements[i].profileObjectWrapper.indicatorSetId,indObject=JSON.xpath("/indicators[category/term eq 'appProfile']",app.SCOPE.workflow,{})[0],elementpath=replaceAll(elements[i].profileObjectWrapper.wrapperElementId,"[.]","/"),xpath="/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value=value+itemValue+separator;break;case"currentFinancialYear":var startDate=elements[i].currentFinancialYear.startDate,startMonth=elements[i].currentFinancialYear.startMonth,financialYear=(new Date).getFullYear()+"-"+startMonth+"-"+startDate;value=value+financialYear+separator;break;default:reject("No method found from implemented list.")}}var i=data.calculated.elements.length-1,elements=data.calculated.elements,possibleItems=["elementProperty","constantValue","elementWrapper","currentDate","randomDigits","profileObjectElement","profileObjectWrapper","currentFinancialYear"];switch(propertyExists(elements[i],possibleItems)){case"elementProperty":var indicatorSet=elements[i].elementProperty.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(elements[i].elementProperty.elementId,"[.]","/"),xpath="/model/pending/data/"+indicatorSet+"/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value+=itemValue;break;case"constantValue":var itemValue=elements[i].constantValue.value;value+=itemValue;break;case"elementWrapper":var indicatorSet=elements[i].elementWrapper.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(elements[i].elementWrapper.elementId,"[.]","/"),xpath="/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value+=itemValue;break;case"currentDate":value+=formatDate(new Date);break;case"randomDigits":var digits=elements[i].randomDigits.digits,random=Math.random(),exp=Math.pow(10,digits),intPart=random*exp^0;value+=intPart;break;case"profileObjectElement":var indicatorSet=elements[i].profileObjectElement.indicatorSetId,indObject=JSON.xpath("/indicators[category/term eq 'appProfile']",app.SCOPE.workflow,{})[0],elementpath=replaceAll(elements[i].profileObjectElement.elementId,"[.]","/"),xpath="/model/pending/data/"+indicatorSet+"/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value+=itemValue;break;case"profileObjectWrapper":var indicatorSet=elements[i].profileObjectWrapper.indicatorSetId,indObject=JSON.xpath("/indicators[category/term eq 'appProfile']",app.SCOPE.workflow,{})[0],elementpath=replaceAll(elements[i].profileObjectWrapper.wrapperElementId,"[.]","/"),xpath="/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value+=itemValue;break;case"currentFinancialYear":var startDate=elements[i].currentFinancialYear.startDate,startMonth=elements[i].currentFinancialYear.startMonth,financialYear=(new Date).getFullYear()+"-"+startMonth+"-"+startDate;value+=financialYear;break;default:reject("No method found from implemented list.")}resolve(value)}})}function replaceAll(e,a,t){return"function"!=typeof e.replace&&(console.log(a+" "+t),console.log(e)),e.replace(new RegExp(a,"g"),t)}function formatDate(e){var a=e.getDate(),t=e.getMonth(),i=e.getFullYear();return a+"-"+t+"-"+i}function compare(e,a,t){switch(a){case">":return e>t;case"<":return e<t;case">=":return e>=t;case"<=":return e<=t;case"==":return e==t;case"!=":return e!=t}}module.exports={getLanguageMessage:getLanguageMessage,getNodeValue:getNodeValue,compare:compare};

},{}],5:[function(require,module,exports){
"use strict";function getProcess(e,s,t){return new Promise(function(n,i){try{var c=[],r=[];t.instance.processes.filter(function(s){s.id==e&&(r=s)}),util.syncLoop(r.subProcesses.length,function(n){var o=n.iteration(),u=r.seq,f=r.subProcesses[o].id,a=r.subProcesses[o].seq;getSubProcess(e,u,f,a,s,t).then(function(e){c.push(e),n.next()},function(e){n.break(),i(e)})},function(){n(c)})}catch(e){i(e)}})}function getSubProcess(e,s,t,n,i,c){return new Promise(function(r,o){try{var u={id:"",seq:"",name:"",help:"",dates:"",step:""},f=[],a=[];c.instance.processes.filter(function(i){if(i.id==e&&i.seq==s){i.subProcesses.length;i.subProcesses.filter(function(e){e.id==t&&e.seq==n&&0==e.complete&&(f=e)})}}),c.config.processes.filter(function(s){s._id==e&&s.subProcesses.filter(function(e){e._id==t&&(a=e)})}),u.id=a._id,u.seq=f.seq,u.name=util.getName(a.name,i),u.help=util.getName(a.help,i),u.dates=f.dates,u.step=f.step,r(u)}catch(e){o(e)}})}function prepareNotificationScreen(){""}var util=require("utility");module.exports={getProcess:getProcess};

},{"utility":8}],6:[function(require,module,exports){
"use strict";function get(){return new Promise(function(e,t){})}module.exports={get:get};

},{}],7:[function(require,module,exports){
"use strict";function count(e){return void 0!==e?e.length:0}function preRequisites(e,t,s){return new Promise(function(i,n){var o=[];try{util.syncLoop(e.length,function(i){var a=i.iteration();preRequisite(e[a],t,s).then(function(e){o.push(!0),i.next()},function(e){o.push(!1),i.break(),n(e)})},function(){if(o.every(Boolean)){var e=util.success("Pre-requisites completed successfully.",{});i(e)}else{var t=util.error("WFPreRequisiteError","Not all pre-requisites passed.");n(t)}})}catch(e){n(e)}})}function preRequisite(prerequisite,_WFInstance,spuuid){return new Promise(function(resolve,reject){if(void 0!=prerequisite.check.numberProcessInstances){var numberProcessInstances=prerequisite.check.numberProcessInstances,_filterOperator=numberProcessInstances.operator,xpathOperator="";switch(_filterOperator){case"greaterThan":xpathOperator="gt";break;case"lessThan":xpathOperator="lt";break;case"greaterThanEqual":xpathOperator="ge";break;case"lessThanEqual":xpathOperator="le";break;case"equalTo":xpathOperator="eq";break;case"notEqualTo":xpathOperator="ne"}var _subprocessId=numberProcessInstances.subProcessId,_filterElement="step/status",_filterValue=numberProcessInstances.type,innerXpath="/"+_filterElement+"[. eq '"+_filterValue+"']",fullPath="count(/subprocesses[id eq '"+_subprocessId+"']"+innerXpath+")",prereqProcessType=JSON.xpath("/config/processes/subProcesses[_id eq '"+_subprocessId+"']/type",_WFInstance,{})[0],part=library.getSubprofileSubprocessIds();void 0!=app.profile.subprofileId&&""!=app.profile.subprofileId&&void 0!=prereqProcessType&&prereqProcessType==PROCESS_TYPE_SUBPROFILE&&(fullPath="count(/subprocesses[id eq '"+_subprocessId+"' and _id = "+part+"]"+innerXpath+")");var subjectCount=JSON.xpath(fullPath,_WFInstance,{})[0],countValue=prerequisite.check.numberProcessInstances.count,compare=util.compare(subjectCount,prerequisite.check.numberProcessInstances.operator,parseInt(countValue));if(compare){var success=util.success("Pre-requisites passed.",{});resolve(success)}else{var message=helper.getLanguageMessage(prerequisite.message),error=util.error("WFPreRequisiteError",message);reject(error)}}else if(void 0!=prerequisite.check.variable){var scope=prerequisite.check.variable.scope,fileName="";if("profile"==scope){var profileId=_WFInstance.profile;fileName=profileId+":variables"}else if("subProfileSubProcessInstance"==scope){var subProfileId=app.profile.subprofileId;fileName=subProfileId+":variables"}else reject("ERROR: Scope '"+scope+"' not implemented in pre-requisites");dao.get(fileName).then(function(file){var variableName=prerequisite.check.variable.name,obj=eval("file."+variableName),subjectValueCalculated;if("object"==typeof obj){var seq=JSON.xpath("count(/subprocesses[_id eq '"+spuuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+spuuid+"']/id])",_WFInstance,{})[0]+1,subprocessType=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+spuuid+"']/id]/type",_WFInstance,{})[0],part=library.getSubprofileSubprocessIds();subprocessType==PROCESS_TYPE_SUBPROFILE&&(seq=JSON.xpath("count(/subprocesses[_id eq '"+spuuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+spuuid+"']/id and _id = /subprocesses[_id = "+part+"]/_id])",_WFInstance,{})[0]+1);var valuePath="/"+variableName+"[seq eq '"+seq+"']/value";subjectValueCalculated=JSON.xpath(valuePath,file,{})[0]}else"string"==typeof obj&&(subjectValueCalculated=obj);var inputValue=prerequisite.check.variable.value.data,inputDataType=prerequisite.check.variable.value.dataType.dataType,finalValue;"number"==inputDataType?finalValue=Number(inputValue):"string"==inputDataType?finalValue=inputValue:"integer"==inputDataType?finalValue=parseInt(inputValue):"decimal"==inputDataType?finalValue=parseFloat(inputValue):"date"!=inputDataType&&"dateTime"!=inputDataType||(finalValue=inputValue);var compare=util.compare(subjectValueCalculated,prerequisite.check.variable.operator,finalValue);if(compare){var success=util.success("Variable Pre-requisites passed.",{});resolve(success)}else{var message=helper.getLanguageMessage(prerequisite.message),error=util.error("WFPreRequisiteError",message);reject(error)}}).catch(function(e){var t=helper.getLanguageMessage(prerequisite.message),e=util.error("WFPreRequisiteError:",t);reject(e)})}else{var error=util.error("WFPreRequisiteError","Pre-requisite type not defined.");reject(error)}})}function preActions(e,t,s){return new Promise(function(i,n){var o=[];try{var a=JSON.xpath("/subprocesses[_id eq '"+s+"']",t,{})[0],r=a["meta-data"].processConfigId,c=a["meta-data"].subProcessConfigId,u=a["meta-data"].subProcessInsSeq,p=a["meta-data"].subProcessInsSeq,d=JSON.xpath("/processes[_id eq '"+r+"']/subProcesses[_id eq '"+c+"']",t.config,{})[0],l=JSON.xpath("/subprocesses[_id eq '"+s+"']/step",t,{})[0];util.syncLoop(e.length,function(i){var a=i.iteration();action(e[a],r,u,c,p,d,l,t,{},s).then(function(e){o.push(!0),i.next()},function(e){o.push(!1),i.break(),n(e)})},function(){if(o.every(Boolean)){var e=util.success("Pre-actions completed successfully.",{});i(e)}else{var t=util.error("WFPreRequisiteError","Not all pre-actions passed.");n(t)}})}catch(e){n(e)}})}function getSubProcess(e,t){return void 0==t.subprocesses?[]:void t.subprocesses.filter(function(t){if(t.id==e)return t})}function subProcess(e,t,s,i,n,o,a){var r=[],c=[],u=[];a.instance.processes.filter(function(n){if(n.id==e&&n.seq==t){n.subProcesses.length;n.subProcesses.filter(function(e){if(e.id==s&&e.seq==i){var t=e.uuid;a.subprocesses.filter(function(e){e._id==t&&(r=e)})}})}}),a.config.processes.filter(function(t){t._id==e&&(c=t,t.subProcesses.filter(function(e){e._id==s&&(u=e)}))});var p="",d=o.baseUUID;if(void 0!=d&&""!=d&&d.length>0){var l=JSON.xpath("/subprocesses[_id eq '"+d+"']",a,{})[0];p=l.groupKey}else{for(var f="",m=0;m<u.indicators.length-1;m++)f=f+"'"+u.indicators[m]._id+"',";f=f+"'"+u.indicators[m]._id+"'";var h=JSON.xpath("/indicators[setId = ("+f+") and cardinality eq 'single']",app.SCOPE.APP_CONFIG,{}).length;if(void 0!=u.instanceType.newSequence||h>0){var l=JSON.xpath("/instance/processes[id eq '"+e+"']",a,{})[0];p=void 0!=l&&l.subProcesses.length>0?l.subProcesses[0].groupKey:generateUUID()}else p=generateUUID()}var g=JSON.xpath("count(/processes/subProcesses[groupKey eq '"+p+"'])",a.instance,{})[0],v=o.label,S=generateUUID(),I={_id:S,id:s,type:"workflowInstanceSubProcess",dateTimeCreated:moment().format(),dueDateTime:moment().format(),seq:i,initiated:!1,dates:{created:"",valid:"",start:"",due:"",closed:""},complete:!1,indicators:[],step:{},active:!0,groupKey:p,label:v,channels:["community_"+app.SCOPE.getCommunityId(),"profile_"+app.SCOPE.profileId,"application_"+app.SCOPE.applicationId,"community_"+app.SCOPE.getCommunityId()+"_application_"+app.SCOPE.applicationId],history:[],"meta-data":{applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.profileId,subprofileId:void 0==n?"":n,processConfigId:e,subProcessConfigId:s,subProcessInsSeq:g+1},messages:[],spStatus:""};return void 0!=app.profile.subprofileId&&""!=app.profile.subprofileId?(I.channels.push("profile_"+app.SCOPE.profileId+"_subprofile_"+app.profile.subprofileId),I.channels.push("subprofile_"+app.profile.subprofileId)):(I.channels.push("profile_"+app.SCOPE.profileId+"_subprofile_0"),I.channels.push("subprofile_0")),a.subprocesses.push(I),new Promise(function(n,p){try{var d=c.preActions;preActions(d,a,S).then(function(d){var l=c.prerequisites;preRequisites(l,a,S).then(function(c){var d=u.initiate;initiate(d,r,o).then(function(r){I.initiated=r.data.initiated,I.dates=r.data.dates;var c=u.steps[0]._id,d=(u.steps[0].transition[0]._id,1);step(e,t,s,i,c,d,o,a,S).then(function(e){I.step=e.data,indicators(u.indicators,a,I._id).then(function(e){I.indicators=e.data;var t=util.success(e.message,I);n(t)},function(e){p(e)})},function(e){p(e)})},function(e){a.subprocesses=a.subprocesses.filter(function(e){return!(e._id==S)}),p(e)})},function(e){a.subprocesses=a.subprocesses.filter(function(e){return!(e._id==S)}),p(e)})},function(e){a.subprocesses=a.subprocesses.filter(function(e){return!(e._id==S)}),p(e)})}catch(e){p(e)}})}function initiate(e,t,s){var i={initiated:!1,dates:{created:"",valid:"",start:"",due:"",closed:""}};return new Promise(function(n,o){var a=function(){if(void 0!=e.user){i.dates.created=s.createdDate,"userSelected"!=e.user.validDate._type&&"autoSelected"!=e.user.validDate._type||(void 0!=s.validDate?i.dates.valid=s.validDate:i.dates.valid=(new Date).toISOString().substring(0,10)),"userSelected"!=e.user.dueDate._type&&"autoSelected"!=e.user.dueDate._type||(void 0!==s.dueDate?i.dates.due=s.dueDate:util.warn("WFInitiateError","No due date passed in - {data.dueDate}")),i.dates.start=s.firstDate,i.initiated=!0;var t=util.success("Sub-Process initiate completed successfully.",i);n(t)}else if(void 0!=e.auto);else{var a=util.error("WFInitiateError","Initiate type: "+e._type+" not defined.");o(a)}};if(void 0==t.complete)a();else if(!t.complete)if(e.parallelInstances)a();else{var r=util.error("WFInitiateError","Sub-process: "+t.id+" still active and parallel instances are not allowed.");o(r)}})}function step(processId,processSeq,subProcessId,subProcessSeq,stepId,stepSeq,data,_WFInstance,spuuid){var model={key:generateUUID(),id:"",seq:"",status:"",message:"",assignedTo:{userId:"",name:"",dateTime:"",type:"",dueDateTime:"",by:""},assignmentHistory:[],dateTimeCreated:moment().format(),dueDateTime:moment().format(),transition:{transitionId:"",dateTime:"",userId:""},assignment:{},comment:""},subProcess={},uuid="",instSubProcess,step={},transitionId="";return new Promise(function(resolve,reject){try{_WFInstance.instance.processes.filter(function(e){e.id==processId&&e.seq==processSeq&&e.subProcesses.filter(function(e){e.id==subProcessId&&e.seq==subProcessSeq&&(uuid=e.uuid)})}),_WFInstance.subprocesses.filter(function(e){e._id==uuid&&(instSubProcess=e)}),_WFInstance.config.processes.filter(function(e){e._id==processId&&e.subProcesses.filter(function(e){e._id==subProcessId&&(subProcess=e,e.steps.filter(function(e){e._id==stepId&&(step=e)}))})}),model.id=stepId,model.seq=stepSeq;var instanceStatus="";void 0!=step.setInstanceStatusTo.NotStarted?instanceStatus="NotStarted":void 0!=step.setInstanceStatusTo.Created?instanceStatus="Created":void 0!=step.setInstanceStatusTo.InProgress?instanceStatus="InProgress":void 0!=step.setInstanceStatusTo.Submitted?instanceStatus="Submitted":void 0!=step.setInstanceStatusTo.Complete&&(instanceStatus="Complete");var language=service.getLanguage();model.status=instanceStatus,model.message=eval("step.setInstanceStatusTo."+instanceStatus+".label.i18n."+language),model.comment=void 0!==data.comment?data.comment:"";var indicators=void 0!==instSubProcess?instSubProcess.indicators:[],updateSPIndicatorObject=function(e,t){if(e.length>0)for(var s=0;s<e.length;s++){var i=e[s],n=i.instances[0].uuid,o=JSON.xpath("/indicators[_id eq '"+n+"']/model/pending/seq",t,{})[0];i.instances[0].seq=o}},clearSPStatus=function(e){var t=JSON.xpath("/subprocesses[_id eq '"+e+"']",_WFInstance,{})[0];t.spStatus=""};indicatorDocs(processId,indicators,model,_WFInstance).then(function(e){uuid=spuuid,void 0!=step.function.actions?actions(step.function.actions,processId,processSeq,subProcessId,subProcessSeq,subProcess,model,_WFInstance,data,spuuid).then(function(e){updateSPIndicatorObject(indicators,_WFInstance);var t=step.transition[0]._id;transition(processId,processSeq,subProcessId,subProcessSeq,stepId,t,data,_WFInstance,spuuid,model).then(function(e){var t=util.success("Transition completed successfully.",e.data.step);resolve(t)},function(e){reject(e)})},function(e){reject(e)}):void 0!=step.function.task?task(processId,processSeq,step.function.task,spuuid,model).then(function(e){updateSPIndicatorObject(indicators,_WFInstance);var t=util.success("Task awaiting user action.",model);resolve(t)},function(e){reject(e)}):void 0!=step.function.server&&(clearSPStatus(spuuid),server(step.function.server,processId,processSeq,subProcessId,subProcessSeq,subProcess,model,_WFInstance,data,spuuid).then(function(e){updateSPIndicatorObject(indicators,_WFInstance);var t=util.success("Server awaiting server response.",model);resolve(t)},function(e){reject(e)}))},function(e){reject(e)})}catch(e){reject(e)}})}function indicators(e,t,s){var i=[];return new Promise(function(e,n){try{for(var o=JSON.xpath("indicators[fn:count(./workflows/processes[subProcessUUID eq '"+s+"']) gt 0]",t,{}),a=0;a<o.length;a++){var r=o[a],c={id:"",instances:[]},u={uuid:"",title:"",key:"",seq:1,rev:""};c.id=r.category.term,u.uuid=r._id,u.rev=r._rev,u.title=r.title,u.key="",u.seq=r.model.pending.seq,c.instances.push(u),i.push(c)}var p=util.success("Process indicator model updated.",i);e(p)}catch(e){n(e)}})}function assignUser(e,t,s,i,n,o,a){return new Promise(function(t,s){try{a.subprocesses.filter(function(s){if(s._id==o){void 0==s.step.assignmentHistory&&(s.step.assignmentHistory=[]),""!=s.step.assignedTo.userId&&""!=s.step.assignedTo.name&&s.step.assignmentHistory.push(JSON.parse(JSON.stringify(s.step.assignedTo))),s.step.assignedTo.userId=n.id,s.step.assignedTo.name=n.name,s.step.assignedTo.dateTime=moment().format(),s.step.assignedTo.type=ASSIGNMENT_TYPE_REASSIGNMENT,s.step.assignedTo.dueDateTime="",s.step.assignedTo.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"";for(var i=s.indicators,r=0;r<i.length;r++)for(var c=i[r],u=0;u<c.instances.length;u++)for(var p=c.instances[u],d=0;d<a.indicators.length;d++){var l=a.indicators[d];p.uuid==l._id&&l.workflows.filter(function(t){t.id==a.config._id&&t.processes.filter(function(t){t.id==e&&(t.step.assignedTo.userId=n.id,t.step.assignedTo.name=n.name)})})}var f=JSON.xpath("/processes[_id eq '"+e+"']/notifications",a.config,{})[0];if(void 0!=f&&void 0!=f.reAssignment)actionsModule.notification.reAssignmentNotification(f,a,o,n).then(function(e){var e=util.success('User assigned successfully. UserId: "'+n.id+'", Name: "'+n.name+'"',s);t(e)}).catch(function(e){t(e)});else{var m=util.success('User assigned successfully. UserId: "'+n.id+'", Name: "'+n.name+'"',s);t(m)}}})}catch(e){s(e)}})}function indicatorDocs(e,t,s,i){return new Promise(function(n,o){try{if(void 0==t){util.error("WFIndicatorsUpdate","Indicators parameter is required. - Value: "+t);o(err)}else{for(var a=0;a<t.length;a++)for(var r=t[a],c=0;c<r.instances.length;c++)for(var u=r.instances[c],p=0;p<i.indicators.length;p++){var d=i.indicators[p];u.uuid==d._id&&d.workflows.filter(function(t){t.id==i.config._id&&t.processes.filter(function(t){t.id==e&&(t.step.id=s.id,t.step.seq=s.seq,t.step.status=s.status,t.step.message=s.message,t.step.assignedTo.userId=s.assignedTo.userId,t.step.assignedTo.name=s.assignedTo.name,t.step.comment=void 0!==s.comment?s.comment:"")})})}var l=util.success("Indicator documents workflow process model updated.",i);n(l)}}catch(e){o(e)}})}function actions(e,t,s,i,n,o,a,r,c,u){var p=[];return new Promise(function(d,l){util.syncLoop(e.length,function(d){var f=d.iteration();action(e[f],t,s,i,n,o,a,r,c,u).then(function(t){var s={id:e[f]._id,seq:f,data:t};p.push(s),d.next()},function(e){d.break(),l(e)})},function(){var e=util.success("Actions completed successfully.",p);d(e)})})}function action(e,t,s,i,n,o,a,r,c,u){return new Promise(function(i,p){if(void 0!=e.method){var d=["form","indicator","profile","subProcessInstance","step","community","application","user","sdo","performance","taxonomy","variables","notification","report","worker","participants"];switch(propertyExists(e.method,d)){case"form":if(void 0!=e.method.form.create){var l=[];l.push(t),l.push(o),l.push(a),l.push(e),l.push(s),l.push(n),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.create(l).then(function(e){i(e.data)},function(e){p(e)})}else if(void 0!=e.method.form.authorise){var l=[];l.push(t),l.push(o),l.push(s),l.push(n),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.authorise(l).then(function(e){i(e.data)},function(e){p(e)})}else if(void 0!=e.method.form.undraft){var l=[];l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.setUnDraft(l).then(function(e){i(e.data)},function(e){p(e)})}else if(void 0!=e.method.form.draft){var l=[];l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.setDraft(l).then(function(e){i(e.data)},function(e){p(e)})}else if(void 0!=e.method.form.close){var l=[];l.push(o.indicators),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.close(l).then(function(e){i(e.data)},function(e){p(e)})}else if(void 0!=e.method.form.authoriseAndCreateNewSeq){var l=[];l.push(t),l.push(o),l.push(s),l.push(n),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.authorise(l).then(function(d){var l=[];l.push(t),l.push(o),l.push(a),l.push(e),l.push(s),l.push(n),l.push(r),l.push(c.createType),l.push(u),l.push(u),l.push(c),form.create(l).then(function(e){i(e.data)},function(e){p(e)})},function(e){p(e)})}break;case"indicator":if(void 0!=e.method.indicator.create)i("Not implemented");else if(void 0!=e.method.indicator.instantiate)i("Not implemented");else if(void 0!=e.method.indicator.setValue){var f=e.method.indicator.setValue.path;helper.getNodeValue(e.method.indicator.setValue.data,r,u).then(function(e){var t=[];t.push(r),t.push(u),t.push(f),t.push(e),form.updateIndicator(t).then(function(e){i(e.data)},function(e){p(e)})},function(e){p(e)})}else if(void 0!=e.method.indicator.updateStatus){var m=e.method.indicator.indicatorSetId,l=[];if(l.push(r),l.push(u),void 0!=e.method.indicator.updateStatus){var h=e.method.indicator.updateStatus;l.push(h),l.push(m),form.markUpdateIndicator(l).then(function(e){i(e.data)},function(e){p(e)})}else i("Action indicator sub type not found.")}else if(void 0!=e.method.indicator.setWrapperElement){var f=e.method.indicator.setWrapperElement.path,m=e.method.indicator.setWrapperElement.indicatorSetId;helper.getNodeValue(e.method.indicator.setWrapperElement.data,r,u).then(function(e){var t=[];t.push(r),t.push(u),t.push(f),t.push(e),t.push(m),form.updateIndicatorWrapper(t).then(function(e){i(e.data)},function(e){p(e)})},function(e){p(e)})}break;case"profile":if(void 0!=e.method.profile.create){var l=[];l.push(t),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.createProfile(l).then(function(e){i(e.data)},function(e){p(e)})}else if(void 0!=e.method.profile.setStatusTo){var l=[],h=e.method.profile.setStatusTo;l.push(r),l.push(u),l.push(h),form.setStatus(l).then(function(e){i(e.data)},function(e){p(e)})}break;case"subProcessInstance":var g=["instantiate","authorise","close","setVariable","setStatusTo","setStatusMsgTo","setTitle","setValidDate","setSPStatus"];switch(propertyExists(e.method.subProcessInstance,g)){case"setTitle":helper.getNodeValue(e.method.subProcessInstance.setTitle,r,u).then(function(t){actionsModule.subProcessInstance.setTitle(e.method.subProcessInstance.setTitle,u,t,r).then(function(e){i(e.data)},function(e){p(e)})},function(e){p(e)});break;case"setValidDate":helper.getNodeValue(e.method.subProcessInstance.setValidDate,r,u).then(function(t){actionsModule.subProcessInstance.setValidDate(e.method.subProcessInstance.setValidDate,u,t,r).then(function(e){i(e.data)},function(e){p(e)})},function(e){p(e)});break;case"setSPStatus":helper.getNodeValue(e.method.subProcessInstance.setSPStatus,r,u).then(function(t){actionsModule.subProcessInstance.setSPStatus(e.method.subProcessInstance.setSPStatus,u,t,r).then(function(e){i(e.data)},function(e){p(e)})},function(e){p(e)});break;default:p("No method found from implemented list in subprocess action.")}break;case"step":break;case"community":var v=["createCommunity","releaseAdoptedApplication","userJoinCommunity"];switch(propertyExists(e.method.community,v)){case"createCommunity":return actionsModule.community.createCommunity(e.method.community.createCommunity,u,r).then(function(e){i(e.data)},function(e){p(e)});case"releaseAdoptedApplication":return actionsModule.community.releaseAdoptedApplication(e.method.community.releaseAdoptedApplication,u,r).then(function(e){i(e.data)},function(e){p(e)});case"userJoinCommunity":return actionsModule.community.userJoinCommunity(e.method.community.userJoinCommunity,u,r).then(function(e){i(e.data)},function(e){p(e)});default:p("No method found from implemented list.")}break;case"application":var S=["createAppDefinition","buildApplication","applicationAdoption"];switch(propertyExists(e.method.application,S)){case"createAppDefinition":return actionsModule.application.createAppDefinition(e.method.application.createAppDefinition,u,r).then(function(e){i(e.data)},function(e){p(e)});case"buildApplication":return actionsModule.application.buildApplication(e.method.application.buildApplication,u,r).then(function(e){i(e.data)},function(e){p(e)});case"applicationAdoption":return actionsModule.application.applicationAdoption(e.method.application.applicationAdoption,u,r).then(function(e){i(e.data)},function(e){p(e)});default:p("No method found from implemented list.")}break;case"user":break;case"sdo":var I=["create","enrollCourse"];switch(propertyExists(e.method.sdo,I)){case"create":return actionsModule.sdo.create(e.method.sdo.create,u,r).then(function(e){i(e.data)},function(e){p(e)});case"enrollCourse":return actionsModule.sdo.enrollCourse(e.method.sdo.enrollCourse,u,r).then(function(e){i(e.data)},function(e){p(e)});default:p("No method found from implemented list.")}break;case"performance":var b=["unlockPeriod","lockPerformanceModel","setModelStatus"];switch(propertyExists(e.method.performance,b)){case"unlockPeriod":return actionsModule.performance.unlockPeriod(e.method.performance.unlockPeriod,u,r).then(function(e){i(e.data)},function(e){p(e)});case"setModelStatus":return actionsModule.performance.setModelStatus(e.method.performance.setModelStatus,u,r).then(function(e){i(e.data)},function(e){p(e)});case"lockPerformanceModel":return actionsModule.performance.lockPerformanceModel(e.method.performance.lockPerformanceModel,u,r).then(function(e){i(e.data)},function(e){p(e)});default:p("No method found from implemented list.")}break;case"taxonomy":var P=["create"];switch(propertyExists(e.method.taxonomy,P)){case"create":return actionsModule.taxonomy.create(e.method.taxonomy.create,u,r).then(function(e){i(e.data)},function(e){p(e)});default:p("No method found from implemented list.")}break;case"variables":var y=["setVariable"];switch(propertyExists(e.method.variables,y)){case"setVariable":return actionsModule.variables.setVariable(e.method.variables.setVariable,r,u).then(function(e){i(e.data)},function(e){p(e)});default:p("No method found from implemented list.")}break;case"notification":return actionsModule.notification.sendNotificationWorker(e.method.notification,r,u).then(function(e){i(e.data)},function(e){p(e)});case"report":var _=["createPerformanceReport","createReport","sdoReport","executeReport","requestReport","generateView","generateBasicView","generateUnionView","sdoReportMultiple","subprofileQuarterlyReport"];switch(propertyExists(e.method.report,_)){case"createPerformanceReport":return actionsModule.report.createPerformanceReport(e.method.report.createPerformanceReport,r,u).then(function(e){i(e.data)},function(e){p(e)});case"createReport":return actionsModule.report.createReport(e.method.report.createReport,r,u).then(function(e){i(e.data)},function(e){p(e)});case"sdoReport":return actionsModule.report.sdoReport(e.method.report.sdoReport,r,u).then(function(e){i(e.data)},function(e){p(e)});case"executeReport":return actionsModule.report.executeReport(e.method.report.executeReport,r,u).then(function(e){i(e.data)},function(e){p(e)});case"generateView":return actionsModule.report.generateView(e.method.report.generateView,r,u).then(function(e){i(e.data)},function(e){p(e)});case"requestReport":return actionsModule.report.requestReport(e.method.report.requestReport,r,u).then(function(e){i(e.data)},function(e){p(e)});case"generateBasicView":return actionsModule.report.generateBasicView(e.method.report.generateBasicView,r,u).then(function(e){i(e.data)},function(e){p(e)});case"generateUnionView":return actionsModule.report.generateUnionView(e.method.report.generateUnionView,r,u).then(function(e){i(e.data)},function(e){p(e)});case"sdoReportMultiple":return actionsModule.report.sdoReportMultiple(e.method.report.sdoReportMultiple,r,u).then(function(e){i(e.data)},function(e){p(e)});case"subprofileQuarterlyReport":return actionsModule.report.subprofileQuarterlyReport(e.method.report.subprofileQuarterlyReport,r,u).then(function(e){i(e.data)},function(e){p(e)});default:p("No method found from implemented list.")}break;case"worker":var N=["sendWorker","executeLocal"];switch(propertyExists(e.method.worker,N)){case"sendWorker":return actionsModule.worker.sendWorker(e.method.worker.sendWorker,r,u).then(function(e){i(e.data)},function(e){p(e)});case"executeLocal":return actionsModule.worker.executeLocal(e.method.worker.executeLocal,r,u).then(function(e){i(e.data)},function(e){p(e)});default:p("No method found from implemented list.")}break;case"participants":var q=["linkParticipants","monthlyAttendance"];switch(propertyExists(e.method.participants,q)){case"linkParticipants":return actionsModule.participants.linkParticipants(e.method.participants.linkParticipants,r,u).then(function(e){i(e.data)},function(e){p(e)});case"monthlyAttendance":return actionsModule.participants.monthlyAttendance(e.method.participants.monthlyAttendance,r,u).then(function(e){i(e.data)},function(e){p(e)});default:p("No method found from implemented list.")}break;default:p("method not defined in configuration")}}else p("No method found from implemented list.")})}function task(e,t,s,i,n){return new Promise(function(t,o){var a=app.SCOPE.workflow,r=s.preActions;preActions(r,a,i).then(function(r){if(void 0!=s.assign.role){var c=a.profile,u="";"current"==s.assign.role.profile?u=a.profile:"community"==s.assign.role.profile&&(u=app.SCOPE.getCommunityId());var p=s.assign.role.roleId;library.getUsersListByRole(u,p).then(function(o){if(void 0!=o)if(o.length>1){var r=!1,d=library.getCurrentUserRoles(),l=d.profile.indexOf(p),f=d.community.indexOf(p),m=d.implicit.indexOf(p),h=d.adoption.indexOf(p),g=d.subprofile.indexOf(p);if(r=l>-1||f>-1||m>-1||h>-1||g>-1){void 0==n.assignmentHistory&&(n.assignmentHistory=[]);var v=n.assignedTo;if(""!=v.userId&&""!=v.name){var S=JSON.parse(JSON.stringify(v));n.assignmentHistory.push(S)}v.name=LOCAL_SETTINGS.SUBSCRIPTIONS.username+"",v.userId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"",v.dateTime=moment().format(),v.type=ASSIGNMENT_TYPE_AUTO,v.dueDateTime="",v.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"";var I=JSON.xpath("/processes[_id eq '"+e+"']/notifications",a.config,{})[0];if(void 0!=I&&void 0!=I.assignment){var b={id:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,name:LOCAL_SETTINGS.SUBSCRIPTIONS.username};actionsModule.notification.assignmentNotification(I,a,i,b).then(function(e){console.log('User assigned successfully. UserId: "'+b.id+'", Name: "'+b.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+b.id+'", Name: "'+b.name+'"')})}}var P="";if(void 0!=s.assign.assignment){var P=n.assignment,y={show:s.assign.assignment.accept.show,label:_getNameByLang(s.assign.assignment.accept.label.i18n)};P.accept=y,P.message=_getNameByLang(s.assign.assignment.message.i18n);var _={show:s.assign.assignment.reject.show,label:_getNameByLang(s.assign.assignment.reject.label.i18n)};P.reject=_;var N={profileId:c,roleId:p,type:"role"};P.value=N,P.profileRoleId=u}if(r){var q=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+i+"']/id",a,{})[0],T=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+i+"']/id",a,{})[0],O=JSON.xpath("/subprocesses[_id eq '"+i+"']/step/id",a,{})[0];JSON.xpath("/processes[_id eq '"+q+"']/subProcesses[_id eq '"+T+"']/steps[_id eq '"+O+"']",a.config,{})[0];if(void 0!=s.preWorkActions){var k=s.preWorkActions;preWorkActions(k,a).then(function(e){t("Assignment is made. Pre work actions found and executed ")},function(e){_(e)})}else t("Assignment is made. No pre work actions found. ")}else{var I=JSON.xpath("/processes[_id eq '"+e+"']/notifications",a.config,{})[0];if(void 0!=I&&void 0!=I.assignmentAcceptance){var b={id:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,name:LOCAL_SETTINGS.SUBSCRIPTIONS.username};actionsModule.notification.acceptanceNotification(I,a,i,p).then(function(e){console.log('User assigned successfully. UserId: "'+b.id+'", Name: "'+b.name+'"'),t("Notifications request submitted for acceptance.")}).catch(function(e){t("Notifications failed"),console.log('User assignment notification failed to user UserId: "'+b.id+'", Name: "'+b.name+'"')})}else t("Notifications not found")}}else if(1==o.length){var A=o[0].id,E=o[0].name;void 0==n.assignmentHistory&&(n.assignmentHistory=[]);var v=n.assignedTo;if(""!=v.userId&&""!=v.name){var S=JSON.parse(JSON.stringify(v));n.assignmentHistory.push(S)}v.name=E+"",v.userId=A+"",v.dateTime=moment().format(),v.type=ASSIGNMENT_TYPE_AUTO,v.dueDateTime="",v.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"";var P="";if(void 0!=s.assign.assignment){var P=n.assignment,y={show:s.assign.assignment.accept.show,label:_getNameByLang(s.assign.assignment.accept.label.i18n)};P.accept=y,P.message=_getNameByLang(s.assign.assignment.message.i18n);var _={show:s.assign.assignment.reject.show,label:_getNameByLang(s.assign.assignment.reject.label.i18n)};P.reject=_;var N={profileId:c,roleId:p,type:"role"};P.value=N,P.profileRoleId=u}var I=JSON.xpath("/processes[_id eq '"+e+"']/notifications",a.config,{})[0];if(void 0!=I&&void 0!=I.assignment){var b={id:A,name:E};actionsModule.notification.assignmentNotification(I,a,i,b).then(function(e){console.log('User assigned successfully. UserId: "'+b.id+'", Name: "'+b.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+b.id+'", Name: "'+b.name+'"')})}var q=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+i+"']/id",a,{})[0],T=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+i+"']/id",a,{})[0],O=JSON.xpath("/subprocesses[_id eq '"+i+"']/step/id",a,{})[0];JSON.xpath("/processes[_id eq '"+q+"']/subProcesses[_id eq '"+T+"']/steps[_id eq '"+O+"']",a.config,{})[0];if(void 0!=s.preWorkActions){var k=s.preWorkActions;preWorkActions(k,a).then(function(e){t("Assigned to the only user in role. Pre work actions executed")},function(e){_(e)})}else t("Assigned to the only user in role. No pre work actions found.")}else{var v=n.assignedTo;v.name="",v.userId="";var P="";if(void 0!=s.assign.assignment){var P=n.assignment,y={show:s.assign.assignment.accept.show,label:_getNameByLang(s.assign.assignment.accept.label.i18n)};P.accept=y,P.message=_getNameByLang(s.assign.assignment.message.i18n);var _={show:s.assign.assignment.reject.show,label:_getNameByLang(s.assign.assignment.reject.label.i18n)};P.reject=_;var N={profileId:c,roleId:p,type:"role"};P.value=N,P.profileRoleId=u}t("No users found in list. Assigning blank ")}else console.log("Error in getUsersListByRole undefined"),_(err)},function(e){console.log("Error in getUsersListByRole"),o(e)})}else void 0!=s.assign.swimlane&&(t("swimlane"),console.log("Swimlane implementation !!"))},function(e){o(e)})})}function server(e,t,s,i,n,o,a,r,c,u){return new Promise(function(p,d){var l=(r.profile,e.serverAction[0]);void 0==a.assignmentHistory&&(a.assignmentHistory=[]);var f=a.assignedTo;if(""!=f.userId&&""!=f.name){var m=JSON.parse(JSON.stringify(f));a.assignmentHistory.push(m)}f.name=LOCAL_SETTINGS.SUBSCRIPTIONS.username+"",f.userId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"",f.dateTime=moment().format(),f.type=ASSIGNMENT_TYPE_AUTO,f.dueDateTime="",f.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"",action(l,t,s,i,n,o,a,r,c,u).then(function(e){p("No users found in list. Assigning blank ")},function(e){d("Server action error found rejected")})})}function transition(e,t,s,i,n,o,a,r,c,u){return new Promise(function(p,d){try{for(var l=0,f="",m=0,h=r.config.processes.filter(function(t){if(t._id==e)return t;
}),g=h[0].subProcesses.filter(function(e){if(e._id==s)return e}),v=g[0].steps.filter(function(e){if(e._id==n)return e}),S=v[0].transition.filter(function(e){if(e._id==o)return e}),I=0;I<g[0].steps.length;I++)g[0].steps[I]._id==n&&(l=parseInt(g[0].steps[I]._seq));g[0].steps.filter(function(e){m=l+1,parseInt(e._seq)==m&&(f=e._id)});var b=g[0].steps.length,P=JSON.xpath("/subprocesses[_id eq '"+c+"']",r,{})[0],y=JSON.xpath("/subprocesses[_id eq '"+c+"']/step",r,{})[0];void 0==P.history&&(P.history=[]);var _=function(e){var t=JSON.xpath("/subprocesses[_id eq '"+c+"']/indicators",r,{}),s=!1;void 0!=t&&0!=t.length||(s=!0,t=JSON.xpath("/indicators[workflows/processes[subProcessUUID eq '"+c+"']]",r,{})),void 0==e.indicators&&(e.indicators=[]);for(var i=0;i<t.length;i++)if(s){var n=t[i]._id,o=JSON.xpath("/indicators[_id eq '"+n+"']/_rev",r,{})[0],a=t[i].model.pending.seq,u=t[i].model.pending.status,p={uuid:n,rev:o,seq:a,status:u};e.indicators.push(p)}else{var n=t[i].instances[0].uuid,o=JSON.xpath("/indicators[_id eq '"+n+"']/_rev",r,{})[0],a=JSON.xpath("/indicators[_id eq '"+n+"']/model/pending/seq",r,{})[0],u=JSON.xpath("/indicators[_id eq '"+n+"']/model/pending/status",r,{})[0],p={uuid:n,rev:o,seq:a,status:u};e.indicators.push(p)}return delete e.assignedTo,delete e.assignment,e},N={transitionId:S[0]._id,dateTime:moment().format(),userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId+""};if(void 0!=u&&Object.keys(u).length>0?u.transition=N:y.transition=N,void 0!=u&&Object.keys(u).length>0){void 0==u.assignmentHistory&&(u.assignmentHistory=[]);var q=JSON.parse(JSON.stringify(u.assignedTo));""!=q.userId&&""!=q.name&&u.assignmentHistory.push(q)}else{void 0==y.assignmentHistory&&(y.assignmentHistory=[]);var q=JSON.parse(JSON.stringify(y.assignedTo));""!=q.userId&&""!=q.name&&y.assignmentHistory.push(q)}var T;T=void 0!=u&&Object.keys(u).length>0?JSON.parse(JSON.stringify(u)):JSON.parse(JSON.stringify(y));var O=_(T);if(P.history.push(O),void 0!=S[0].transitionAction.goToStep){var k=parseInt(v[0]._seq)+parseInt(S[0].transitionAction.goToStep.default),A="";g[0].steps.filter(function(e){parseInt(e._seq)==m&&(A=e._id)}),step(e,t,s,i,A,k,a,r,c).then(function(e){if(k==b){var t=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});p(t)}else{var t=util.success("Step transition completed successfully.",{subProcessComplete:!1,step:e.data});p(t)}},function(e){d(e)})}else if(void 0!=S[0].transitionAction.goToStepId){var E=S[0].transitionAction.goToStepId.stepId,w=1;g[0].steps.filter(function(e){e._id==E&&(w=parseInt(e._seq))}),step(e,t,s,i,E,w,a,r,c).then(function(e){if(w==b||"Complete"==e.data.status){var t=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});p(t)}else{var t=util.success("Step transition completed successfully.",{subProcessComplete:!1,step:e.data});p(t)}},function(e){d(e)})}else if(void 0!=S[0].transitionAction.stop){var x=h[0].postActions;postActions(x,r,c).then(function(e){var t=util.success("Step transition completed successfully.Workflow stopped.",{subProcessComplete:!0,step:u});p(t)},function(e){d(e)})}}catch(e){d(e)}})}function postActions(e,t,s){return new Promise(function(i,n){var o=[];try{var a=JSON.xpath("/subprocesses[_id eq '"+s+"']",t,{})[0],r=a["meta-data"].processConfigId,c=a["meta-data"].subProcessConfigId,u=a["meta-data"].subProcessInsSeq,p=a["meta-data"].subProcessInsSeq,d=JSON.xpath("/config/processes[_id eq '"+r+"']/subProcesses[_id eq '"+c+"']",t,{})[0],l=JSON.xpath("/subprocesses[_id eq '"+s+"']/step",t,{})[0];util.syncLoop(e.length,function(i){var a=i.iteration();action(e[a],r,u,c,p,d,l,t,{},s).then(function(e){o.push(!0),i.next()},function(e){o.push(!1),i.break(),n(e)})},function(){if(o.every(Boolean)){var e=util.success("Post-actions completed successfully.",{});i(e)}else{var t=util.error("WFPreActionsError","Not all post-actions passed.");n(t)}})}catch(e){n(e)}})}function processWorkflowMessage(e,t){var s=e;if(s.indexOf("#INSTANCE_LABEL")!==-1){var i=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+t+"']/label",app.SCOPE.workflow,{})[0];s=s.replace("#INSTANCE_LABEL",i)}if(s.indexOf("#USER_NAME")!==-1){var i=JSON.xpath("/subprocesses[_id eq '"+t+"']/step/assignedTo/name",app.SCOPE.workflow,{})[0];s=s.replace("#USER_NAME",i)}if(s.indexOf("#PROFILE_TITLE")!==-1){var i=app.profile.title;s=s.replace("#PROFILE_TITLE",i)}if(s.indexOf("#PROFILE_TYPE")!==-1){var i=app.SCOPE.APP_CONFIG.name;s=s.replace("#PROFILE_TYPE",i)}if(s.indexOf("#VAR_SPUUID")!==-1){var i=t;s=s.replace("#VAR_SPUUID",i)}return s}function _getName(e,t){if(void 0!==e)for(var s=0;s<e.length;s++)if(e[s]._lang===t)return e[s].value}function _getNameByLang(e){return library.getNameByLang(e)}function preWorkActions(e,t){return new Promise(function(s,i){var n=[];try{var o=JSON.xpath("/config/processes[_id eq '"+app.processID+"']/subProcesses[_id eq '"+app.processId+"']",t,{})[0],a=JSON.xpath("/subprocesses[_id eq '"+app.SCOPE.processUUID+"']/step",t,{})[0];util.syncLoop(e.length,function(s){var r=s.iteration();action(e[r],app.processID,app.processSEQ,app.processId,app.processSeq,o,a,t,{},app.SCOPE.processUUID).then(function(e){n.push(!0),s.next()},function(e){n.push(!1),s.break(),i(e)})},function(){if(n.every(Boolean)){var e=util.success("PreWork-actions completed successfully.",{});s(e)}else{var t=util.error("WFPreActionsError","Not all pre-work-actions passed.");i(t)}})}catch(e){i(e)}})}var util=require("utility"),actionsModule=require("./actions"),helper=require("./helper"),form=require("./form");module.exports={preRequisites:preRequisites,preActions:preActions,postActions:postActions,preWorkActions:preWorkActions,subProcess:subProcess,indicatorDocs:indicatorDocs,task:task,transition:transition,assignUser:assignUser};

},{"./actions":2,"./form":3,"./helper":4,"utility":8}],8:[function(require,module,exports){
"use strict";function success(r,e){return{message:r,data:e}}function warn(r,e){return console.warn(e),{warning:r,data:e}}function error(r,e){var n=new Error("");return n.name=r,n.message=e,n}function syncLoop(r,e,n){var a=0,t=!1,o=!1,u={next:function(){return t&&o&&n?n():void(a<r?(a++,e(u)):(t=!0,n&&n()))},iteration:function(){return a-1},break:function(r){t=!0,o=r}};return u.next(),u}function compare(r,e,n){switch(e){case"greaterThan":return r>n;case"lessThan":return r<n;case"greaterThanEqual":return r>=n;case"lessThanEqual":return r<=n;case"equalTo":return r===n;case"notEqualTo":return r!==n}}function getName(r,e){if(void 0!==r)for(var n=0;n<r.length;n++)if(r[n].i18n._lang===e)return r[n].i18n.value}module.exports={success:success,warn:warn,error:error,syncLoop:syncLoop,compare:compare,getName:getName};

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
