(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Workflow = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function Workflow(e,s,r){var t=this;if(""===e||void 0===e)throw util.error("ParamRequired","A profile id is required.");if("string"!=typeof e)throw new Error("The profile id must be a javascript string.");if(t.profile=e||"",""===s||void 0===s)throw util.error("ParamRequired","An app id is required.");if("string"!=typeof s)throw new Error("The app id must be a javascript string.");if(t.app=s||"",""===r||void 0===r)throw util.error("ParamRequired","A workflow configuration is required.");"object"!=typeof r?t.config=JSON.parse(r):t.config=r,t.instance,t.subprocesses=[],t.indicators=[],t.history=[]}var Process=require("./lib/process"),util=require("utility"),userInterface=require("./lib/interface");Workflow.prototype.getProfile=function(){return this.profile},Workflow.prototype.getApp=function(){return this.app},Workflow.prototype.getConfig=function(){return this.config},Workflow.prototype.getInstance=function(){return this.instance},Workflow.prototype.setInstance=function(e){this.instance=e},Workflow.prototype.getSubProcesses=function(){return this.subprocesses},Workflow.prototype.setSubProcesses=function(e){this.subprocesses=e},Workflow.prototype.getIndicators=function(){return this.indicators},Workflow.prototype.setIndicators=function(e){this.indicators=e},Workflow.prototype.create=function(){var e=this;return new Promise(function(s,r){try{if(void 0!==e.instance){var t=util.warn("Instance already exists.",e);s(t)}else{var o={_id:"",version:"",type:"workflowInstance",processes:[]};o._id=e.profile+":processes",o.version=e.config.version,e.instance=o;var i=util.success("Workflow processes instance created successfully.",e);s(i)}}catch(e){r(e)}})},Workflow.prototype.initialise=function(e,s){var r=this;return new Promise(function(t,o){try{var i=[];if(""!==e&&void 0!==e){if(i=r.config.processes.filter(function(s){if(s._id===e)return s}),void 0===i[0]._id){var n=util.error("WFConfigError","No valid process definition found with process id: "+e);o(n)}}else i.push(r.config.processes[0]),e=r.config.processes[0]._id;var c=[];r.instance.processes.filter(function(s){s.id===e&&c.push(s)});var u=c.length+1,f={id:"",seq:"",subProcesses:[]};f.id=e,f.seq=u,r.instance.processes.push(f);var a=i[0].subProcesses[0]._id,p=1;r.instance.processes.filter(function(s){s.id===e&&s.seq===u&&(p=s.subProcesses.length+1)}),Process.subProcess(e,u,a,p,s,r).then(function(s){var i=r.profile+":"+r.app+":"+e+":"+u+":"+a+":"+p,n={id:a,seq:p,uuid:i};f.subProcesses.push(n),r.subprocesses.push(s.data);for(var c=0;c<r.instance.processes.length;c++){var l=r.instance.processes[c];l.id===e&&l.seq===u&&r.instance.processes.splice(c,1,f)}var d=s.data.indicators,h=s.data.step;Process.indicatorDocs(e,d,h,r).then(function(e){var s=util.success("Process: "+r.config.processes[0]._id+" initialized successfully.",r);t(s)},function(e){o(e)})},function(e){o(e)})}catch(e){o(e)}})},Workflow.prototype.transition=function(e,s,r,t,o,i,n){var c=this;return new Promise(function(u,f){try{Process.transition(e,s,r,t,o,i,n,c).then(function(o){var i=function(i){c.instance.processes.filter(function(n){n.id===e&&n.seq===s&&n.subProcesses.filter(function(e){e.id===r&&e.seq===t&&c.subprocesses.filter(function(s){if(s._id===e.uuid)if("step"===i){s.step=o.data;var r=util.success(o.message,s);u(r)}else if("stepComplete"===i){s.step=o.data.step,s.complete=!0;var r=util.success(o.message,s);u(r)}})})})};i(o.data.subProcessComplete?"stepComplete":"step")},function(e){f(e)})}catch(e){f(e)}})},Workflow.prototype.assignUser=function(e,s,r,t,o){var i=this;return new Promise(function(n,c){try{Process.assignUser(e,s,r,t,o,i).then(function(e){n(e)},function(e){c(e)})}catch(e){c(e)}})},Workflow.prototype.ui=function(){var e=this;return{getProcess:function(s,r){return new Promise(function(t,o){try{userInterface.getProcess(s,r,e).then(function(e){t(e)},function(e){o(e)})}catch(e){o(e)}})}}},module.exports=Workflow;

},{"./lib/interface":3,"./lib/process":4,"utility":5}],2:[function(require,module,exports){
"use strict";function create(e){var s=e[0]||"",t=e[1]||{},i=t.indicators||[],c=e[3]||{},r=e[2]||{};return new Promise(function(e,u){util.syncLoop(i.length,function(e){var u=e.iteration(),n=i[u]._id,a=util.getName(i[u].name,"en"),o=c.profile+":"+c.app+":"+n+":0",l={_id:o,title:a,category:{term:n,label:a},workflows:[{id:c.config._id,instance:c.instance._id,processes:[{id:s,subProcessId:t._id,step:{id:r.id,seq:r.seq,startDate:"",status:r.status,message:r.message,assignedTo:{userId:r.assignedTo.userId,name:r.assignedTo.name},comment:r.comment,complete:!1,endDate:""}}]}]};c.indicators.push(l),e.next()},function(){var s=util.success("Form created successfully.",c.indicators);e(s)})})}function save(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var i=util.success("Form indicator set saved successfully.",s);e(i)})}function submit(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var i=util.success("Form submitted successfully.",s);e(i)})}function authorise(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var i=util.success("Form authorised successfully.",s);e(i)})}function close(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var i=util.success("Form closed successfully.",s);e(i)})}var util=require("utility");module.exports={create:create,save:save,submit:submit,authorise:authorise,close:close};

},{"utility":5}],3:[function(require,module,exports){
"use strict";function getProcess(e,s,t){return new Promise(function(n,i){try{var c=[],r=[];t.instance.processes.filter(function(s){s.id===e&&(r=s)}),util.syncLoop(r.subProcesses.length,function(n){var o=n.iteration(),u=r.seq,f=r.subProcesses[o].id,a=r.subProcesses[o].seq;getSubProcess(e,u,f,a,s,t).then(function(e){c.push(e),n.next()},function(e){n.break(),i(e)})},function(){n(c)})}catch(e){i(e)}})}function getSubProcess(e,s,t,n,i,c){return new Promise(function(r,o){try{var u={id:"",seq:"",name:"",help:"",dates:"",step:""},f=[],a=[];c.instance.processes.filter(function(i){if(i.id===e&&i.seq===s){i.subProcesses.length;i.subProcesses.filter(function(e){e.id===t&&e.seq===n&&e.complete===!1&&(f=e)})}}),c.config.processes.filter(function(s){s._id===e&&s.subProcesses.filter(function(e){e._id===t&&(a=e)})}),u.id=a._id,u.seq=f.seq,u.name=util.getName(a.name,i),u.help=util.getName(a.help,i),u.dates=f.dates,u.step=f.step,r(u)}catch(e){o(e)}})}var util=require("utility");module.exports={getProcess:getProcess};

},{"utility":5}],4:[function(require,module,exports){
"use strict";function count(e){return void 0!==e?e.length:0}function preRequisites(e,t){return new Promise(function(s,i){var n=[];try{util.syncLoop(e.length,function(s){var r=s.iteration();preRequisite(e[r],t).then(function(e){n.push(!0),s.next()},function(e){n.push(!1),s.break(),i(e)})},function(){if(n.every(Boolean)){var e=util.success("Pre-requisites completed successfully.",{});s(e)}else{var t=util.error("WFPreRequisiteError","Not all pre-requisites passed.");i(t)}})}catch(e){i(e)}})}function preRequisite(e,t){return new Promise(function(s,i){switch(e._type){case"processInstances":try{var n=e._parameter,r=count(getSubProcess(n,t)),o=util.compare(r,e._operator,parseInt(e._value));if(o){var a=util.success("Pre-requisites passed.",{});s(a)}else{var c="";e.message.i18n.filter(function(e){if("en"===e._lang){c=e.value;var t=util.error("WFPreRequisiteError",c);i(t)}})}}catch(e){i(e)}default:var u=util.error("WFPreRequisiteError","Pre-requisite type: "+e._type+" not defined.");i(u)}})}function preActions(e,t){return new Promise(function(s,i){var n=[];try{util.syncLoop(e.length,function(s){var r=s.iteration();action(e[r],t).then(function(e){n.push(!0),s.next()},function(e){n.push(!1),s.break(),i(e)})},function(){if(n.every(Boolean)){var e=util.success("Pre-requisites completed successfully.",{});s(e)}else{var t=util.error("WFPreRequisiteError","Not all pre-requisites passed.");i(t)}})}catch(e){i(e)}})}function getSubProcess(e,t){return void 0===t.subprocesses?[]:void t.subprocesses.filter(function(t){if(t.id===e)return t})}function subProcess(e,t,s,i,n,r){var o=[],a=[],c=[];r.instance.processes.filter(function(n){if(n.id===e&&n.seq===t){n.subProcesses.length;n.subProcesses.filter(function(e){if(e.id===s&&e.seq===i){var t=e.uuid;r.subprocesses.filter(function(e){e._id===t&&(o=e)})}})}}),r.config.processes.filter(function(t){t._id===e&&(a=t,t.subProcesses.filter(function(e){e._id===s&&(c=e)}))});var u={_id:r.profile+":"+r.app+":"+e+":"+t+":"+s+":"+i,id:s,type:"workflowInstanceSubProcess",seq:i,initiated:!1,dates:{created:"",valid:"",due:"",closed:""},complete:!1,indicators:[],step:{}};return new Promise(function(d,l){try{var f=a.prerequisites;preRequisites(f,r).then(function(a){var f=c.initiate;initiate(f,o,n).then(function(o){u.initiated=o.data.initiated,u.dates=o.data.dates;var a=c.steps[0]._id,f=c.steps[0].transitions[0]._id,p=1;step(e,t,s,i,a,p,n,r).then(function(o){u.step=o.data,indicators(c.indicators,r).then(function(o){u.indicators=o.data,transition(e,t,s,i,a,f,n,r).then(function(e){u.step=e.data;var t=util.success(e.message,u);d(t)},function(e){l(e)})},function(e){l(e)})},function(e){l(e)})},function(e){l(e)})},function(e){l(e)})}catch(e){l(e)}})}function initiate(e,t,s){var i={initiated:!1,dates:{created:"",valid:"",due:"",closed:""}};return new Promise(function(n,r){var o=function(){switch(e._type){case"user":if(i.dates.created=s.createdDate,"userSelected"===e.dates.valid._type)if(void 0!==s.validDate)i.dates.valid=s.validDate;else{var t=util.error("WFInitiateError","No valid date passed in - {inputData.validDate}");r(t)}if("userSelected"===e.dates.due._type)if(void 0!==s.dueDate)i.dates.due=s.dueDate;else{var t=util.error("WFInitiateError","No due date passed in - {inputData.dueDate}");r(t)}i.initiated=!0;var o=util.success("Sub-Process initiate completed successfully.",i);n(o);break;default:var t=util.error("WFInitiateError","Initiate type: "+e._type+" not defined.");r(t)}};if(void 0===t.complete)o();else if(!t.complete)if(e.parallelInstances)o();else{var a=util.error("WFInitiateError","Sub-process: "+t.id+" still active and parallel instances are not allowed.");r(a)}})}function step(e,t,s,i,n,r,o,a){var c,u={id:"",seq:"",status:"",message:"",assignedTo:{userId:"",name:""},comment:""},d={},l="",f={};return new Promise(function(p,v){try{a.instance.processes.filter(function(n){n.id===e&&n.seq===t&&n.subProcesses.filter(function(e){e.id===s&&e.seq===i&&(l=e.uuid)})}),a.subprocesses.filter(function(e){e._id===l&&(c=e)}),a.config.processes.filter(function(t){t._id===e&&t.subProcesses.filter(function(e){e._id===s&&(d=e,e.steps.filter(function(e){e._id===n&&(f=e)}))})}),u.id=n,u.seq=r,u.status=f._setInstanceStatusTo,u.message=f._setStatusMsgTo,u.assignedTo.userId=void 0!==o.userId?o.userId:"",u.assignedTo.name=void 0!==o.name?o.name:"",u.comment=void 0!==o.comment?o.comment:"";var m=void 0!==c?c.indicators:[];indicatorDocs(e,m,u,a).then(function(n){if(void 0!==f.actions[0])actions(f.actions,e,t,s,i,d,u,a).then(function(e){var t=util.success("Actions completed successfully.",u);p(t)},function(e){v(e)});else if(void 0!==f.task){var r=util.success("Task awaiting user action.",u);p(r)}},function(e){v(e)})}catch(e){v(e)}})}function indicators(e,t){var s=[];return new Promise(function(i,n){try{for(var r=0;r<e.length;r++)for(var o=e[r]._id,a=0;a<t.indicators.length;a++){var c=t.indicators[a],u={id:"",instances:[]},d={uuid:"",title:"",key:"",seq:1};o===c.category.term&&(u.id=o,d.uuid=c._id,d.title=c.title,d.key="",d.seq=1,u.instances.push(d),s.push(u))}var l=util.success("Process indicator model updated.",s);i(l)}catch(e){n(e)}})}function assignUser(e,t,s,i,n,r){return new Promise(function(o,a){try{var c="";r.instance.processes.filter(function(n){n.id===e&&n.seq===t&&n.subProcesses.filter(function(e){e.id===s&&e.seq===i&&(c=e.uuid)})}),r.subprocesses.filter(function(t){if(t._id===c){t.step.assignedTo.userId=n.id,t.step.assignedTo.name=n.name;for(var s=t.indicators,i=0;i<s.length;i++)for(var a=s[i],u=0;u<a.instances.length;u++)for(var d=a.instances[u],l=0;l<r.indicators.length;l++){var f=r.indicators[l];d.uuid===f._id&&f.workflows.filter(function(t){t.id===r.config._id&&t.processes.filter(function(t){t.id===e&&(t.step.assignedTo.userId=n.id,t.step.assignedTo.name=n.name)})})}var p=util.success('User assigned successfully. UserId: "'+n.id+'", Name: "'+n.name+'"',t);o(p)}})}catch(e){a(e)}})}function indicatorDocs(e,t,s,i){return new Promise(function(n,r){try{if(void 0===t){util.error("WFIndicatorsUpdate","Indicators parameter is required. - Value: "+t);r(err)}else{for(var o=0;o<t.length;o++)for(var a=t[o],c=0;c<a.instances.length;c++)for(var u=a.instances[c],d=0;d<i.indicators.length;d++){var l=i.indicators[d];u.uuid===l._id&&l.workflows.filter(function(t){t.id===i.config._id&&t.processes.filter(function(t){t.id===e&&(t.step.id=s.id,t.step.seq=s.seq,t.step.status=s.status,t.step.message=s.message,t.step.assignedTo.userId=s.assignedTo.userId,t.step.assignedTo.name=s.assignedTo.name,t.step.comment=void 0!==s.comment?s.comment:"")})})}var f=util.success("Indicator documents workflow process model updated.",i);n(f)}}catch(e){r(e)}})}function actions(e,t,s,i,n,r,o,a){var c=[];return new Promise(function(u,d){util.syncLoop(e.length,function(u){var l=u.iteration();action(e[l],t,s,i,n,r,o,a).then(function(t){var s={id:e[l]._id,seq:l,data:t};c.push(s),u.next()},function(e){u.break(),d(e)})},function(){var e=util.success("Actions completed successfully.",c);u(e)})})}function action(e,t,s,i,n,r,o,a){return new Promise(function(c,u){var d=[],l="global",f="";void 0!==e._id&&(l=e._id.split(".")[0]),void 0!==e._id&&(f=e._id.split(".")[1]),d.length=0;for(var p=0;p<e._args.length;p++){var v=e._args[p];switch(v){case"processId":d.push(t);break;case"processSeq":d.push(s);break;case"subProcessId":d.push(i);break;case"subProcessSeq":d.push(n);break;case"subProcess":d.push(r);break;case"step":d.push(o);break;default:d=[]}}if(d.push(a),"form.create"===e._id)form.create(d).then(function(e){c(e.data)},function(e){u(e)});else if("form.authorise"===e._id)form.authorise(d).then(function(e){c(e.data)},function(e){u(e)});else if("form.close"===e._id)form.close(d).then(function(e){c(e.data)},function(e){u(e)});else{var m=util.error("WFActionError","Method: "+action_id+" not defined.");u(m)}})}function task(e){return"Implementation pending.."}function transition(e,t,s,i,n,r,o,a){return new Promise(function(c,u){try{for(var d=0,l="",f=0,p=[],v=a.config.processes.filter(function(t){if(t._id===e)return t}),m=v[0].subProcesses.filter(function(e){if(e._id===s)return e}),h=m[0].steps.filter(function(e){if(e._id===n)return e}),g=h[0].transitions.filter(function(e){if(e._id===r)return e}),_=0;_<m[0].steps.length;_++)m[0].steps[_]._id===n&&(d=parseInt(m[0].steps[_]._seq));m[0].steps.filter(function(e){f=d+1,parseInt(e._seq)===f&&(l=e._id)}),a.instance.processes.filter(function(n){n.id===e&&n.seq===t&&n.subProcesses.filter(function(e){if(e.id===s&&e.seq===i){var t=e.uuid;a.subprocesses.filter(function(e){e._id===t&&(p=e)})}})});var y=m[0].steps.length;switch(g[0]._type){case"auto":"nextStep"===g[0].goTo._type&&step(e,t,s,i,l,f,o,a).then(function(e){if(f===y){var t=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});c(t)}else{var t=util.success("Step transition completed successfully.",e.data);c(t)}var t=util.success("Step transition completed successfully.",e.data);c(t)},function(e){u(e)});break;case"user":if("nextStep"===g[0].goTo._type)step(e,t,s,i,l,f,o,a).then(function(e){if(f===y){var t=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});c(t)}else{var t=util.success("Step transition completed successfully.",e.data);c(t)}var t=util.success("Step transition completed successfully.",e.data);c(t)},function(e){u(e)});else if("stepId"===g[0].goTo._type){var P=g[0].goTo._stepId,b=1;m[0].steps.filter(function(e){e._id===P&&(b=parseInt(e._seq))}),step(e,t,s,i,P,b,o,a).then(function(e){if(b===y){var t=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});c(t)}else{var t=util.success("Step transition completed successfully.",e.data);c(t)}var t=util.success("Step transition completed successfully.",e.data);c(t)},function(e){u(e)})}break;default:var q=util.error("WFTransitionError","Transition type: "+g[0]._type+" not defined.");u(q)}}catch(e){u(e)}})}function postActions(e){return"Implementation pending.."}var util=require("utility"),form=require("./form");module.exports={preRequisites:preRequisites,preActions:preActions,subProcess:subProcess,indicatorDocs:indicatorDocs,task:task,transition:transition,assignUser:assignUser};

},{"./form":2,"utility":5}],5:[function(require,module,exports){
"use strict";function success(r,e){return{message:r,data:e}}function warn(r,e){return console.warn(e),{warning:r,data:e}}function error(r,e){var n=new Error("");return n.name=r,n.message=e,n}function syncLoop(r,e,n){var a=0,t=!1,o=!1,u={next:function(){return t&&o&&n?n():void(a<r?(a++,e(u)):(t=!0,n&&n()))},iteration:function(){return a-1},break:function(r){t=!0,o=r}};return u.next(),u}function compare(r,e,n){switch(e){case"greaterThan":return r>n;case"lessThan":return r<n;case"greaterThanEqual":return r>=n;case"lessThanEqual":return r<=n;case"equalTo":return r===n;case"notEqualTo":return r!==n}}function getName(r,e){if(void 0!==r)for(var n=0;n<r.length;n++)if(r[n].i18n._lang===e)return r[n].i18n.value}module.exports={success:success,warn:warn,error:error,syncLoop:syncLoop,compare:compare,getName:getName};

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
