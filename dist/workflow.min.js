(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Workflow = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function Workflow(e,s,i,r){var o=this;if(""===e||void 0===e)throw util.error("ParamRequired","A profile id is required.");if("string"!=typeof e)throw new Error("The profile id must be a javascript string.");if(o.profile=e||"",""===s||void 0===s)throw util.error("ParamRequired","An app id is required.");if("string"!=typeof s)throw new Error("The app id must be a javascript string.");if(o.app=s||"",""===i||void 0===i)throw util.error("ParamRequired","A workflow configuration is required.");"object"!=typeof i?o.config=JSON.parse(i):o.config=i,o.instance=r,o.indicators=[]}var Process=require("./lib/process"),util=require("./lib/utility");Workflow.prototype.create=function(){var e=this;return new Promise(function(s,i){try{if(void 0!==e.instance){var r=util.warn("Instance already exists.",e);s(r)}else{var o={_id:"",version:"",type:"workflowInstance",processes:[]};o._id=e.profile+":processes",o.version=e.config.version,e.instance=o;var t=util.success("Workflow processes instance created successfully.",e);s(t)}}catch(n){i(n)}})},Workflow.prototype.initialise=function(e,s){var i=this;return new Promise(function(r,o){try{var t=[];if(""!==e&&void 0!==e){if(t=i.config.processes.filter(function(s){return s._id===e?s:void 0}),void 0===t[0]._id){var n=util.error("WFConfigError","No valid process definition found with process id: "+e);o(n)}}else t.push(i.config.processes[0]),e=i.config.processes[0]._id;var c=[];i.instance.processes.filter(function(s){s.id===e&&c.push(s)});var a=0===c.length?1:c.length,u={id:"",seq:"",subProcesses:[]};u.id=e,u.seq=a,i.instance.processes.push(u);var f=t[0].subProcesses[0]._id,p=1;i.instance.processes.filter(function(s){s.id===e&&s.seq===a&&(p=s.subProcesses.length+1)}),Process.subProcess(e,a,f,p,s,i).then(function(e){u.subProcesses.push(e.data),i.instance.processes.push(u);var s=util.success("Process: "+i.config.processes[0]._id+" initialized successfully.",i);r(s)},function(e){o(e)})}catch(l){o(l)}})},Workflow.prototype.transition=function(e,s,i,r,o,t,n){var c=this;return new Promise(function(a,u){try{Process.transition(e,s,i,r,o,t,n,c).then(function(o){var t=function(t){c.instance.processes.filter(function(n){n.id===e&&n.seq===s&&n.subProcesses.filter(function(e){if(e.id===i&&e.seq===r)if("step"===t){e.step=o.data;var s=util.success(o.message,e);a(s)}else if("stepComplete"===t){e.step=o.data.step,e.complete=!0;var s=util.success(o.message,e);a(s)}})})};t(o.data.subProcessComplete?"stepComplete":"step")},function(e){u(e)})}catch(f){u(f)}})},Workflow.prototype.runTask=function(e,s){return new Promise(function(e,s){try{e("Success")}catch(i){s(i)}})},module.exports=Workflow;

},{"./lib/process":3,"./lib/utility":4}],2:[function(require,module,exports){
"use strict";function create(e){var s=(e[0]||[],e[1]||{},[]);return new Promise(function(e,t){var u=util.success("Form indicator set saved successfully.",s);e(u)})}function save(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var u=util.success("Form indicator set saved successfully.",s);e(u)})}function submit(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var u=util.success("Form submitted successfully.",s);e(u)})}function authorise(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var u=util.success("Form authorised successfully.",s);e(u)})}function close(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var u=util.success("Form closed successfully.",s);e(u)})}var util=require("./utility");module.exports={create:create,save:save,submit:submit,authorise:authorise,close:close};

},{"./utility":4}],3:[function(require,module,exports){
"use strict";function preRequisites(e){return new Promise(function(e,t){var s=util.success("Pre-requisites completed successfully.",{});e(s)})}function preRequisite(e,t,s){return new Promise(function(t,s){switch(e._type){default:var i=util.error("WFPreRequisiteError","Pre-requisite type: "+e._type+" not defined.");s(i)}})}function preActions(e,t){return new Promise(function(e,t){var s=util.success("Pre-actions completed successfully.",{});e(s)})}function subProcess(e,t,s,i,n,r){var o=[],a=[];r.instance.processes.filter(function(n){if(n.id===e&&n.seq===t){n.subProcesses.length;n.subProcesses.filter(function(e){e.id===s&&e.seq===i&&(o=e)})}}),r.config.processes.filter(function(t){if(t._id===e){t.subProcesses.filter(function(e){e._id===s&&(a=e)})}});var c={id:s,seq:i,initiated:!1,dates:{created:"",valid:"",due:"",closed:""},complete:!1,indicators:[],step:{}};return new Promise(function(u,l){try{var d=a.initiate;initiate(d,o,n).then(function(o){c.initiated=o.data.initiated,c.dates=o.data.dates;var d=a.steps[0]._id,f=a.steps[0].transitions[0]._id,p=1;step(e,s,d,p,n,r).then(function(o){c.step=o.data,transition(e,t,s,i,d,f,n,r).then(function(e){c.step=e.data;var t=util.success(e.message,c);u(t)},function(e){l(e)})},function(e){l(e)})},function(e){l(e)})}catch(f){l(f)}})}function initiate(e,t,s){var i={initiated:!1,dates:{created:"",valid:"",due:"",closed:""}};return new Promise(function(n,r){var o=function(){switch(e._type){case"user":if(i.dates.created=s.createdDate,"userSelected"===e.dates.valid._type)if(void 0!==s.validDate)i.dates.valid=s.validDate;else{var t=util.error("WFInitiateError","No valid date passed in - {inputData.validDate}");r(t)}if("userSelected"===e.dates.due._type)if(void 0!==s.dueDate)i.dates.due=s.dueDate;else{var t=util.error("WFInitiateError","No due date passed in - {inputData.dueDate}");r(t)}i.initiated=!0;var o=util.success("Sub-Process initiate completed successfully.",i);n(o);break;default:var t=util.error("WFInitiateError","Initiate type: "+e._type+" not defined.");r(t)}};if(void 0===t.complete)o();else if(!t.complete)if(e.parallelInstances)o();else{var a=util.error("WFInitiateError","Sub-process: "+t.id+" still active and parallel instances are not allowed.");r(a)}})}function step(e,t,s,i,n,r){var o={id:"",seq:"",status:"",message:"",assignedTo:{userId:"",name:""},comment:""},a={},c={};return new Promise(function(u,l){try{if(r.config.processes.filter(function(i){i._id===e&&i.subProcesses.filter(function(e){e._id===t&&(a=e,e.steps.filter(function(e){e._id===s&&(c=e)}))})}),o.id=s,o.seq=i,o.status=c._setInstanceStatusTo,o.message=c._setStatusMsgTo,o.assignedTo.userId=n.userId,o.assignedTo.name=n.name,o.comment=void 0!==n.comment?n.comment:"",void 0!==c.actions[0])actions(c.actions,a,r).then(function(e){var t=util.success("Actions completed successfully.",o);u(t)},function(e){l(e)});else if(void 0!==c.task){var d=util.success("Task awaiting user action.",o);u(d)}}catch(f){l(f)}})}function actions(e,t,s){var i=[];return new Promise(function(n,r){util.syncLoop(e.length,function(n){var o=n.iteration();action(e[o],t,s).then(function(t){var s={id:e[o]._id,seq:o,data:t};i.push(s),n.next()},function(e){n["break"](),r(e)})},function(){var e=util.success("Actions completed successfully.",i);n(e)})})}function action(e,t,s){return new Promise(function(i,n){var r=[],o="global",a="";void 0!==e._id&&(o=e._id.split(".")[0]),void 0!==e._id&&(a=e._id.split(".")[1]);for(var c=0;c<e._args.length;c++){var u=e._args[c];switch(u){case"subProcess.indicators":r.push(t.indicators),r.push(s);break;default:r=[]}}if("form"===o)form[a](r).then(function(e){i(e.data)},function(e){n(e)});else{var l=util.error("WFActionError","Module: "+o+" not defined.");n(l)}})}function task(e){return"Implementation pending.."}function transition(e,t,s,i,n,r,o,a){return new Promise(function(c,u){try{for(var l=0,d="",f=0,p=[],v=a.config.processes.filter(function(t){return t._id===e?t:void 0}),m=v[0].subProcesses.filter(function(e){return e._id===s?e:void 0}),_=m[0].steps.filter(function(e){return e._id===n?e:void 0}),y=_[0].transitions.filter(function(e){return e._id===r?e:void 0}),h=0;h<m[0].steps.length;h++)m[0].steps[h]._id===n&&(l=parseInt(m[0].steps[h]._seq));m[0].steps.filter(function(e){f=l+1,parseInt(e._seq)===f&&(d=e._id)}),a.instance.processes.filter(function(n){n.id===e&&n.seq===t&&n.subProcesses.filter(function(e){e.id===s&&e.seq===i&&(p=e)})});var P=m[0].steps.length;switch(y[0]._type){case"auto":"nextStep"===y[0].goTo._type&&step(e,s,d,f,o,a).then(function(e){if(f===P){var t=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});c(t)}else{var t=util.success("Step transition completed successfully.",e.data);c(t)}var t=util.success("Step transition completed successfully.",e.data);c(t)},function(e){u(e)});break;case"user":if("nextStep"===y[0].goTo._type)step(e,s,d,f,o,a).then(function(e){if(f===P){var t=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});c(t)}else{var t=util.success("Step transition completed successfully.",e.data);c(t)}var t=util.success("Step transition completed successfully.",e.data);c(t)},function(e){u(e)});else if("stepId"===y[0].goTo._type){var g=y[0].goTo._stepId,b=1;m[0].steps.filter(function(e){e._id===g&&(b=parseInt(e._seq))}),step(e,s,g,b,o,a).then(function(e){if(b===P){var t=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});c(t)}else{var t=util.success("Step transition completed successfully.",e.data);c(t)}var t=util.success("Step transition completed successfully.",e.data);c(t)},function(e){u(e)})}break;default:var q=util.error("WFTransitionError","Transition type: "+y[0]._type+" not defined.");u(q)}}catch(I){u(I)}})}function postActions(e){return"Implementation pending.."}var util=require("./utility"),form=require("./form");module.exports={preRequisites:preRequisites,preActions:preActions,subProcess:subProcess,task:task,transition:transition};

},{"./form":2,"./utility":4}],4:[function(require,module,exports){
"use strict";function success(r,e){return{message:r,data:e}}function warn(r,e){return console.warn(e),{warning:r,data:e}}function error(r,e){var n=new Error("");return n.name=r,n.message=e,n}function syncLoop(r,e,n){var a=0,t=!1,o=!1,s={next:function(){return t&&o&&n?n():void(r>a?(a++,e(s)):(t=!0,n&&n()))},iteration:function(){return a-1},"break":function(r){t=!0,o=r}};return s.next(),s}function compare(r,e,n){switch(e){case"greaterThan":return r>n;case"lessThan":return n>r;case"greaterThanEqual":return r>=n;case"lessThanEqual":return n>=r;case"equalTo":return r===n;case"notEqualTo":return r!==n}}var form=require("./form");module.exports={success:success,warn:warn,error:error,syncLoop:syncLoop,compare:compare};

},{"./form":2}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
