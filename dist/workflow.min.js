(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Workflow = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function Workflow(e,s,r,i){var t=this;if(""==s||void 0==s)throw util.error("ParamRequired","A community id is required.");if("string"!=typeof s)throw new Error("The community id must be a javascript string.");if(t.communityId=s||"",""==e||void 0==e)throw util.error("ParamRequired","A profile id is required.");if("string"!=typeof e)throw new Error("The profile id must be a javascript string.");if(t.profile=e||"",""==r||void 0==r)throw util.error("ParamRequired","An app id is required.");if("string"!=typeof r)throw new Error("The app id must be a javascript string.");if(t.app=r||"",""==i||void 0==i)throw util.error("ParamRequired","A workflow configuration is required.");"object"!=typeof i?t.config=JSON.parse(i):t.config=i,t.instance,t.subprocesses=[],t.indicators=[],t.history=[]}var Process=require("./lib/process"),util=require("utility"),userInterface=require("./lib/interface");Workflow.prototype.getProfile=function(){return this.profile},Workflow.prototype.getApp=function(){return this.app},Workflow.prototype.getConfig=function(){return this.config},Workflow.prototype.getInstance=function(){return this.instance},Workflow.prototype.setInstance=function(e){this.instance=e},Workflow.prototype.getSubProcesses=function(){return this.subprocesses},Workflow.prototype.setSubProcesses=function(e){this.subprocesses=e},Workflow.prototype.getIndicators=function(){return this.indicators},Workflow.prototype.setIndicators=function(e){this.indicators=e},Workflow.prototype.create=function(){var e=this;return new Promise(function(s,r){try{if(void 0!==e.instance){var i=util.warn("Instance already exists.",e);s(i)}else{var t={_id:"",version:"",type:"workflowInstance",processes:[],channels:["community_"+app.SCOPE.communityId,"profile_"+app.SCOPE.profileId,"application_"+app.SCOPE.applicationId,"community_"+app.SCOPE.communityId+"_application_"+app.SCOPE.applicationId]};t._id=e.profile+":processes",t.version=e.config.version,e.instance=t;var o=util.success("Workflow processes instance created successfully.",e);s(o)}}catch(e){r(e)}})},Workflow.prototype.initialise=function(e,s){var r=this;return new Promise(function(i,t){try{var o=[];if(""!==e&&void 0!==e){if(o=r.config.processes.filter(function(s){if(s._id==e)return s}),void 0==o[0]._id){var n=util.error("WFConfigError","No valid process definition found with process id: "+e);t(n)}}else o.push(r.config.processes[0]),e=r.config.processes[0]._id;var c=[];r.instance.processes.filter(function(s){s.id==e&&c.push(s)});var u=c.length+1,a={id:"",seq:"",subProcesses:[]};a.id=e,a.seq=u,r.instance.processes.push(a);var p=o[0].subProcesses[0]._id,f=1;r.instance.processes.filter(function(s){s.id==e&&s.seq==u&&(f=s.subProcesses.length+1)}),Process.subProcess(e,u,p,f,s,r).then(function(o){var n=r.profile+":"+r.app+":"+e+":"+u+":"+p+":"+f,c=s.label,l={id:p,seq:f,uuid:n,label:c};a.subProcesses.push(l);for(var d=0;d<r.instance.processes.length;d++){var h=r.instance.processes[d];h.id==e&&h.seq==u&&r.instance.processes.splice(d,1,a)}var w=o.data.indicators,v=o.data.step;Process.indicatorDocs(e,w,v,r).then(function(e){var s=util.success("Process: "+r.config.processes[0]._id+" initialized successfully.",r);i(s)},function(e){t(e)})},function(s){r.instance.processes=r.instance.processes.filter(function(s){return!(s.id==e&&s.seq==u)}),console.log(s),t(s)})}catch(e){t(e)}})},Workflow.prototype.transition=function(e,s,r,i,t,o,n){var c=this;return new Promise(function(u,a){try{Process.transition(e,s,r,i,t,o,n,c).then(function(t){var o=function(o){c.instance.processes.filter(function(n){n.id==e&&n.seq==s&&n.subProcesses.filter(function(e){e.id==r&&e.seq==i&&c.subprocesses.filter(function(s){if(s._id==e.uuid)if("step"==o){s.step=t.data;var r=util.success(t.message,s);u(r)}else if("stepComplete"==o){s.step=t.data.step,s.complete=!0;var r=util.success(t.message,s);u(r)}})})})};o(t.data.subProcessComplete?"stepComplete":"step")},function(e){a(e)})}catch(e){a(e)}})},Workflow.prototype.assignUser=function(e,s,r,i,t){var o=this;return new Promise(function(n,c){try{Process.assignUser(e,s,r,i,t,o).then(function(e){n(e)},function(e){c(e)})}catch(e){c(e)}})},Workflow.prototype.ui=function(){var e=this;return{getProcess:function(s,r){return new Promise(function(i,t){try{userInterface.getProcess(s,r,e).then(function(e){i(e)},function(e){t(e)})}catch(e){t(e)}})}}},module.exports=Workflow;

},{"./lib/interface":4,"./lib/process":6,"utility":7}],2:[function(require,module,exports){
"use strict";var util=require("utility"),nodeValue=require("./nodeValue"),community=function(){return{createCommunity:function(e,i,t){return new Promise(function(e,i){var n=worker.getWorkerWrapper();n._id=generateUUID(),n.communityId=app.SCOPE.communityId,n.applicationId=app.SCOPE.applicationId,n.createdDateTime=(new Date).toString(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var o=JSON.xpath("/indicators[category/term eq 'Community']/_id",t,{})[0],r={createCommunity:{newCommunityId:t.profile,indicatorUUID:{Community:o}}};n.action=r,worker.send(n).then(function(i){var t=util.success("Worker processed successfully.",i);e(t)},function(e){i(e)})})},userJoinCommunity:function(e,i,t){return new Promise(function(e,i){})},releaseAdoptedApplication:function(e,i,t){return new Promise(function(e,i){var n=worker.getWorkerWrapper();n._id=generateUUID(),n.communityId=app.SCOPE.communityId,n.applicationId=app.SCOPE.applicationId,n.createdDateTime=(new Date).toString(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var o=JSON.xpath("/indicators[category/term eq 'adoptedApplication']/_id",t,{})[0],r={releaseAdoptedApplication:{communityId:t.profile,indicatorUUID:{adoptedApplication:o}}};n.action=r,worker.send(n).then(function(i){var t=util.success("Worker processes successfully.",i);e(t)},function(e){i(e)})})}}}(),application=function(){return{createAppDefinition:function(e,i,t){return new Promise(function(e,i){var n=worker.getWorkerWrapper();n._id=generateUUID(),n.communityId=app.SCOPE.communityId,n.applicationId=app.SCOPE.applicationId,n.createdDateTime=(new Date).toString(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var o=JSON.xpath("/indicators[category/term eq 'Application']/_id",t,{})[0],r={createApplication:{newApplicationId:t.profile,indicatorUUID:{Application:o}}};n.action=r,worker.send(n).then(function(i){var t=util.success("Worker processes successfully.",i);e(t)},function(e){i(e)})})},buildApplication:function(e,i,t){return new Promise(function(e,n){var o=worker.getWorkerWrapper();o._id=generateUUID(),o.communityId=app.SCOPE.communityId,o.applicationId=app.SCOPE.applicationId,o.createdDateTime=(new Date).toString(),o.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var r=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'PublishApplication']/instances[1]/uuid",app.SCOPE.workflow,{})[0],a=JSON.xpath("/indicators[category/term eq 'ApplicationDefinition']/_id",t,{})[0],c=JSON.xpath("/indicators[category/term eq 'Roles']/_id",t,{})[0],p=JSON.xpath("/indicators[category/term eq 'Application']/_id",t,{})[0],s={buildApplication:{applicationId:t.profile,indicatorUUID:{PublishApplication:r,ApplicationDefinition:a,Roles:c,Application:p}}};o.action=s,worker.send(o).then(function(i){var t=util.success("Worker processes successfully.",i);e(t)},function(e){n(e)})})},applicationAdoption:function(e,i,t){return new Promise(function(e,n){var o=worker.getWorkerWrapper();o._id=generateUUID(),o.communityId=app.SCOPE.communityId,o.applicationId=app.SCOPE.applicationId,o.createdDateTime=(new Date).toString(),o.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var r=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'Adoption']/instances[1]/uuid",app.SCOPE.workflow,{})[0],a=JSON.xpath("/indicators[category/term eq 'PublishApplication']/_id",t,{})[0],c=JSON.xpath("/indicators[category/term eq 'Application']/_id",t,{})[0],p={adoptApplication:{applicationId:t.profile,indicatorUUID:{Adoption:r,PublishApplication:a,Application:c}}};o.action=p,worker.send(o).then(function(i){var t=util.success("Worker processes successfully.",i);e(t)},function(e){n(e)})})}}}(),worker=function(){return{getWorkerWrapper:function(){var e={source:"remote",type:"workerObject",_id:"",channels:[],communityId:"",applicationId:"",message:"",messageType:"info",createdDateTime:"",senderUserId:"",notification:{},action:{}};return e},send:function(e){return new Promise(function(i,t){console.log("Submitting Worker Object to server"),console.log(e),dao.save(e).done(function(e){i(e)}).fail(function(e){console.log("Error submitting worker response !!"+e),t(e)})})}}}();module.exports={community:community,application:application,worker:worker};

},{"./nodeValue":5,"utility":7}],3:[function(require,module,exports){
"use strict";function create(args){var processId=args[0]||"",subProcess=args[1]||{},step=args[2]||{},action=args[3]||{},_WFInstance=args[6]||{},data=args[6]||{},indicators=subProcess.indicators||[],result=[],indicatorType=action._type,processSeq=args[4]||"",subProcessSeq=args[5]||"",createType=args[7]||"",subProcessId=subProcess._id,uuid=args[8]||"",baseUUID=args[9]||"",profile=_WFInstance.profile,inputData=args[10]||{};return new Promise(function(resolve,reject){for(var toProcess=indicators.length,formCreateFn=function(id,indicatorType,indicatorId,validDate,instantiateSource){gatekeeper.instantiate(id,indicatorType,indicatorId,_WFInstance.profile,validDate).then(function(docArray){for(var i=0;i<docArray.length;i++){var object=docArray[i];if(!object.model._id.endsWith(":approved")&&!object.model._id.endsWith(":rejected")){var workflowObj={id:_WFInstance.config._id,instance:_WFInstance.instance._id,processes:[{id:processId,subProcessId:subProcess._id,subProcessUUID:uuid,step:{id:step.id,seq:step.seq,startDate:"",status:step.status,message:step.message,assignedTo:{userId:step.assignedTo.userId,name:step.assignedTo.name},comment:step.comment,complete:!1,endDate:""}}]};void 0!=action.setWorkflowLabelInTitle&&""!=action.setWorkflowLabelInTitle&&1==action.setWorkflowLabelInTitle&&(object.model.title=inputData.label),void 0!=action.setDraft&&""!=action.setDraft&&1==action.setDraft&&(object.model.control.draft=!0),object.model.workflows.push(workflowObj);var mainId=object.model._id;gatekeeper.persist(docArray).then(function(savedArray){dao.get(mainId).done(function(data){var indicatorModel=ko.mapping.fromJS({defaultModel:{setId:indicatorId}});gatekeeper.instantiateData(mainId,instantiateSource,indicatorModel,data.model.pending.seq).then(function(data){if("200"==data[0].status){if(void 0!=action.setWorkflowLabelInField&&""!=action.setWorkflowLabelInField&&mainId==profile){console.log(data[0]);var path="data[0].model.model.pending.data."+action.setWorkflowLabelInField+"='"+inputData.label+"'";eval(path)}gatekeeper.persist(data).then(function(e){dao.get(mainId).done(function(e){if(0==_WFInstance.indicators.length){if(_WFInstance.indicators.push(e),toProcess--,0==toProcess){var s=util.success("Form created successfully.",_WFInstance.indicators);resolve(s)}}else{for(var i=!1,t=0;t<_WFInstance.indicators.length;t++){var a=_WFInstance.indicators[t];if(a._id==e._id&&(i=!0,_WFInstance.indicators.splice(t,1),_WFInstance.indicators.push(e),toProcess--,0==toProcess)){var s=util.success("Form created successfully.",_WFInstance.indicators);resolve(s)}}if(0==i&&(_WFInstance.indicators.push(e),toProcess--,0==toProcess)){var s=util.success("Form created successfully.",_WFInstance.indicators);resolve(s)}}}).fail(function(e){console.error(e);var s=util.success("1 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(s)})},function(e){console.error(e);var s=util.success("2 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(s)})}else{var failure=util.success("3 Gatekeeper initialisation failed with initialiseData message "+err[0].message,{});reject(failure)}},function(e){var s=util.success("4 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(s)})}).fail(function(e){console.error(e);var s=util.success("5 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(s)})},function(e){console.error(e);var s=util.success("6 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(s)})}}},function(e){for(var s=[],i=0;i<_WFInstance.instance.processes.length;i++)_WFInstance.instance.processes[i].subProcesses.length>0&&s.push(_WFInstance.instance.processes[i]);_WFInstance.instance.processes=[],_WFInstance.instance.processes=s;for(var t=[],i=0;i<_WFInstance.subprocesses.length;i++)_WFInstance.subprocesses[i].indicators.length>0&&t.push(_WFInstance.subprocesses[i]);_WFInstance.subprocesses=[],_WFInstance.subprocesses=t,console.error(e);var a=util.success("7 Gatekeeper initialisation failed with initialiseData message "+e[0].message,{});reject(a)})},instantiateSource="fromDefinition",counter=0;counter<indicators.length;counter++){var indicatorId=indicators[counter]._id,indicatorName=util.getName(indicators[counter].name,"en"),initType=indicators[counter]._type,id="",indicatorDoc={};if("newInstance"==initType)if(void 0!=baseUUID&&""!=baseUUID&&baseUUID.length>0){var existingUUID=JSON.xpath("/subprocesses[_id eq '"+baseUUID+"']/indicators[id eq '"+indicatorId+"']/instances[1]/uuid",_WFInstance,{})[0];id=existingUUID,initType="newSequence";var sp=JSON.xpath("/subprocesses[_id eq '"+baseUUID+"']",app.SCOPE.workflow,{})[0];sp.active=!1,instantiateSource="fromAuthorised"}else id=void 0!=subProcess.isProfile&&subProcess.isProfile&&0==counter?profile:indicatorId+"-"+generateUUID();else{var spLastUuid=JSON.xpath("/instance/processes[id eq '"+processId+"' and subProcesses/id eq '"+subProcessId+"'][1]/subProcesses/uuid",_WFInstance,{})[0],indId=JSON.xpath("/subprocesses[_id eq '"+spLastUuid+"']/indicators[id eq '"+indicatorId+"']/instances/uuid",app.SCOPE.workflow,{})[0];if(id=""==spLastUuid||void 0==spLastUuid||""==indId||void 0==indId?void 0!=subProcess.isProfile&&subProcess.isProfile&&0==counter?profile:indicatorId+"-"+generateUUID():indId,void 0!=baseUUID&&""!=baseUUID&&baseUUID.length>0){var sp=JSON.xpath("/subprocesses[_id eq '"+baseUUID+"']",app.SCOPE.workflow,{})[0];sp.active=!1,instantiateSource="fromAuthorised"}}formCreateFn(id,initType,indicatorId,"",instantiateSource)}})}function setInstanceTitle(e){var s=e[0]||{},i=e[2]||"",t=e[4]||{},a=t.label;return new Promise(function(e,t){for(var n=JSON.xpath("/subprocesses[_id eq '"+i+"']",s,{})[0],r=n.indicators,o=0;o<r.length;o++){var c=r[o].instances[0].uuid,d=JSON.xpath("/indicators[_id eq '"+c+"']",s,{})[0];d.title=r[o].id+" "+a}e("Set Title Success",r)})}function deleteProfile(e){var s=e[0]||{},i=s.profile;return new Promise(function(e,s){var t={source:"remote",type:"workerObject",_id:generateUUID(),channels:[],communityId:app.SCOPE.communityId,applicationId:app.SCOPE.applicationId,message:"",messageType:"info",createdDateTime:moment().format(),senderUserId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,notification:{},profile:{action:"deleteProfile",profileId:i}};console.log(t),dao.upsert(t).done(function(s){console.log("Worker Object submitted for profile("+i+") deletion."),console.log(s),e(s)}).fail(function(e){console.log(e),s(data)})})}function createProfile(e){var s=e[1]||{},i=s.communityId,t=s.profile;return new Promise(function(e,s){library.createProfileDocuments(i,t).done(function(s){var i=util.success("Form created successfully.",s);e(i)}).fail(function(e){console.error(e);var i=util.success("ERROR: Profile creation failed"+e[0].message,{});s(i)})})}function setDraft(e){var s=e[0]||{},i=(s.communityId,s.profile,e[2]||"");return new Promise(function(e,t){for(var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",s,{})[0],n=a.indicators,r=0;r<n.length;r++){var o=n[r].instances[0].uuid,c=JSON.xpath("/indicators[_id eq '"+o+"']",s,{})[0];c.control.draft=!0}e("Set Draft Success",n)})}function setUnDraft(e){var s=e[0]||{},i=(s.communityId,s.profile,e[2]||"");return new Promise(function(e,t){for(var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",s,{})[0],n=a.indicators,r=0;r<n.length;r++){var o=n[r].instances[0].uuid,c=JSON.xpath("/indicators[_id eq '"+o+"']",s,{})[0];c.control.draft=!1}e("Set Draft Success",n)})}function save(e){var s={complete:!0,data:[]};return new Promise(function(e,i){var t=util.success("Form indicator set saved successfully.",s);e(t)})}function submit(e){var s={complete:!0,data:[]};return new Promise(function(e,i){var t=util.success("Form submitted successfully.",s);e(t)})}function authorise(e){var s=e[0]||"",i=e[1]||{},t=i._id,a=e[2]||"",n=e[3]||"",r=e[4]||{};return new Promise(function(e,i){for(var o=JSON.xpath("/processes[id eq '"+s+"' and seq eq '"+a+"']/subProcesses[id eq '"+t+"' and seq eq '"+n+"']/uuid",r.instance,{})[0],c=JSON.xpath("/subprocesses[_id eq '"+o+"']/indicators/instances/uuid",r,{}),d=c.length,u=[],l=0;l<d;l++)gatekeeper.authorise(c[l]).then(function(s){gatekeeper.persist(s).then(function(s){for(var i="",t=0;t<s.length;t++)s[t].id.endsWith(":approved")||(i=s[t].id);dao.get(i).done(function(s){if(0==r.indicators.length){if(r.indicators.push(s),d--,0==d){var i=util.success("Form authorised successfully.",u);e(i)}}else{for(var t=!1,a=0;a<r.indicators.length;a++){var n=r.indicators[a];if(n._id==s._id&&(t=!0,r.indicators.splice(a,1),r.indicators.push(s),d--,0==d)){var i=util.success("Form authorised successfully.",u);e(i)}}if(0==t&&(r.indicators.push(s),d--,0==d)){var i=util.success("Form authorised successfully.",u);e(i)}}}).fail(function(e){console.error(e)})},function(e){console.error(err)})},function(s){if(d--,0==d){var i=util.success("Form authorised successfully.",u);e(i)}})})}function close(e){var s={complete:!0,data:[]};return new Promise(function(e,i){var t=util.success("Form closed successfully.",s);e(t)})}var util=require("utility"),gatekeeper=new GK;module.exports={create:create,save:save,submit:submit,authorise:authorise,close:close,setDraft:setDraft,setUnDraft:setUnDraft,createProfile:createProfile,setInstanceTitle:setInstanceTitle,deleteProfile:deleteProfile};

},{"utility":7}],4:[function(require,module,exports){
"use strict";function getProcess(e,s,t){return new Promise(function(n,i){try{var c=[],r=[];t.instance.processes.filter(function(s){s.id==e&&(r=s)}),util.syncLoop(r.subProcesses.length,function(n){var o=n.iteration(),u=r.seq,f=r.subProcesses[o].id,a=r.subProcesses[o].seq;getSubProcess(e,u,f,a,s,t).then(function(e){c.push(e),n.next()},function(e){n.break(),i(e)})},function(){n(c)})}catch(e){i(e)}})}function getSubProcess(e,s,t,n,i,c){return new Promise(function(r,o){try{var u={id:"",seq:"",name:"",help:"",dates:"",step:""},f=[],a=[];c.instance.processes.filter(function(i){if(i.id==e&&i.seq==s){i.subProcesses.length;i.subProcesses.filter(function(e){e.id==t&&e.seq==n&&0==e.complete&&(f=e)})}}),c.config.processes.filter(function(s){s._id==e&&s.subProcesses.filter(function(e){e._id==t&&(a=e)})}),u.id=a._id,u.seq=f.seq,u.name=util.getName(a.name,i),u.help=util.getName(a.help,i),u.dates=f.dates,u.step=f.step,r(u)}catch(e){o(e)}})}function prepareNotificationScreen(){""}var util=require("utility");module.exports={getProcess:getProcess};

},{"utility":7}],5:[function(require,module,exports){
"use strict";function get(){return new Promise(function(e,t){})}module.exports={get:get};

},{}],6:[function(require,module,exports){
"use strict";function count(e){return void 0!==e?e.length:0}function preRequisites(e,t){return new Promise(function(s,i){var n=[];try{util.syncLoop(e.length,function(s){var o=s.iteration();preRequisite(e[o],t).then(function(e){n.push(!0),s.next()},function(e){n.push(!1),s.break(),i(e)})},function(){if(n.every(Boolean)){var e=util.success("Pre-requisites completed successfully.",{});s(e)}else{var t=util.error("WFPreRequisiteError","Not all pre-requisites passed.");i(t)}})}catch(e){i(e)}})}function preRequisite(e,t){return new Promise(function(s,i){switch(e._type){case"processInstances":try{var n=e._parameter,o=e._filter,a="";if(void 0!=o){var r=o._operator,c="";switch(r){case"greaterThan":c="gt";break;case"lessThan":c="lt";break;case"greaterThanEqual":c="ge";break;case"lessThanEqual":c="le";break;case"equalTo":c="eq";break;case"notEqualTo":c="ne"}var u=o._element,u=u.split(".").join("/"),l=o._value,d="/"+u+"[. eq '"+l+"']",p="count(/subprocesses[id eq '"+n+"']"+d+")";a=JSON.xpath(p,t,{})[0]}else a=JSON.xpath("count(/subprocesses[id eq '"+n+"'])",t,{})[0];var f=util.compare(a,e._operator,parseInt(e._value));if(f){var m=util.success("Pre-requisites passed.",{});s(m)}else{var v="";e.message.i18n.filter(function(e){if("en"==e._lang){v=e.value;var t=util.error("WFPreRequisiteError",v);i(t)}})}}catch(e){i(e)}default:var h=util.error("WFPreRequisiteError","Pre-requisite type: "+e._type+" not defined.");i(h)}})}function preActions(e,t){return new Promise(function(s,i){var n=[];try{util.syncLoop(e.length,function(s){var o=s.iteration();action(e[o],t).then(function(e){n.push(!0),s.next()},function(e){n.push(!1),s.break(),i(e)})},function(){if(n.every(Boolean)){var e=util.success("Pre-actions completed successfully.",{});s(e)}else{var t=util.error("WFPreRequisiteError","Not all pre-actions passed.");i(t)}})}catch(e){i(e)}})}function getSubProcess(e,t){return void 0==t.subprocesses?[]:void t.subprocesses.filter(function(t){if(t.id==e)return t})}function subProcess(e,t,s,i,n,o){var a=[],r=[],c=[];o.instance.processes.filter(function(n){if(n.id==e&&n.seq==t){n.subProcesses.length;n.subProcesses.filter(function(e){if(e.id==s&&e.seq==i){var t=e.uuid;o.subprocesses.filter(function(e){e._id==t&&(a=e)})}})}}),o.config.processes.filter(function(t){t._id==e&&(r=t,t.subProcesses.filter(function(e){e._id==s&&(c=e)}))});var u="",l=n.baseUUID;if(void 0!=l&&""!=l&&l.length>0){var d=JSON.xpath("/subprocesses[_id eq '"+l+"']",o,{})[0];u=d.groupKey}else u=generateUUID();var p=o.profile+":"+o.app+":"+e+":"+t+":"+s+":"+i,f={_id:p,id:s,type:"workflowInstanceSubProcess",seq:i,initiated:!1,dates:{created:"",valid:"",due:"",closed:""},complete:!1,indicators:[],step:{},active:!0,groupKey:u,channels:["community_"+app.SCOPE.communityId,"profile_"+app.SCOPE.profileId,"application_"+app.SCOPE.applicationId,"community_"+app.SCOPE.communityId+"_application_"+app.SCOPE.applicationId]};return o.subprocesses.push(f),new Promise(function(u,l){try{var d=r.preActions;preActions(d,o).then(function(d){var m=r.prerequisites;preRequisites(m,o).then(function(d){var m=c.initiate;initiate(m,a,n).then(function(a){f.initiated=a.data.initiated,f.dates=a.data.dates;var d=c.steps[0]._id,p=c.steps[0].transitions[0]._id,m=1;step(e,t,s,i,d,m,n,o).then(function(a){f.step=a.data,indicators(c.indicators,o,f._id).then(function(a){f.indicators=a.data,transition(e,t,s,i,d,p,n,o).then(function(e){var t=e;f.step=e.data;var s=r.postActions;postActions(s,o).then(function(e){var s=util.success(t.message,f);u(s)},function(e){l(e)})},function(e){l(e)})},function(e){l(e)})},function(e){l(e)})},function(e){o.subprocesses=o.subprocesses.filter(function(e){return!(e._id==p)}),l(e)})},function(e){o.subprocesses=o.subprocesses.filter(function(e){return!(e._id==p)}),l(e)})},function(e){o.subprocesses=o.subprocesses.filter(function(e){return!(e._id==p)}),l(e)})}catch(e){l(e)}})}function initiate(e,t,s){var i={initiated:!1,dates:{created:"",valid:"",due:"",closed:""}};return new Promise(function(n,o){var a=function(){switch(e._type){case"user":i.dates.created=s.createdDate,"userSelected"!=e.dates.valid._type&&"autoSelected"!=e.dates.valid._type||(void 0!==s.validDate?i.dates.valid=s.validDate:util.warn("WFInitiateError","No valid date passed in - {data.validDate}")),"userSelected"!=e.dates.due._type&&"autoSelected"!=e.dates.valid._type||(void 0!==s.dueDate?i.dates.due=s.dueDate:util.warn("WFInitiateError","No due date passed in - {data.dueDate}")),i.initiated=!0;var t=util.success("Sub-Process initiate completed successfully.",i);n(t);break;case"auto":i.dates.created=s.createdDate,"userSelected"!=e.dates.valid._type&&"autoSelected"!=e.dates.valid._type||(void 0!==s.validDate?i.dates.valid=s.validDate:util.warn("WFInitiateError","No valid date passed in - {data.validDate}")),"userSelected"!=e.dates.due._type&&"autoSelected"!=e.dates.due._type||(void 0!==s.dueDate?i.dates.due=s.dueDate:util.warn("WFInitiateError","No due date passed in - {data.dueDate}")),i.initiated=!0;var t=util.success("Sub-Process initiate completed successfully.",i);n(t);break;default:var a=util.error("WFInitiateError","Initiate type: "+e._type+" not defined.");o(a)}};if(void 0==t.complete)a();else if(!t.complete)if(e.parallelInstances)a();else{var r=util.error("WFInitiateError","Sub-process: "+t.id+" still active and parallel instances are not allowed.");o(r)}})}function step(e,t,s,i,n,o,a,r){var c,u={id:"",seq:"",status:"",message:"",assignedTo:{userId:"",name:""},assignment:{},comment:""},l={},d="",p={};return new Promise(function(f,m){try{r.instance.processes.filter(function(n){n.id==e&&n.seq==t&&n.subProcesses.filter(function(e){e.id==s&&e.seq==i&&(d=e.uuid)})}),r.subprocesses.filter(function(e){e._id==d&&(c=e)}),r.config.processes.filter(function(t){t._id==e&&t.subProcesses.filter(function(e){e._id==s&&(l=e,e.steps.filter(function(e){e._id==n&&(p=e)}))})}),u.id=n,u.seq=o,u.status=p._setInstanceStatusTo,u.message=p._setStatusMsgTo,u.comment=void 0!==a.comment?a.comment:"";var v=void 0!==c?c.indicators:[];indicatorDocs(e,v,u,r).then(function(n){var o=r.profile+":"+r.app+":"+e+":"+t+":"+s+":"+i;d=o,void 0!==p.actions[0]?actions(p.actions,e,t,s,i,l,u,r,a,d).then(function(e){var t=util.success("Actions completed successfully.",u);f(t)},function(e){m(e)}):void 0!==p.task&&task(e,t,p.task,o,u).then(function(e){console.log("Task complete.");var t=util.success("Task awaiting user action.",u);f(t)},function(e){m(e)})},function(e){m(e)})}catch(e){m(e)}})}function indicators(e,t,s){var i=[];return new Promise(function(e,n){try{for(var o=JSON.xpath("indicators[fn:count(./workflows/processes[subProcessUUID eq '"+s+"']) gt 0]",t,{}),a=0;a<o.length;a++){var r=o[a],c={id:"",instances:[]},u={uuid:"",title:"",key:"",seq:1};c.id=r.category.term,u.uuid=r._id,u.title=r.title,u.key="",u.seq=r.model.pending.seq,c.instances.push(u),i.push(c)}var l=util.success("Process indicator model updated.",i);e(l)}catch(e){n(e)}})}function assignUser(e,t,s,i,n,o){return new Promise(function(a,r){try{var c="";o.instance.processes.filter(function(n){n.id==e&&n.seq==t&&n.subProcesses.filter(function(e){e.id==s&&e.seq==i&&(c=e.uuid)})}),o.subprocesses.filter(function(t){if(t._id==c){t.step.assignedTo.userId=n.id,t.step.assignedTo.name=n.name;for(var s=t.indicators,i=0;i<s.length;i++)for(var r=s[i],u=0;u<r.instances.length;u++)for(var l=r.instances[u],d=0;d<o.indicators.length;d++){var p=o.indicators[d];l.uuid==p._id&&p.workflows.filter(function(t){t.id==o.config._id&&t.processes.filter(function(t){t.id==e&&(t.step.assignedTo.userId=n.id,t.step.assignedTo.name=n.name)})})}var f=util.success('User assigned successfully. UserId: "'+n.id+'", Name: "'+n.name+'"',t);a(f)}})}catch(e){r(e)}})}function indicatorDocs(e,t,s,i){return new Promise(function(n,o){try{if(void 0==t){util.error("WFIndicatorsUpdate","Indicators parameter is required. - Value: "+t);o(err)}else{for(var a=0;a<t.length;a++)for(var r=t[a],c=0;c<r.instances.length;c++)for(var u=r.instances[c],l=0;l<i.indicators.length;l++){var d=i.indicators[l];u.uuid==d._id&&d.workflows.filter(function(t){t.id==i.config._id&&t.processes.filter(function(t){t.id==e&&(t.step.id=s.id,t.step.seq=s.seq,t.step.status=s.status,t.step.message=s.message,t.step.assignedTo.userId=s.assignedTo.userId,t.step.assignedTo.name=s.assignedTo.name,t.step.comment=void 0!==s.comment?s.comment:"")})})}var p=util.success("Indicator documents workflow process model updated.",i);n(p)}}catch(e){o(e)}})}function actions(e,t,s,i,n,o,a,r,c,u){var l=[];return new Promise(function(d,p){util.syncLoop(e.length,function(d){var f=d.iteration();action(e[f],t,s,i,n,o,a,r,c,u).then(function(t){var s={id:e[f]._id,seq:f,data:t};l.push(s),d.next()},function(e){d.break(),p(e)})},function(){var e=util.success("Actions completed successfully.",l);d(e)})})}function action(e,t,s,i,n,o,a,r,c,u){return new Promise(function(l,d){if(void 0!=e.method){var p=["form","indicator","profile","subProcessInstance","step","community","application","user","sdo"];switch(propertyExists(e.method,p)){case"form":break;case"indicator":break;case"profile":break;case"subProcessInstance":break;case"step":break;case"community":var f=["createCommunity","releaseAdoptedApplication","userJoinCommunity"];switch(propertyExists(e.method.community,f)){case"createCommunity":return actionsModule.community.createCommunity(e.method.community.createCommunity,u,r).then(function(e){l(e.data)},function(e){d(e)});case"releaseAdoptedApplication":return actionsModule.community.releaseAdoptedApplication(e.method.community.releaseAdoptedApplication,u,r).then(function(e){l(e.data)},function(e){d(e)});case"userJoinCommunity":return actionsModule.community.userJoinCommunity(e.method.community.userJoinCommunity,u,r).then(function(e){l(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"application":var m=["createAppDefinition","buildApplication","applicationAdoption"];switch(propertyExists(e.method.application,m)){case"createAppDefinition":return actionsModule.application.createAppDefinition(e.method.application.createAppDefinition,u,r).then(function(e){l(e.data)},function(e){d(e)});case"buildApplication":return actionsModule.application.buildApplication(e.method.application.buildApplication,u,r).then(function(e){l(e.data)},function(e){d(e)});case"applicationAdoption":return actionsModule.application.applicationAdoption(e.method.application.applicationAdoption,u,r).then(function(e){l(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"user":break;case"sdo":break;default:d("No method found from implemented list.")}}else{var v=[],h="global",g="";void 0!==e._id&&(h=e._id.split(".")[0]),void 0!==e._id&&(g=e._id.split(".")[1]),v.length=0;for(var _=0;_<e._args.length;_++){var y=e._args[_];switch(y){case"processId":v.push(t);break;case"processSeq":v.push(s);break;case"subProcessId":v.push(i);break;case"subProcessSeq":v.push(n);break;case"subProcess":v.push(o);break;case"step":v.push(a);break;case"action":v.push(e);break;default:v=[]}}if(v.push(r),v.push(c.createType),v.push(u),v.push(c.baseUUID),v.push(c),"form.create"==e._id)form.create(v).then(function(e){l(e.data)},function(e){d(e)});else if("form.authorise"==e._id)form.authorise(v).then(function(e){l(e.data)},function(e){d(e)});else if("form.close"==e._id)form.close(v).then(function(e){l(e.data)},function(e){d(e)});else if("form.setDraft"==e._id)form.setDraft(v).then(function(e){l(e.data)},function(e){d(e)});else if("form.setUnDraft"==e._id)form.setUnDraft(v).then(function(e){l(e.data)},function(e){d(e)});else if("form.createProfile"==e._id)form.createProfile(v).then(function(e){l(e.data)},function(e){d(e)});else if("form.setInstanceTitle"==e._id)form.setInstanceTitle(v).then(function(e){l(e.data)},function(e){d(e)});else if("profile.delete"==e._id)form.deleteProfile(v).then(function(e){l(e.data)},function(e){d(e)});else{var b=util.error("WFActionError","Method: "+action_id+" not defined.");d(b)}}})}function task(e,t,s,i,n){return new Promise(function(o,a){if(void 0!=s.assign.profileRole){var r=app.SCOPE.workflow.profile,c="";"current"==s.assign.profileRole.profile?c=app.SCOPE.workflow.profile:"community"==s.assign.profileRole.profile&&(c=app.SCOPE.communityId);var u=s.assign.profileRole.role;library.getUsersListByRole(c,u).then(function(a){if(void 0!=a)if(a.length>1){var l=JSON.xpath("/subprocesses[_id eq '"+i+"']",app.SCOPE.workflow,{})[0],d=JSON.xpath("/subprocesses[_id eq '"+i+"']/channels",app.SCOPE.workflow,{}),p=processWorkflowMessage(NOTIFICATION_USER_MSG_ACCEPT,i),f=l.id,m=l.seq,v=i,h=l.dates.valid,g=JSON.xpath("/config/processes[_id eq '"+e+"']",app.SCOPE.workflow,{})[0],_=JSON.xpath("/subProcesses[_id eq '"+f+"']",g,{})[0],y=l.step.seq+0,b=JSON.xpath("/steps[_seq eq '"+y+"']/name/i18n[1]/value",_,{})[0],P=_.name.i18n[0].value,I={source:"remote",type:"notificationRequest",_id:i+":notificationRequest",channels:d,communityId:app.SCOPE.communityId,applicationId:app.SCOPE.applicationId,message:p,messageType:"info",createdDateTime:moment().format(),senderUserId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,actions:[{label:"View",function:"app.openSubprocess",params:[r,f,m,P,e,t,v,h,b]}],receiver:{value:[{type:"role",name:u,profileId:c}]}};dao.upsert(I).done(function(e){console.log(e)}).fail(function(e){console.log(e)});var S="";if(void 0!=s.assign.assignment){var S=n.assignment,q={show:s.assign.assignment.accept.show,label:_getName(s.assign.assignment.accept.label.i18n,"en")};S.accept=q,S.message=_getName(s.assign.assignment.message.i18n,"en");var w={show:s.assign.assignment.reject.show,label:_getName(s.assign.assignment.reject.label.i18n,"en")};S.reject=w;var E={profileId:r,roleId:u,type:"role"};S.value=E,S.profileRoleId=c}o("Notifications request submitted for acceptance.")}else if(1==a.length){var k=a[0].id,A=a[0].name,T=n.assignedTo;T.name=A+"",T.userId=k+"",o("Assigned to the only user in role.")}else if(void 0!=s.assign.default){var k=s.assign.default.userId,A=s.assign.default.userName,T=n.assignedTo;T.name=A+"",T.userId=k+"",o("Assigned to default user")}else console.log("Error in assignment. Default user not specified."),w("Error in assignment. Default user not specified.");else console.log("Error in getUsersListByRole undefined"),w(err)},function(e){console.log("Error in getUsersListByRole"),a(e)})}else void 0!=s.assign.swimlane&&(o("swimlane"),console.log("Swimlane implementation !!"))})}function transition(e,t,s,i,n,o,a,r){return new Promise(function(c,u){try{for(var l=0,d="",p=0,f=[],m=r.config.processes.filter(function(t){if(t._id==e)return t}),v=m[0].subProcesses.filter(function(e){if(e._id==s)return e}),h=v[0].steps.filter(function(e){if(e._id==n)return e}),g=h[0].transitions.filter(function(e){if(e._id==o)return e}),_=0;_<v[0].steps.length;_++)v[0].steps[_]._id==n&&(l=parseInt(v[0].steps[_]._seq));v[0].steps.filter(function(e){p=l+1,parseInt(e._seq)==p&&(d=e._id)}),r.instance.processes.filter(function(n){n.id==e&&n.seq==t&&n.subProcesses.filter(function(e){if(e.id==s&&e.seq==i){var t=e.uuid;r.subprocesses.filter(function(e){e._id==t&&(f=e)})}})});var y=v[0].steps.length;switch(g[0]._type){case"auto":"nextStep"==g[0].goTo._type&&step(e,t,s,i,d,p,a,r).then(function(e){if(p==y){var t=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});c(t)}else{var t=util.success("Step transition completed successfully.",e.data);c(t)}},function(e){u(e)});break;case"user":if("nextStep"==g[0].goTo._type)step(e,t,s,i,d,p,a,r).then(function(e){if(p==y){var t=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});c(t)}else{var t=util.success("Step transition completed successfully.",e.data);c(t)}},function(e){u(e)});else if("stepId"==g[0].goTo._type){var b=g[0].goTo._stepId,P=1;v[0].steps.filter(function(e){e._id==b&&(P=parseInt(e._seq))}),step(e,t,s,i,b,P,a,r).then(function(e){if(P==y){var t=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});c(t)}else{var t=util.success("Step transition completed successfully.",e.data);c(t)}},function(e){u(e)})}break;default:var I=util.error("WFTransitionError","Transition type: "+g[0]._type+" not defined.");u(I)}}catch(e){u(e)}})}function postActions(e,t){return new Promise(function(s,i){var n=[];try{util.syncLoop(e.length,function(s){var o=s.iteration();action(e[o],t).then(function(e){n.push(!0),s.next()},function(e){n.push(!1),s.break(),i(e)})},function(){if(n.every(Boolean)){var e=util.success("Post-actions completed successfully.",{});s(e)}else{var t=util.error("WFPreActionsError","Not all post-actions passed.");i(t)}})}catch(e){i(e)}})}function processWorkflowMessage(e,t){var s=e;if(s.indexOf("#INSTANCE_LABEL")!==-1){var i=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+t+"']/label",app.SCOPE.workflow,{})[0];s=s.replace("#INSTANCE_LABEL",i)}if(s.indexOf("#USER_NAME")!==-1){var i=JSON.xpath("/subprocesses[_id eq '"+t+"']/step/assignedTo/name",app.SCOPE.workflow,{})[0];s=s.replace("#USER_NAME",i)}if(s.indexOf("#PROFILE_TITLE")!==-1){var i=app.profile.title;s=s.replace("#PROFILE_TITLE",i)}if(s.indexOf("#PROFILE_TYPE")!==-1){var i=app.SCOPE.APP_CONFIG.name;s=s.replace("#PROFILE_TYPE",i)}if(s.indexOf("#VAR_SPUUID")!==-1){var i=t;s=s.replace("#VAR_SPUUID",i)}return s}function _getName(e,t){if(void 0!==e)for(var s=0;s<e.length;s++)if(e[s]._lang===t)return e[s].value}var util=require("utility"),actionsModule=require("./actions"),form=require("./form");module.exports={preRequisites:preRequisites,preActions:preActions,subProcess:subProcess,indicatorDocs:indicatorDocs,task:task,transition:transition,assignUser:assignUser};

},{"./actions":2,"./form":3,"utility":7}],7:[function(require,module,exports){
"use strict";function success(r,e){return{message:r,data:e}}function warn(r,e){return console.warn(e),{warning:r,data:e}}function error(r,e){var n=new Error("");return n.name=r,n.message=e,n}function syncLoop(r,e,n){var a=0,t=!1,o=!1,u={next:function(){return t&&o&&n?n():void(a<r?(a++,e(u)):(t=!0,n&&n()))},iteration:function(){return a-1},break:function(r){t=!0,o=r}};return u.next(),u}function compare(r,e,n){switch(e){case"greaterThan":return r>n;case"lessThan":return r<n;case"greaterThanEqual":return r>=n;case"lessThanEqual":return r<=n;case"equalTo":return r===n;case"notEqualTo":return r!==n}}function getName(r,e){if(void 0!==r)for(var n=0;n<r.length;n++)if(r[n].i18n._lang===e)return r[n].i18n.value}module.exports={success:success,warn:warn,error:error,syncLoop:syncLoop,compare:compare,getName:getName};

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
