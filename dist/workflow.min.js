(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Workflow = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function Workflow(e,t,s,o){var i=this;if(""==t||void 0==t)throw util.error("ParamRequired","A community id is required.");if("string"!=typeof t)throw new Error("The community id must be a javascript string.");if(i.communityId=t||"",""==e||void 0==e)throw util.error("ParamRequired","A profile id is required.");if("string"!=typeof e)throw new Error("The profile id must be a javascript string.");if(i.profile=e||"",""==s||void 0==s)throw util.error("ParamRequired","An app id is required.");if("string"!=typeof s)throw new Error("The app id must be a javascript string.");if(i.app=s||"",""==o||void 0==o)throw util.error("ParamRequired","A workflow configuration is required.");"object"!=typeof o?i.config=JSON.parse(o):i.config=o,i.instance,i.subprocesses=[],i.indicators=[]}var Process=require("./lib/process"),util=require("utility"),userInterface=require("./lib/interface"),helper=require("./lib/helper");Workflow.prototype.getProfile=function(){return this.profile},Workflow.prototype.getApp=function(){return this.app},Workflow.prototype.getConfig=function(){return this.config},Workflow.prototype.getInstance=function(){return this.instance},Workflow.prototype.setInstance=function(e){this.instance=e},Workflow.prototype.getSubProcesses=function(){return this.subprocesses},Workflow.prototype.setSubProcesses=function(e){this.subprocesses=e},Workflow.prototype.getIndicators=function(){return this.indicators},Workflow.prototype.setIndicators=function(e){this.indicators=e},Workflow.prototype.create=function(){var e=this;return new Promise(function(t,s){try{if(void 0!==e.instance){var o=util.warn("Instance already exists.",e);t(o)}else{var i={_id:"",version:"",type:"workflowInstance",processes:[],channels:["community_"+app.SCOPE.getCommunityId(),"profile_"+app.SCOPE.profileId,"application_"+app.SCOPE.applicationId,"community_"+app.SCOPE.getCommunityId()+"_application_"+app.SCOPE.applicationId]};i._id=e.profile+":processes:local",i.version=e.config.version,e.instance=i;var r=util.success("Workflow processes instance created successfully.",e);t(r)}}catch(e){s(e)}})},Workflow.prototype.initialise=function(e,t,s){var o=this;return new Promise(function(i,r){try{var n=[];if(""!==e&&void 0!==e){if(n=o.config.processes.filter(function(t){if(t._id==e)return t}),void 0==n[0]._id){var c=util.error("WFConfigError","No valid process definition found with process id: "+e);r(c)}}else n.push(o.config.processes[0]),e=o.config.processes[0]._id;var a=function(e){for(var t="",s=0;s<e.length-1;s++)t=t+"'"+e[s]+"',";return"("+t+"'"+e[e.length-1]+"')"},u=n[0].subProcesses[0]._id,p=n[0].subProcesses[0].instanceType,d=JSON.xpath("indicators/_id",n[0].subProcesses[0],{}),f=function(e){var t=JSON.xpath("count(/indicators[setId = "+a(e)+" and cardinality eq 'single' ]/setId)",app.SCOPE.APP_CONFIG,{});if(t>0){var s=JSON.xpath("count(/subprocesses[indicators/id = "+a(e)+" and complete eq 'false'])",o,{})[0];return 0==s}if(void 0!=p.newSequence){var s=JSON.xpath("count(/subprocesses[id eq "+u+" and indicators/id = "+a(e)+" and complete eq 'false'])",o,{})[0];return 0==s}return void 0!=p.newInstance,!0};if(f(d)){var l=[];o.instance.processes.filter(function(t){t.id==e&&l.push(t)});var h=l.length+1,m={id:"",seq:"",subProcesses:[]};m.id=e,m.seq=h,o.instance.processes.push(m);var v=n[0].subProcesses[0]._id,P=1;o.instance.processes.filter(function(t){t.id==e&&t.seq==h&&(P=t.subProcesses.length+1)});var S=generateUUID(),b={communityId:app.SCOPE.communityId,uuid:S,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,transactionType:"subProcess",documents:[]};dao.startTransaction(b).then(function(n){Process.subProcess(S,e,h,v,P,s,t,o).then(function(t){var n=t.data._id,c=t.data.groupKey;void 0==s&&(s="");var a={id:v,subprofileId:s,seq:t.data["meta-data"].subProcessInsSeq,uuid:n,groupKey:c};m.subProcesses.push(a);for(var u=0;u<o.instance.processes.length;u++){var p=o.instance.processes[u];p.id==e&&p.seq==h&&o.instance.processes.splice(u,1,m)}var d=t.data.indicators,f=t.data.step;Process.indicatorDocs(e,d,f,o).then(function(e){var t=util.success("Process: "+o.config.processes[0]._id+" initialized successfully.",a);i(t)},function(e){r(e)})},function(t){o.instance.processes=o.instance.processes.filter(function(t){return!(t.id==e&&t.seq==h)}),console.log(t),r(t)})}).catch(function(e){console.log(e),r(e)})}else r("Cannot create workflow as other process using same SDO is not complete")}catch(e){r(e)}})},Workflow.prototype.transition=function(e,t,s,o,i,r,n,c){var a=this;return new Promise(function(o,u){try{var p=JSON.xpath("/subprocesses[_id eq '"+c+"']/step",app.SCOPE.workflow,{})[0],d=JSON.xpath("/processes[_id eq '"+e+"']/subProcesses[_id eq '"+s+"']/steps[_id eq '"+i+"']",a.config,{})[0],f=JSON.xpath("/subprocesses[_id eq '"+c+"']/meta-data/subProcessInsSeq",app.SCOPE.workflow,{})[0],l=function(i,r){a.instance.processes.filter(function(n){n.id==e&&n.seq==t&&n.subProcesses.filter(function(e){e.id==s&&a.subprocesses.filter(function(e){if(e._id==c)if("step"==i){e.step=r.data.step;var t=util.success(r.message,e);o(t)}else if("stepComplete"==i){e.step=r.data.step,e.complete=!0;var t=util.success(r.message,e.step);o(t)}})})})};if(void 0!=d.function.task&&void 0!=d.function.task.postActions){var h=d.function.task.postActions;Process.postActions(h,a,c).then(function(o){Process.transition(e,t,s,f,i,r,n,a,c,p).then(function(e){e.data.subProcessComplete?l("stepComplete",e):l("step",e)},function(e){u(e)})},function(e){u(e)})}else Process.transition(e,t,s,f,i,r,n,a,c,p).then(function(e){e.data.subProcessComplete?l("stepComplete",e):l("step",e)},function(e){u(e)})}catch(e){u(e)}})},Workflow.prototype.assignUser=function(e,t,s,o,i,r){var n=this;return new Promise(function(c,a){try{var u=JSON.xpath("/subprocesses[_id eq '"+r+"']",app.SCOPE.workflow,{})[0],p=u._rev;({communityId:app.SCOPE.communityId,uuid:r,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,transactionType:"subProcess",documents:[{document:r,rev:p}]});Process.assignUser(e,t,s,o,i,r,n).then(function(e){c(e)},function(e){a(e)})}catch(e){a(e)}})},Workflow.prototype.ui=function(){var e=this;return{getProcess:function(t,s){return new Promise(function(o,i){try{userInterface.getProcess(t,s,e).then(function(e){o(e)},function(e){i(e)})}catch(e){i(e)}})}}},Workflow.prototype.getNodeValue=function(e,t){var s=this;return new Promise(function(o,i){try{helper.getNodeValue(e,s,t).then(function(e){o(e)},function(e){i(e)})}catch(e){i(e)}})},Workflow.prototype.takeAssignment=function(e){var t=this;return new Promise(function(s,o){try{var i=JSON.xpath("/subprocesses[_id eq '"+e+"']",t,{})[0],r=JSON.xpath("/step/assignedTo",i,{})[0];void 0==i.step.assignmentHistory&&(i.step.assignmentHistory=[]),""!=r.userId&&""!=r.name&&i.step.assignmentHistory.push(JSON.parse(JSON.stringify(r))),r.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,r.userId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"",r.dateTime=moment().format(),r.type=ASSIGNMENT_TYPE_ACCEPTANCE,r.dueDateTime="",r.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"";var n=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+e+"']/id",t,{})[0],c=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+e+"']/id",t,{})[0],a=JSON.xpath("/subprocesses[_id eq '"+e+"']/step/id",t,{})[0],u=JSON.xpath("/processes[_id eq '"+n+"']/subProcesses[_id eq '"+c+"']/steps[_id eq '"+a+"']",t.config,{})[0];if(void 0!=u.function.task.preWorkActions){var p=u.function.task.preWorkActions;Process.preWorkActions(p,t).then(function(e){s(t)},function(e){o(e)})}else s(t)}catch(e){o(e)}})},Workflow.prototype.condition=function(condition,spuuid){var _this=this;return new Promise(function(resolve,reject){try{var operator=condition.operator,dataBlock=condition.value.data;if(void 0!=condition.subject.indicator){var setId=condition.subject.indicator.setId,modelScope=condition.subject.indicator.modelScope,elementPath=condition.subject.indicator.elementPath;if("subProcess"==condition.subject.indicator.context){var indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+spuuid+"']/indicators[id eq '"+setId+"']/instances[1]/uuid",_this,{})[0],indicatorModel=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_this,{})[0],dataElement=indicatorModel.model[modelScope].data[setId],value=eval("dataElement."+elementPath);helper.getNodeValue(dataBlock,_this,spuuid).then(function(e){var t=helper.compare(value,operator,e);resolve(t)},function(e){reject(e)})}else reject("Not implemented")}else if(void 0!=condition.subject.indicatorWrapper)reject("Not implemented");else if(void 0!=condition.subject.variable)reject("Not implemented");else if(void 0!=condition.subject.subProcess){var elementPath=condition.subject.subProcess.elementPath,spObject=JSON.xpath("/subprocesses[_id eq '"+spuuid+"']",_this,{})[0],value=eval("spObject."+elementPath);helper.getNodeValue(dataBlock,_this,spuuid).then(function(e){var t=helper.compare(value,operator,e);resolve(t)},function(e){reject(e)})}}catch(e){reject(e)}})},module.exports=Workflow;

},{"./lib/helper":4,"./lib/interface":5,"./lib/process":7,"utility":8}],2:[function(require,module,exports){
"use strict";var util=require("utility"),nodeValue=require("./nodeValue"),form=require("./form"),helper=require("./helper"),gatekeeper=new GK,community=function(){return{createCommunity:function(e,i,t){return new Promise(function(e,o){var a=worker.getWorkerWrapper(),n="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(n=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=t.profile,a.subProcessUUID=i,a.subprofileId=n,a.channels.push("follow"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=JSON.xpath("/indicators[category/term eq 'Community']/_id",t,{})[0],s={createCommunity:{newCommunityId:t.profile,indicatorUUID:{Community:r}}};a.action=s,worker.send(a).then(function(o){worker.setWorkerInfoInSubprocess(a,t,i);var n=util.success("Worker processed successfully.",o);e(n)},function(e){o(e)})})},userJoinCommunity:function(e,i,t){return new Promise(function(e,i){})},releaseAdoptedApplication:function(e,i,t){return new Promise(function(e,o){var a=worker.getWorkerWrapper(),n="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(n=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=t.profile,a.subProcessUUID=i,a.subprofileId=n,a.channels.push("follow"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'adoptedApplication']/instances[1]/uuid",t,{})[0],s={releaseAdoptedApplication:{communityId:t.profile,indicatorUUID:{adoptedApplication:r}}};a.action=s,worker.send(a).then(function(o){worker.setWorkerInfoInSubprocess(a,t,i);var n=util.success("Worker processes successfully.",o);e(n)},function(e){o(e)})})}}}(),application=function(){return{createAppDefinition:function(e,i,t){return new Promise(function(e,o){var a=worker.getWorkerWrapper(),n="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(n=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=t.profile,a.subProcessUUID=i,a.subprofileId=n,a.channels.push("follow"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=JSON.xpath("/indicators[category/term eq 'Application']/_id",t,{})[0],s={createApplication:{newApplicationId:t.profile,indicatorUUID:{Application:r}}};a.action=s,worker.send(a).then(function(o){worker.setWorkerInfoInSubprocess(a,t,i);var n=util.success("Worker processes successfully.",o);e(n)},function(e){o(e)})})},buildApplication:function(e,i,t){return new Promise(function(e,o){var a=worker.getWorkerWrapper(),n="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(n=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=t.profile,a.subProcessUUID=i,a.subprofileId=n,a.channels.push("follow"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'PublishApplication']/instances[1]/uuid",t,{})[0],s=JSON.xpath("/indicators[category/term eq 'ApplicationDefinition']/_id",t,{})[0],c=JSON.xpath("/indicators[category/term eq 'Roles']/_id",t,{})[0],p=JSON.xpath("/indicators[category/term eq 'Application']/_id",t,{})[0],d=JSON.xpath("/indicators[category/term eq 'AppPermissions']/_id",t,{})[0],u={buildApplication:{applicationId:t.profile,indicatorUUID:{PublishApplication:r,ApplicationDefinition:s,Roles:c,Application:p,AppPermissions:d}}};a.action=u,worker.send(a).then(function(o){worker.setWorkerInfoInSubprocess(a,t,i);var n=util.success("Worker processes successfully.",o);e(n)},function(e){o(e)})})},applicationAdoption:function(e,i,t){return new Promise(function(e,o){var a=worker.getWorkerWrapper(),n="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(n=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=t.profile,a.subProcessUUID=i,a.subprofileId=n,a.channels.push("follow"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'Adoption']/instances[1]/uuid",t,{})[0],s=JSON.xpath("/indicators[category/term eq 'PublishApplication']/_id",t,{})[0],c=JSON.xpath("/indicators[category/term eq 'Application']/_id",t,{})[0],p={adoptApplication:{applicationId:t.profile,indicatorUUID:{Adoption:r,PublishApplication:s,Application:c}}};a.action=p,worker.send(a).then(function(o){worker.setWorkerInfoInSubprocess(a,t,i);var n=util.success("Worker processes successfully.",o);e(n)},function(e){o(e)})})},createTaxonomy:function(e,i,t){return new Promise(function(e,o){var a=worker.getWorkerWrapper(),n="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(n=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=t.profile,a.subProcessUUID=i,a.subprofileId=n,a.channels.push("follow"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'Taxonomy']/instances[1]/uuid",t,{})[0],s={createTaxonomy:{taxonomyUUID:r}};a.action=s,worker.send(a).then(function(o){worker.setWorkerInfoInSubprocess(a,t,i);var n=util.success("Worker processes successfully.",o);e(n)},function(e){o(e)})})}}}(),performance=function(){return{unlockPeriod:function(e,i,t){return new Promise(function(e,o){var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",t,{})[0],n=JSON.xpath("/indicators[id eq '"+PERIOD_SET_ID+"']/instances/uuid",a,{})[0],r=a.dates.valid;library.unlockPeriod(n,r,i).then(function(i){var t=util.success("Unlock period.",i);e(t)},function(e){o(e)})})},setModelStatus:function(e,i,t){return new Promise(function(o,a){var n=JSON.xpath("/subprocesses[_id eq '"+i+"']",t,{})[0],r=JSON.xpath("/indicators[id eq '"+PERIOD_SET_ID+"']/instances/uuid",n,{})[0],s=n.dates.valid,c=JSON.xpath("/label",e,{})[0],p=helper.getLanguageMessage(c);library.setPeriodStatus(r,s,p,i).then(function(e){var i=util.success("setModelStatus",e);o(i)},function(e){a(e)})})},lockPerformanceModel:function(e,i,t){return new Promise(function(e,o){var a=JSON.xpath("/subprocesses[_id eq '"+i+"']",t,{})[0],n=JSON.xpath("/indicators[id eq '"+PERFORMANCE_SET_ID+"']/instances/uuid",a,{})[0],r=a.dates.valid;library.lockPerformanceModel(n,r,i).then(function(i){var t=util.success("Lock performance model.",i);e(t)},function(e){o(e)})})}}}(),sdo=function(){return{create:function(e,i,t){return new Promise(function(e,o){var a=worker.getWorkerWrapper(),n="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(n=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=t.profile,a.subProcessUUID=i,a.subprofileId=n,a.channels.push("follow"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'SDO']/instances[1]/uuid",t,{})[0],s={createSDO:{sdoUUID:r}};a.action=s,worker.send(a).then(function(o){worker.setWorkerInfoInSubprocess(a,t,i);var n=util.success("Worker processes successfully.",o);e(n)},function(e){o(e)})})}}}(),taxonomy=function(){return{create:function(e,i,t){return new Promise(function(e,o){var a=worker.getWorkerWrapper(),n="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(n=app.profile.subprofileId),a._id=generateUUID(),a.communityId=app.SCOPE.getCommunityId(),a.applicationId=app.SCOPE.applicationId,a.createdDateTime=moment().format(),a.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,a.profileId=t.profile,a.subProcessUUID=i,a.subprofileId=n,a.channels.push("follow"),a.channels.push("community_"+app.SCOPE.getCommunityId());var r=JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators[id eq 'Taxonomy']/instances[1]/uuid",t,{})[0],s={createTaxonomy:{taxonomyUUID:r}};a.action=s,worker.send(a).then(function(o){worker.setWorkerInfoInSubprocess(a,t,i);var n=util.success("Worker processes successfully.",o);e(n)},function(e){o(e)})})}}}(),subProcessInstance=function(){return{setTitle:function(e,i,t,o){return new Promise(function(e,a){var n=JSON.xpath("/subprocesses[_id eq '"+i+"']",app.SCOPE.workflow,{})[0];n.label=t;var r=[],s={};s.model=o.subprocesses,r.push(s);var c=util.success("Subprocess setTitle success.",o.subprocesses);e(c)})},setValidDate:function(e,i,t,o){return new Promise(function(e,a){var n=JSON.xpath("/subprocesses[_id eq '"+i+"']",app.SCOPE.workflow,{})[0];n.dates.valid=t;var r=[],s={};s.model=n,r.push(s);var c=util.success("valid date set.",o.subprocesses);e(c)})},setSPStatus:function(e,i,t,o){return new Promise(function(e,a){var n=JSON.xpath("/subprocesses[_id eq '"+i+"']",app.SCOPE.workflow,{})[0];n.spStatus=t;var r=[],s={};s.model=o.subprocesses,r.push(s);var c=util.success("Subprocess spStatus success.",o.subprocesses);e(c)})}}}(),variables=function(){return{setVariable:function(setVariable,_WFInstance,uuid){return new Promise(function(resolve,reject){helper.getNodeValue(setVariable.data,_WFInstance,uuid).then(function(dataValue){var scope=setVariable.scope,variableName=setVariable.name,variableType=setVariable.variableType,validDate=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/dates/valid",_WFInstance,{})[0];switch(scope){case"profile":var profileId=_WFInstance.profile,profileVariableFileName=profileId+":variables",txnPacket=JSON.parse(JSON.stringify(app.SCOPE.txn));dao.get(profileVariableFileName).then(function(file){for(var refPack={},localProcess=function(){if("periodic"==variableType){var processObj=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+uuid+"']",_WFInstance,{})[0],seq=processObj.seq,obj={subProcessUUID:uuid,user:{userName:LOCAL_SETTINGS.SUBSCRIPTIONS.username,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userProfileId},seq:seq,validDate:validDate,value:dataValue};void 0!=file[variableName]?eval("file."+variableName+".push(obj)"):file[variableName]=[obj]}else file[variableName]=dataValue;dao.upsert(file).then(function(e){refPack.rev=e.rev,resolve("Variable set successfully")}).catch(function(e){reject("Failed to set Variable")})},found=!1,i=0;i<txnPacket.documents.length;i++)profileVariableFileName==txnPacket.documents[i].document&&(refPack=txnPacket.documents[i],found=!0);found?localProcess():(txnPacket.documents=[],refPack={document:profileVariableFileName,rev:file._rev},txnPacket.documents.push(refPack),app.SCOPE.txn.documents.push(refPack),dao.updateTransaction(txnPacket).then(function(e){localProcess()}).catch(function(e){console.log(e),reject(e)}))}).catch(function(e){var i={_id:profileVariableFileName};if(i.channels=app.profile.channels,"periodic"==variableType){var t=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+uuid+"']",_WFInstance,{})[0],o=t.seq;i[variableName]=[{subProcessUUID:uuid,user:{userName:LOCAL_SETTINGS.SUBSCRIPTIONS.username,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userProfileId},seq:o,validDate:validDate,value:dataValue}]}else i[variableName]=dataValue;dao.upsert(i).then(function(e){resolve("Variable set successfully")}).catch(function(e){reject("Failed to set Variable")})});break;case"subProcessInstance":resolve("not implemented");break;case"step":resolve("not implemented");break;case"subProfileSubProcessInstance":var subProfileId=app.profile.subprofileId,subProfileVariableFileName=subProfileId+":variables",txnPacket=JSON.parse(JSON.stringify(app.SCOPE.txn));dao.get(subProfileVariableFileName).then(function(file){for(var refPack={},localProcess=function(){if("periodic"==variableType){var part=library.getSubprofileSubprocessIds(),seq=JSON.xpath("count(/subprocesses[_id eq '"+uuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+uuid+"']/id and _id = /subprocesses[_id = "+part+"]/_id])",_WFInstance,{})[0]+1,obj={subProcessUUID:uuid,user:{userName:LOCAL_SETTINGS.SUBSCRIPTIONS.username,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userProfileId},seq:seq,validDate:validDate,value:dataValue};void 0!=file[variableName]?eval("file."+variableName+".push(obj)"):file[variableName]=[obj]}else file[variableName]=dataValue;dao.upsert(file).then(function(e){refPack.rev=e.rev,resolve("Variable at subprofile set successfully")}).catch(function(e){reject("Failed to set Variable at subprofile")})},found=!1,i=0;i<txnPacket.documents.length;i++)subProfileVariableFileName==txnPacket.documents[i].document&&(refPack=txnPacket.documents[i],found=!0);found?localProcess():(txnPacket.documents=[],refPack={document:subProfileVariableFileName,rev:file._rev},txnPacket.documents.push(refPack),app.SCOPE.txn.documents.push(refPack),dao.updateTransaction(txnPacket).then(function(e){localProcess()}).catch(function(e){console.log(e),reject(e)}))}).catch(function(e){var i={_id:subProfileVariableFileName};if(i.channels=app.profile.channels,"periodic"==variableType){var t=library.getSubprofileSubprocessIds(),o=JSON.xpath("count(/subprocesses[_id eq '"+uuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+uuid+"']/id and _id = /subprocesses[_id = "+t+"]/_id])",_WFInstance,{})[0]+1;i[variableName]=[{subProcessUUID:uuid,user:{userName:LOCAL_SETTINGS.SUBSCRIPTIONS.username,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userProfileId},seq:o,validDate:validDate,value:dataValue}]}else i[variableName]=dataValue;dao.upsert(i).then(function(e){resolve("Variable at subprofile set successfully")}).catch(function(e){reject("Failed to set Variable at subprofile")})})}},function(e){reject("getNodeValue value not found.")})})}}}(),notification=function(){return{sendNotificationWorker:function(e,i,t){return new Promise(function(o,a){var n=function(e){return new Promise(function(o,a){var n={};void 0!=e.recipients.role?(n.role=e.recipients.role,o(n)):void 0!=e.recipients.profileRole?(n.profileRole={},n.profileRole.role=e.recipients.profileRole.role,n.profileRole.profile=e.recipients.profileRole.profile,o(n)):void 0!=e.recipients.subProfileRole?(n.subProfileRole={},n.subProfileRole.role=e.recipients.subProfileRole.role,n.subProfileRole.subProfileCategory=e.recipients.subProfileRole.subProfileCategory,n.subProfileRole.profile=e.recipients.subProfileRole.profile,o(n)):void 0!=e.recipients.function?(n.function={},n.function.users={},helper.getNodeValue(e.recipients.function.users,i,t).then(function(e){n.function.users=e,o(n)},function(e){rej(e)})):void 0!=e.recipients.stepAssignee&&(n.stepAssignee={},n.stepAssignee.role=e.recipients.stepAssignee.role,o(n))})},r=new NotificatioWorker(app),s=JSON.xpath("/subprocesses[_id eq '"+t+"']/meta-data/subprofileId",i,{})[0],c=window.location.pathname.split("/"),p=window.location.protocol+"//"+window.location.host+"/"+c[1],d="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(d=app.profile.subprofileId);var u={notification:{message:{},messageType:"","meta-data":{applicationId:i.app,communityId:i.communityId,profileId:i.profile,subProcessUUID:t,subProfileId:s},notificationType:"",subprofileId:d,priority:"",recipients:{},url:p,keys:{profile:{name:"",id:""},community:{name:"",id:""},application:{name:"",id:""},currentUser:{name:"",id:""},subProcess:{name:"",id:"",validDate:"",dueDate:""},notification:{createdDateTime:moment().format()},step:{stepCreatedDateTime:"",stepName:"",stepId:""},node:{title:""}}}},l=JSON.xpath("/indicators[_id eq '"+app.profile._id+"']/title",i,{})[0];u.notification.keys.profile.name=l,u.notification.keys.profile.id=app.profile._id,u.notification.keys.community.name=app.getNameByLang(LOCAL_SETTINGS.COMMUNITY_CONFIG.communityName),u.notification.keys.community.id=LOCAL_SETTINGS.COMMUNITY_CONFIG.communityId;var f=JSON.xpath("/applications[appId eq '"+app.SCOPE.applicationId+"']",LOCAL_SETTINGS.COMMUNITY_CONFIG,{})[0];u.notification.keys.application.name=app.getNameByLang(f.name),u.notification.keys.application.id=f.appId,u.notification.keys.currentUser.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,u.notification.keys.currentUser.id=LOCAL_SETTINGS.SUBSCRIPTIONS.userId;var m=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];u.notification.keys.subProcess.name=m.label,u.notification.keys.subProcess.id=t,u.notification.keys.subProcess.validDate=m.dates.valid,u.notification.keys.subProcess.dueDate=m.dates.due;var I=m.step;u.notification.keys.step.stepCreatedDateTime=I.dateTimeCreated,u.notification.keys.step.stepId=I.id;var S=JSON.xpath("/processes/subProcesses[_id eq '"+m.id+"']/steps[_id eq '"+I.id+"']",app.SCOPE.workflow.config,{})[0];u.notification.keys.step.stepName=app.getNameByLang(S.name);var P=JSON.xpath("/indicators[_id eq '"+d+"']/title",app.SCOPE.workflow,{})[0];if(void 0==P?u.notification.keys.node.title="":u.notification.keys.node.title=P,u.notification.message.default=e.message.default,u.notification.message.title=e.message.title,void 0!=e.message.rtf&&(u.notification.message.rtf={},void 0!=e.message.rtf.template?u.notification.message.rtf.template=e.message.rtf.template:void 0!=e.message.rtf.markup&&(u.notification.message.rtf.markup=e.message.rtf.markup)),u.notification.messageType=e.messageType,u.notification.notificationType=e.notificationType,u.notification.priority=e.priority,void 0!=e.notificationAction&&(u.notification.notificationAction={},u.notification.notificationAction.label=e.notificationAction.label,void 0!=e.notificationAction.action.URI?(u.notification.notificationAction.action={},u.notification.notificationAction.action.URI=e.notificationAction.action.URI):void 0!=e.notificationAction.action.goto&&(u.notification.notificationAction.action={},u.notification.notificationAction.action.goto=e.notificationAction.action.goto)),void 0!=e.schedule){var b=e.schedule.executeCommand,h={dateTime:"",unit:"",factor:""};if(void 0!=b.now)h.dateTime=moment().format();else if(void 0!=b.exact)h.dateTime=b.exact.dateTime;else if(void 0!=b.dueDate){var m=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],y="",v=m.dates.due;y=""!=v?moment(v,"YYYY-MM-DD"):moment().format(),h.dateTime=y,h.factor=b.dueDate.factor,h.unit=b.dueDate.unit}else if(void 0!=b.validDate){var m=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],y="",v=m.dates.valid;y=""!=validDate?moment(validDate,"YYYY-MM-DD"):moment().format(),h.dateTime=y,h.factor=b.validDate.factor,h.unit=b.validDate.unit}else if(void 0!=b.stepCreatedDate){var m=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],y="",g=m.step.dueDateTime;y=""!=g?moment(g).format():moment().format(),h.dateTime=y,h.factor=b.stepCreatedDate.factor,h.unit=b.stepCreatedDate.unit}else h.dateTime=moment().format();r.setSchedule(h)}n(e).then(function(e){u.notification.recipients=e,r.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button."),r.setAction(u);var a=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];r.setContext({step:{stepDateTime:a.step.dateTimeCreated}}),r.send().then(function(e){console.log(r);var i=util.success("Notification Worker processes successfully.",e);o(i)},function(e){o(e)})}).catch(function(e){console.log("Notification - getRecipients failed with error "+e),a(e)})})},reAssignmentNotification:function(e,i,t,o){return new Promise(function(a,n){var r=function(e){return new Promise(function(i,t){var o={};o.function={},o.function.users={},o.function.users=e.id,i(o)})},s=new NotificatioWorker(app),c=JSON.xpath("/subprocesses[_id eq '"+t+"']/meta-data/subprofileId",i,{})[0],p=window.location.pathname.split("/"),d=window.location.protocol+"//"+window.location.host+"/"+p[1],u={notification:{message:{rtf:{}},messageType:"","meta-data":{applicationId:i.app,communityId:i.communityId,profileId:i.profile,subProcessUUID:t,subProfileId:c},notificationType:"workflow",priority:"",recipients:{},url:d,keys:{profile:{name:"",id:""},community:{name:"",id:""},application:{name:"",id:""},currentUser:{name:"",id:""},subProcess:{name:"",id:"",validDate:"",dueDate:""},notification:{createdDateTime:moment().format()},step:{stepCreatedDateTime:"",stepName:"",stepId:""},node:{title:""}}}},l=JSON.xpath("/indicators[_id eq '"+app.profile._id+"']/title",i,{})[0];u.notification.keys.profile.name=l,u.notification.keys.profile.id=app.profile._id,u.notification.keys.community.name=app.getNameByLang(LOCAL_SETTINGS.COMMUNITY_CONFIG.communityName),u.notification.keys.community.id=LOCAL_SETTINGS.COMMUNITY_CONFIG.communityId;var f=JSON.xpath("/applications[appId eq '"+app.SCOPE.applicationId+"']",LOCAL_SETTINGS.COMMUNITY_CONFIG,{})[0];u.notification.keys.application.name=app.getNameByLang(f.name),u.notification.keys.application.id=f.appId,u.notification.keys.currentUser.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,u.notification.keys.currentUser.id=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,u.notification.keys.subProcess.name=JSON.xpath("/subprocesses[_id eq '"+t+"']/label",i,{})[0],u.notification.keys.subProcess.id=t,u.notification.keys.subProcess.validDate=h.dates.valid,u.notification.keys.subProcess.dueDate=h.dates.due;var m=h.step;u.notification.keys.step.stepCreatedDateTime=m.dateTimeCreated,u.notification.keys.step.stepId=m.id;var I=JSON.xpath("/processes/subProcesses[_id eq '"+h.id+"']/steps[_id eq '"+m.id+"']",app.SCOPE.workflow.config,{})[0];u.notification.keys.step.stepName=app.getNameByLang(I.name);var S=JSON.xpath("/indicators[_id eq '"+subprofileId+"']/title",app.SCOPE.workflow,{})[0];if(void 0==S?u.notification.keys.node.title="":u.notification.keys.node.title=S,u.notification.message.default="",u.notification.message.title=e.reAssignment.title,u.notification.message.rtf.markup=e.reAssignment.message,u.notification.messageType=e.reAssignment.messageType,u.notification.priority=e.reAssignment.priority,void 0!=e.reAssignment.notificationAction&&(u.notification.notificationAction={},u.notification.notificationAction.label=e.reAssignment.notificationAction.label,void 0!=e.reAssignment.notificationAction.action.URI?(u.notification.notificationAction.action={},u.notification.notificationAction.action.URI=e.reAssignment.notificationAction.action.URI):void 0!=e.reAssignment.notificationAction.action.goto&&(u.notification.notificationAction.action={},u.notification.notificationAction.action.goto=e.reAssignment.notificationAction.action.goto)),void 0!=e.reAssignment.schedule){var P=e.reAssignment.schedule.executeCommand,b={dateTime:"",unit:"",factor:""};if(void 0!=P.now)b.dateTime=moment().format();else if(void 0!=P.exact)b.dateTime=P.exact.dateTime;else if(void 0!=P.dueDate){var h=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],y="",v=h.dates.due;y=""!=v?moment(v,"YYYY-MM-DD"):moment().format(),b.dateTime=y,b.factor=P.dueDate.factor,b.unit=P.dueDate.unit}else if(void 0!=P.validDate){var h=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],y="",v=h.dates.valid;y=""!=validDate?moment(validDate,"YYYY-MM-DD"):moment().format(),b.dateTime=y,b.factor=P.validDate.factor,b.unit=P.validDate.unit}else if(void 0!=P.stepCreatedDate){var h=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],y="",g=h.step.dueDateTime;y=""!=g?moment(g).format():moment().format(),b.dateTime=y,b.factor=P.stepCreatedDate.factor,b.unit=P.stepCreatedDate.unit}else b.dateTime=moment().format();s.setSchedule(b)}r(o).then(function(e){u.notification.recipients=e,s.setAction(u),s.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button."),s.send().then(function(e){var i=util.success("Notification Worker processes successfully for reassignment.",e);a(i)},function(e){a(e)})}).catch(function(e){console.log("Notification - getRecipients failed with error "+e),n(e)})})},assignmentNotification:function(e,i,t,o){return new Promise(function(a,n){var r=function(e){return new Promise(function(i,t){var o={};o.function={},o.function.users={},o.function.users=e.id,i(o)})},s=new NotificatioWorker(app),c=JSON.xpath("/subprocesses[_id eq '"+t+"']/meta-data/subprofileId",i,{})[0],p=window.location.pathname.split("/"),d=window.location.protocol+"//"+window.location.host+"/"+p[1],u={notification:{message:{rtf:{}},messageType:"","meta-data":{applicationId:i.app,communityId:i.communityId,profileId:i.profile,subProcessUUID:t,subProfileId:c},notificationType:"workflow",priority:"",recipients:{},url:d,keys:{profile:{name:"",id:""},community:{name:"",id:""},application:{name:"",id:""},currentUser:{name:"",id:""},subProcess:{name:"",id:"",validDate:"",dueDate:""},notification:{createdDateTime:moment().format()},step:{stepCreatedDateTime:"",stepName:"",stepId:""},node:{title:""}}}},l=JSON.xpath("/indicators[_id eq '"+app.profile._id+"']/title",i,{})[0];u.notification.keys.profile.name=l,u.notification.keys.profile.id=app.profile._id,u.notification.keys.community.name=app.getNameByLang(LOCAL_SETTINGS.COMMUNITY_CONFIG.communityName),u.notification.keys.community.id=LOCAL_SETTINGS.COMMUNITY_CONFIG.communityId;var f=JSON.xpath("/applications[appId eq '"+app.SCOPE.applicationId+"']",LOCAL_SETTINGS.COMMUNITY_CONFIG,{})[0];u.notification.keys.application.name=app.getNameByLang(f.name),u.notification.keys.application.id=f.appId,u.notification.keys.currentUser.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,u.notification.keys.currentUser.id=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,u.notification.keys.subProcess.name=JSON.xpath("/subprocesses[_id eq '"+t+"']/label",i,{})[0],u.notification.keys.subProcess.id=t,u.notification.keys.subProcess.validDate=h.dates.valid,u.notification.keys.subProcess.dueDate=h.dates.due;var m=h.step;u.notification.keys.step.stepCreatedDateTime=m.dateTimeCreated,u.notification.keys.step.stepId=m.id;var I=JSON.xpath("/processes/subProcesses[_id eq '"+h.id+"']/steps[_id eq '"+m.id+"']",app.SCOPE.workflow.config,{})[0];u.notification.keys.step.stepName=app.getNameByLang(I.name);var S=JSON.xpath("/indicators[_id eq '"+subprofileId+"']/title",app.SCOPE.workflow,{})[0];if(void 0==S?u.notification.keys.node.title="":u.notification.keys.node.title=S,u.notification.message.default="",u.notification.message.title=e.assignment.title,u.notification.message.rtf.markup=e.assignment.message,u.notification.messageType=e.assignment.messageType,u.notification.priority=e.assignment.priority,void 0!=e.assignment.notificationAction&&(u.notification.notificationAction={},u.notification.notificationAction.label=e.assignment.notificationAction.label,void 0!=e.assignment.notificationAction.action.URI?(u.notification.notificationAction.action={},u.notification.notificationAction.action.URI=e.assignment.notificationAction.action.URI):void 0!=e.assignment.notificationAction.action.goto&&(u.notification.notificationAction.action={},u.notification.notificationAction.action.goto=e.assignment.notificationAction.action.goto)),void 0!=e.assignment.schedule){var P=e.assignment.schedule.executeCommand,b={dateTime:"",unit:"",factor:""};if(void 0!=P.now)b.dateTime=moment().format();else if(void 0!=P.exact)b.dateTime=P.exact.dateTime;else if(void 0!=P.dueDate){var h=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],y="",v=h.dates.due;y=""!=v?moment(v,"YYYY-MM-DD"):moment().format(),b.dateTime=y,b.factor=P.dueDate.factor,b.unit=P.dueDate.unit}else if(void 0!=P.validDate){var h=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],y="",v=h.dates.valid;y=""!=validDate?moment(validDate,"YYYY-MM-DD"):moment().format(),b.dateTime=y,b.factor=P.validDate.factor,b.unit=P.validDate.unit}else if(void 0!=P.stepCreatedDate){var h=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],y="",g=h.step.dueDateTime;y=""!=g?moment(g).format():moment().format(),b.dateTime=y,b.factor=P.stepCreatedDate.factor,b.unit=P.stepCreatedDate.unit}else b.dateTime=moment().format();s.setSchedule(b)}r(o).then(function(e){u.notification.recipients=e,s.setAction(u),s.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button."),s.send().then(function(e){console.log(s);var i=util.success("Notification Worker processes successfully for assignment.",e);a(i)},function(e){a(e)})}).catch(function(e){console.log("Notification - getRecipients failed with error "+e),n(e)})})},acceptanceNotification:function(e,i,t,o){return new Promise(function(a,n){var r=function(e){return new Promise(function(i,t){var o={};o.role=e,i(o)})},s=new NotificatioWorker(app),c=JSON.xpath("/subprocesses[_id eq '"+t+"']/meta-data/subprofileId",i,{})[0],p=window.location.pathname.split("/"),d=window.location.protocol+"//"+window.location.host+"/"+p[1],u={notification:{message:{rtf:{}},messageType:"","meta-data":{applicationId:i.app,communityId:i.communityId,profileId:i.profile,subProcessUUID:t,subProfileId:c},notificationType:"workflow",priority:"",recipients:{},url:d,keys:{profile:{name:"",id:""},community:{name:"",id:""},application:{name:"",id:""},currentUser:{name:"",id:""},subProcess:{name:"",id:"",validDate:"",dueDate:""},notification:{createdDateTime:moment().format()},step:{stepCreatedDateTime:"",stepName:"",stepId:""},node:{title:""}}}},l=JSON.xpath("/indicators[_id eq '"+app.profile._id+"']/title",i,{})[0];u.notification.keys.profile.name=l,u.notification.keys.profile.id=app.profile._id,u.notification.keys.community.name=app.getNameByLang(LOCAL_SETTINGS.COMMUNITY_CONFIG.communityName),u.notification.keys.community.id=LOCAL_SETTINGS.COMMUNITY_CONFIG.communityId;var f=JSON.xpath("/applications[appId eq '"+app.SCOPE.applicationId+"']",LOCAL_SETTINGS.COMMUNITY_CONFIG,{})[0];u.notification.keys.application.name=app.getNameByLang(f.name),u.notification.keys.application.id=f.appId,u.notification.keys.currentUser.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,u.notification.keys.currentUser.id=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,u.notification.keys.subProcess.name=JSON.xpath("/subprocesses[_id eq '"+t+"']/label",i,{})[0],u.notification.keys.subProcess.id=t,u.notification.keys.subProcess.validDate=h.dates.valid,u.notification.keys.subProcess.dueDate=h.dates.due;var m=h.step;u.notification.keys.step.stepCreatedDateTime=m.dateTimeCreated,u.notification.keys.step.stepId=m.id;var I=JSON.xpath("/processes/subProcesses[_id eq '"+h.id+"']/steps[_id eq '"+m.id+"']",app.SCOPE.workflow.config,{})[0];u.notification.keys.step.stepName=app.getNameByLang(I.name);var S=JSON.xpath("/indicators[_id eq '"+subprofileId+"']/title",app.SCOPE.workflow,{})[0];if(void 0==S?u.notification.keys.node.title="":u.notification.keys.node.title=S,u.notification.message.default="",u.notification.message.title=e.assignmentAcceptance.title,u.notification.message.rtf.markup=e.assignmentAcceptance.message,u.notification.messageType=e.assignmentAcceptance.messageType,u.notification.priority=e.assignmentAcceptance.priority,void 0!=e.assignmentAcceptance.notificationAction&&(u.notification.notificationAction={},u.notification.notificationAction.label=e.assignmentAcceptance.notificationAction.label,void 0!=e.assignmentAcceptance.notificationAction.action.URI?(u.notification.notificationAction.action={},u.notification.notificationAction.action.URI=e.assignmentAcceptance.notificationAction.action.URI):void 0!=e.assignmentAcceptance.notificationAction.action.goto&&(u.notification.notificationAction.action={},u.notification.notificationAction.action.goto=e.assignmentAcceptance.notificationAction.action.goto)),void 0!=e.assignmentAcceptance.schedule){var P=e.assignmentAcceptance.schedule.executeCommand,b={dateTime:"",unit:"",factor:""};if(void 0!=P.now)b.dateTime=moment().format();else if(void 0!=P.exact)b.dateTime=P.exact.dateTime;else if(void 0!=P.dueDate){
var h=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],y="",v=h.dates.due;y=""!=v?moment(v,"YYYY-MM-DD"):moment().format(),b.dateTime=y,b.factor=P.dueDate.factor,b.unit=P.dueDate.unit}else if(void 0!=P.validDate){var h=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],y="",v=h.dates.valid;y=""!=validDate?moment(validDate,"YYYY-MM-DD"):moment().format(),b.dateTime=y,b.factor=P.validDate.factor,b.unit=P.validDate.unit}else if(void 0!=P.stepCreatedDate){var h=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],y="",g=h.step.dueDateTime;y=""!=g?moment(g).format():moment().format(),b.dateTime=y,b.factor=P.stepCreatedDate.factor,b.unit=P.stepCreatedDate.unit}else b.dateTime=moment().format();s.setSchedule(b)}r(o).then(function(e){u.notification.recipients=e,s.setAction(u),s.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button."),s.setContext({process:{}}),s.send(s).then(function(e){console.log(s);var i=util.success("Notification Worker processes successfully for assignment.",e);a(i)},function(e){a(e)})}).catch(function(e){console.log("Notification - getRecipients failed with error "+e),n(e)})})}}}(),report=function(){return{createPerformanceReport:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=r,n.channels.push("createPerformanceReport"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.workplanSetId,c=e.configSetId,p=JSON.xpath("/indicators[category/term eq '"+s+"']/_id",app.SCOPE.workflow,{})[0],d=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+c+"']/instances[1]/uuid",i,{})[0],u={createPerformanceReport:{workplanUUID:p,configUUID:d,profilId:i.profile}};n.action=u,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("WorkplanReport Worker processed successfully.",e);o(a)},function(e){a(e)})})},createReport:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=r,n.channels.push("executeReport"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.PerformanceReportDefinitionSetId,c=e.reportingSDOSetId,p=JSON.xpath("/indicators[category/term eq '"+s+"']/_id",i,{})[0],d=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+c+"']/instances[1]/uuid",i,{})[0],u={createReport:{performanceReportDefinition:p,reportingSDO:d,profilId:i.profile}};n.action=u,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("Reprot Worker processed successfully.",e);o(a)},function(e){a(e)})})},sdoReport:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=r,n.channels.push("sdoReport"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.indicatorSetId,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],p={sdoReport:{sdoReportUUID:c,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};n.action=p,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("report Worker processed successfully.",e);o(a)},function(e){a(e)})})},executeReport:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=r,n.channels.push("executeReport"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.SDOreportSetId,c=e.reportingSDOSetid,p=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],d=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+c+"']/instances[1]/uuid",i,{})[0];void 0==p&&(p=JSON.xpath("/indicators[category/term eq '"+s+"']/_id",i,{})[0]);var u={executeReport:{sdoReportUUID:p,reportingSDOUUID:d,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};n.action=u,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("report Worker processed successfully.",e);o(a)},function(e){a(e)})})},generateView:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=r,n.channels.push("sdoReport"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.ViewConfigSetId,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],p={generateView:{viewConfigUUID:c,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};n.action=p,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("report Worker processed successfully.",e);o(a)},function(e){a(e)})})},requestReport:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=r,n.channels.push("executeReport"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.sdoRequestReportSetId,c=e.sdoReportCreationSetId,p=e.performanceReportSetId,d=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],u=JSON.xpath("/indicators[category/term eq '"+c+"']/_id",i,{})[0],l=JSON.xpath("/indicators[category/term eq '"+p+"']/_id",i,{})[0],f={requestReport:{performanceReportUUID:l,sdoRequestReportUUID:d,sdoReportCreationUUID:u,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};n.action=f,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("Request report Worker processed successfully.",e);o(a)},function(e){a(e)})})},generateBasicView:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=r,n.channels.push("sdoReport"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.sdoDataObjectViewSetId,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],p={generateBasicView:{sdoDataObjectViewUUID:c,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};n.action=p,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("generateBasicView Worker processed successfully.",e);o(a)},function(e){a(e)})})},generateUnionView:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=r,n.channels.push("sdoReport"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.sdoDataObjectViewUnionSetId,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],p={generateUnionView:{sdoDataObjectViewUnionUUID:c,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};n.action=p,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("generateUnionView Worker processed successfully.",e);o(a)},function(e){a(e)})})},sdoReportMultiple:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=r,n.channels.push("sdoReport"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.sdoReportCreationSetId,c=e.sdoReportViewsSetId,p=e.sdoReportJoinsSetId,d=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],u=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+c+"']/instances[1]/uuid",i,{})[0],l=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+p+"']/instances[1]/uuid",i,{})[0],f={sdoReportMultiple:{sdoReportCreationUUID:d,sdoReportViewsUUID:u,sdoReportJoinsUUID:l,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};n.action=f,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("sdoReportMultiple Worker processed successfully.",e);o(a)},function(e){a(e)})})},subprofileQuarterlyReport:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=r,n.channels.push("executeReport"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.scheduleReportIndicator,c=JSON.xpath("/indicators[category/term eq '"+s+"']/_id",i,{})[0],p=e.sdoReportApprovalIndicator,d=JSON.xpath("/indicators[category/term eq '"+p+"' and workflows[1]/processes[1]/subProcessUUID eq '"+t+"']/_id",i,{})[0],u={subprofileQuarterlyReport:{scheduleReportIndicatorUUID:c,sdoReportApprovalIndicatorUUID:d,subprofileCode:app.profile.subProfile.code,subprofileTitle:app.profile.subProfile.title,applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.workflow.profile,subProcessUUID:t}};n.action=u,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("QuarterlyReport report Worker processed successfully.",e);o(a)},function(e){a(e)})})}}}(),participants=function(){return{linkParticipants:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=r,n.channels.push("follow"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.EPWPLinkParticipantsInBulkId,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],p=e.EPWPLocalityId,d=JSON.xpath("/indicators[category/term eq '"+p+"']/_id",i,{})[0],u=e.EPWPActiveParticipantsId,l=JSON.xpath("/indicators[category/term eq '"+u+"']/_id",i,{})[0],f={linkParticipants:{EPWPLinkParticipantsInBulkIdUUID:c,EPWPLocalityIdUUID:d,EPWPActiveParticipantsIdUUID:l,profilId:i.profile}};n.action=f,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("EPWPLinkParticipants Worker processed successfully.",e);o(a)},function(e){a(e)})})},monthlyAttendance:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=r,n.channels.push("follow"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.EPWPMonthlyAttendanceBulkUploadUUID,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],p=e.EPWPActiveParticipantsIdUUID,d=JSON.xpath("/indicators[category/term eq '"+p+"']/_id",i,{})[0],u=e.EPWPMonthlyEmploymentPerLocalityUUID,l=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+u+"']/instances[1]/uuid",i,{})[0],f={monthlyAttendance:{EPWPMonthlyAttendanceBulkUploadUUID:c,EPWPActiveParticipantsIdUUID:d,EPWPMonthlyEmploymentPerLocalityUUID:l,profilId:i.profile}};n.action=f,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("monthlyAttendance Worker processed successfully.",e);o(a)},function(e){a(e)})})},monthlyProgressSummary:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=r,n.channels.push("follow"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.EPWPMonthlyProgressSummaryIdUUID,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],p={monthlyProgressSummary:{EPWPMonthlyProgressSummaryIdUUID:c,profilId:i.profile}};n.action=p,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("monthlyAttendance Worker processed successfully.",e);o(a)},function(e){a(e)})})},participantContracts:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=r,n.channels.push("follow"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=e.EPWPParticipantContractsIdUUID,c=JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+s+"']/instances[1]/uuid",i,{})[0],p={participantContracts:{EPWPParticipantContractsIdUUID:c,profilId:i.profile}};n.action=p,worker.send(n).then(function(e){worker.setWorkerInfoInSubprocess(n,i,t);var a=util.success("participantContracts Worker processed successfully.",e);o(a)},function(e){a(e)})})},genericLinkParticipants:function(e,i,t){return new Promise(function(e,i){})}}}(),worker=function(){return{getWorkerWrapper:function(){var e={source:"remote",type:"workerObject",_id:"",channels:["workerObject"],profileId:"",communityId:"",applicationId:"",subProcessUUID:"",message:"",messageType:"info",createdDateTime:"",senderUserId:"",subProfileId:"",action:{}};return e},send:function(e){return new Promise(function(i,t){console.log("Submitting Worker Object to server"),console.log(e),dao.save(e).then(function(e){i(e)}).catch(function(e){console.log("Error submitting worker response !!"+e),t(e)})})},sendWorker:function(e,i,t){return new Promise(function(o,a){var n=worker.getWorkerWrapper(),r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId),n._id=generateUUID(),n.communityId=app.SCOPE.getCommunityId(),n.applicationId=app.SCOPE.applicationId,n.createdDateTime=moment().format(),n.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,n.profileId=i.profile,n.subProcessUUID=t,n.subprofileId=r,n.channels.push("sendWorker"),n.channels.push("community_"+app.SCOPE.getCommunityId());var s=function(e,o,a){return new Promise(function(n,r){helper.getNodeValue(e,i,t).then(function(e){n({seq:o,paramName:a,dataValue:e})},function(e){r(e)})})},c=function(e){return new Promise(function(o,a){for(var n=[],r=e.length,c=0;c<e.length;c++){var p=e[c].parameterValue,d=e[c].seq,u=e[c].parameterName;s(p,d,u).then(function(e){n.push({seq:e.seq,paramName:e.paramName,paramValue:e.dataValue}),r--,0==r&&(n.push({seq:r+1,paramName:"communityId",paramValue:i.communityId}),n.push({seq:r+2,paramName:"applicationId",paramValue:i.app}),n.push({seq:r+3,paramName:"profileId",paramValue:i.profile}),n.push({seq:r+4,paramName:"subProcessUUID",paramValue:t}),o(n))},function(e){r--,0==r&&(n.push({seq:r+1,paramName:"communityId",paramValue:i.communityId}),n.push({seq:r+2,paramName:"applicationId",paramValue:i.app}),n.push({seq:r+3,paramName:"profileId",paramValue:i.profile}),n.push({seq:r+4,paramName:"subProcessUUID",paramValue:t}),o(n))})}})};if(void 0!=e.rest){var p=e.rest.parameters;c(p).then(function(r){var s={sendWorker:{rest:{}}};s.sendWorker.rest.uri=e.rest.uri,s.sendWorker.rest.profilId=i.profile,s.sendWorker.rest.parameters=r,n.action=s,worker.send(n).then(function(e){var r=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];r.spStatus="submitted",void 0==r.messages&&(r.messages=[]);var s={message:{i18n:{_id:"",en:"The server is processing your request. Please wait a few seconds and then click the refresh button.",pt:"The server is processing your request. Please wait a few seconds and then click the refresh button."}},type:"info"};r.messages.push(s),void 0==r.workers&&(r.workers=[]),r.workers.push({workerId:n._id,dateTime:moment().format()}),persistData("subprocesses",app.SCOPE.workflow,t).then(function(i){var t=util.success("Worker Rest processed successfully.",e);o(t)}).catch(function(e){console.log("Worker submitted subprocess file update failed"),a(e)})},function(e){console.log("Worker failed "),a(e)})},function(e){console.log("parameter creation failed. Abording worker object")})}else if(void 0!=e.functional){var p=e.functional.parameters;c(p).then(function(r){var s={sendWorker:{functional:{}}};s.sendWorker.functional.methodName=e.functional.methodName,s.sendWorker.functional.profilId=i.profile,s.sendWorker.functional.parameters=r,n.action=s,worker.send(n).then(function(e){var r=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0];r.spStatus="submitted",void 0==r.messages&&(r.messages=[]);var s={message:{i18n:{_id:"",en:"The server is processing your request. Please wait a few seconds and then click the refresh button.",pt:"The server is processing your request. Please wait a few seconds and then click the refresh button."}},type:"info"};r.messages.push(s),void 0==r.workers&&(r.workers=[]),r.workers.push({workerId:n._id,dateTime:moment().format()}),persistData("subprocesses",app.SCOPE.workflow,t).then(function(i){var t=util.success("Worker functional processed successfully.",e);o(t)}).catch(function(e){console.log("Worker submitted subprocess file update failed"),a(e)})},function(e){console.log("Worker failed "),a(e)})},function(e){console.log("parameter creation failed. Abording worker object")})}})},executeLocal:function(workerConfig,_WFInstance,uuid){return new Promise(function(resolve,reject){var processGetNodeValue=function(e,i,t){return new Promise(function(o,a){helper.getNodeValue(e,_WFInstance,uuid).then(function(e){o({seq:i,dataType:t,dataValue:e})},function(e){a(e)})})},processParams=function(e){return new Promise(function(i,t){for(var o=[],a=e.length,n=0;n<e.length;n++){var r=e[n].parameterValue,s=e[n].seq,c=e[n].dataType.dataType;processGetNodeValue(r,s,c).then(function(e){o.push({seq:e.seq,dataType:e.dataType,paramValue:e.dataValue}),a--,0==a&&i(o)},function(e){a--,0==a&&i(o)})}})},fixParamType=function(e,i){switch(i){case"string":var t=e.replace(/'/g,"\\'");return"'"+t+"'";case"date":case"dateTime":return"'"+e+"'";case"number":case"decimal":return e}},methodName=workerConfig.methodName,configParam=workerConfig.parameters;processParams(configParam).then(function(paramsArray){for(var pList="",i=0;i<paramsArray.length-1;i++)pList=pList+fixParamType(paramsArray[i].paramValue,paramsArray[i].dataType)+",";pList+=fixParamType(paramsArray[i].paramValue,paramsArray[i].dataType);var callbackSuccess=function(){return resolve("Function '"+methodName+"' executed. Response success.")},callbackFailure=function(){return reject("Function '"+methodName+"' executed. Response failed.")},spUUID="'"+uuid+"'",func=methodName+"("+pList+",callbackSuccess, callbackFailure,"+spUUID+")",exe=eval(func);console.log(exe),resolve("Local function executed")},function(e){console.log("parameter creation failed. Abording worker object"),reject(e)})})},setWorkerInfoInSubprocess:function(e,i,t){var o=JSON.xpath("/subprocesses[_id eq '"+t+"']",i,{})[0],a={message:{i18n:{_id:"",en:"The server is processing your request. Please wait a few seconds and then click the refresh button.",pt:"O servidor está processando sua solicitação. Por favor aguarde alguns segundos e depois clique no botão atualizar."}},type:"info"};o.messages=[],o.messages.push(a),void 0==o.workers&&(o.workers=[]),o.workers.push({workerId:e._id,dateTime:moment().format()})},create:function(e,i,t){return new Promise(function(o,a){var n=e.channel,r=e.action,s=worker.getWorkerWrapper(),c="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(c=app.profile.subprofileId),s._id=generateUUID(),s.communityId=app.SCOPE.getCommunityId(),s.applicationId=app.SCOPE.applicationId,s.createdDateTime=moment().format(),s.senderUserId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId,s.profileId=i.profile,s.subProcessUUID=t,s.subprofileId=c,s.channels.push(n),s.channels.push("community_"+app.SCOPE.getCommunityId());var p={};p[r]={};for(var d=0;d<e.indicators.length;d++){var u=e.indicators[d].label,l=e.indicators[d].setId,f=e.indicators[d].context,m="";m="subProcess"==f?JSON.xpath("/subprocesses[_id eq '"+t+"']/indicators[id eq '"+l+"']/instances[1]/uuid",i,{})[0]:JSON.xpath("/indicators[category/term eq '"+l+"']/_id",i,{})[0],p[r][u]=m}if(p[r].profilId=i.profile,void 0!=e.fixed)for(var d=0;d<e.fixed.length;d++){var I=e.fixed[d],S=Object.keys(I)[0];p[r][S]=I[S]}void 0!=e.dataFields&&(p[r].dataFields=e.dataFields),s.action=p,worker.send(s).then(function(e){worker.setWorkerInfoInSubprocess(s,i,t);var a=util.success(r+" worker processed successfully.",e);o(a)},function(e){a(e)})})}}}(),user=function(){return{addToRole:function(e,i,t){return new Promise(function(o,a){helper.getNodeValue(e.userName,t,i).then(function(n){helper.getNodeValue(e.userId,t,i).then(function(i){var t=JSON.xpath("/roles[id eq '"+e.roleId+"']/type",app.SCOPE.APP_CONFIG,{})[0];"instance"==t?rolesManager.doUserRegistration(i,n,e.roleId,"instance").then(function(e){var i=util.success("Role assigned to user in context instance",e);o(i)}).catch(function(e){console.log("rolesManager- instance fail"),o("role update failed")}):"subprofile"==t?rolesManager.doUserRegistration_node(i,n,e.roleId,"subprofile").then(function(e){var i=util.success("Role assigned to user in context subprofile",e);o(i)}).catch(function(e){console.log("rolesManager- subprofile fail"),o("role update failed")}):"adoption"==t?rolesManager.doUserRegistration_adoption(i,n,e.roleId,"adoption").then(function(e){var i=util.success("Role assigned to user in context adoption",e);o(i)}).catch(function(e){console.log("rolesManager- adoption fail"),o("role update failed")}):(console.log("Role not found in any context"),a("Role not found in any context"))}).catch(function(e){a(e)})}).catch(function(e){a(e)})})}}}();module.exports={community:community,application:application,performance:performance,worker:worker,sdo:sdo,taxonomy:taxonomy,subProcessInstance:subProcessInstance,variables:variables,notification:notification,report:report,participants:participants,user:user};

},{"./form":3,"./helper":4,"./nodeValue":6,"utility":8}],3:[function(require,module,exports){
"use strict";function create(args){var processId=args[0]||"",subProcess=args[1]||{},step=args[2]||{},action=args[3]||{},_WFInstance=args[6]||{},data=args[6]||{},indicators=subProcess.indicators||[],result=[],indicatorType=action._type,processSeq=args[4]||"",subProcessSeq=args[5]||"",createType=args[7]||"",subProcessId=subProcess._id,uuid=args[8]||"",baseUUID=args[9]||"",profile=_WFInstance.profile,inputData=args[10]||{},formCreateType=action.method.form.create,formType=action.method.form.type,paramObject={formCreateType:formCreateType,formType:formType};return new Promise(function(resolve,reject){var toProcess=indicators.length,broke=!1,resolveCaller=function(){if(0==broke){var e=util.success("Form create indicator persist success.",_WFInstance.indicators);resolve(e)}else{for(var s=[],t=0;t<_WFInstance.instance.processes.length;t++)_WFInstance.instance.processes[t].subProcesses.length>0&&s.push(_WFInstance.instance.processes[t]);_WFInstance.instance.processes=[],_WFInstance.instance.processes=s;var i=[],r=JSON.xpath("/subprocesses[_id eq '"+uuid+"']",_WFInstance,{})[0],a=r.id,o=JSON.xpath("/config/processes/subProcesses[_id eq '"+a+"']",_WFInstance,{})[0];if(void 0!=o.instanceType.newSequence){for(var t=0;t<o.indicators.length;t++){var n=o.indicators[t],c=n._id,d=JSON.xpath("distinct-values(/subprocesses[groupKey = '"+r.groupKey+"']/indicators[id = '"+c+"']/instances/uuid)",_WFInstance,{})[0];if(void 0!=d){var u=JSON.xpath("/indicators[_id eq '"+d+"']",_WFInstance,{})[0];void 0!=u&&(u.model.pending=u.model.approved)}}for(var l="",t=0;t<o.indicators.length-1;t++)l=l+"'"+o.indicators[t]._id+"',";l=l+"'"+o.indicators[o.indicators.length-1]._id+"'",i=JSON.xpath("distinct-values(/indicators[category/term = ("+l+")]/model/approved/subProcessUUID)",_WFInstance,{});var p=function(e,s){if(e==s.length){for(var t=[],i=0;i<_WFInstance.subprocesses.length;i++)_WFInstance.subprocesses[i].indicators.length>0&&t.push(_WFInstance.subprocesses[i]);_WFInstance.subprocesses=[],_WFInstance.subprocesses=t;var r=util.success("Gatekeeper initialisation failed (100)",{});reject(r)}else persistData("indicators",_WFInstance,s[e]).then(function(t){p(e+1,s)}).catch(function(t){p(e+1,s)})};p(0,i)}else{for(var f=[],t=0;t<_WFInstance.subprocesses.length;t++)_WFInstance.subprocesses[t].indicators.length>0&&f.push(_WFInstance.subprocesses[t]);_WFInstance.subprocesses=[],_WFInstance.subprocesses=f;var I=util.success("Gatekeeper initialisation failed (100)",{});reject(I)}}},subprocessType=JSON.xpath("/config/processes/subProcesses[_id eq '"+subProcessId+"']/type",_WFInstance,{})[0],formCreateFn=function(indicatorType,indicatorId,validDate,instantiateSource){return new Promise(function(resolve,reject){gatekeeper.instantiate(baseUUID,indicatorType,indicatorId,_WFInstance.profile,validDate,subProcessId,subprocessType).then(function(docArray){for(var i=0;i<docArray.length;i++){for(var object=docArray[i],index=0;index<_WFInstance.indicators.length;index++){var indicator=_WFInstance.indicators[index];if(indicator._id==object.model._id){_WFInstance.indicators.splice(index,1),_WFInstance.indicators.push(object.model);break}}if(!object.model._id.endsWith(":approved")&&!object.model._id.endsWith(":rejected")){object.model.model.pending.validDate=validDate,object.model.model.pending.subProcessUUID=uuid;var workflowObj={id:_WFInstance.config._id,instance:_WFInstance.instance._id,processes:[{id:processId,subProcessId:subProcess._id,subProcessUUID:uuid,step:{id:step.id,seq:step.seq,startDate:"",status:step.status,message:step.message,assignedTo:{userId:step.assignedTo.userId,name:step.assignedTo.name},comment:step.comment,complete:!1,endDate:""}}]};1==object.model.model.pending.seq&&void 0!=action.setWorkflowLabelInTitle&&""!=action.setWorkflowLabelInTitle&&1==action.setWorkflowLabelInTitle&&(object.model.title=inputData.label),void 0!=action.setDraft&&""!=action.setDraft&&1==action.setDraft&&(object.model.control.draft=!0),object.model.workflows.push(workflowObj);var mainId=object.model._id;gatekeeper.persist(docArray).then(function(savedArray){dao.get(mainId).then(function(data){var indicatorModel=ko.mapping.fromJS({defaultModel:{setId:indicatorId}}),sequence=data.model.pending.seq;gatekeeper.instantiateData(mainId,instantiateSource,indicatorModel,data.model.pending.seq,paramObject).then(function(data){if("200"==data[0].status){for(var index=0;index<_WFInstance.indicators.length;index++){var indicator=_WFInstance.indicators[index];if(indicator._id==data[0].model._id){_WFInstance.indicators.splice(index,1),_WFInstance.indicators.push(data[0].model);break}}if(1==sequence&&void 0!=action.setWorkflowLabelInField&&""!=action.setWorkflowLabelInField){var assignmentSetId=action.setWorkflowLabelInField.split(".")[0];if(assignmentSetId==indicatorId){console.log(data[0]);var txt=inputData.label,squote=txt.replace(/'/g,"\\'"),path="data[0].model.model.pending.data."+action.setWorkflowLabelInField+"='"+squote+"'";eval(path)}}gatekeeper.persist(data).then(function(e){dao.get(mainId).then(function(e){if(0==_WFInstance.indicators.length)_WFInstance.indicators.push(e),toProcess--,0==toProcess&&persistData("indicators",_WFInstance,uuid).then(function(e){util.success("Form create indicator persist success.",_WFInstance.indicators);resolveCaller()}).catch(function(e){console.error(e);util.success("Form create indicator persist failed.",{});broke=!0,resolveCaller()}),resolve({});else{for(var s=!1,t=0;t<_WFInstance.indicators.length;t++){var i=_WFInstance.indicators[t];i._id==e._id&&(s=!0,_WFInstance.indicators.splice(t,1),_WFInstance.indicators.push(e),t=_WFInstance.indicators.length,toProcess--,0==toProcess&&persistData("indicators",_WFInstance,uuid).then(function(e){util.success("Form create indicator persist success.",_WFInstance.indicators);resolveCaller()}).catch(function(e){console.error(e);util.success("Form create indicator persist failed.",{});broke=!0,resolveCaller()}),resolve({}))}0==s&&(_WFInstance.indicators.push(e),toProcess--,0==toProcess&&persistData("indicators",_WFInstance,uuid).then(function(e){util.success("Form create indicator persist success.",_WFInstance.indicators);resolveCaller()}).catch(function(e){console.error(e);util.success("Form create indicator persist failed.",{});broke=!0,resolveCaller()}),resolve({}))}}).catch(function(e){console.error(e);util.success("1 Gatekeeper initialisation failed with initialiseData message ",{});broke=!0,toProcess--,0==toProcess&&resolveCaller(),resolve({})})},function(e){console.error(e);util.success("2 Gatekeeper initialisation failed with initialiseData message ",{});broke=!0,toProcess--,0==toProcess&&resolveCaller(),resolve({})})}else{var failure=util.success("3 Gatekeeper initialisation failed with initialiseData message ",{});broke=!0,toProcess--,0==toProcess&&resolveCaller(),resolve({})}},function(e){util.success("4 Gatekeeper initialisation failed with initialiseData message ",{});broke=!0,toProcess--,0==toProcess&&resolveCaller(),resolve({})})}).catch(function(e){console.error(e);util.success("5 Gatekeeper initialisation failed with initialiseData message ",{});broke=!0,toProcess--,0==toProcess&&resolveCaller(),resolve({})})},function(e){console.error(e);util.success("6 Gatekeeper initialisation failed with initialiseData message ",{});broke=!0,toProcess--,0==toProcess&&resolveCaller(),resolve({})})}}},function(e){broke=!0,toProcess--,0==toProcess&&resolveCaller(),resolve({})})})},instantiateSource=FROM_DEFINITION,loopFunction=function(e,s){if(0==e.length)toProcess--,0==toProcess&&resolveCaller();else if(s<e.length){var t=e[s]._id,i=(util.getName(e[s].name,"en"),e[s].initiateData,"");void 0!=subProcess.instanceType.newSequence?i=INSTANCE_TYPE_NEW_SEQ:void 0!=subProcess.instanceType.newInstance&&(i=INSTANCE_TYPE_NEW_INS);if(void 0!=baseUUID&&""!=baseUUID&&baseUUID.length>0){var r=JSON.xpath("/subprocesses[_id eq '"+baseUUID+"']",_WFInstance,{})[0];void 0==subProcess.periodType.periodic&&baseUUID!=uuid&&(r.active=!1),instantiateSource=FROM_AUTHORISED}else{var a=JSON.xpath("/indicators[setId eq '"+t+"']/cardinality",app.SCOPE.APP_CONFIG,{})[0];if(i==INSTANCE_TYPE_NEW_INS)if(a==INDICATOR_CARDINALITY_SINGLE){var o=JSON.xpath("/indicators[category/term eq '"+t+"']/_id",_WFInstance,{});instantiateSource=o.length>0?FROM_AUTHORISED:FROM_DEFINITION}else instantiateSource=FROM_DEFINITION;else if(a==INDICATOR_CARDINALITY_SINGLE){var o=JSON.xpath("/indicators[category/term eq '"+t+"']/_id",app.SCOPE.workflow,{});instantiateSource=o.length>0?FROM_AUTHORISED:FROM_DEFINITION}else{var n="/indicators[category/term eq '"+t+"' and id = /subprocesses[id = '"+subProcessId+"']/indicators/instances/uuid]/_id",c=library.getSubprofileSubprocessIds();subprocessType==PROCESS_TYPE_SUBPROFILE&&(n="/indicators[category/term eq '"+t+"' and id = /subprocesses[id = '"+subProcessId+"' and id = "+c+"]/indicators/instances/uuid]/_id");var o=JSON.xpath(n,_WFInstance,{});instantiateSource=o.length>0?FROM_AUTHORISED:FROM_DEFINITION}}formCreateFn(i,t,inputData.validDate,instantiateSource).then(function(t){loopFunction(e,s+1)}).catch(function(e){broke=!0,toProcess--,0==toProcess&&resolveCaller()})}};loopFunction(indicators,0)})}function setInstanceTitle(e){var s=e[0]||{},t=e[2]||"",i=e[4]||{},r=i.label;return new Promise(function(e,i){for(var a=JSON.xpath("/subprocesses[_id eq '"+t+"']",s,{})[0],o=a.indicators,n=0;n<o.length;n++){var c=o[n].instances[0].uuid,d=JSON.xpath("/indicators[_id eq '"+c+"']",s,{})[0];d.title=o[n].id+" "+r}e("Set Title Success",o)})}function deleteProfile(e){var s=e[0]||{},t=s.profile;return new Promise(function(e,i){var r="";void 0!=app.profile&&void 0!=app.profile.subprofileId&&(r=app.profile.subprofileId);var a={source:"remote",type:"workerObject",_id:generateUUID(),channels:["deleteProfile","community_"+app.SCOPE.getCommunityId(),"workerObject"],communityId:app.SCOPE.getCommunityId(),applicationId:app.SCOPE.applicationId,profileId:s.profile,message:"",subprofileId:r,messageType:"info",createdDateTime:moment().format(),senderUserId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,notification:{},profile:{action:"deleteProfile",profileId:t}};console.log(a),dao.upsert(a).then(function(s){console.log("Worker Object submitted for profile("+t+") deletion."),console.log(s),e(s)}).catch(function(e){console.log(e),i(data)})})}function createProfile(e){var s=e[1]||{},t=s.communityId,i=s.profile;return new Promise(function(e,s){library.createProfileDocuments(t,i).then(function(s){var t=util.success("Form created successfully.",s);e(t)}).catch(function(e){console.error(e);var t=util.success("ERROR: Profile creation failed",{});s(t)})})}function setDraft(e){var s=e[0]||{},t=(s.communityId,s.profile,e[2]||"");return new Promise(function(e,i){for(var r=JSON.xpath("/subprocesses[_id eq '"+t+"']",s,{})[0],a=r.indicators,o=0;o<a.length;o++){var n=a[o].instances[0].uuid,c=JSON.xpath("/indicators[_id eq '"+n+"']",s,{})[0];c.control.draft=!0}e("Set Draft Success",a)})}function setUnDraft(e){var s=e[0]||{},t=(s.communityId,s.profile,e[2]||"");return new Promise(function(e,i){for(var r=JSON.xpath("/subprocesses[_id eq '"+t+"']",s,{})[0],a=r.indicators,o=0;o<a.length;o++){var n=a[o].instances[0].uuid,c=JSON.xpath("/indicators[_id eq '"+n+"']",s,{})[0];c.control.draft=!1}e("Set Draft Success",a)})}function save(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var i=util.success("Form indicator set saved successfully.",s);e(i)})}function submit(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var i=util.success("Form submitted successfully.",s);e(i)})}function authorise(e){var s=(e[0]||"",e[1]||{}),t=(s._id,e[2]||"",e[3]||"",e[4]||{}),i=e[6]||"";return new Promise(function(e,s){for(var r=(JSON.xpath("/subprocesses[_id eq '"+i+"']",app.SCOPE.workflow,{})[0],JSON.xpath("/subprocesses[_id eq '"+i+"']/indicators/instances/uuid",t,{})),a=r.length,o=[],n=[],c=0;c<r.length;c++)gatekeeper.authorise(r[c]).then(function(r){gatekeeper.persist(r).then(function(r){for(var c="",d=0;d<r.length;d++)r[d].id.endsWith(":approved")||(c=r[d].id);dao.get(c).then(function(r){if(0==t.indicators.length)t.indicators.push(r),a--,0==a&&persistData("indicators",t,i).then(function(s){var t=util.success("Form authorised successfully.",o);e(t)}).catch(function(e){console.error(e);var t=util.success("Form authorised persist failed.",{});s(t)});else{for(var c=!1,d=0;d<t.indicators.length;d++){var u=t.indicators[d];if(u._id==r._id&&(c=!0,n.push(r),a--,0==a)){for(var l=t.indicators.length,p=n.length,f=0;f<l;f++){for(var I=!1,v=0;v<p;v++)t.indicators[f]._id==n[v]._id&&(I=!0);I||n.push(t.indicators[f])}t.indicators=n;break}}1==c&&0==a&&persistData("indicators",t,i).then(function(s){var t=util.success("Form authorised successfully.",o);e(t)}).catch(function(e){console.error(e);var t=util.success("Form authorised persist failed.",{});s(t)})}}).catch(function(e){console.error(e)})},function(e){console.error(err)})},function(s){if(a--,0==a){var t=util.success("Form authorised successfully.",o);e(t)}})})}function close(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var i=util.success("Form closed successfully.",s);e(i)})}function updateIndicator(args){var _WFInstance=args[0]||{},uuid=args[1]||"",path=args[2]||"",dataValue=args[3]||"";return new Promise(function(resolve,reject){var setId=path.split(".",1)[0],indObject=JSON.xpath("/indicators[workflows/processes/subProcessUUID = '"+uuid+"' and category/term = '"+setId+"']",_WFInstance,{})[0],squote=(dataValue+"").replace(/'/g,"\\'"),expr="indObject.model.pending.data."+path+" = '"+squote+"'";eval(expr);var itemsToProcess=1,stuff=[],obj={};obj.model=indObject,stuff.push(obj);var success=util.success("Indicator updated.",stuff);resolve(success)})}function updateIndicatorWrapper(args){var _WFInstance=args[0]||{},uuid=args[1]||"",path=args[2]||"",dataValue=args[3]||"",indicatorSetId=args[4]||"";return new Promise(function(resolve,reject){var indObject=JSON.xpath("/indicators[workflows/processes/subProcessUUID = '"+uuid+"' and category/term = '"+indicatorSetId+"']",_WFInstance,{})[0],squote=dataValue.replace(/'/g,"\\'"),expr="indObject."+path+" = '"+squote+"'";eval(expr);var itemsToProcess=1,stuff=[],obj={};obj.model=indObject,stuff.push(obj);var success=util.success("Indicator updated.",stuff);resolve(success)})}function markUpdateIndicator(e){var s=e[0]||{},t=e[1]||"",i=e[2]||"",r=e[3]||"";return new Promise(function(e,a){var o=JSON.xpath("/indicators[workflows/processes/subProcessUUID = '"+t+"' and category/term = '"+r+"']",s,{})[0];o.model.pending.status=i;var n=[],c={};c.model=o,n.push(c);var d=util.success("Indicator updated.",n);e(d)})}function setStatus(e){var s=e[0]||{},t=e[1]||"",i=e[2]||"";return new Promise(function(e,r){var a=JSON.xpath("/subprocesses[_id eq '"+t+"']",s,{})[0];a.step.message=i,e("Set profile status Success",a)})}var util=require("utility"),gatekeeper=new GK;module.exports={create:create,save:save,submit:submit,authorise:authorise,close:close,setDraft:setDraft,setUnDraft:setUnDraft,createProfile:createProfile,setInstanceTitle:setInstanceTitle,deleteProfile:deleteProfile,updateIndicator:updateIndicator,markUpdateIndicator:markUpdateIndicator,updateIndicatorWrapper:updateIndicatorWrapper};

},{"utility":8}],4:[function(require,module,exports){
"use strict";function getLanguageMessage(message){var language=service.getLanguage(),res=eval("message.i18n."+language);return res}function getNodeValue(data,_WFInstance,uuid){return new Promise(function(resolve,reject){if(void 0!=data.value){var inputDataType="string";inputDataType=void 0!=data.value.datatype.dataType?data.value.datatype.dataType:data.value.datatype;var inputValue=data.value.data;resolve("number"==inputDataType?Number(inputValue):"string"==inputDataType?inputValue:"integer"==inputDataType?parseInt(inputValue):"decimal"==inputDataType?parseFloat(inputValue):"date"==inputDataType||"dateTime"==inputDataType?inputValue:inputValue)}else if(void 0!=data.indicatorUUID){var indicatorUUID=null,subprocess=JSON.xpath("/subprocesses[_id eq '"+uuid+"']",_WFInstance,{})[0];0==subprocess.indicators.length?indicatorUUID=JSON.xpath("/indicators[category/term eq '"+data.indicatorUUID.indicatorSetId+"']/_id",_WFInstance,{})[0]:(indicatorUUID=JSON.xpath("/indicators[id eq '"+data.indicatorUUID.indicatorSetId+"']/instances/uuid",subprocess,{})[0],void 0==indicatorUUID&&(indicatorUUID=JSON.xpath("/indicators[category/term eq '"+data.indicatorUUID.indicatorSetId+"']/_id",_WFInstance,{})[0])),resolve(indicatorUUID)}else if(void 0!=data.indicator){var indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+data.indicator.indicatorSetId+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],xpath="/model/pending/data/"+data.indicator.indicatorSetId+"/"+data.indicator.elementId,seq=JSON.xpath("count(/subprocesses[_id eq '"+uuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+uuid+"']/id])",_WFInstance,{})[0]+1,subprocessType=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+uuid+"']/id]/type",_WFInstance,{})[0],part=library.getSubprofileSubprocessIds();subprocessType==PROCESS_TYPE_SUBPROFILE&&(seq=JSON.xpath("count(/subprocesses[_id eq '"+uuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+uuid+"']/id and _id = /subprocesses[_id = "+part+"]/_id])",_WFInstance,{})[0]+1);var replacedPath=replaceAll(xpath,"#SEQUENCE#",seq),validDate=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/dates/valid",_WFInstance,{})[0],concatValidDate="'"+validDate+"'",newPath=replaceAll(replacedPath,"#END_DATE#",concatValidDate),dotReplaced=replaceAll(newPath,"[.]","/"),retValue=JSON.xpath(dotReplaced,indObject,{})[0];resolve(retValue)}else if(void 0!=data.system)resolve("ERROR: Unimplemented system type found.");else if(void 0!=data.variable)if(void 0!=data.variable.profile){var variableName=data.variable.profile,profileId=_WFInstance.profile,profileVariableFileName=profileId+":variables";dao.get(profileVariableFileName).then(function(file){var obj=eval("file."+variableName);if("object"==typeof obj){var seq=JSON.xpath("count(/subprocesses[_id eq '"+uuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+uuid+"']/id])",_WFInstance,{})[0]+1,subprocessType=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+uuid+"']/id]/type",_WFInstance,{})[0],part=library.getSubprofileSubprocessIds();subprocessType==PROCESS_TYPE_SUBPROFILE&&(seq=JSON.xpath("count(/subprocesses[_id eq '"+uuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+uuid+"']/id and _id = /subprocesses[_id = "+part+"]/_id])",_WFInstance,{})[0]+1);var valuePath="/"+variableName+"["+seq+"]/value",retValue=JSON.xpath(valuePath,file,{})[0];resolve(retValue)}else"string"==typeof obj&&resolve(obj)}).catch(function(e){reject("ERROR: Profile variables not found")})}else reject("ERROR: Unimplemented profile type found.");else if(void 0!=data.indicatorWrapper){var indicatorSet=data.indicatorWrapper.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(data.indicatorWrapper.path,"[.]","/"),xpath="/"+elementpath,value=JSON.xpath(xpath,indObject,{})[0];resolve(value)}else if(void 0!=data.calculated){for(var value="",separator=data.calculated.separator,i=0;i<data.calculated.elements.length-1;i++){var elements=data.calculated.elements,possibleItems=["elementProperty","constantValue","elementWrapper","currentDate","randomDigits","profileObjectElement","profileObjectWrapper","currentFinancialYear"];switch(propertyExists(elements[i],possibleItems)){case"elementProperty":var indicatorSet=elements[i].elementProperty.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(elements[i].elementProperty.elementId,"[.]","/"),xpath="/model/pending/data/"+indicatorSet+"/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value=value+itemValue+separator;break;case"constantValue":var itemValue=elements[i].constantValue.value;value=value+itemValue+separator;break;case"elementWrapper":var indicatorSet=elements[i].elementWrapper.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(elements[i].elementWrapper.elementId,"[.]","/"),xpath="/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value=value+itemValue+separator;break;case"currentDate":value=value+formatDate(new Date)+separator;break;case"randomDigits":var digits=elements[i].randomDigits.digits,random=Math.random(),exp=Math.pow(10,digits),intPart=random*exp^0;value=value+intPart+separator;break;case"profileObjectElement":var indicatorSet=elements[i].profileObjectElement.indicatorSetId,indObject=JSON.xpath("/indicators[category/term eq 'appProfile']",app.SCOPE.workflow,{})[0],elementpath=replaceAll(elements[i].profileObjectElement.elementId,"[.]","/"),xpath="/model/pending/data/"+indicatorSet+"/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value=value+itemValue+separator;break;case"profileObjectWrapper":var indicatorSet=elements[i].profileObjectWrapper.indicatorSetId,indObject=JSON.xpath("/indicators[category/term eq 'appProfile']",app.SCOPE.workflow,{})[0],elementpath=replaceAll(elements[i].profileObjectWrapper.wrapperElementId,"[.]","/"),xpath="/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value=value+itemValue+separator;break;case"currentFinancialYear":var startDate=elements[i].currentFinancialYear.startDate,startMonth=elements[i].currentFinancialYear.startMonth,financialYear=(new Date).getFullYear()+"-"+startMonth+"-"+startDate;value=value+financialYear+separator;break;default:reject("No method found from implemented list.")}}var i=data.calculated.elements.length-1,elements=data.calculated.elements,possibleItems=["elementProperty","constantValue","elementWrapper","currentDate","randomDigits","profileObjectElement","profileObjectWrapper","currentFinancialYear"];switch(propertyExists(elements[i],possibleItems)){case"elementProperty":var indicatorSet=elements[i].elementProperty.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(elements[i].elementProperty.elementId,"[.]","/"),xpath="/model/pending/data/"+indicatorSet+"/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value+=itemValue;break;case"constantValue":var itemValue=elements[i].constantValue.value;value+=itemValue;break;case"elementWrapper":var indicatorSet=elements[i].elementWrapper.indicatorSetId,indicatorUUID=JSON.xpath("/subprocesses[_id eq '"+uuid+"']/indicators[id eq '"+indicatorSet+"']/instances/uuid",_WFInstance,{})[0],indObject=JSON.xpath("/indicators[_id eq '"+indicatorUUID+"']",_WFInstance,{})[0],elementpath=replaceAll(elements[i].elementWrapper.elementId,"[.]","/"),xpath="/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value+=itemValue;break;case"currentDate":value+=formatDate(new Date);break;case"randomDigits":var digits=elements[i].randomDigits.digits,random=Math.random(),exp=Math.pow(10,digits),intPart=random*exp^0;value+=intPart;break;case"profileObjectElement":var indicatorSet=elements[i].profileObjectElement.indicatorSetId,indObject=JSON.xpath("/indicators[category/term eq 'appProfile']",app.SCOPE.workflow,{})[0],elementpath=replaceAll(elements[i].profileObjectElement.elementId,"[.]","/"),xpath="/model/pending/data/"+indicatorSet+"/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value+=itemValue;break;case"profileObjectWrapper":var indicatorSet=elements[i].profileObjectWrapper.indicatorSetId,indObject=JSON.xpath("/indicators[category/term eq 'appProfile']",app.SCOPE.workflow,{})[0],elementpath=replaceAll(elements[i].profileObjectWrapper.wrapperElementId,"[.]","/"),xpath="/"+elementpath,itemValue=JSON.xpath(xpath,indObject,{})[0];value+=itemValue;break;case"currentFinancialYear":var startDate=elements[i].currentFinancialYear.startDate,startMonth=elements[i].currentFinancialYear.startMonth,financialYear=(new Date).getFullYear()+"-"+startMonth+"-"+startDate;value+=financialYear;break;default:reject("No method found from implemented list.")}resolve(value)}else if(void 0!=data.subProcess)if(void 0!=data.subProcess.path){for(var path=data.subProcess.path,arr=path.split("."),pathItems="",i=0;i<arr.length;i++)pathItems=pathItems+"['"+arr[i]+"']";var subprocess=JSON.xpath("/subprocesses[_id eq '"+uuid+"']",_WFInstance,{})[0],value=eval("subprocess"+pathItems);resolve(value)}else void 0!=data.subProcess.stepUser})}function replaceAll(e,a,t){return"function"!=typeof e.replace&&(console.log(a+" "+t),console.log(e)),e.replace(new RegExp(a,"g"),t)}function formatDate(e){var a=e.getDate(),t=e.getMonth(),i=e.getFullYear();return a+"-"+t+"-"+i}function compare(e,a,t){switch(a){case">":return e>t;case"<":return e<t;case">=":return e>=t;case"<=":return e<=t;case"==":return e==t;case"!=":return e!=t}}module.exports={getLanguageMessage:getLanguageMessage,getNodeValue:getNodeValue,compare:compare};

},{}],5:[function(require,module,exports){
"use strict";function getProcess(e,s,t){return new Promise(function(n,i){try{var c=[],r=[];t.instance.processes.filter(function(s){s.id==e&&(r=s)}),util.syncLoop(r.subProcesses.length,function(n){var o=n.iteration(),u=r.seq,f=r.subProcesses[o].id,a=r.subProcesses[o].seq;getSubProcess(e,u,f,a,s,t).then(function(e){c.push(e),n.next()},function(e){n.break(),i(e)})},function(){n(c)})}catch(e){i(e)}})}function getSubProcess(e,s,t,n,i,c){return new Promise(function(r,o){try{var u={id:"",seq:"",name:"",help:"",dates:"",step:""},f=[],a=[];c.instance.processes.filter(function(i){if(i.id==e&&i.seq==s){i.subProcesses.length;i.subProcesses.filter(function(e){e.id==t&&e.seq==n&&0==e.complete&&(f=e)})}}),c.config.processes.filter(function(s){s._id==e&&s.subProcesses.filter(function(e){e._id==t&&(a=e)})}),u.id=a._id,u.seq=f.seq,u.name=util.getName(a.name,i),u.help=util.getName(a.help,i),u.dates=f.dates,u.step=f.step,r(u)}catch(e){o(e)}})}function prepareNotificationScreen(){""}var util=require("utility");module.exports={getProcess:getProcess};

},{"utility":8}],6:[function(require,module,exports){
"use strict";function get(){return new Promise(function(e,t){})}module.exports={get:get};

},{}],7:[function(require,module,exports){
"use strict";function count(e){return void 0!==e?e.length:0}function preRequisites(e,s,t){return new Promise(function(i,n){var o=[];try{util.syncLoop(e.length,function(i){var a=i.iteration();preRequisite(e[a],s,t).then(function(e){o.push(!0),i.next()},function(e){o.push(!1),i.break(),n(e)})},function(){if(o.every(Boolean)){var e=util.success("Pre-requisites completed successfully.",{});i(e)}else{var s=util.error("WFPreRequisiteError","Not all pre-requisites passed.");n(s)}})}catch(e){n(e)}})}function preRequisite(prerequisite,_WFInstance,spuuid){return new Promise(function(resolve,reject){if(void 0!=prerequisite.check.numberProcessInstances){var numberProcessInstances=prerequisite.check.numberProcessInstances,_filterOperator=numberProcessInstances.operator,xpathOperator="";switch(_filterOperator){case"greaterThan":xpathOperator="gt";break;case"lessThan":xpathOperator="lt";break;case"greaterThanEqual":xpathOperator="ge";break;case"lessThanEqual":xpathOperator="le";break;case"equalTo":xpathOperator="eq";break;case"notEqualTo":xpathOperator="ne"}var _subprocessId=numberProcessInstances.subProcessId,_filterElement="step/status",_filterValue=numberProcessInstances.type,innerXpath="/"+_filterElement+"[. eq '"+_filterValue+"']",fullPath="count(/subprocesses[id eq '"+_subprocessId+"']"+innerXpath+")",prereqProcessType=JSON.xpath("/config/processes/subProcesses[_id eq '"+_subprocessId+"']/type",_WFInstance,{})[0],part=library.getSubprofileSubprocessIds();void 0!=app.profile.subprofileId&&""!=app.profile.subprofileId&&void 0!=prereqProcessType&&prereqProcessType==PROCESS_TYPE_SUBPROFILE&&(fullPath="count(/subprocesses[id eq '"+_subprocessId+"' and _id = "+part+"]"+innerXpath+")");var subjectCount=JSON.xpath(fullPath,_WFInstance,{})[0],countValue=prerequisite.check.numberProcessInstances.count,compare=util.compare(subjectCount,prerequisite.check.numberProcessInstances.operator,parseInt(countValue));if(compare){var success=util.success("Pre-requisites passed.",{});resolve(success)}else{var message=helper.getLanguageMessage(prerequisite.message),error=util.error("WFPreRequisiteError",message);reject(error)}}else if(void 0!=prerequisite.check.variable){var scope=prerequisite.check.variable.scope,fileName="";if("profile"==scope){var profileId=_WFInstance.profile;fileName=profileId+":variables"}else if("subProfileSubProcessInstance"==scope){var subProfileId=app.profile.subprofileId;fileName=subProfileId+":variables"}else reject("ERROR: Scope '"+scope+"' not implemented in pre-requisites");dao.get(fileName).then(function(file){var variableName=prerequisite.check.variable.name,obj=eval("file."+variableName),subjectValueCalculated;if("object"==typeof obj){var seq=JSON.xpath("count(/subprocesses[_id eq '"+spuuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+spuuid+"']/id])",_WFInstance,{})[0]+1,subprocessType=JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '"+spuuid+"']/id]/type",_WFInstance,{})[0],part=library.getSubprofileSubprocessIds();subprocessType==PROCESS_TYPE_SUBPROFILE&&(seq=JSON.xpath("count(/subprocesses[_id eq '"+spuuid+"']/preceding-sibling::node()[id = /subprocesses[_id eq '"+spuuid+"']/id and _id = /subprocesses[_id = "+part+"]/_id])",_WFInstance,{})[0]+1);var valuePath="/"+variableName+"["+seq+"]/value";subjectValueCalculated=JSON.xpath(valuePath,file,{})[0]}else"string"==typeof obj&&(subjectValueCalculated=obj);var inputValue=prerequisite.check.variable.value.data,inputDataType=prerequisite.check.variable.value.dataType.dataType,finalValue;"number"==inputDataType?finalValue=Number(inputValue):"string"==inputDataType?finalValue=inputValue:"integer"==inputDataType?finalValue=parseInt(inputValue):"decimal"==inputDataType?finalValue=parseFloat(inputValue):"date"!=inputDataType&&"dateTime"!=inputDataType||(finalValue=inputValue);var compare=util.compare(subjectValueCalculated,prerequisite.check.variable.operator,finalValue);if(compare){var success=util.success("Variable Pre-requisites passed.",{});resolve(success)}else{var message=helper.getLanguageMessage(prerequisite.message),error=util.error("WFPreRequisiteError",message);reject(error)}}).catch(function(e){var s=helper.getLanguageMessage(prerequisite.message),e=util.error("WFPreRequisiteError:",s);reject(e)})}else{var error=util.error("WFPreRequisiteError","Pre-requisite type not defined.");reject(error)}})}function preActions(e,s,t){return new Promise(function(i,n){var o=[];try{var a=JSON.xpath("/subprocesses[_id eq '"+t+"']",s,{})[0],r=a["meta-data"].processConfigId,c=a["meta-data"].subProcessConfigId,u=a["meta-data"].subProcessInsSeq,d=a["meta-data"].subProcessInsSeq,p=JSON.xpath("/processes[_id eq '"+r+"']/subProcesses[_id eq '"+c+"']",s.config,{})[0],l=JSON.xpath("/subprocesses[_id eq '"+t+"']/step",s,{})[0];util.syncLoop(e.length,function(i){var a=i.iteration();action(e[a],r,u,c,d,p,l,s,{},t).then(function(e){o.push(!0),i.next()},function(e){o.push(!1),i.break(),n(e)})},function(){if(o.every(Boolean)){var e=util.success("Pre-actions completed successfully.",{});i(e)}else{var s=util.error("WFPreRequisiteError","Not all pre-actions passed.");n(s)}})}catch(e){n(e)}})}function getSubProcess(e,s){return void 0==s.subprocesses?[]:void s.subprocesses.filter(function(s){if(s.id==e)return s})}function subProcess(e,s,t,i,n,o,a,r){var c=[],u=[],d=[];r.instance.processes.filter(function(e){if(e.id==s&&e.seq==t){e.subProcesses.length;e.subProcesses.filter(function(e){if(e.id==i&&e.seq==n){var s=e.uuid;r.subprocesses.filter(function(e){e._id==s&&(c=e)})}})}}),r.config.processes.filter(function(e){e._id==s&&(u=e,e.subProcesses.filter(function(e){e._id==i&&(d=e)}))});var p="",l=a.baseUUID;if(void 0!=l&&""!=l&&l.length>0){var f=JSON.xpath("/subprocesses[_id eq '"+l+"']",r,{})[0];p=f.groupKey}else{for(var m="",h=0;h<d.indicators.length-1;h++)m=m+"'"+d.indicators[h]._id+"',";m=m+"'"+d.indicators[h]._id+"'";var g=JSON.xpath("/indicators[setId = ("+m+") and cardinality eq 'single']",app.SCOPE.APP_CONFIG,{}).length;if(void 0!=d.instanceType.newSequence||g>0){var f=JSON.xpath("/instance/processes[id eq '"+s+"']",r,{})[0];p=void 0!=f&&f.subProcesses.length>0?f.subProcesses[0].groupKey:generateUUID()}else p=generateUUID()}var v=JSON.xpath("count(/processes/subProcesses[groupKey eq '"+p+"'])",r.instance,{})[0],S=a.label,I=e,b={_id:I,id:i,type:"workflowInstanceSubProcess",dateTimeCreated:moment().format(),dueDateTime:moment().format(),seq:n,initiated:!1,dates:{created:"",valid:"",start:"",due:"",closed:""},complete:!1,indicators:[],step:{},active:!0,groupKey:p,label:S,channels:["community_"+app.SCOPE.getCommunityId(),"profile_"+app.SCOPE.profileId,"application_"+app.SCOPE.applicationId,"community_"+app.SCOPE.getCommunityId()+"_application_"+app.SCOPE.applicationId],history:[],"meta-data":{applicationId:app.SCOPE.applicationId,communityId:app.SCOPE.getCommunityId(),profileId:app.SCOPE.profileId,subprofileId:void 0==o?"":o,processConfigId:s,subProcessConfigId:i,subProcessInsSeq:v+1},messages:[],spStatus:""};return void 0!=app.profile.subprofileId&&""!=app.profile.subprofileId?(b.channels.push("profile_"+app.SCOPE.profileId+"_subprofile_"+app.profile.subprofileId),b.channels.push("subprofile_"+app.profile.subprofileId)):(b.channels.push("profile_"+app.SCOPE.profileId+"_subprofile_0"),b.channels.push("subprofile_0")),r.subprocesses.push(b),new Promise(function(e,o){try{var p=u.preActions;preActions(p,r,I).then(function(p){var l=u.prerequisites;preRequisites(l,r,I).then(function(u){var p=d.initiate;initiate(p,c,a).then(function(c){b.initiated=c.data.initiated,b.dates=c.data.dates;var u=d.steps[0]._id,p=(d.steps[0].transition[0]._id,1);step(s,t,i,n,u,p,a,r,I).then(function(s){console.log("Step execution complete"),console.log(s),b.step=s.data,indicators(d.indicators,r,b._id).then(function(s){b.indicators=s.data,console.log("indicators function execution complete"),console.log(s);var t=util.success(s.message,b);e(t)},function(e){o(e)})},function(e){console.log("err == "),console.log(e),console.log(a),console.log(r),console.log(I),o(e)})},function(e){r.subprocesses=r.subprocesses.filter(function(e){return!(e._id==I)}),o(e)})},function(e){r.subprocesses=r.subprocesses.filter(function(e){return!(e._id==I)}),o(e)})},function(e){r.subprocesses=r.subprocesses.filter(function(e){return!(e._id==I)}),o(e)})}catch(e){o(e)}})}function initiate(e,s,t){var i={initiated:!1,dates:{created:"",valid:"",start:"",due:"",closed:""}};return new Promise(function(n,o){var a=function(){if(void 0!=e.user){i.dates.created=t.createdDate,"userSelected"!=e.user.validDate._type&&"autoSelected"!=e.user.validDate._type||(void 0!=t.validDate?i.dates.valid=t.validDate:i.dates.valid=(new Date).toISOString().substring(0,10)),"userSelected"!=e.user.dueDate._type&&"autoSelected"!=e.user.dueDate._type||(void 0!==t.dueDate?i.dates.due=t.dueDate:util.warn("WFInitiateError","No due date passed in - {data.dueDate}")),i.dates.start=t.firstDate,i.initiated=!0;var s=util.success("Sub-Process initiate completed successfully.",i);n(s)}else if(void 0!=e.auto);else{var a=util.error("WFInitiateError","Initiate type: "+e._type+" not defined.");o(a)}};if(void 0==s.complete)a();else if(!s.complete)if(e.parallelInstances)a();else{var r=util.error("WFInitiateError","Sub-process: "+s.id+" still active and parallel instances are not allowed.");o(r)}})}function step(processId,processSeq,subProcessId,subProcessSeq,stepId,stepSeq,data,_WFInstance,spuuid){var model={key:generateUUID(),id:"",seq:"",status:"",message:"",assignedTo:{userId:"",name:"",dateTime:"",type:"",dueDateTime:"",by:""},assignmentHistory:[],dateTimeCreated:moment().format(),dueDateTime:moment().format(),transition:{transitionId:"",dateTime:"",userId:""},assignment:{},comment:""},subProcess={},uuid="",instSubProcess,step={},transitionId="";return new Promise(function(resolve,reject){try{_WFInstance.instance.processes.filter(function(e){e.id==processId&&e.seq==processSeq&&e.subProcesses.filter(function(e){e.id==subProcessId&&e.seq==subProcessSeq&&(uuid=e.uuid)})}),_WFInstance.subprocesses.filter(function(e){e._id==uuid&&(instSubProcess=e)}),_WFInstance.config.processes.filter(function(e){e._id==processId&&e.subProcesses.filter(function(e){e._id==subProcessId&&(subProcess=e,e.steps.filter(function(e){e._id==stepId&&(step=e)}))})}),model.id=stepId,model.seq=stepSeq;var instanceStatus="";void 0!=step.setInstanceStatusTo.NotStarted?instanceStatus="NotStarted":void 0!=step.setInstanceStatusTo.Created?instanceStatus="Created":void 0!=step.setInstanceStatusTo.InProgress?instanceStatus="InProgress":void 0!=step.setInstanceStatusTo.Submitted?instanceStatus="Submitted":void 0!=step.setInstanceStatusTo.Complete&&(instanceStatus="Complete");var language=service.getLanguage();model.status=instanceStatus,model.message=eval("step.setInstanceStatusTo."+instanceStatus+".label.i18n."+language),model.comment=void 0!==data.comment?data.comment:"";var indicators=void 0!==instSubProcess?instSubProcess.indicators:[],updateSPIndicatorObject=function(e,s){if(e.length>0)for(var t=0;t<e.length;t++){var i=e[t],n=i.instances[0].uuid,o=JSON.xpath("/indicators[_id eq '"+n+"']/model/pending/seq",s,{})[0];i.instances[0].seq=o}},clearSPStatus=function(e){var s=JSON.xpath("/subprocesses[_id eq '"+e+"']",_WFInstance,{})[0];s.spStatus=""};indicatorDocs(processId,indicators,model,_WFInstance).then(function(e){uuid=spuuid,void 0!=step.function.actions?actions(step.function.actions,processId,processSeq,subProcessId,subProcessSeq,subProcess,model,_WFInstance,data,spuuid).then(function(e){var s=model.assignedTo;s.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,s.userId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"",s.dateTime=moment().format(),s.type=ASSIGNMENT_TYPE_AUTO,s.dueDateTime="",s.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"",updateSPIndicatorObject(indicators,_WFInstance);var t=step.transition[0]._id;transition(processId,processSeq,subProcessId,subProcessSeq,stepId,t,data,_WFInstance,spuuid,model).then(function(e){var s=util.success("Transition completed successfully.",e.data.step);resolve(s)},function(e){reject(e)})},function(e){console.log("err from actions()"),console.log(e),reject(e)}):void 0!=step.function.task?task(processId,processSeq,step.function.task,spuuid,model).then(function(e){updateSPIndicatorObject(indicators,_WFInstance);var s=util.success("Task awaiting user action.",model);resolve(s)},function(e){reject(e)}):void 0!=step.function.server&&(clearSPStatus(spuuid),server(step.function.server,processId,processSeq,subProcessId,subProcessSeq,subProcess,model,_WFInstance,data,spuuid).then(function(e){updateSPIndicatorObject(indicators,_WFInstance);var s=util.success("Server awaiting server response.",model);resolve(s)},function(e){reject(e)}))},function(e){reject(e)})}catch(e){reject(e)}})}function indicators(e,s,t){var i=[];return new Promise(function(e,n){try{var o=JSON.xpath("indicators[fn:count(./workflows/processes[subProcessUUID eq '"+t+"']) gt 0]",s,{});console.log("indicator function"),console.log(o);for(var a=0;a<o.length;a++){var r=o[a],c={id:"",instances:[]},u={uuid:"",title:"",key:"",seq:1,rev:""};c.id=r.category.term,u.uuid=r._id,u.rev=r._rev,u.title=r.title,u.key="",u.seq=r.model.pending.seq,c.instances.push(u),i.push(c)}var d=util.success("Process indicator model updated.",i);e(d)}catch(e){n(e)}})}function assignUser(e,s,t,i,n,o,a){return new Promise(function(s,t){try{a.subprocesses.filter(function(t){if(t._id==o){void 0==t.step.assignmentHistory&&(t.step.assignmentHistory=[]),""!=t.step.assignedTo.userId&&""!=t.step.assignedTo.name&&t.step.assignmentHistory.push(JSON.parse(JSON.stringify(t.step.assignedTo))),t.step.assignedTo.userId=n.id,t.step.assignedTo.name=n.name,t.step.assignedTo.dateTime=moment().format(),t.step.assignedTo.type=ASSIGNMENT_TYPE_REASSIGNMENT,t.step.assignedTo.dueDateTime="",t.step.assignedTo.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"";for(var i=t.indicators,r=0;r<i.length;r++)for(var c=i[r],u=0;u<c.instances.length;u++)for(var d=c.instances[u],p=0;p<a.indicators.length;p++){var l=a.indicators[p];d.uuid==l._id&&l.workflows.filter(function(s){s.id==a.config._id&&s.processes.filter(function(s){s.id==e&&(s.step.assignedTo.userId=n.id,s.step.assignedTo.name=n.name)})})}var f=JSON.xpath("/processes[_id eq '"+e+"']/notifications",a.config,{})[0];if(void 0!=f&&void 0!=f.reAssignment)actionsModule.notification.reAssignmentNotification(f,a,o,n).then(function(e){var e=util.success('User assigned successfully. UserId: "'+n.id+'", Name: "'+n.name+'"',t);s(e)}).catch(function(e){s(e)});else{var m=util.success('User assigned successfully. UserId: "'+n.id+'", Name: "'+n.name+'"',t);s(m)}}})}catch(e){t(e)}})}function indicatorDocs(e,s,t,i){return new Promise(function(n,o){try{if(void 0==s){util.error("WFIndicatorsUpdate","Indicators parameter is required. - Value: "+s);o(err)}else{for(var a=0;a<s.length;a++)for(var r=s[a],c=0;c<r.instances.length;c++)for(var u=r.instances[c],d=0;d<i.indicators.length;d++){var p=i.indicators[d];u.uuid==p._id&&p.workflows.filter(function(s){s.id==i.config._id&&s.processes.filter(function(s){s.id==e&&(s.step.id=t.id,s.step.seq=t.seq,s.step.status=t.status,s.step.message=t.message,s.step.assignedTo.userId=t.assignedTo.userId,s.step.assignedTo.name=t.assignedTo.name,s.step.comment=void 0!==t.comment?t.comment:"")})})}var l=util.success("Indicator documents workflow process model updated.",i);n(l)}}catch(e){o(e)}})}function actions(e,s,t,i,n,o,a,r,c,u){var d=[];return new Promise(function(p,l){util.syncLoop(e.length,function(p){var f=p.iteration();action(e[f],s,t,i,n,o,a,r,c,u).then(function(s){var t={id:e[f]._id,seq:f,data:s};d.push(t),p.next()},function(e){p.break(),l(e)})},function(){var e=util.success("Actions completed successfully.",d);p(e)})})}function action(e,s,t,i,n,o,a,r,c,u){return new Promise(function(i,d){if(void 0!=e.method){var p=["form","indicator","profile","subProcessInstance","step","community","application","user","sdo","performance","taxonomy","variables","notification","report","worker","participants"];switch(propertyExists(e.method,p)){case"form":if(void 0!=e.method.form.create){var l=[];l.push(s),l.push(o),l.push(a),l.push(e),l.push(t),l.push(n),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.create(l).then(function(e){i(e.data)},function(e){d(e)})}else if(void 0!=e.method.form.authorise){var l=[];l.push(s),l.push(o),l.push(t),l.push(n),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.authorise(l).then(function(e){i(e.data)},function(e){d(e)})}else if(void 0!=e.method.form.undraft){var l=[];l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.setUnDraft(l).then(function(e){i(e.data)},function(e){d(e)})}else if(void 0!=e.method.form.draft){var l=[];l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.setDraft(l).then(function(e){i(e.data)},function(e){d(e)})}else if(void 0!=e.method.form.close){var l=[];l.push(o.indicators),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.close(l).then(function(e){i(e.data)},function(e){d(e)})}else if(void 0!=e.method.form.authoriseAndCreateNewSeq){var l=[];l.push(s),l.push(o),l.push(t),l.push(n),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.authorise(l).then(function(p){var l=[];l.push(s),l.push(o),l.push(a),l.push(e),l.push(t),l.push(n),l.push(r),l.push(c.createType),l.push(u),l.push(u),l.push(c),form.create(l).then(function(e){i(e.data)},function(e){d(e)})},function(e){d(e)})}break;case"indicator":if(void 0!=e.method.indicator.create)i("Not implemented");else if(void 0!=e.method.indicator.instantiate)i("Not implemented");else if(void 0!=e.method.indicator.setValue){var f=e.method.indicator.setValue.path;helper.getNodeValue(e.method.indicator.setValue.data,r,u).then(function(e){var s=[];s.push(r),s.push(u),s.push(f),s.push(e),form.updateIndicator(s).then(function(e){i(e.data)},function(e){d(e)})},function(e){d(e)})}else if(void 0!=e.method.indicator.updateStatus){var m=e.method.indicator.indicatorSetId,l=[];if(l.push(r),l.push(u),void 0!=e.method.indicator.updateStatus){var h=e.method.indicator.updateStatus;l.push(h),l.push(m),form.markUpdateIndicator(l).then(function(e){i(e.data)},function(e){d(e)})}else i("Action indicator sub type not found.")}else if(void 0!=e.method.indicator.setWrapperElement){var f=e.method.indicator.setWrapperElement.path,m=e.method.indicator.setWrapperElement.indicatorSetId;helper.getNodeValue(e.method.indicator.setWrapperElement.data,r,u).then(function(e){var s=[];s.push(r),s.push(u),s.push(f),s.push(e),s.push(m),form.updateIndicatorWrapper(s).then(function(e){i(e.data)},function(e){d(e)})},function(e){d(e)})}break;case"profile":if(void 0!=e.method.profile.create){var l=[];l.push(s),l.push(r),l.push(c.createType),l.push(u),l.push(c.baseUUID),l.push(c),form.createProfile(l).then(function(e){i(e.data)},function(e){d(e)})}else if(void 0!=e.method.profile.setStatusTo){var l=[],h=e.method.profile.setStatusTo;l.push(r),l.push(u),l.push(h),form.setStatus(l).then(function(e){i(e.data)},function(e){d(e)})}break;case"subProcessInstance":var g=["instantiate","authorise","close","setVariable","setStatusTo","setStatusMsgTo","setTitle","setValidDate","setSPStatus"];switch(propertyExists(e.method.subProcessInstance,g)){case"setTitle":helper.getNodeValue(e.method.subProcessInstance.setTitle,r,u).then(function(s){actionsModule.subProcessInstance.setTitle(e.method.subProcessInstance.setTitle,u,s,r).then(function(e){i(e.data)},function(e){d(e)})},function(e){d(e)});break;case"setValidDate":helper.getNodeValue(e.method.subProcessInstance.setValidDate,r,u).then(function(s){actionsModule.subProcessInstance.setValidDate(e.method.subProcessInstance.setValidDate,u,s,r).then(function(e){i(e.data)},function(e){d(e)})},function(e){d(e)});break;case"setSPStatus":helper.getNodeValue(e.method.subProcessInstance.setSPStatus,r,u).then(function(s){actionsModule.subProcessInstance.setSPStatus(e.method.subProcessInstance.setSPStatus,u,s,r).then(function(e){i(e.data)},function(e){d(e)})},function(e){d(e)});break;default:d("No method found from implemented list in subprocess action.")}break;case"step":break;case"community":var v=["createCommunity","releaseAdoptedApplication","userJoinCommunity"];switch(propertyExists(e.method.community,v)){case"createCommunity":return actionsModule.community.createCommunity(e.method.community.createCommunity,u,r).then(function(e){i(e.data)},function(e){d(e)});case"releaseAdoptedApplication":return actionsModule.community.releaseAdoptedApplication(e.method.community.releaseAdoptedApplication,u,r).then(function(e){i(e.data)},function(e){d(e)});case"userJoinCommunity":return actionsModule.community.userJoinCommunity(e.method.community.userJoinCommunity,u,r).then(function(e){i(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"application":var S=["createAppDefinition","buildApplication","applicationAdoption"];switch(propertyExists(e.method.application,S)){case"createAppDefinition":return actionsModule.application.createAppDefinition(e.method.application.createAppDefinition,u,r).then(function(e){i(e.data)},function(e){d(e)});case"buildApplication":return actionsModule.application.buildApplication(e.method.application.buildApplication,u,r).then(function(e){i(e.data)},function(e){d(e)});case"applicationAdoption":return actionsModule.application.applicationAdoption(e.method.application.applicationAdoption,u,r).then(function(e){i(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"user":var I=["addToRole"];switch(propertyExists(e.method.user,I)){case"addToRole":return actionsModule.user.addToRole(e.method.user.addToRole,u,r).then(function(e){i(e.data)},function(e){d(e)})}break;case"sdo":var b=["create","enrollCourse"];switch(propertyExists(e.method.sdo,b)){case"create":return actionsModule.sdo.create(e.method.sdo.create,u,r).then(function(e){i(e.data)},function(e){d(e)});case"enrollCourse":return actionsModule.sdo.enrollCourse(e.method.sdo.enrollCourse,u,r).then(function(e){i(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"performance":var y=["unlockPeriod","lockPerformanceModel","setModelStatus"];switch(propertyExists(e.method.performance,y)){case"unlockPeriod":return actionsModule.performance.unlockPeriod(e.method.performance.unlockPeriod,u,r).then(function(e){i(e.data)},function(e){d(e)});case"setModelStatus":return actionsModule.performance.setModelStatus(e.method.performance.setModelStatus,u,r).then(function(e){i(e.data)},function(e){d(e)});case"lockPerformanceModel":return actionsModule.performance.lockPerformanceModel(e.method.performance.lockPerformanceModel,u,r).then(function(e){i(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"taxonomy":var N=["create"];switch(propertyExists(e.method.taxonomy,N)){case"create":return actionsModule.taxonomy.create(e.method.taxonomy.create,u,r).then(function(e){i(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"variables":var P=["setVariable"];switch(propertyExists(e.method.variables,P)){case"setVariable":return actionsModule.variables.setVariable(e.method.variables.setVariable,r,u).then(function(e){i(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"notification":return actionsModule.notification.sendNotificationWorker(e.method.notification,r,u).then(function(e){i(e.data)},function(e){d(e)});case"report":var _=["createPerformanceReport","createReport","sdoReport","executeReport","requestReport","generateView","generateBasicView","generateUnionView","sdoReportMultiple","subprofileQuarterlyReport"];switch(propertyExists(e.method.report,_)){case"createPerformanceReport":return actionsModule.report.createPerformanceReport(e.method.report.createPerformanceReport,r,u).then(function(e){i(e.data)},function(e){d(e)});case"createReport":return actionsModule.report.createReport(e.method.report.createReport,r,u).then(function(e){i(e.data)},function(e){d(e)});case"sdoReport":return actionsModule.report.sdoReport(e.method.report.sdoReport,r,u).then(function(e){i(e.data)},function(e){d(e)});case"executeReport":return actionsModule.report.executeReport(e.method.report.executeReport,r,u).then(function(e){i(e.data)},function(e){d(e)});case"generateView":return actionsModule.report.generateView(e.method.report.generateView,r,u).then(function(e){i(e.data)},function(e){d(e)});case"requestReport":return actionsModule.report.requestReport(e.method.report.requestReport,r,u).then(function(e){i(e.data)},function(e){d(e)});case"generateBasicView":return actionsModule.report.generateBasicView(e.method.report.generateBasicView,r,u).then(function(e){i(e.data)},function(e){d(e)});case"generateUnionView":return actionsModule.report.generateUnionView(e.method.report.generateUnionView,r,u).then(function(e){i(e.data)},function(e){d(e)});case"sdoReportMultiple":return actionsModule.report.sdoReportMultiple(e.method.report.sdoReportMultiple,r,u).then(function(e){i(e.data)},function(e){d(e)});case"subprofileQuarterlyReport":return actionsModule.report.subprofileQuarterlyReport(e.method.report.subprofileQuarterlyReport,r,u).then(function(e){i(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"worker":var T=["sendWorker","executeLocal","create"];switch(propertyExists(e.method.worker,T)){case"sendWorker":return actionsModule.worker.sendWorker(e.method.worker.sendWorker,r,u).then(function(e){i(e.data)},function(e){d(e)});case"executeLocal":return actionsModule.worker.executeLocal(e.method.worker.executeLocal,r,u).then(function(e){i(e.data)},function(e){d(e)});case"create":return actionsModule.worker.create(e.method.worker.create,r,u).then(function(e){i(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;case"participants":var O=["linkParticipants","monthlyAttendance","monthlyProgressSummary","participantContracts"];switch(propertyExists(e.method.participants,O)){case"linkParticipants":return actionsModule.participants.linkParticipants(e.method.participants.linkParticipants,r,u).then(function(e){i(e.data)},function(e){d(e)});case"monthlyAttendance":return actionsModule.participants.monthlyAttendance(e.method.participants.monthlyAttendance,r,u).then(function(e){i(e.data)},function(e){d(e)});case"monthlyProgressSummary":return actionsModule.participants.monthlyProgressSummary(e.method.participants.monthlyProgressSummary,r,u).then(function(e){i(e.data)},function(e){d(e)});case"participantContracts":return actionsModule.participants.participantContracts(e.method.participants.participantContracts,r,u).then(function(e){i(e.data)},function(e){d(e)});default:d("No method found from implemented list.")}break;default:d("method not defined in configuration")}}else d("No method found from implemented list.")})}function task(e,s,t,i,n){return new Promise(function(s,o){var a=app.SCOPE.workflow,r=t.preActions;preActions(r,a,i).then(function(o){if(void 0!=t.assign.role){var r=a.profile,c="";"current"==t.assign.role.profile?c=a.profile:"community"==t.assign.role.profile&&(c=app.SCOPE.getCommunityId());var u=t.assign.role.roleId;library.getUsersListByRole(c,u).then(function(o){if(void 0!=o)if(o.length>1){var d=!1,p=library.getCurrentUserRoles(),l=p.profile.indexOf(u),f=p.community.indexOf(u),m=p.implicit.indexOf(u),h=p.adoption.indexOf(u),g=p.subprofile.indexOf(u);if(d=l>-1||f>-1||m>-1||h>-1||g>-1){void 0==n.assignmentHistory&&(n.assignmentHistory=[]);var v=n.assignedTo;if(""!=v.userId&&""!=v.name){var S=JSON.parse(JSON.stringify(v));n.assignmentHistory.push(S)}v.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,v.userId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"",v.dateTime=moment().format(),v.type=ASSIGNMENT_TYPE_AUTO,v.dueDateTime="",v.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"";var I=JSON.xpath("/processes[_id eq '"+e+"']/notifications",a.config,{})[0];if(void 0!=I&&void 0!=I.assignment){var b={id:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,name:LOCAL_SETTINGS.SUBSCRIPTIONS.username};actionsModule.notification.assignmentNotification(I,a,i,b).then(function(e){console.log('User assigned successfully. UserId: "'+b.id+'", Name: "'+b.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+b.id+'", Name: "'+b.name+'"')})}}var y="";if(void 0!=t.assign.assignment){var y=n.assignment,N={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};y.accept=N,y.message=_getNameByLang(t.assign.assignment.message.i18n);var P={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};y.reject=P;var _={profileId:r,roleId:u,type:"role"};y.value=_,y.profileRoleId=c}if(d){var T=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+i+"']/id",a,{})[0],O=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+i+"']/id",a,{})[0],q=JSON.xpath("/subprocesses[_id eq '"+i+"']/step/id",a,{})[0];JSON.xpath("/processes[_id eq '"+T+"']/subProcesses[_id eq '"+O+"']/steps[_id eq '"+q+"']",a.config,{})[0];if(void 0!=t.preWorkActions){var E=t.preWorkActions;preWorkActions(E,a).then(function(e){s("Assignment is made. Pre work actions found and executed ")},function(e){P(e)})}else s("Assignment is made. No pre work actions found. ")}else{var I=JSON.xpath("/processes[_id eq '"+e+"']/notifications",a.config,{})[0];if(void 0!=I&&void 0!=I.assignmentAcceptance){var b={id:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,name:LOCAL_SETTINGS.SUBSCRIPTIONS.username};actionsModule.notification.acceptanceNotification(I,a,i,u).then(function(e){console.log('User assigned successfully. UserId: "'+b.id+'", Name: "'+b.name+'"'),s("Notifications request submitted for acceptance.")}).catch(function(e){s("Notifications failed"),console.log('User assignment notification failed to user UserId: "'+b.id+'", Name: "'+b.name+'"')})}else s("Notifications not found")}}else if(1==o.length){var A=o[0].id,k=o[0].name;void 0==n.assignmentHistory&&(n.assignmentHistory=[]);var v=n.assignedTo;if(""!=v.userId&&""!=v.name){var S=JSON.parse(JSON.stringify(v));n.assignmentHistory.push(S)}v.name=k+"",v.userId=A+"",v.dateTime=moment().format(),v.type=ASSIGNMENT_TYPE_AUTO,v.dueDateTime="",v.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"";var y="";if(void 0!=t.assign.assignment){var y=n.assignment,N={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};y.accept=N,y.message=_getNameByLang(t.assign.assignment.message.i18n);var P={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};y.reject=P;var _={profileId:r,roleId:u,type:"role"};y.value=_,y.profileRoleId=c}var I=JSON.xpath("/processes[_id eq '"+e+"']/notifications",a.config,{})[0];if(void 0!=I&&void 0!=I.assignment){var b={id:A,name:k};actionsModule.notification.assignmentNotification(I,a,i,b).then(function(e){console.log('User assigned successfully. UserId: "'+b.id+'", Name: "'+b.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+b.id+'", Name: "'+b.name+'"')})}var T=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+i+"']/id",a,{})[0],O=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+i+"']/id",a,{})[0],q=JSON.xpath("/subprocesses[_id eq '"+i+"']/step/id",a,{})[0];JSON.xpath("/processes[_id eq '"+T+"']/subProcesses[_id eq '"+O+"']/steps[_id eq '"+q+"']",a.config,{})[0];if(void 0!=t.preWorkActions){var E=t.preWorkActions;preWorkActions(E,a).then(function(e){s("Assigned to the only user in role. Pre work actions executed")},function(e){P(e)})}else s("Assigned to the only user in role. No pre work actions found.")}else{var v=n.assignedTo;v.name="",v.userId="";var y="";if(void 0!=t.assign.assignment){var y=n.assignment,N={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};y.accept=N,
y.message=_getNameByLang(t.assign.assignment.message.i18n);var P={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};y.reject=P;var _={profileId:r,roleId:u,type:"role"};y.value=_,y.profileRoleId=c}s("No users found in list. Assigning blank ")}else console.log("Error in getUsersListByRole undefined"),P(err)},function(e){console.log("Error in getUsersListByRole"),P(e)})}else if(void 0!=t.assign.user)helper.getNodeValue(t.assign.user.userName,a,i).then(function(o){helper.getNodeValue(t.assign.user.userId,a,i).then(function(d){var d=d,p=o;void 0==n.assignmentHistory&&(n.assignmentHistory=[]);var l=n.assignedTo;if(""!=l.userId&&""!=l.name){var f=JSON.parse(JSON.stringify(l));n.assignmentHistory.push(f)}l.name=p+"",l.userId=d+"",l.dateTime=moment().format(),l.type=ASSIGNMENT_TYPE_AUTO,l.dueDateTime="",l.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"";var m="";if(void 0!=t.assign.assignment){var m=n.assignment,h={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};m.accept=h,m.message=_getNameByLang(t.assign.assignment.message.i18n);var g={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};m.reject=g;var v={profileId:r,roleId:u,type:"role"};m.value=v,m.profileRoleId=c}var S=JSON.xpath("/processes[_id eq '"+e+"']/notifications",a.config,{})[0];if(void 0!=S&&void 0!=S.assignment){var I={id:d,name:p};actionsModule.notification.assignmentNotification(S,a,i,I).then(function(e){console.log('User assigned successfully. UserId: "'+I.id+'", Name: "'+I.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+I.id+'", Name: "'+I.name+'"')})}var b=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+i+"']/id",a,{})[0],y=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+i+"']/id",a,{})[0],N=JSON.xpath("/subprocesses[_id eq '"+i+"']/step/id",a,{})[0];JSON.xpath("/processes[_id eq '"+b+"']/subProcesses[_id eq '"+y+"']/steps[_id eq '"+N+"']",a.config,{})[0];if(void 0!=t.preWorkActions){var P=t.preWorkActions;preWorkActions(P,a).then(function(e){s("Assigned to the only user in role. Pre work actions executed")},function(e){g(e)})}else s("Assigned to the only user in role. No pre work actions found.")},function(e){P(e)})},function(e){P(e)});else if(void 0!=t.assign.swimlane){var d=t.assign.swimlane.stepId,p=t.assign.swimlane.sequence,l=JSON.xpath("/subprocesses[_id eq '"+i+"']",a,{})[0],f=JSON.xpath("/history[id eq '"+d+"']",l,{}),m="";m="last"==p?JSON.xpath("max(for $s in /* return xs:dateTime($s/dateTimeCreated))",f,{})[0]:JSON.xpath("min(for $s in /* return xs:dateTime($s/dateTimeCreated))",f,{})[0];var h=JSON.xpath("/*[dateTimeCreated eq '"+m+"']",f,{})[0],g=JSON.xpath("/assignmentHistory[last()]",h,{})[0],v=g.userId,S=g.name;void 0==n.assignmentHistory&&(n.assignmentHistory=[]);var I=n.assignedTo;if(""!=I.userId&&""!=I.name){var b=JSON.parse(JSON.stringify(I));n.assignmentHistory.push(b)}I.name=S+"",I.userId=v+"",I.dateTime=moment().format(),I.type=ASSIGNMENT_TYPE_SWIMLANE,I.dueDateTime="",I.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"";var y="";if(void 0!=t.assign.assignment){var y=n.assignment,N={show:t.assign.assignment.accept.show,label:_getNameByLang(t.assign.assignment.accept.label.i18n)};y.accept=N,y.message=_getNameByLang(t.assign.assignment.message.i18n);var P={show:t.assign.assignment.reject.show,label:_getNameByLang(t.assign.assignment.reject.label.i18n)};y.reject=P;var _={profileId:r,roleId:u,type:"role"};y.value=_,y.profileRoleId=c}var T=JSON.xpath("/processes[_id eq '"+e+"']/notifications",a.config,{})[0];if(void 0!=T&&void 0!=T.assignment){var O={id:v,name:S};actionsModule.notification.assignmentNotification(T,a,i,O).then(function(e){console.log('User assigned successfully. UserId: "'+O.id+'", Name: "'+O.name+'"')}).catch(function(e){console.log('User assignment notification failed to user UserId: "'+O.id+'", Name: "'+O.name+'"')})}var q=JSON.xpath("/instance/processes[subProcesses/uuid eq '"+i+"']/id",a,{})[0],E=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+i+"']/id",a,{})[0],d=JSON.xpath("/subprocesses[_id eq '"+i+"']/step/id",a,{})[0];JSON.xpath("/processes[_id eq '"+q+"']/subProcesses[_id eq '"+E+"']/steps[_id eq '"+d+"']",a.config,{})[0];if(void 0!=t.preWorkActions){var A=t.preWorkActions;preWorkActions(A,a).then(function(e){s("Assigned to the only user in role. Pre work actions executed")},function(e){P(e)})}else s("Assigned to the only user in role. No pre work actions found.")}},function(e){o(e)})})}function server(e,s,t,i,n,o,a,r,c,u){return new Promise(function(d,p){var l=(r.profile,e.serverAction[0]);void 0==a.assignmentHistory&&(a.assignmentHistory=[]);var f=a.assignedTo;if(""!=f.userId&&""!=f.name){var m=JSON.parse(JSON.stringify(f));a.assignmentHistory.push(m)}f.name=LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,f.userId=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"",f.dateTime=moment().format(),f.type=ASSIGNMENT_TYPE_AUTO,f.dueDateTime="",f.by=LOCAL_SETTINGS.SUBSCRIPTIONS.userId+"",action(l,s,t,i,n,o,a,r,c,u).then(function(e){d("No users found in list. Assigning blank ")},function(e){p("Server action error found rejected")})})}function transition(e,s,t,i,n,o,a,r,c,u){return new Promise(function(d,p){try{for(var l=0,f="",m=0,h=r.config.processes.filter(function(s){if(s._id==e)return s}),g=h[0].subProcesses.filter(function(e){if(e._id==t)return e}),v=g[0].steps.filter(function(e){if(e._id==n)return e}),S=v[0].transition.filter(function(e){if(e._id==o)return e}),I=0;I<g[0].steps.length;I++)g[0].steps[I]._id==n&&(l=parseInt(g[0].steps[I]._seq));g[0].steps.filter(function(e){m=l+1,parseInt(e._seq)==m&&(f=e._id)});var b=g[0].steps.length,y=JSON.xpath("/subprocesses[_id eq '"+c+"']",r,{})[0],N=JSON.xpath("/subprocesses[_id eq '"+c+"']/step",r,{})[0];void 0==y.history&&(y.history=[]);var P=function(e){var s=JSON.xpath("/subprocesses[_id eq '"+c+"']/indicators",r,{}),t=!1;void 0!=s&&0!=s.length||(t=!0,s=JSON.xpath("/indicators[workflows/processes[subProcessUUID eq '"+c+"']]",r,{})),void 0==e.indicators&&(e.indicators=[]);for(var i=0;i<s.length;i++)if(t){var n=s[i]._id,o=JSON.xpath("/indicators[_id eq '"+n+"']/_rev",r,{})[0],a=s[i].model.pending.seq,u=s[i].model.pending.status,d={uuid:n,rev:o,seq:a,status:u};e.indicators.push(d)}else{var n=s[i].instances[0].uuid,o=JSON.xpath("/indicators[_id eq '"+n+"']/_rev",r,{})[0],a=JSON.xpath("/indicators[_id eq '"+n+"']/model/pending/seq",r,{})[0],u=JSON.xpath("/indicators[_id eq '"+n+"']/model/pending/status",r,{})[0],d={uuid:n,rev:o,seq:a,status:u};e.indicators.push(d)}return delete e.assignedTo,delete e.assignment,e},_={transitionId:S[0]._id,dateTime:moment().format(),userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId+""};if(void 0!=u&&Object.keys(u).length>0?u.transition=_:N.transition=_,void 0!=u&&Object.keys(u).length>0){void 0==u.assignmentHistory&&(u.assignmentHistory=[]);var T=JSON.parse(JSON.stringify(u.assignedTo));""!=T.userId&&""!=T.name&&u.assignmentHistory.push(T)}else{void 0==N.assignmentHistory&&(N.assignmentHistory=[]);var T=JSON.parse(JSON.stringify(N.assignedTo));""!=T.userId&&""!=T.name&&N.assignmentHistory.push(T)}var O;O=void 0!=u&&Object.keys(u).length>0?JSON.parse(JSON.stringify(u)):JSON.parse(JSON.stringify(N));var q=P(O);if(y.history.push(q),void 0!=S[0].transitionAction.goToStep){var E=parseInt(v[0]._seq)+parseInt(S[0].transitionAction.goToStep.default),A="";g[0].steps.filter(function(e){parseInt(e._seq)==m&&(A=e._id)}),step(e,s,t,i,A,E,a,r,c).then(function(e){if(E==b){var s=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});d(s)}else{var s=util.success("Step transition completed successfully.",{subProcessComplete:!1,step:e.data});d(s)}},function(e){p(e)})}else if(void 0!=S[0].transitionAction.goToStepId){var k=S[0].transitionAction.goToStepId.stepId,x=1;g[0].steps.filter(function(e){e._id==k&&(x=parseInt(e._seq))}),step(e,s,t,i,k,x,a,r,c).then(function(e){if(x==b||"Complete"==e.data.status){var s=util.success("All Step transitions have completed successfully.",{subProcessComplete:!0,step:e.data});d(s)}else{var s=util.success("Step transition completed successfully.",{subProcessComplete:!1,step:e.data});d(s)}},function(e){p(e)})}else if(void 0!=S[0].transitionAction.stop){var C=h[0].postActions;postActions(C,r,c).then(function(e){var s=util.success("Step transition completed successfully.Workflow stopped.",{subProcessComplete:!0,step:u});d(s)},function(e){p(e)})}}catch(e){p(e)}})}function postActions(e,s,t){return new Promise(function(i,n){var o=[];try{var a=JSON.xpath("/subprocesses[_id eq '"+t+"']",s,{})[0],r=a["meta-data"].processConfigId,c=a["meta-data"].subProcessConfigId,u=a["meta-data"].subProcessInsSeq,d=a["meta-data"].subProcessInsSeq,p=JSON.xpath("/config/processes[_id eq '"+r+"']/subProcesses[_id eq '"+c+"']",s,{})[0],l=JSON.xpath("/subprocesses[_id eq '"+t+"']/step",s,{})[0];util.syncLoop(e.length,function(i){var a=i.iteration();action(e[a],r,u,c,d,p,l,s,{},t).then(function(e){o.push(!0),i.next()},function(e){o.push(!1),i.break(),n(e)})},function(){if(o.every(Boolean)){var e=util.success("Post-actions completed successfully.",{});i(e)}else{var s=util.error("WFPreActionsError","Not all post-actions passed.");n(s)}})}catch(e){n(e)}})}function processWorkflowMessage(e,s){var t=e;if(t.indexOf("#INSTANCE_LABEL")!==-1){var i=JSON.xpath("/instance/processes/subProcesses[uuid eq '"+s+"']/label",app.SCOPE.workflow,{})[0];t=t.replace("#INSTANCE_LABEL",i)}if(t.indexOf("#USER_NAME")!==-1){var i=JSON.xpath("/subprocesses[_id eq '"+s+"']/step/assignedTo/name",app.SCOPE.workflow,{})[0];t=t.replace("#USER_NAME",i)}if(t.indexOf("#PROFILE_TITLE")!==-1){var i=app.profile.title;t=t.replace("#PROFILE_TITLE",i)}if(t.indexOf("#PROFILE_TYPE")!==-1){var i=app.SCOPE.APP_CONFIG.name;t=t.replace("#PROFILE_TYPE",i)}if(t.indexOf("#VAR_SPUUID")!==-1){var i=s;t=t.replace("#VAR_SPUUID",i)}return t}function _getName(e,s){if(void 0!==e)for(var t=0;t<e.length;t++)if(e[t]._lang===s)return e[t].value}function _getNameByLang(e){return library.getNameByLang(e)}function preWorkActions(e,s){return new Promise(function(t,i){var n=[];try{var o=JSON.xpath("/config/processes[_id eq '"+app.SCOPE.spo.pObject.id+"']/subProcesses[_id eq '"+app.SCOPE.spo.spObject.id+"']",s,{})[0],a=JSON.xpath("/subprocesses[_id eq '"+app.SCOPE.processUUID+"']/step",s,{})[0];util.syncLoop(e.length,function(t){var r=t.iteration();action(e[r],app.SCOPE.spo.pObject.id,app.SCOPE.spo.pObject.seq,app.SCOPE.spo.spObject.id,app.SCOPE.spo.spObject.seq,o,a,s,{},app.SCOPE.processUUID).then(function(e){n.push(!0),t.next()},function(e){n.push(!1),t.break(),i(e)})},function(){if(n.every(Boolean)){var e=util.success("PreWork-actions completed successfully.",{});t(e)}else{var s=util.error("WFPreActionsError","Not all pre-work-actions passed.");i(s)}})}catch(e){i(e)}})}var util=require("utility"),actionsModule=require("./actions"),helper=require("./helper"),form=require("./form");module.exports={preRequisites:preRequisites,preActions:preActions,postActions:postActions,preWorkActions:preWorkActions,subProcess:subProcess,indicatorDocs:indicatorDocs,task:task,transition:transition,assignUser:assignUser};

},{"./actions":2,"./form":3,"./helper":4,"utility":8}],8:[function(require,module,exports){
"use strict";function success(r,e){return{message:r,data:e}}function warn(r,e){return console.warn(e),{warning:r,data:e}}function error(r,e){var n=new Error("");return n.name=r,n.message=e,n}function syncLoop(r,e,n){var a=0,t=!1,o=!1,u={next:function(){return t&&o&&n?n():void(a<r?(a++,e(u)):(t=!0,n&&n()))},iteration:function(){return a-1},break:function(r){t=!0,o=r}};return u.next(),u}function compare(r,e,n){switch(e){case"greaterThan":return r>n;case"lessThan":return r<n;case"greaterThanEqual":return r>=n;case"lessThanEqual":return r<=n;case"equalTo":return r===n;case"notEqualTo":return r!==n}}function getName(r,e){if(void 0!==r)for(var n=0;n<r.length;n++)if(r[n].i18n._lang===e)return r[n].i18n.value}module.exports={success:success,warn:warn,error:error,syncLoop:syncLoop,compare:compare,getName:getName};

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJpbmRleC5qcyIsImxpYi9hY3Rpb25zLmpzIiwibGliL2Zvcm0uanMiLCJsaWIvaGVscGVyLmpzIiwibGliL2ludGVyZmFjZS5qcyIsImxpYi9ub2RlVmFsdWUuanMiLCJsaWIvcHJvY2Vzcy5qcyIsIm5vZGVfbW9kdWxlcy91dGlsaXR5L2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsWUE4Q0EsU0FBUyxVQUFTLEVBQVMsRUFBYSxFQUFLLEdBQ3pDLEdBQUksR0FBUSxJQUdaLElBQW1CLElBQWYsR0FBb0MsUUFBZixFQUNyQixLQUFNLE1BQUssTUFBTSxnQkFBaUIsOEJBQy9CLElBQTRCLGdCQUFsQixHQUNiLEtBQU0sSUFBSSxPQUFNLGdEQU1wQixJQUpJLEVBQU0sWUFBYyxHQUFlLEdBSXhCLElBQVgsR0FBNEIsUUFBWCxFQUNqQixLQUFNLE1BQUssTUFBTSxnQkFBaUIsNEJBQy9CLElBQXdCLGdCQUFkLEdBQ2IsS0FBTSxJQUFJLE9BQU0sOENBTXBCLElBSkksRUFBTSxRQUFVLEdBQVcsR0FJcEIsSUFBUCxHQUFvQixRQUFQLEVBQ2IsS0FBTSxNQUFLLE1BQU0sZ0JBQWlCLHlCQUMvQixJQUFvQixnQkFBVixHQUNiLEtBQU0sSUFBSSxPQUFNLDBDQU1wQixJQUpJLEVBQU0sSUFBTSxHQUFPLEdBSVQsSUFBVixHQUEwQixRQUFWLEVBQ2hCLEtBQU0sTUFBSyxNQUFNLGdCQUFpQix3Q0FDUixpQkFBYixHQUNiLEVBQU0sT0FBUyxLQUFLLE1BQU0sR0FFMUIsRUFBTSxPQUFTLEVBSW5CLEVBQU0sU0FFTixFQUFNLGdCQUVOLEVBQU0sY0F4RlYsR0FBSSxTQUFVLFFBQVEsaUJBQ2xCLEtBQU8sUUFBUSxXQUNmLGNBQWdCLFFBQVEsbUJBQ3hCLE9BQVMsUUFBUSxlQWtHckIsVUFBUyxVQUFVLFdBQWEsV0FDNUIsTUFBTyxNQUFLLFNBV2hCLFNBQVMsVUFB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LEdBQVUsQ0FDbEIsS0FBSyxXQUNKLE1BQU8sR0FBVSxDQUNsQixLQUFLLG1CQUNKLE1BQU8sSUFBVyxDQUNuQixLQUFLLGdCQUNKLE1BQU8sSUFBVyxDQUNuQixLQUFLLFVBQ0osTUFBTyxLQUFZLENBQ3BCLEtBQUssYUFDSixNQUFPLEtBQVksR0FJdEIsUUFBUyxTQUFRLEVBQUssR0FDckIsR0FBWSxTQUFSLEVBQ0gsSUFBSyxHQUFJLEdBQUksRUFBRyxFQUFJLEVBQUksT0FBUyxJQUNoQyxHQUFJLEVBQUksR0FBRyxLQUFLLFFBQVUsRUFDekIsTUFBTyxHQUFJLEdBQUcsS0FBSyxNQU12QixPQUFPLFNBRUwsUUFBUyxRQUNULEtBQU0sS0FDTixNQUFPLE1BQ1AsU0FBVSxTQUNWLFFBQVMsUUFDVixRQUFTIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIid1c2Ugc3RyaWN0JztcblxudmFyIFByb2Nlc3MgPSByZXF1aXJlKCcuL2xpYi9wcm9jZXNzJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWxpdHknKTtcbnZhciB1c2VySW50ZXJmYWNlID0gcmVxdWlyZSgnLi9saWIvaW50ZXJmYWNlJyk7XG52YXIgaGVscGVyID0gcmVxdWlyZSgnLi9saWIvaGVscGVyJyk7XG5cblxuLypnbG9iYWxzICovXG5cbi8qKlxuICogQSBuZXcgV29ya2Zsb3cgY29uc3RydWN0b3IgaW5zdGFuY2UgY29udGFpbnMgdGhlIHJlZmVyZW5jZSB0byB0aGUgYXBwbGljYXRpb25cbiAqIGFuZCBhc3NvY2lhdGVkIHByb2ZpbGUgd2hpY2ggaXQgcmVxdWlyZXMgYXMgdGhlIGZpcnN0IHR3byBwYXJhbWV0ZXJzLiBJdCBhbHNvXG4gKiByZXF1aXJlcyBhIHdvcmtmbG93IGNvbmZpZ3VyYXRpb24sIGFzIHRoZSB0aGlyZCBwYXJhbWV0ZXIsIHdoaWNoIGlzIHVzZWQgdG9cbiAqIGRlc2NpYmUgdGhlIHdvcmtmbG93IHByb2Nlc3Nlcy4gSWYgYSB3b3JrZmxvdyBpbnN0YW5jZSBleGlzdHMgeW91IGNhbiBwYXNzIGl0XG4gKiBpbiBhcyB0aGUgZm91cnRoIHBhcmFtZXRlciB3aGljaCBpdCB3aWxsIHRoZW4gdXNlLCBlbHNlIGNyZWF0ZSBhIG5ldyBvbmUuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHByb2ZpbGUgLSBUaGUgY3VycmVudCBwcm9maWxlIGlkXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwIC0gVGhlIGFzc29jaWF0ZWQgYXBwbGljYXRpb24gaWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgLSBUaGUgYXBwbGljYXRpb24gd29ya2Zsb3cgY29uZmlndXJhdGlvbiAvIGRlZmluaXRpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSBbaW5zdGFuY2VdIC0gQW4gZXhpc3RpbmcgYXBwbGljYXRpb24gcHJvZmlsZSB3b3JrZmxvdyBpbnN0YW5jZSBiYXNlZFxuICogb24gdGhlIGRlZmluaXRpb25cbiAqXG4gKiBAYXV0aG9yIEJyZW50IEdvcmRvblxuICogQHZlcnNpb24gMC4xLjBcbiAqXG4gKiBAZXhhbXBsZVxuICogdmFyIGNvbmZpZyA9IHsgJ19pZCc6ICdhYmMxMjMnIH07XG5cbiAqIHZhciBpbnN0YW5jZSA9IHsgJ19pZCc6ICdpbnN0YW5jZV9hYmMxMjMnIH07XG5cbiAqIC8vIElmIHRoZXJlIGlzbid0IGFuIGV4aXN0aW5nIGluc3RhbmNlXG4gKiB2YXIgd29ya2Zsb3cgPSBuZXcgV29ya2Zsb3coJzEyMzQnLCAnNTY3OCcsIGNvbmZpZyk7XG4gKiAvLyBJZiB0aGVyZSBpcyBhbiBleGlzdGluZyBpbnN0YW5jZVxuICogdmFyIHdvcmtmbG93ID0gbmV3IFdvcmtmbG93KCcxMjM0JywgJzU2NzgnLCBjb25maWcsIGluc3RhbmNlKTtcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IG5ldyBXb3JrZmxvdyBvYmplY3RcbiAqXG4gKiBAdGhyb3dzIEVycm9yOiBBIHByb2ZpbGUgaWQgaXMgcmVxdWlyZWRcbiAqIEB0aHJvd3MgRXJyb3I6IEFuIGFwcCBpZCBpcyByZXF1aXJlZFxuICogQHRocm93cyBFcnJvcjogQSB3b3JrZmxvdyBjb25maWd1cmF0aW9uIGlzIHJlcXVpcmVkXG4gKlxuICovXG5cbmZ1bmN0aW9uIFdvcmtmbG93KHByb2ZpbGUsIGNvbW11bml0eUlkLCBhcHAsIGNvbmZpZykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAvLyBDb21tdW5pdHkgSUQgdmFsaWRhdGlvbiBjaGVja3NcbiAgICBpZiAoY29tbXVuaXR5SWQgPT0gJycgfHwgY29tbXVuaXR5SWQgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IHV0aWwuZXJyb3IoJ1BhcmFtUmVxdWlyZWQnLCAnQSBjb21tdW5pdHkgaWQgaXMgcmVxdWlyZWQuJyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YoY29tbXVuaXR5SWQpICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBjb21tdW5pdHkgaWQgbXVzdCBiZSBhIGphdmFzY3JpcHQgc3RyaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLmNvbW11bml0eUlkID0gY29tbXVuaXR5SWQgfHwgJyc7XG4gICAgfVxuXG4gICAgLy8gUHJvZmlsZSBJRCB2YWxpZGF0aW9uIGNoZWNrc1xuICAgIGlmIChwcm9maWxlID09ICcnIHx8IHByb2ZpbGUgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IHV0aWwuZXJyb3IoJ1BhcmFtUmVxdWlyZWQnLCAnQSBwcm9maWxlIGlkIGlzIHJlcXVpcmVkLicpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mKHByb2ZpbGUpICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwcm9maWxlIGlkIG11c3QgYmUgYSBqYXZhc2NyaXB0IHN0cmluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5wcm9maWxlID0gcHJvZmlsZSB8fCAnJztcbiAgICB9XG5cbiAgICAvLyBBcHAgSUQgdmFsaWRhdGlvbiBjaGVja3NcbiAgICBpZiAoYXBwID09ICcnIHx8IGFwcCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgdXRpbC5lcnJvcignUGFyYW1SZXF1aXJlZCcsICdBbiBhcHAgaWQgaXMgcmVxdWlyZWQuJyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YoYXBwKSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgYXBwIGlkIG11c3QgYmUgYSBqYXZhc2NyaXB0IHN0cmluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5hcHAgPSBhcHAgfHwgJyc7XG4gICAgfVxuXG4gICAgLy8gV29ya2Zsb3cgY29uZmlndXJhdGlvbiB2YWxpZGF0aW9uIGNoZWNrc1xuICAgIGlmIChjb25maWcgPT0gJycgfHwgY29uZmlnID09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyB1dGlsLmVycm9yKCdQYXJhbVJlcXVpcmVkJywgJ0Egd29ya2Zsb3cgY29uZmlndXJhdGlvbiBpcyByZXF1aXJlZC4nKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZihjb25maWcpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBfdGhpcy5jb25maWcgPSBKU09OLnBhcnNlKGNvbmZpZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIH1cblxuICAgIC8vIFdvcmtmbG93IGluc3RhbmNlIHZhbGlkYXRpb24gY2hlY2tzXG4gICAgX3RoaXMuaW5zdGFuY2U7XG4gICAgLy8gV29ya2Zsb3cgc3ViLXByb2Nlc3NlcyB2YWxpZGF0aW9uIGNoZWNrc1xuICAgIF90aGlzLnN1YnByb2Nlc3NlcyA9IFtdO1xuICAgIC8vIFdvcmtmbG93IGluZGljYXRvcnMgcGxhY2UgaG9sZGVyXG4gICAgX3RoaXMuaW5kaWNhdG9ycyA9IFtdO1xuXG5cbn1cblxuLyoqXG4gKiBXb3JrZmxvdyBnZXQgcHJvZmlsZSBpZC5cbiAqXG4gKiBAZXhhbXBsZSBcIlwiXG4gKlxuICogQHJldHVybiBcIlwiXG4gKlxuICovXG5Xb3JrZmxvdy5wcm90b3R5cGUuZ2V0UHJvZmlsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnByb2ZpbGU7XG59O1xuXG4vKipcbiAqIFdvcmtmbG93IGdldCBhcHAgaWQuXG4gKlxuICogQGV4YW1wbGUgXCJcIlxuICpcbiAqIEByZXR1cm4gXCJcIlxuICpcbiAqL1xuV29ya2Zsb3cucHJvdG90eXBlLmdldEFwcCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmFwcDtcbn07XG5cbi8qKlxuICogV29ya2Zsb3cgZ2V0IGNvbmZpZy5cbiAqXG4gKiBAZXhhbXBsZSBcIlwiXG4gKlxuICogQHJldHVybiBcIlwiXG4gKlxuICovXG5Xb3JrZmxvdy5wcm90b3R5cGUuZ2V0Q29uZmlnID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnO1xufTtcblxuLyoqXG4gKiBXb3JrZmxvdyBnZXQgaW5zdGFuY2UuXG4gKlxuICogQGV4YW1wbGUgXCJcIlxuICpcbiAqIEByZXR1cm4gXCJcIlxuICpcbiAqL1xuXG5Xb3JrZmxvdy5wcm90b3R5cGUuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcbn07XG5cbi8qKlxuICogV29ya2Zsb3cgc2V0IHRoZSBpbnN0YW5jZSBkYXRhLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gdGhlIHdvcmtmbG93IHByb2Nlc3MgaW5zdGFuY2UgZGF0YVxuICpcbiAqIEBleGFtcGxlIFwiXCJcbiAqXG4gKiBAcmV0dXJuIFwiXCJcbiAqXG4gKi9cbldvcmtmbG93LnByb3RvdHlwZS5zZXRJbnN0YW5jZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICB0aGlzLmluc3RhbmNlID0gZGF0YTtcbn07XG5cbi8qKlxuICogV29ya2Zsb3cgZ2V0IHN1Yi1wcm9jZXNzZXMgZGF0YS5cbiAqXG4gKiBAZXhhbXBsZSBcIlwiXG4gKlxuICogQHJldHVybiBcIlwiXG4gKlxuICovXG5Xb3JrZmxvdy5wcm90b3R5cGUuZ2V0U3ViUHJvY2Vzc2VzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuc3VicHJvY2Vzc2VzO1xufTtcblxuLyoqXG4gKiBXb3JrZmxvdyBzZXQgdGhlIHN1Yi1wcm9jZXNzZXMgZGF0YS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIHRoZSB3b3JrZmxvdyBwcm9jZXNzIGluc3RhbmNlIGRhdGFcbiAqXG4gKiBAZXhhbXBsZSBcIlwiXG4gKlxuICogQHJldHVybiBcIlwiXG4gKlxuICovXG5Xb3JrZmxvdy5wcm90b3R5cGUuc2V0U3ViUHJvY2Vzc2VzID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIHRoaXMuc3VicHJvY2Vzc2VzID0gZGF0YTtcbn07XG5cbi8qKlxuICogV29ya2Zsb3cgZ2V0IGluZGljYXRvciBzZXQgZGF0YS5cbiAqXG4gKiBAZXhhbXBsZSBcIlwiXG4gKlxuICogQHJldHVybiBcIlwiXG4gKlxuICovXG5Xb3JrZmxvdy5wcm90b3R5cGUuZ2V0SW5kaWNhdG9ycyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmluZGljYXRvcnM7XG59O1xuXG4vKipcbiAqIFdvcmtmbG93IHNldCB0aGUgaW5kaWNhdG9yIHNldCBkYXRhLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gdGhlIHdvcmtmbG93IHByb2Nlc3MgaW5zdGFuY2UgZGF0YVxuICpcbiAqIEBleGFtcGxlIFwiXCJcbiAqXG4gKiBAcmV0dXJuIFwiXCJcbiAqXG4gKi9cbldvcmtmbG93LnByb3RvdHlwZS5zZXRJbmRpY2F0b3JzID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIHRoaXMuaW5kaWNhdG9ycyA9IGRhdGE7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgdmFyaWFibGUgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHByb2Nlc3NJZCAtIHRoZSBXb3JrZmxvdyBjb25maWcgLyBkZWZpbml0aW9uIHByb2Nlc3MgaWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBwcm9jZXNzU2VxIC0gdGhlIFdvcmtmbG93IGluc3RhbmNlIHByb2Nlc3Mgc2VxXG4gKiBAcGFyYW0ge3N0cmluZ30gc3ViUHJvY2Vzc0lkIC0gdGhlIFdvcmtmbG93IGNvbmZpZyAvIGRlZmluaXRpb24gc3ViLXByb2Nlc3MgaWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdWJQcm9jZXNzU2VxIC0gdGhlIFdvcmtmbG93IGluc3RhbmNlIHN1Yi1wcm9jZXNzIHNlcVxuICogQHBhcmFtIHtzdHJpbmd9IHN0ZXBJZCAtIHRoZSBXb3JrZmxvdyBjb25maWcgLyBkZWZpbml0aW9uIHN0ZXAgaWRcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YXJpYWJsZSAtIHRoZSBXb3JrZmxvdyB2YXJpYWJsZSBvYmplY3RcbiAqXG4gKiBAZXhhbXBsZSAnJ1xuICpcbiAqIEByZXR1cm4gJydcbiAqXG4gKi9cbi8vIFdvcmtmbG93LnByb3RvdHlwZS5zZXRWYXJpYWJsZSA9IGZ1bmN0aW9uKHByb2Nlc3NJZCwgcHJvY2Vzc1NlcSwgc3ViUHJvY2Vzc0lkLCBzdWJQcm9jZXNzU2VxLCBzdGVwSWQsIHZhcmlhYmxlKXtcbi8vIFx0dmFyIF90aGlzID0gdGhpcztcbi8vIFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuLy8gXHRcdHRyeSB7XG4vLyBcdFx0XHRQcm9jZXNzLmdldFZhcmlhYmxlKHByb2Nlc3NJZCwgcHJvY2Vzc1NlcSwgc3ViUHJvY2Vzc0lkLCBzdWJQcm9jZXNzU2VxLCBzdGVwSWQsIHZhcmlhYmxlKS50aGVuKGZ1bmNpb24ocmVzdWx0KXtcbi8vIFx0XHRcdFx0cmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4vLyBcdFx0XHR9LCBmdW5jdGlvbihlcnIpe1xuLy8gXHRcdFx0XHRyZWplY3QoZXJyKTtcbi8vIFx0XHRcdH0pXG4vLyBcdFx0fSBjYXRjaCAoZXJyKSB7XG4vLyBcdFx0XHRyZWplY3QoZXJyKTtcbi8vIFx0XHR9XG5cbi8vIFx0fSk7XG4vLyB9O1xuXG4vKipcbiAqIEdldCB0aGUgdmFyaWFibGUgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHByb2Nlc3NJZCAtIHRoZSBXb3JrZmxvdyBjb25maWcgLyBkZWZpbml0aW9uIHByb2Nlc3MgaWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBwcm9jZXNzU2VxIC0gdGhlIFdvcmtmbG93IGluc3RhbmNlIHByb2Nlc3Mgc2VxXG4gKiBAcGFyYW0ge3N0cmluZ30gc3ViUHJvY2Vzc0lkIC0gdGhlIFdvcmtmbG93IGNvbmZpZyAvIGRlZmluaXRpb24gc3ViLXByb2Nlc3MgaWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdWJQcm9jZXNzU2VxIC0gdGhlIFdvcmtmbG93IGluc3RhbmNlIHN1Yi1wcm9jZXNzIHNlcVxuICogQHBhcmFtIHtzdHJpbmd9IHN0ZXBJZCAtIHRoZSBXb3JrZmxvdyBjb25maWcgLyBkZWZpbml0aW9uIHN0ZXAgaWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSB0aGUgV29ya2Zsb3cgdmFyaWFibGUgaWRcbiAqXG4gKiBAZXhhbXBsZSAnJ1xuICpcbiAqIEByZXR1cm4gJydcbiAqXG4gKi9cbi8vIFdvcmtmbG93LnByb3RvdHlwZS5nZXRWYXJpYWJsZSA9IGZ1bmN0aW9uKHByb2Nlc3NJZCwgcHJvY2Vzc1NlcSwgc3ViUHJvY2Vzc0lkLCBzdWJQcm9jZXNzU2VxLCBzdGVwSWQsIGtleSl7XG4vLyBcdHZhciBfdGhpcyA9IHRoaXM7XG4vLyBcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbi8vIFx0XHR0cnkge1xuLy8gXHRcdFx0UHJvY2Vzcy5zZXRWYXJpYWJsZShwcm9jZXNzSWQsIHByb2Nlc3NTZXEsIHN1YlByb2Nlc3NJZCwgc3ViUHJvY2Vzc1NlcSwgc3RlcElkLCBrZXkpLnRoZW4oZnVuY2lvbihyZXN1bHQpe1xuLy8gXHRcdFx0XHRyZXNvbHZlKHJlc3VsdC5kYXRhKTtcbi8vIFx0XHRcdH0sIGZ1bmN0aW9uKGVycil7XG4vLyBcdFx0XHRcdHJlamVjdChlcnIpO1xuLy8gXHRcdFx0fSlcbi8vIFx0XHR9IGNhdGNoIChlcnIpIHtcbi8vIFx0XHRcdHJlamVjdChlcnIpO1xuLy8gXHRcdH1cblxuLy8gXHR9KTtcbi8vIH07XG5cbi8qKlxuICogVGhpcyBtZXRob2QgY3JlYXRlcyBhIG5ldyB3b3JrZmxvdyBwcm9jZXNzIGkuZS4gaXQgY3JlYXRlcyBhIHdvcmtmbG93IHByb2Nlc3NlcyBpbnN0YW5jZVxuICogb2JqZWN0IHdpdGggdGhlIG1pbmltdW0gcmVxdWlyZWQgZGF0YS4gVGhpcyBpbnN0YW5jZSBjYW4gYmUgcmVmZXJlbmNlZCBpbiB0aGUgZm9sbG93aW5nXG4gKiB3YXksIHNlZSBleGFtcGxlIGJlbG93LlxuICpcbiAqIEBleGFtcGxlXG4gKiB2YXIgY29uZmlnID0geyAnX2lkJzogJ2FiYzEyMycgfTtcblxuICogdmFyIHdvcmtmbG93ID0gbmV3IFdvcmtmbG93KCcxMjM0JywgJzU2NzgnLCBjb25maWcpO1xuICogd29ya2Zsb3cuY3JlYXRlKCkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICpcdGNvbnNvbGUubG9nKHJlc3VsdC5tZXNzYWdlKTtcbiAqXHQvLyBUaGUgZm9sbG93aW5nIHByb3BlcnRpZXMgY2FuIG5vdyBiZSBhY2Nlc3NlZFxuICogXHR2YXIgcHJvZmlsZSA9IHdvcmtmbG93LnByb2ZpbGU7XG4gKiBcdHZhciBhcHAgPSB3b3JrZmxvdy5hcHA7XG4gKiBcdHZhciBjb25maWcgPSB3b3JrZmxvdy5jb25maWc7XG4gKlx0Ly8gT24gc3VjY2VzcyB5b3UgY2FuIGFjY2VzcyB0aGUgaW5zdGFuY2UgdGhlIGZvbGxvd2luZyB3YXlcbiAqXHR2YXIgaW5zdGFuY2UgPSB3b3JrZmxvdy5pbnN0YW5jZTtcbiAqIH0sIGZ1bmN0aW9uKGVycm9yKXtcbiAqXHRjb25zb2xlLmxvZyhlcnJvcik7XG4gKiB9KTtcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IG5ldyBXb3JrZmxvdyBpbnN0YW5jZSB3aXRoIHVwZGF0ZWQgaW5zdGFuY2UgZGF0YS5cbiAqXG4gKi9cblxuV29ya2Zsb3cucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKF90aGlzLmluc3RhbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2FybiA9IHV0aWwud2FybignSW5zdGFuY2UgYWxyZWFkeSBleGlzdHMuJywgX3RoaXMpXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh3YXJuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSB3b3JrZmxvdyBwcm9jZXNzZXMgaW5zdGFuY2Ugb2JqZWN0XG4gICAgICAgICAgICAgICAgdmFyIG1vZGVsID0ge1xuICAgICAgICAgICAgICAgICAgICBfaWQ6ICcnLFxuICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3dvcmtmbG93SW5zdGFuY2UnLFxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzZXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBjaGFubmVsczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb21tdW5pdHlfXCIgKyBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicHJvZmlsZV9cIiArIGFwcC5TQ09QRS5wcm9maWxlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uX1wiICsgYXBwLlNDT1BFLmFwcGxpY2F0aW9uSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbW11bml0eV9cIiArIGFwcC5TQ09QRS5nZXRDb21tdW5pdHlJZCgpICsgXCJfYXBwbGljYXRpb25fXCIgKyBhcHAuU0NPUEUuYXBwbGljYXRpb25JZFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIG1vZGVsLl9pZCA9IF90aGlzLnByb2ZpbGUgKyAnOnByb2Nlc3Nlczpsb2NhbCc7XG4gICAgICAgICAgICAgICAgLy9tb2RlbC5faWQgPSBfdGhpcy5wcm9maWxlICsgJzpwcm9jZXNzZXMnO1xuXG4gICAgICAgICAgICAgICAgbW9kZWwudmVyc2lvbiA9IF90aGlzLmNvbmZpZy52ZXJzaW9uO1xuICAgICAgICAgICAgICAgIF90aGlzLmluc3RhbmNlID0gbW9kZWw7XG4gICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ1dvcmtmbG93IHByb2Nlc3NlcyBpbnN0YW5jZSBjcmVhdGVkIHN1Y2Nlc3NmdWxseS4nLCBfdGhpcyk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH1cblxuICAgIH0pO1xufTtcblxuLyoqXG4gKiBXb3JrZmxvdyBpbml0aWFsaXNlLCB0aGlzIGZ1bmN0aW9uIGV4ZWN1dGVzIGEgcHJvY2VzcyB3aXRoaW4gYSB3b3JrZmxvd1xuICogY29uZmlndXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvY2Vzc0lkIC0gdGhlIHByb2Nlc3MgaWQgdG8gcHJvY2Vzc1xuICogQHBhcmFtIHtvYmplY3R9IFtkYXRhXSAtIHRoZSBpbnB1dCBkYXRhIHRvIHByb2Nlc3NcbiAqXG4gKiBAZXhhbXBsZVxuICogV29ya2Zsb3cuaW5pdGlhbGlzZSgncHJvY2Vzc0lkJywgeyB2YWxpZERhdGU6ICdkYXRlJyB9KTtcbiAqXG4gKiBAcmV0dXJuIFwiXCJcbiAqXG4gKi9cbldvcmtmbG93LnByb3RvdHlwZS5pbml0aWFsaXNlID0gZnVuY3Rpb24ocHJvY2Vzc0lkLCBkYXRhLCBzdWJwcm9maWxlSWQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBjb25maWdQcm9jZXNzID0gW107XG4gICAgICAgICAgICAvLyBDaGVjayB0aGUgcGFzc2VkIGluIHBhcmFtZXRlcnNcbiAgICAgICAgICAgIGlmIChwcm9jZXNzSWQgIT09ICcnICYmIHByb2Nlc3NJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHByb2Nlc3MgY29uZmlnXG4gICAgICAgICAgICAgICAgY29uZmlnUHJvY2VzcyA9IF90aGlzLmNvbmZpZy5wcm9jZXNzZXMuZmlsdGVyKGZ1bmN0aW9uKG9ialByb2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9ialByb2Nlc3MuX2lkID09IHByb2Nlc3NJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9ialByb2Nlc3M7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChjb25maWdQcm9jZXNzWzBdLl9pZCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gdXRpbC5lcnJvcignV0ZDb25maWdFcnJvcicsICdObyB2YWxpZCBwcm9jZXNzIGRlZmluaXRpb24gZm91bmQgd2l0aCBwcm9jZXNzIGlkOiAnICsgcHJvY2Vzc0lkKTtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uZmlnUHJvY2Vzcy5wdXNoKF90aGlzLmNvbmZpZy5wcm9jZXNzZXNbMF0pO1xuICAgICAgICAgICAgICAgIHByb2Nlc3NJZCA9IF90aGlzLmNvbmZpZy5wcm9jZXNzZXNbMF0uX2lkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgYnVpbGRQYXJhbSA9IGZ1bmN0aW9uKGFycmF5KSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgaW5kTmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbCA9IDA7IGwgPCBhcnJheS5sZW5ndGggLSAxOyBsKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kTmFtZSA9IGluZE5hbWUgKyBcIidcIiArIGFycmF5W2xdICsgXCInLFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gJygnICsgaW5kTmFtZSArIFwiJ1wiICsgYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV0gKyBcIicpXCJcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIHNwSWQgPSBjb25maWdQcm9jZXNzWzBdLnN1YlByb2Nlc3Nlc1swXS5faWQ7XG4gICAgICAgICAgICB2YXIgdG9DaGVja0FycmF5ID0gW107XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VUeXBlID0gY29uZmlnUHJvY2Vzc1swXS5zdWJQcm9jZXNzZXNbMF0uaW5zdGFuY2VUeXBlO1xuICAgICAgICAgICAgdmFyIHByb2Nlc3NJbmRpY2F0b3JzID0gSlNPTi54cGF0aChcImluZGljYXRvcnMvX2lkXCIsIGNvbmZpZ1Byb2Nlc3NbMF0uc3ViUHJvY2Vzc2VzWzBdLCB7fSk7XG5cbiAgICAgICAgICAgIHZhciBjYW5DcmVhdGVQcm9jZXNzID0gZnVuY3Rpb24oYXJyYXkpIHtcblxuICAgICAgICAgICAgICAgIHZhciBjb3VudFNpbmdsZSA9IEpTT04ueHBhdGgoXCJjb3VudCgvaW5kaWNhdG9yc1tzZXRJZCA9IFwiICsgYnVpbGRQYXJhbShhcnJheSkgKyBcIiBhbmQgY2FyZGluYWxpdHkgZXEgJ3NpbmdsZScgXS9zZXRJZClcIiwgYXBwLlNDT1BFLkFQUF9DT05GSUcsIHt9KTtcblxuICAgICAgICAgICAgICAgIGlmIChjb3VudFNpbmdsZSA+IDApIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgY291bnQgPSBKU09OLnhwYXRoKFwiY291bnQoL3N1YnByb2Nlc3Nlc1tpbmRpY2F0b3JzL2lkID0gXCIgKyBidWlsZFBhcmFtKGFycmF5KSArIFwiIGFuZCBjb21wbGV0ZSBlcSAnZmFsc2UnXSlcIiwgX3RoaXMsIHt9KVswXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjb3VudCA9PSAwKVxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZVR5cGUubmV3U2VxdWVuY2UgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY291bnQgPSBKU09OLnhwYXRoKFwiY291bnQoL3N1YnByb2Nlc3Nlc1tpZCBlcSBcIiArIHNwSWQgKyBcIiBhbmQgaW5kaWNhdG9ycy9pZCA9IFwiICsgYnVpbGRQYXJhbShhcnJheSkgKyBcIiBhbmQgY29tcGxldGUgZXEgJ2ZhbHNlJ10pXCIsIF90aGlzLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGNvdW50ID09IDApXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5zdGFuY2VUeXBlLm5ld0luc3RhbmNlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG5cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKGNhbkNyZWF0ZVByb2Nlc3MocHJvY2Vzc0luZGljYXRvcnMpKSB7XG5cbiAgICAgICAgICAgICAgICAvLyB2YXIgcHJvY2Vzc1NlcSA9IDE7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQcm9jZXNzID0gW107XG4gICAgICAgICAgICAgICAgX3RoaXMuaW5zdGFuY2UucHJvY2Vzc2VzLmZpbHRlcihmdW5jdGlvbihwcm9jZXNzSXRlbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc0l0ZW0uaWQgPT0gcHJvY2Vzc0lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UHJvY2Vzcy5wdXNoKHByb2Nlc3NJdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NTZXEgPSBjdXJyZW50UHJvY2Vzcy5sZW5ndGggKyAxO1xuICAgICAgICAgICAgICAgIC8vIHZhciBuZXh0U2VxID0gcHJvY2Vzc1NlcSArIDE7XG4gICAgICAgICAgICAgICAgLy8gUHVzaCB0aGUgcHJvY2VzcyBvYmplY3QgaW50byB0aGUgYXJyYXlcbiAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc01vZGVsID0ge1xuICAgICAgICAgICAgICAgICAgICBpZDogJycsXG4gICAgICAgICAgICAgICAgICAgIHNlcTogJycsXG4gICAgICAgICAgICAgICAgICAgIHN1YlByb2Nlc3NlczogW11cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyAxLiBVcGRhdGUgdGhlIHByb2Nlc3MgaWQgYW5kIHNlcVxuICAgICAgICAgICAgICAgIHByb2Nlc3NNb2RlbC5pZCA9IHByb2Nlc3NJZDtcbiAgICAgICAgICAgICAgICBwcm9jZXNzTW9kZWwuc2VxID0gcHJvY2Vzc1NlcTtcbiAgICAgICAgICAgICAgICBfdGhpcy5pbnN0YW5jZS5wcm9jZXNzZXMucHVzaChwcm9jZXNzTW9kZWwpO1xuICAgICAgICAgICAgICAgIC8vIFBhcmFtZXRlcnNcbiAgICAgICAgICAgICAgICB2YXIgc3ViUHJvY2Vzc0lkID0gY29uZmlnUHJvY2Vzc1swXS5zdWJQcm9jZXNzZXNbMF0uX2lkO1xuICAgICAgICAgICAgICAgIHZhciBzdWJQcm9jZXNzU2VxID0gMTtcbiAgICAgICAgICAgICAgICBfdGhpcy5pbnN0YW5jZS5wcm9jZXNzZXMuZmlsdGVyKGZ1bmN0aW9uKHByb2Nlc3NJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzSXRlbS5pZCA9PSBwcm9jZXNzSWQgJiYgcHJvY2Vzc0l0ZW0uc2VxID09IHByb2Nlc3NTZXEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YlByb2Nlc3NTZXEgPSBwcm9jZXNzSXRlbS5zdWJQcm9jZXNzZXMubGVuZ3RoICsgMVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBzdWJwcm9jZXNzIG1ldGhvZFxuICAgICAgICAgICAgICAgIHZhciBpbnB1dFVVSUQgPSBnZW5lcmF0ZVVVSUQoKTtcbiAgICAgICAgICAgICAgICAvL2NyZWF0ZSB0eG5cbiAgICAgICAgICAgICAgICB2YXIgdHhuUGFja2V0ID0ge1xuICAgICAgICAgICAgICAgICAgICBcImNvbW11bml0eUlkXCI6IGFwcC5TQ09QRS5jb21tdW5pdHlJZCxcbiAgICAgICAgICAgICAgICAgICAgXCJ1dWlkXCI6IGlucHV0VVVJRCxcbiAgICAgICAgICAgICAgICAgICAgXCJ1c2VySWRcIjogTE9DQUxfU0VUVElOR1MuU1VCU0NSSVBUSU9OUy51c2VySWQsXG4gICAgICAgICAgICAgICAgICAgIFwidHJhbnNhY3Rpb25UeXBlXCI6IFwic3ViUHJvY2Vzc1wiLFxuICAgICAgICAgICAgICAgICAgICBcImRvY3VtZW50c1wiOiBbXVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBkYW8uc3RhcnRUcmFuc2FjdGlvbih0eG5QYWNrZXQpLnRoZW4oZnVuY3Rpb24oc3VjYykge1xuXG4gICAgICAgICAgICAgICAgICAgIFByb2Nlc3Muc3ViUHJvY2VzcyhpbnB1dFVVSUQsIHByb2Nlc3NJZCwgcHJvY2Vzc1NlcSwgc3ViUHJvY2Vzc0lkLCBzdWJQcm9jZXNzU2VxLCBzdWJwcm9maWxlSWQsIGRhdGEsIF90aGlzKS50aGVuKGZ1bmN0aW9uKHN1YlByb2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdlbmVyYXRlIHRoZSB1dWlkXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1dWlkID0gc3ViUHJvY2Vzcy5kYXRhLl9pZDsgLy9fdGhpcy5wcm9maWxlICsgJzonICsgX3RoaXMuYXBwICsgJzonICsgcHJvY2Vzc0lkICsgJzonICsgcHJvY2Vzc1NlcSArICc6JyArIHN1YlByb2Nlc3NJZCArICc6JyArIHN1YlByb2Nlc3NTZXE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJ1aWxkIHRoZSBzdWItcHJvY2VzcyByZWZlcmVuY2Ugb2JqZWN0XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncm91cEtleSA9IHN1YlByb2Nlc3MuZGF0YS5ncm91cEtleTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vVE9ETzogQ2hhbmdlIHJlcXVpcmVkIHRvIG1vdmUgaXNBY3RpdmUgdG8gc3ViUHJvY2VzcyBmaWxlLlJlbW92ZSBmcm9tIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdWJwcm9maWxlSWQgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VicHJvZmlsZUlkID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3ViUHJvY2Vzc1JlZiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogc3ViUHJvY2Vzc0lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnByb2ZpbGVJZDogc3VicHJvZmlsZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcTogc3ViUHJvY2Vzcy5kYXRhW1wibWV0YS1kYXRhXCJdLnN1YlByb2Nlc3NJbnNTZXEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXVpZDogdXVpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cEtleTogZ3JvdXBLZXlcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHJlZmVyZW5jZSB0byB0aGUgcHJvY2VzcyBtb2RlbFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc01vZGVsLnN1YlByb2Nlc3Nlcy5wdXNoKHN1YlByb2Nlc3NSZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBzdWJQcm9jZXNzIG1vZGVsIHRvIHRoZSBzdWJwcm9jZXNzZXMgYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vX3RoaXMuc3VicHJvY2Vzc2VzLnB1c2goc3ViUHJvY2Vzcy5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIF90aGlzLmluc3RhbmNlLnByb2Nlc3Nlcy5wdXNoKHByb2Nlc3NNb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgX3RoaXMuaW5zdGFuY2UucHJvY2Vzc2VzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9jZXNzSXRlbSA9IF90aGlzLmluc3RhbmNlLnByb2Nlc3Nlc1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NJdGVtLmlkID09IHByb2Nlc3NJZCAmJiBwcm9jZXNzSXRlbS5zZXEgPT0gcHJvY2Vzc1NlcSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGN1cnJlbnQgcHJvY2VzcyBmcm9tIHRoZSBhcnJheSBhbmQgYWRkIHRoZSB1cGRhdGVkIHByb2Nlc3NNb2RlbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5pbnN0YW5jZS5wcm9jZXNzZXMuc3BsaWNlKGluZGV4LCAxLCBwcm9jZXNzTW9kZWwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByb2Nlc3MgdGhlIGluZGljYXRvciBkb2N1bWVudHMgd29ya2Zsb3cgcHJvY2Vzc2VzIHVwZGF0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRpY2F0b3JzID0gc3ViUHJvY2Vzcy5kYXRhLmluZGljYXRvcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RlcCA9IHN1YlByb2Nlc3MuZGF0YS5zdGVwO1xuICAgICAgICAgICAgICAgICAgICAgICAgUHJvY2Vzcy5pbmRpY2F0b3JEb2NzKHByb2Nlc3NJZCwgaW5kaWNhdG9ycywgc3RlcCwgX3RoaXMpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ1Byb2Nlc3M6ICcgKyBfdGhpcy5jb25maWcucHJvY2Vzc2VzWzBdLl9pZCArICcgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5LicsIHN1YlByb2Nlc3NSZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbW1pdCBjYWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5pbnN0YW5jZS5wcm9jZXNzZXMgPSBfdGhpcy5pbnN0YW5jZS5wcm9jZXNzZXMuZmlsdGVyKGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhKG9iai5pZCA9PSBwcm9jZXNzSWQgJiYgb2JqLnNlcSA9PSBwcm9jZXNzU2VxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuXG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KFwiQ2Fubm90IGNyZWF0ZSB3b3JrZmxvdyBhcyBvdGhlciBwcm9jZXNzIHVzaW5nIHNhbWUgU0RPIGlzIG5vdCBjb21wbGV0ZVwiKVxuICAgICAgICAgICAgfVxuXG5cblxuXG5cblxuXG5cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfVxuXG4gICAgfSk7XG59O1xuXG4vKipcbiAqIFdvcmtmbG93IHRyYW5zaXRpb24gdG8gdGhlIG5leHQgc3RlcC4gVGhpcyBtb3ZlcyB0aGUgd29ya2Zsb3cgZnJvbSB0aGUgY3VycmVudCBwcm9jZXNzLFxuICogc3ViLXByb2Nlc3Mgc3RlcCB0byB0aGUgbmV4dCBvbmUgYXMgc3BlY2lmaWVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9jZXNzSWQgLSB0aGUgV29ya2Zsb3cgY29uZmlnIC8gZGVmaW5pdGlvbiBwcm9jZXNzIGlkXG4gKiBAcGFyYW0ge251bWJlcn0gcHJvY2Vzc1NlcSAtIHRoZSBXb3JrZmxvdyBpbnN0YW5jZSBwcm9jZXNzIHNlcVxuICogQHBhcmFtIHtzdHJpbmd9IHN1YlByb2Nlc3NJZCAtIHRoZSBXb3JrZmxvdyBjb25maWcgLyBkZWZpbml0aW9uIHN1Yi1wcm9jZXNzIGlkXG4gKiBAcGFyYW0ge251bWJlcn0gc3ViUHJvY2Vzc1NlcSAtIHRoZSBXb3JrZmxvdyBpbnN0YW5jZSBzdWItcHJvY2VzcyBzZXFcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdGVwSWQgLSB0aGUgV29ya2Zsb3cgY29uZmlnIC8gZGVmaW5pdGlvbiBzdGVwIGlkIFxuICogQHBhcmFtIHtzdHJpbmd9IHRyYW5zaXRpb25JZCAtIHRoZSBXb3JrZmxvdyBjb25maWcgLyBkZWZpbml0aW9uIHRyYW5zaXRpb24gaWRcbiAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gYW55IGFkZGl0aW9uYWwgZGF0YSBwYXNzZWQgaW4gYXMga2V5IHZhbHVlIHBhaXJzXG4gKlxuICogQGV4YW1wbGVcbiAqIFdvcmtmbG93LnRyYW5zaXRpb24oJ3Byb2Nlc3NJZCcsIDEsICdzdWJQcm9jZXNzSWQnLCAxLCAnc3RlcElkJywgJ3RyYW5zaXRpb25JZCcsIHsga2V5OiAnJywgdmFsdWU6ICcnIH0pO1xuICpcbiAqIEByZXR1cm4gXCJcIlxuICpcbiAqL1xuV29ya2Zsb3cucHJvdG90eXBlLnRyYW5zaXRpb24gPSBmdW5jdGlvbihwcm9jZXNzSWQsIHByb2Nlc3NTZXEsIHN1YlByb2Nlc3NJZCwgc3ViUHJvY2Vzc1NlcSwgc3RlcElkLCB0cmFuc2l0aW9uSWQsIGRhdGEsIHNwdXVpZCkge1xuICAgIC8vIFJlLWFzc2lnbiB0aGlzXG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgbW9kZWwgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgc3B1dWlkICsgXCInXS9zdGVwXCIsIGFwcC5TQ09QRS53b3JrZmxvdywge30pWzBdO1xuICAgICAgICAgICAgdmFyIHN0ZXBPYmplY3QgPSBKU09OLnhwYXRoKFwiL3Byb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgcHJvY2Vzc0lkICsgXCInXS9zdWJQcm9jZXNzZXNbX2lkIGVxICdcIiArIHN1YlByb2Nlc3NJZCArIFwiJ10vc3RlcHNbX2lkIGVxICdcIiArIHN0ZXBJZCArIFwiJ11cIiwgX3RoaXMuY29uZmlnLCB7fSlbMF07XG4gICAgICAgICAgICB2YXIgc3ViUHJvY2Vzc1NlcSA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBzcHV1aWQgKyBcIiddL21ldGEtZGF0YS9zdWJQcm9jZXNzSW5zU2VxXCIsIGFwcC5TQ09QRS53b3JrZmxvdywge30pWzBdO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGN1cnJlbnQgc3ViLXByb2Nlc3Mgc3RlcCBkYXRhXG4gICAgICAgICAgICB2YXIgdXBkYXRlID0gZnVuY3Rpb24odHlwZSwgcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaW5zdGFuY2UucHJvY2Vzc2VzLmZpbHRlcihmdW5jdGlvbihwcm9jZXNzSXRlbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc0l0ZW0uaWQgPT0gcHJvY2Vzc0lkICYmIHByb2Nlc3NJdGVtLnNlcSA9PSBwcm9jZXNzU2VxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NJdGVtLnN1YlByb2Nlc3Nlcy5maWx0ZXIoZnVuY3Rpb24oc3ViUHJvY2Vzc0l0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3ViUHJvY2Vzc0l0ZW0uaWQgPT0gc3ViUHJvY2Vzc0lkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3VicHJvY2Vzc2VzLmZpbHRlcihmdW5jdGlvbihzdWJQcm9jZXNzT2JqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3ViUHJvY2Vzc09iai5faWQgPT0gc3B1dWlkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSAnc3RlcCcpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJQcm9jZXNzT2JqLnN0ZXAgPSByZXN1bHQuZGF0YS5zdGVwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcyhyZXN1bHQubWVzc2FnZSwgc3ViUHJvY2Vzc09iaik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gJ3N0ZXBDb21wbGV0ZScpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJQcm9jZXNzT2JqLnN0ZXAgPSByZXN1bHQuZGF0YS5zdGVwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJQcm9jZXNzT2JqLmNvbXBsZXRlID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcyhyZXN1bHQubWVzc2FnZSwgc3ViUHJvY2Vzc09iai5zdGVwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGlmIChzdGVwT2JqZWN0LmZ1bmN0aW9uLnRhc2sgIT0gdW5kZWZpbmVkICYmIHN0ZXBPYmplY3QuZnVuY3Rpb24udGFzay5wb3N0QWN0aW9ucyAhPSB1bmRlZmluZWQpIHtcblxuXG4gICAgICAgICAgICAgICAgdmFyIHBvc3RBY3Rpb25zID0gc3RlcE9iamVjdC5mdW5jdGlvbi50YXNrLnBvc3RBY3Rpb25zO1xuICAgICAgICAgICAgICAgIFByb2Nlc3MucG9zdEFjdGlvbnMocG9zdEFjdGlvbnMsIF90aGlzLCBzcHV1aWQpLnRoZW4oZnVuY3Rpb24oc3VjY2Vzcykge1xuXG4gICAgICAgICAgICAgICAgICAgIFByb2Nlc3MudHJhbnNpdGlvbihwcm9jZXNzSWQsIHByb2Nlc3NTZXEsIHN1YlByb2Nlc3NJZCwgc3ViUHJvY2Vzc1NlcSwgc3RlcElkLCB0cmFuc2l0aW9uSWQsIGRhdGEsIF90aGlzLCBzcHV1aWQsIG1vZGVsKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmRhdGEuc3ViUHJvY2Vzc0NvbXBsZXRlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUoJ3N0ZXBDb21wbGV0ZScsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlKCdzdGVwJywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG5cbiAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG5cbiAgICAgICAgICAgICAgICBQcm9jZXNzLnRyYW5zaXRpb24ocHJvY2Vzc0lkLCBwcm9jZXNzU2VxLCBzdWJQcm9jZXNzSWQsIHN1YlByb2Nlc3NTZXEsIHN0ZXBJZCwgdHJhbnNpdGlvbklkLCBkYXRhLCBfdGhpcywgc3B1dWlkLCBtb2RlbCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmRhdGEuc3ViUHJvY2Vzc0NvbXBsZXRlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZSgnc3RlcENvbXBsZXRlJywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlKCdzdGVwJywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcblxuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH1cblxuICAgIH0pO1xufTtcblxuLyoqXG4gKiBXb3JrZmxvdyBhc3NpZ24gdXNlci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvY2Vzc0lkIC0gdGhlIFdvcmtmbG93IGNvbmZpZyAvIGRlZmluaXRpb24gcHJvY2VzcyBpZFxuICogQHBhcmFtIHtudW1iZXJ9IHByb2Nlc3NTZXEgLSB0aGUgV29ya2Zsb3cgaW5zdGFuY2UgcHJvY2VzcyBzZXFcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdWJQcm9jZXNzSWQgLSB0aGUgV29ya2Zsb3cgY29uZmlnIC8gZGVmaW5pdGlvbiBzdWItcHJvY2VzcyBpZFxuICogQHBhcmFtIHtudW1iZXJ9IHN1YlByb2Nlc3NTZXEgLSB0aGUgV29ya2Zsb3cgaW5zdGFuY2Ugc3ViLXByb2Nlc3Mgc2VxXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RlcElkIC0gdGhlIFdvcmtmbG93IGNvbmZpZyAvIGRlZmluaXRpb24gc3RlcCBpZFxuICogQHBhcmFtIHtvYmplY3R9IHVzZXIgLSB0aGUgdXNlciBpZCBhbmQgbmFtZSBkYXRhXG4gKlxuICogQGV4YW1wbGUgXCJcIlxuICpcbiAqIEByZXR1cm4gXCJcIlxuICpcbiAqL1xuV29ya2Zsb3cucHJvdG90eXBlLmFzc2lnblVzZXIgPSBmdW5jdGlvbihwcm9jZXNzSWQsIHByb2Nlc3NTZXEsIHN1YlByb2Nlc3NJZCwgc3ViUHJvY2Vzc1NlcSwgdXNlciwgdXVpZCkge1xuICAgIC8vIFJlLWFzc2lnbiB0aGUgV29ya2Zsb3cgY29uc3RydWN0b3IgaW5zdGFuY2UgYXMgX3RoaXNcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBzcE9iamVjdCA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXVwiLCBhcHAuU0NPUEUud29ya2Zsb3csIHt9KVswXTtcbiAgICAgICAgICAgIHZhciBzcFJldiA9IHNwT2JqZWN0Ll9yZXY7XG4gICAgICAgICAgICB2YXIgdHhuUGFja2V0ID0ge1xuICAgICAgICAgICAgICAgIFwiY29tbXVuaXR5SWRcIjogYXBwLlNDT1BFLmNvbW11bml0eUlkLFxuICAgICAgICAgICAgICAgIFwidXVpZFwiOiB1dWlkLFxuICAgICAgICAgICAgICAgIFwidXNlcklkXCI6IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcklkLFxuICAgICAgICAgICAgICAgIFwidHJhbnNhY3Rpb25UeXBlXCI6IFwic3ViUHJvY2Vzc1wiLFxuICAgICAgICAgICAgICAgIFwiZG9jdW1lbnRzXCI6IFt7XG4gICAgICAgICAgICAgICAgICAgIFwiZG9jdW1lbnRcIjogdXVpZCxcbiAgICAgICAgICAgICAgICAgICAgXCJyZXZcIjogc3BSZXZcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgUHJvY2Vzcy5hc3NpZ25Vc2VyKHByb2Nlc3NJZCwgcHJvY2Vzc1NlcSwgc3ViUHJvY2Vzc0lkLCBzdWJQcm9jZXNzU2VxLCB1c2VyLCB1dWlkLCBfdGhpcykudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcblxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgXG5cblxuICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgIFxuXG5cblxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9XG5cbiAgICB9KVxufTtcblxuLyoqXG4gKiBXb3JrZmxvdyB0YXNrLCB0aGlzIG1ldGhvZCBleGVjdXRlcyBhIHNwZWNpZmljIHRhc2suXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHByb2Nlc3NJZCAtIHRoZSBwcm9jZXNzIGlkIHRvIHByb2Nlc3NcbiAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dERhdGEgLSB0aGUgaW5wdXQgZGF0YSB0byBwcm9jZXNzXG4gKlxuICogQGV4YW1wbGVcbiAqIFdvcmtmbG93LmluaXRpYWxpemUoJ3Byb2Nlc3NJZCcsIHsgdmFsaWREYXRlOiAnZGF0ZScgfSk7XG4gKlxuICogQHJldHVybiBcIlwiXG4gKlxuICovXG5Xb3JrZmxvdy5wcm90b3R5cGUudWkgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBSZS1hc3NpZ24gdGhlIFdvcmtmbG93IGNvbnN0cnVjdG9yIGluc3RhbmNlIGFzIF90aGlzXG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICByZXR1cm4ge1xuICAgICAgICBnZXRQcm9jZXNzOiBmdW5jdGlvbihwcm9jZXNzSWQsIGxhbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB1c2VySW50ZXJmYWNlLmdldFByb2Nlc3MocHJvY2Vzc0lkLCBsYW5nLCBfdGhpcykudGhlbihmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShtb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuXG4vKipcbiAqIFdvcmtmbG93IHRhc2ssIHRoaXMgbWV0aG9kIGV4ZWN1dGVzIGEgc3BlY2lmaWMgdGFzay5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIHRoZSBwcm9jZXNzIGlkIHRvIHByb2Nlc3NcbiAqIEBwYXJhbSB7b2JqZWN0fSBfV0ZJbnN0YW5jZSAtIHRoZSBpbnB1dCBkYXRhIHRvIHByb2Nlc3NcbiAqICogQHBhcmFtIHtzdHJpbmd9IHV1aWQgLSB0aGUgaW5wdXQgZGF0YSB0byBwcm9jZXNzXG4gKlxuICogQGV4YW1wbGVcbiAqIFdvcmtmbG93LmdldE5vZGVWYWx1ZShkYXRhLCBfV0ZJbnN0YW5jZSwgdXVpZCk7XG4gKlxuICogQHJldHVybiBcIlwiXG4gKlxuICovXG5cbldvcmtmbG93LnByb3RvdHlwZS5nZXROb2RlVmFsdWUgPSBmdW5jdGlvbihkYXRhLCB1dWlkKSB7XG4gICAgLy8gUmUtYXNzaWduIHRoZSBXb3JrZmxvdyBjb25zdHJ1Y3RvciBpbnN0YW5jZSBhcyBfdGhpc1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaGVscGVyLmdldE5vZGVWYWx1ZShkYXRhLCBfdGhpcywgdXVpZCkudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlcyk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9XG5cbiAgICB9KVxufTtcblxuLyoqXG4gKiBXb3JrZmxvdyB0YXNrLCB0aGlzIG1ldGhvZCBleGVjdXRlcyBhIHNwZWNpZmljIHRhc2suXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSB0aGUgcHJvY2VzcyBpZCB0byBwcm9jZXNzXG4gKiBAcGFyYW0ge29iamVjdH0gX1dGSW5zdGFuY2UgLSB0aGUgaW5wdXQgZGF0YSB0byBwcm9jZXNzXG4gKlxuICogQGV4YW1wbGVcbiAqIFdvcmtmbG93LnRha2VBc3NpZ25tZW50KHNwdXVpZCwgX1dGSW5zdGFuY2UpO1xuICpcbiAqIEByZXR1cm4gXCJcIlxuICpcbiAqL1xuXG5Xb3JrZmxvdy5wcm90b3R5cGUudGFrZUFzc2lnbm1lbnQgPSBmdW5jdGlvbihzcHV1aWQpIHtcbiAgICAvLyBSZS1hc3NpZ24gdGhlIFdvcmtmbG93IGNvbnN0cnVjdG9yIGluc3RhbmNlIGFzIF90aGlzXG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICBcbiAgICAgICAgICAgLy9Bc3NpZ25tZW50IGFyZSBleGVjdXRpbmcgaGVyZVxuXG4gICAgICAgICAgIHZhciBzcE9iamVjdCA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBzcHV1aWQgKyBcIiddXCIsIF90aGlzLCB7fSlbMF07XG4gICAgICAgICAgIHZhciBhc3NpZ25lZSA9IEpTT04ueHBhdGgoXCIvc3RlcC9hc3NpZ25lZFRvXCIsIHNwT2JqZWN0LCB7fSlbMF07XG4gICAgICAgICAgIC8vUHVzaGluZyBvbGRlciByZWNvcmQgaW4gcmVBc3NpZ24gYXJyYXlcblxuICAgICAgICAgICBpZiAoc3BPYmplY3Quc3RlcC5hc3NpZ25tZW50SGlzdG9yeSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgIHNwT2JqZWN0LnN0ZXAuYXNzaWdubWVudEhpc3RvcnkgPSBbXTtcbiAgICAgICAgICAgfVxuICAgICAgICAgICBpZiAoYXNzaWduZWUudXNlcklkICE9IFwiXCIgJiYgYXNzaWduZWUubmFtZSAhPSBcIlwiKSB7XG4gICAgICAgICAgICAgICBzcE9iamVjdC5zdGVwLmFzc2lnbm1lbnRIaXN0b3J5LnB1c2goSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShhc3NpZ25lZSkpKTtcbiAgICAgICAgICAgfVxuXG5cblxuICAgICAgICAgICBhc3NpZ25lZS5uYW1lID0gTE9DQUxfU0VUVElOR1MuU0VTU0lPTi5maXJzdE5hbWUgKyBcIiBcIiArIExPQ0FMX1NFVFRJTkdTLlNFU1NJT04ubGFzdE5hbWU7XG4gICAgICAgICAgIGFzc2lnbmVlLnVzZXJJZCA9IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcklkICsgXCJcIjtcbiAgICAgICAgICAgYXNzaWduZWUuZGF0ZVRpbWUgPSBtb21lbnQoKS5mb3JtYXQoKTtcbiAgICAgICAgICAgYXNzaWduZWUudHlwZSA9IEFTU0lHTk1FTlRfVFlQRV9BQ0NFUFRBTkNFO1xuICAgICAgICAgICBhc3NpZ25lZS5kdWVEYXRlVGltZSA9ICcnO1xuICAgICAgICAgICBhc3NpZ25lZS5ieSA9IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcklkICsgXCJcIjtcblxuXG4gICAgICAgICAgIC8vZmV0Y2ggcHJlV29ya0FjdGlvbnMgaGVyZSBcblxuICAgICAgICAgICB2YXIgcHJvY2Vzc0lkID0gSlNPTi54cGF0aChcIi9pbnN0YW5jZS9wcm9jZXNzZXNbc3ViUHJvY2Vzc2VzL3V1aWQgZXEgJ1wiICsgc3B1dWlkICsgXCInXS9pZFwiLCBfdGhpcywge30pWzBdO1xuICAgICAgICAgICB2YXIgc3ViUHJvY2Vzc0lkID0gSlNPTi54cGF0aChcIi9pbnN0YW5jZS9wcm9jZXNzZXMvc3ViUHJvY2Vzc2VzW3V1aWQgZXEgJ1wiICsgc3B1dWlkICsgXCInXS9pZFwiLCBfdGhpcywge30pWzBdO1xuICAgICAgICAgICB2YXIgc3RlcElkID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHNwdXVpZCArIFwiJ10vc3RlcC9pZFwiLCBfdGhpcywge30pWzBdO1xuICAgICAgICAgICB2YXIgc3RlcE9iamVjdCA9IEpTT04ueHBhdGgoXCIvcHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBwcm9jZXNzSWQgKyBcIiddL3N1YlByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgc3ViUHJvY2Vzc0lkICsgXCInXS9zdGVwc1tfaWQgZXEgJ1wiICsgc3RlcElkICsgXCInXVwiLCBfdGhpcy5jb25maWcsIHt9KVswXTtcblxuICAgICAgICAgICBpZiAoc3RlcE9iamVjdC5mdW5jdGlvbi50YXNrLnByZVdvcmtBY3Rpb25zICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICB2YXIgcHJlV29ya0FjdGlvbnMgPSBzdGVwT2JqZWN0LmZ1bmN0aW9uLnRhc2sucHJlV29ya0FjdGlvbnM7XG4gICAgICAgICAgICAgICBQcm9jZXNzLnByZVdvcmtBY3Rpb25zKHByZVdvcmtBY3Rpb25zLCBfdGhpcykudGhlbihmdW5jdGlvbihzdWNjZXNzKSB7XG5cbiAgICAgICAgICAgICAgICAgICByZXNvbHZlKF90aGlzKTtcblxuICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG5cbiAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcblxuICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgcmVzb2x2ZShfdGhpcyk7XG5cbiAgICAgICAgICAgfVxuXG5cblxuXG5cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG5cbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuXG4gICAgICAgIH1cblxuICAgIH0pO1xufTtcblxuXG4vKipcbiAqIFdvcmtmbG93IHRhc2ssIHRoaXMgbWV0aG9kIGV4ZWN1dGVzIGEgc3BlY2lmaWMgdGFzay5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIHRoZSBwcm9jZXNzIGlkIHRvIHByb2Nlc3NcbiAqIEBwYXJhbSB7b2JqZWN0fSBfV0ZJbnN0YW5jZSAtIHRoZSBpbnB1dCBkYXRhIHRvIHByb2Nlc3NcbiAqXG4gKiBAZXhhbXBsZVxuICogV29ya2Zsb3cuY29uZGl0aW9uKGNvbmRpdGlvbiwgc3B1dWlkKTtcbiAqXG4gKiBAcmV0dXJuIFwiXCJcbiAqXG4gKi9cblxuV29ya2Zsb3cucHJvdG90eXBlLmNvbmRpdGlvbiA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgc3B1dWlkKSB7XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICB0cnkge1xuXG4gICAgICAgICAgICB2YXIgb3BlcmF0b3IgPSBjb25kaXRpb24ub3BlcmF0b3I7XG4gICAgICAgICAgICB2YXIgZGF0YUJsb2NrID0gY29uZGl0aW9uLnZhbHVlLmRhdGE7XG5cbiAgICAgICAgICAgIGlmIChjb25kaXRpb24uc3ViamVjdC5pbmRpY2F0b3IgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2V0SWQgPSBjb25kaXRpb24uc3ViamVjdC5pbmRpY2F0b3Iuc2V0SWQ7XG4gICAgICAgICAgICAgICAgdmFyIG1vZGVsU2NvcGUgPSBjb25kaXRpb24uc3ViamVjdC5pbmRpY2F0b3IubW9kZWxTY29wZTtcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudFBhdGggPSBjb25kaXRpb24uc3ViamVjdC5pbmRpY2F0b3IuZWxlbWVudFBhdGg7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmRpdGlvbi5zdWJqZWN0LmluZGljYXRvci5jb250ZXh0ID09ICdzdWJQcm9jZXNzJykge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRpY2F0b3JVVUlEID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHNwdXVpZCArIFwiJ10vaW5kaWNhdG9yc1tpZCBlcSAnXCIgKyBzZXRJZCArIFwiJ10vaW5zdGFuY2VzWzFdL3V1aWRcIiwgX3RoaXMsIHt9KVswXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGljYXRvck1vZGVsID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW19pZCBlcSAnXCIgKyBpbmRpY2F0b3JVVUlEICsgXCInXVwiLCBfdGhpcywge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YUVsZW1lbnQgPSBpbmRpY2F0b3JNb2RlbC5tb2RlbFttb2RlbFNjb3BlXS5kYXRhW3NldElkXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZXZhbChcImRhdGFFbGVtZW50LlwiICsgZWxlbWVudFBhdGgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGhlbHBlci5nZXROb2RlVmFsdWUoZGF0YUJsb2NrLCBfdGhpcywgc3B1dWlkKS50aGVuKGZ1bmN0aW9uKHJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGhlbHBlci5jb21wYXJlKHZhbHVlLCBvcGVyYXRvciwgcmVzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoJ05vdCBpbXBsZW1lbnRlZCcpXG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29uZGl0aW9uLnN1YmplY3QuaW5kaWNhdG9yV3JhcHBlciAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoJ05vdCBpbXBsZW1lbnRlZCcpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbmRpdGlvbi5zdWJqZWN0LnZhcmlhYmxlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJlamVjdCgnTm90IGltcGxlbWVudGVkJylcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29uZGl0aW9uLnN1YmplY3Quc3ViUHJvY2VzcyAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50UGF0aCA9IGNvbmRpdGlvbi5zdWJqZWN0LnN1YlByb2Nlc3MuZWxlbWVudFBhdGg7XG4gICAgICAgICAgICAgICAgdmFyIHNwT2JqZWN0ID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHNwdXVpZCArIFwiJ11cIiwgX3RoaXMsIHt9KVswXTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBldmFsKFwic3BPYmplY3QuXCIgKyBlbGVtZW50UGF0aCk7XG4gICAgICAgICAgICAgICAgaGVscGVyLmdldE5vZGVWYWx1ZShkYXRhQmxvY2ssIF90aGlzLCBzcHV1aWQpLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBoZWxwZXIuY29tcGFyZSh2YWx1ZSwgb3BlcmF0b3IsIHJlcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuXG5cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG5cbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuXG4gICAgICAgIH1cblxuICAgIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBXb3JrZmxvdzsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbGl0eScpO1xudmFyIG5vZGVWYWx1ZSA9IHJlcXVpcmUoJy4vbm9kZVZhbHVlJyk7XG52YXIgZm9ybSA9IHJlcXVpcmUoJy4vZm9ybScpO1xudmFyIGhlbHBlciA9IHJlcXVpcmUoJy4vaGVscGVyJyk7XG5cbnZhciBnYXRla2VlcGVyID0gbmV3IEdLKCk7XG5cbi8qKlxuICogQWN0aW9ucyBNb2R1bGVcbiAqXG4gKiBAbW9kdWxlIGxpYi9hY3Rpb25zXG4gKiBAYXV0aG9yIEhhc2FuIEFiYmFzXG4gKiBAdmVyc2lvbiAyLjAuMFxuICogQGRlc2NyaXB0aW9uIHRlc3QgZGVzY3JpcHRpb25cbiAqIEBjb3B5cmlnaHQgS3dhbnR1IEx0ZCBSU0EgMjAwOS0yMDE1LlxuICpcbiAqL1xuXG4vKipcbiAqICBGb3JtIE1vZHVsZSBhY3Rpb25zIG5lZWRzIHRvIGJlIG1vdmVkIGhlcmUuXG4gKiAgVGhpcyBhY3Rpb25zIG1vZHVsZSB3aWxsIGJlIGNlbnRhbCBwbGFjZSB0byBob2xkIGFsbCBmdW5jdGlvbnMuXG4gKiAgXG4gKi9cblxudmFyIGNvbW11bml0eSA9IChmdW5jdGlvbigpIHtcblxuICAgIHJldHVybiB7XG5cbiAgICAgICAgY3JlYXRlQ29tbXVuaXR5OiBmdW5jdGlvbihfZGVmLCB1dWlkLCBfV0ZJbnN0YW5jZSkge1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgd29ya2VyT2JqZWN0ID0gd29ya2VyLmdldFdvcmtlcldyYXBwZXIoKTtcblxuICAgICAgICAgICAgICAgIHZhciBzdWJwcm9maWxlSWQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGlmIChhcHAucHJvZmlsZSAhPSB1bmRlZmluZWQgJiYgYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJwcm9maWxlSWQgPSBhcHAucHJvZmlsZS5zdWJwcm9maWxlSWQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0Ll9pZCA9IGdlbmVyYXRlVVVJRCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jb21tdW5pdHlJZCA9IGFwcC5TQ09QRS5nZXRDb21tdW5pdHlJZCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5hcHBsaWNhdGlvbklkID0gYXBwLlNDT1BFLmFwcGxpY2F0aW9uSWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNyZWF0ZWREYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zZW5kZXJVc2VySWQgPSBMT0NBTF9TRVRUSU5HUy5TVUJTQ1JJUFRJT05TLnVzZXJJZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QucHJvZmlsZUlkID0gX1dGSW5zdGFuY2UucHJvZmlsZTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc3ViUHJvY2Vzc1VVSUQgPSB1dWlkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zdWJwcm9maWxlSWQgPSBzdWJwcm9maWxlSWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNoYW5uZWxzLnB1c2goXCJmb2xsb3dcIik7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNoYW5uZWxzLnB1c2goXCJjb21tdW5pdHlfXCIgKyBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgdXVpZENvbW11bml0eSA9IEpTT04ueHBhdGgoXCIvaW5kaWNhdG9yc1tjYXRlZ29yeS90ZXJtIGVxICdDb21tdW5pdHknXS9faWRcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBcImNyZWF0ZUNvbW11bml0eVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcIm5ld0NvbW11bml0eUlkXCI6IF9XRkluc3RhbmNlLnByb2ZpbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImluZGljYXRvclVVSURcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29tbXVuaXR5XCI6IHV1aWRDb21tdW5pdHlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmFjdGlvbiA9IGFjdGlvbjtcbiAgICAgICAgICAgICAgICB3b3JrZXIuc2VuZCh3b3JrZXJPYmplY3QpLnRoZW4oZnVuY3Rpb24od29ya2VyU3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICB3b3JrZXIuc2V0V29ya2VySW5mb0luU3VicHJvY2Vzcyh3b3JrZXJPYmplY3QsIF9XRkluc3RhbmNlLCB1dWlkKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ1dvcmtlciBwcm9jZXNzZWQgc3VjY2Vzc2Z1bGx5LicsIHdvcmtlclN1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24od29ya2VyRmFpbCkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3Qod29ya2VyRmFpbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgdXNlckpvaW5Db21tdW5pdHk6IGZ1bmN0aW9uKF9kZWYsIHV1aWQsIF9XRkluc3RhbmNlKSB7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSxcbiAgICAgICAgcmVsZWFzZUFkb3B0ZWRBcHBsaWNhdGlvbjogZnVuY3Rpb24oX2RlZiwgdXVpZCwgX1dGSW5zdGFuY2UpIHtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHdvcmtlck9iamVjdCA9IHdvcmtlci5nZXRXb3JrZXJXcmFwcGVyKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3VicHJvZmlsZUlkID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoYXBwLnByb2ZpbGUgIT0gdW5kZWZpbmVkICYmIGFwcC5wcm9maWxlLnN1YnByb2ZpbGVJZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VicHJvZmlsZUlkID0gYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5faWQgPSBnZW5lcmF0ZVVVSUQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY29tbXVuaXR5SWQgPSBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuYXBwbGljYXRpb25JZCA9IGFwcC5TQ09QRS5hcHBsaWNhdGlvbklkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jcmVhdGVkRGF0ZVRpbWUgPSBtb21lbnQoKS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc2VuZGVyVXNlcklkID0gTE9DQUxfU0VUVElOR1MuU1VCU0NSSVBUSU9OUy51c2VySWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnByb2ZpbGVJZCA9IF9XRkluc3RhbmNlLnByb2ZpbGU7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnN1YlByb2Nlc3NVVUlEID0gdXVpZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc3VicHJvZmlsZUlkID0gc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwiZm9sbG93XCIpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwiY29tbXVuaXR5X1wiICsgYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCkpO1xuICAgICAgICAgICAgICAgIHZhciB1dWlkUmVsZWFzZUFkb3B0ZWRBcHBsaWNhdGlvbiA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXS9pbmRpY2F0b3JzW2lkIGVxICdhZG9wdGVkQXBwbGljYXRpb24nXS9pbnN0YW5jZXNbMV0vdXVpZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJyZWxlYXNlQWRvcHRlZEFwcGxpY2F0aW9uXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29tbXVuaXR5SWRcIjogX1dGSW5zdGFuY2UucHJvZmlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaW5kaWNhdG9yVVVJRFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhZG9wdGVkQXBwbGljYXRpb25cIjogdXVpZFJlbGVhc2VBZG9wdGVkQXBwbGljYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmFjdGlvbiA9IGFjdGlvbjtcbiAgICAgICAgICAgICAgICB3b3JrZXIuc2VuZCh3b3JrZXJPYmplY3QpLnRoZW4oZnVuY3Rpb24od29ya2VyU3VjY2Vzcykge1xuXG4gICAgICAgICAgICAgICAgICAgIHdvcmtlci5zZXRXb3JrZXJJbmZvSW5TdWJwcm9jZXNzKHdvcmtlck9iamVjdCwgX1dGSW5zdGFuY2UsIHV1aWQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdXb3JrZXIgcHJvY2Vzc2VzIHN1Y2Nlc3NmdWxseS4nLCB3b3JrZXJTdWNjZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcblxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHdvcmtlckZhaWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHdvcmtlckZhaWwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH1cblxufSkoKTtcblxudmFyIGFwcGxpY2F0aW9uID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgcmV0dXJuIHtcblxuICAgICAgICBjcmVhdGVBcHBEZWZpbml0aW9uOiBmdW5jdGlvbihfZGVmLCB1dWlkLCBfV0ZJbnN0YW5jZSkge1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgd29ya2VyT2JqZWN0ID0gd29ya2VyLmdldFdvcmtlcldyYXBwZXIoKTtcblxuICAgICAgICAgICAgICAgIHZhciBzdWJwcm9maWxlSWQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGlmIChhcHAucHJvZmlsZSAhPSB1bmRlZmluZWQgJiYgYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJwcm9maWxlSWQgPSBhcHAucHJvZmlsZS5zdWJwcm9maWxlSWQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0Ll9pZCA9IGdlbmVyYXRlVVVJRCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jb21tdW5pdHlJZCA9IGFwcC5TQ09QRS5nZXRDb21tdW5pdHlJZCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5hcHBsaWNhdGlvbklkID0gYXBwLlNDT1BFLmFwcGxpY2F0aW9uSWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNyZWF0ZWREYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zZW5kZXJVc2VySWQgPSBMT0NBTF9TRVRUSU5HUy5TVUJTQ1JJUFRJT05TLnVzZXJJZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QucHJvZmlsZUlkID0gX1dGSW5zdGFuY2UucHJvZmlsZTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc3ViUHJvY2Vzc1VVSUQgPSB1dWlkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zdWJwcm9maWxlSWQgPSBzdWJwcm9maWxlSWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNoYW5uZWxzLnB1c2goXCJmb2xsb3dcIik7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNoYW5uZWxzLnB1c2goXCJjb21tdW5pdHlfXCIgKyBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKSk7XG4gICAgICAgICAgICAgICAgdmFyIHV1aWRBcHBsaWNhdGlvbiA9IEpTT04ueHBhdGgoXCIvaW5kaWNhdG9yc1tjYXRlZ29yeS90ZXJtIGVxICdBcHBsaWNhdGlvbiddL19pZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIFwiY3JlYXRlQXBwbGljYXRpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJuZXdBcHBsaWNhdGlvbklkXCI6IF9XRkluc3RhbmNlLnByb2ZpbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImluZGljYXRvclVVSURcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQXBwbGljYXRpb25cIjogdXVpZEFwcGxpY2F0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgICAgICAgICAgd29ya2VyLnNlbmQod29ya2VyT2JqZWN0KS50aGVuKGZ1bmN0aW9uKHdvcmtlclN1Y2Nlc3MpIHtcblxuICAgICAgICAgICAgICAgICAgICB3b3JrZXIuc2V0V29ya2VySW5mb0luU3VicHJvY2Vzcyh3b3JrZXJPYmplY3QsIF9XRkluc3RhbmNlLCB1dWlkKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcygnV29ya2VyIHByb2Nlc3NlcyBzdWNjZXNzZnVsbHkuJywgd29ya2VyU3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG5cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbih3b3JrZXJGYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh3b3JrZXJGYWlsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgYnVpbGRBcHBsaWNhdGlvbjogZnVuY3Rpb24oX2RlZiwgdXVpZCwgX1dGSW5zdGFuY2UpIHtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHdvcmtlck9iamVjdCA9IHdvcmtlci5nZXRXb3JrZXJXcmFwcGVyKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3VicHJvZmlsZUlkID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoYXBwLnByb2ZpbGUgIT0gdW5kZWZpbmVkICYmIGFwcC5wcm9maWxlLnN1YnByb2ZpbGVJZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VicHJvZmlsZUlkID0gYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5faWQgPSBnZW5lcmF0ZVVVSUQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY29tbXVuaXR5SWQgPSBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuYXBwbGljYXRpb25JZCA9IGFwcC5TQ09QRS5hcHBsaWNhdGlvbklkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jcmVhdGVkRGF0ZVRpbWUgPSBtb21lbnQoKS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc2VuZGVyVXNlcklkID0gTE9DQUxfU0VUVElOR1MuU1VCU0NSSVBUSU9OUy51c2VySWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnByb2ZpbGVJZCA9IF9XRkluc3RhbmNlLnByb2ZpbGU7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnN1YlByb2Nlc3NVVUlEID0gdXVpZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc3VicHJvZmlsZUlkID0gc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwiZm9sbG93XCIpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwiY29tbXVuaXR5X1wiICsgYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCkpO1xuICAgICAgICAgICAgICAgIHZhciB1dWlkUHVibGlzaEFwcGxpY2F0aW9uID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddL2luZGljYXRvcnNbaWQgZXEgJ1B1Ymxpc2hBcHBsaWNhdGlvbiddL2luc3RhbmNlc1sxXS91dWlkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG5cbiAgICAgICAgICAgICAgICB2YXIgdXVpZEFwcGxpY2F0aW9uRGVmaW5pdGlvbiA9IEpTT04ueHBhdGgoXCIvaW5kaWNhdG9yc1tjYXRlZ29yeS90ZXJtIGVxICdBcHBsaWNhdGlvbkRlZmluaXRpb24nXS9faWRcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICB2YXIgdXVpZFJvbGVzID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW2NhdGVnb3J5L3Rlcm0gZXEgJ1JvbGVzJ10vX2lkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgdmFyIHV1aWRBcHBsaWNhdGlvbiA9IEpTT04ueHBhdGgoXCIvaW5kaWNhdG9yc1tjYXRlZ29yeS90ZXJtIGVxICdBcHBsaWNhdGlvbiddL19pZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgIHZhciB1dWlkQXBwUGVybWlzc2lvbnMgPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbY2F0ZWdvcnkvdGVybSBlcSAnQXBwUGVybWlzc2lvbnMnXS9faWRcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcblxuICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIFwiYnVpbGRBcHBsaWNhdGlvblwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uSWRcIjogX1dGSW5zdGFuY2UucHJvZmlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaW5kaWNhdG9yVVVJRFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJQdWJsaXNoQXBwbGljYXRpb25cIjogdXVpZFB1Ymxpc2hBcHBsaWNhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkFwcGxpY2F0aW9uRGVmaW5pdGlvblwiOiB1dWlkQXBwbGljYXRpb25EZWZpbml0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiUm9sZXNcIjogdXVpZFJvbGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQXBwbGljYXRpb25cIjogdXVpZEFwcGxpY2F0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQXBwUGVybWlzc2lvbnNcIjogdXVpZEFwcFBlcm1pc3Npb25zXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgICAgICAgICAgd29ya2VyLnNlbmQod29ya2VyT2JqZWN0KS50aGVuKGZ1bmN0aW9uKHdvcmtlclN1Y2Nlc3MpIHtcblxuICAgICAgICAgICAgICAgICAgICB3b3JrZXIuc2V0V29ya2VySW5mb0luU3VicHJvY2Vzcyh3b3JrZXJPYmplY3QsIF9XRkluc3RhbmNlLCB1dWlkKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcygnV29ya2VyIHByb2Nlc3NlcyBzdWNjZXNzZnVsbHkuJywgd29ya2VyU3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG5cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbih3b3JrZXJGYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh3b3JrZXJGYWlsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgYXBwbGljYXRpb25BZG9wdGlvbjogZnVuY3Rpb24oX2RlZiwgdXVpZCwgX1dGSW5zdGFuY2UpIHtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHdvcmtlck9iamVjdCA9IHdvcmtlci5nZXRXb3JrZXJXcmFwcGVyKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3VicHJvZmlsZUlkID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoYXBwLnByb2ZpbGUgIT0gdW5kZWZpbmVkICYmIGFwcC5wcm9maWxlLnN1YnByb2ZpbGVJZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VicHJvZmlsZUlkID0gYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0Ll9pZCA9IGdlbmVyYXRlVVVJRCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jb21tdW5pdHlJZCA9IGFwcC5TQ09QRS5nZXRDb21tdW5pdHlJZCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5hcHBsaWNhdGlvbklkID0gYXBwLlNDT1BFLmFwcGxpY2F0aW9uSWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNyZWF0ZWREYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zZW5kZXJVc2VySWQgPSBMT0NBTF9TRVRUSU5HUy5TVUJTQ1JJUFRJT05TLnVzZXJJZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QucHJvZmlsZUlkID0gX1dGSW5zdGFuY2UucHJvZmlsZTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc3ViUHJvY2Vzc1VVSUQgPSB1dWlkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zdWJwcm9maWxlSWQgPSBzdWJwcm9maWxlSWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNoYW5uZWxzLnB1c2goXCJmb2xsb3dcIik7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNoYW5uZWxzLnB1c2goXCJjb21tdW5pdHlfXCIgKyBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKSk7XG4gICAgICAgICAgICAgICAgdmFyIHV1aWRBZG9wdGlvbiA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXS9pbmRpY2F0b3JzW2lkIGVxICdBZG9wdGlvbiddL2luc3RhbmNlc1sxXS91dWlkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG5cbiAgICAgICAgICAgICAgICB2YXIgdXVpZFB1Ymxpc2hBcHBsaWNhdGlvbiA9IEpTT04ueHBhdGgoXCIvaW5kaWNhdG9yc1tjYXRlZ29yeS90ZXJtIGVxICdQdWJsaXNoQXBwbGljYXRpb24nXS9faWRcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICB2YXIgdXVpZEFwcGxpY2F0aW9uID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW2NhdGVnb3J5L3Rlcm0gZXEgJ0FwcGxpY2F0aW9uJ10vX2lkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG5cbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBcImFkb3B0QXBwbGljYXRpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbklkXCI6IF9XRkluc3RhbmNlLnByb2ZpbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImluZGljYXRvclVVSURcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQWRvcHRpb25cIjogdXVpZEFkb3B0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiUHVibGlzaEFwcGxpY2F0aW9uXCI6IHV1aWRQdWJsaXNoQXBwbGljYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJBcHBsaWNhdGlvblwiOiB1dWlkQXBwbGljYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmFjdGlvbiA9IGFjdGlvbjtcbiAgICAgICAgICAgICAgICB3b3JrZXIuc2VuZCh3b3JrZXJPYmplY3QpLnRoZW4oZnVuY3Rpb24od29ya2VyU3VjY2Vzcykge1xuXG4gICAgICAgICAgICAgICAgICAgIHdvcmtlci5zZXRXb3JrZXJJbmZvSW5TdWJwcm9jZXNzKHdvcmtlck9iamVjdCwgX1dGSW5zdGFuY2UsIHV1aWQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdXb3JrZXIgcHJvY2Vzc2VzIHN1Y2Nlc3NmdWxseS4nLCB3b3JrZXJTdWNjZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcblxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHdvcmtlckZhaWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHdvcmtlckZhaWwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVUYXhvbm9teTogZnVuY3Rpb24oX2RlZiwgdXVpZCwgX1dGSW5zdGFuY2UpIHtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHdvcmtlck9iamVjdCA9IHdvcmtlci5nZXRXb3JrZXJXcmFwcGVyKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3VicHJvZmlsZUlkID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoYXBwLnByb2ZpbGUgIT0gdW5kZWZpbmVkICYmIGFwcC5wcm9maWxlLnN1YnByb2ZpbGVJZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VicHJvZmlsZUlkID0gYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5faWQgPSBnZW5lcmF0ZVVVSUQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY29tbXVuaXR5SWQgPSBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuYXBwbGljYXRpb25JZCA9IGFwcC5TQ09QRS5hcHBsaWNhdGlvbklkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jcmVhdGVkRGF0ZVRpbWUgPSBtb21lbnQoKS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc2VuZGVyVXNlcklkID0gTE9DQUxfU0VUVElOR1MuU1VCU0NSSVBUSU9OUy51c2VySWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnByb2ZpbGVJZCA9IF9XRkluc3RhbmNlLnByb2ZpbGU7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnN1YlByb2Nlc3NVVUlEID0gdXVpZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc3VicHJvZmlsZUlkID0gc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwiZm9sbG93XCIpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwiY29tbXVuaXR5X1wiICsgYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCkpO1xuICAgICAgICAgICAgICAgIHZhciB0YXhvbm9teVVVSUQgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vaW5kaWNhdG9yc1tpZCBlcSAnVGF4b25vbXknXS9pbnN0YW5jZXNbMV0vdXVpZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJjcmVhdGVUYXhvbm9teVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInRheG9ub215VVVJRFwiOiB0YXhvbm9teVVVSURcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgICAgICAgICAgd29ya2VyLnNlbmQod29ya2VyT2JqZWN0KS50aGVuKGZ1bmN0aW9uKHdvcmtlclN1Y2Nlc3MpIHtcblxuICAgICAgICAgICAgICAgICAgICB3b3JrZXIuc2V0V29ya2VySW5mb0luU3VicHJvY2Vzcyh3b3JrZXJPYmplY3QsIF9XRkluc3RhbmNlLCB1dWlkKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcygnV29ya2VyIHByb2Nlc3NlcyBzdWNjZXNzZnVsbHkuJywgd29ya2VyU3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG5cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbih3b3JrZXJGYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh3b3JrZXJGYWlsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH1cblxufSkoKTtcblxudmFyIHBlcmZvcm1hbmNlID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgcmV0dXJuIHtcblxuXG4gICAgICAgIHVubG9ja1BlcmlvZDogZnVuY3Rpb24oX2RlZiwgdXVpZCwgX1dGSW5zdGFuY2UpIHtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHN1YnByb2Nlc3NPYmplY3QgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ11cIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcblxuICAgICAgICAgICAgICAgIC8vIG1lc3NhZ2UgZnJvbSBzdGVwIDogVE9ETyBcblxuICAgICAgICAgICAgICAgIHZhciBlbnRyeVVVSUQgPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbaWQgZXEgJ1wiICsgUEVSSU9EX1NFVF9JRCArIFwiJ10vaW5zdGFuY2VzL3V1aWRcIiwgc3VicHJvY2Vzc09iamVjdCwge30pWzBdO1xuICAgICAgICAgICAgICAgIHZhciBlbmRkYXRlID0gc3VicHJvY2Vzc09iamVjdC5kYXRlcy52YWxpZDtcblxuICAgICAgICAgICAgICAgIGxpYnJhcnkudW5sb2NrUGVyaW9kKGVudHJ5VVVJRCwgZW5kZGF0ZSwgdXVpZCkudGhlbihmdW5jdGlvbihkYXRhKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ1VubG9jayBwZXJpb2QuJywgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG5cblxuXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuXG5cblxuXG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldE1vZGVsU3RhdHVzOiBmdW5jdGlvbihfZGVmLCB1dWlkLCBfV0ZJbnN0YW5jZSkge1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cblxuICAgICAgICAgICAgICAgIHZhciBzdWJwcm9jZXNzT2JqZWN0ID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgdmFyIGVudHJ5VVVJRCA9IEpTT04ueHBhdGgoXCIvaW5kaWNhdG9yc1tpZCBlcSAnXCIgKyBQRVJJT0RfU0VUX0lEICsgXCInXS9pbnN0YW5jZXMvdXVpZFwiLCBzdWJwcm9jZXNzT2JqZWN0LCB7fSlbMF07XG4gICAgICAgICAgICAgICAgdmFyIGVuZGRhdGUgPSBzdWJwcm9jZXNzT2JqZWN0LmRhdGVzLnZhbGlkO1xuXG4gICAgICAgICAgICAgICAgdmFyIHN0YXR1c2kxOG5MYWJlbCA9IEpTT04ueHBhdGgoXCIvbGFiZWxcIiwgX2RlZiwge30pWzBdO1xuICAgICAgICAgICAgICAgIHZhciBzdGF0dXMgPSBoZWxwZXIuZ2V0TGFuZ3VhZ2VNZXNzYWdlKHN0YXR1c2kxOG5MYWJlbCk7XG5cblxuICAgICAgICAgICAgICAgIGxpYnJhcnkuc2V0UGVyaW9kU3RhdHVzKGVudHJ5VVVJRCwgZW5kZGF0ZSwgc3RhdHVzLCB1dWlkKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2Vzcygnc2V0TW9kZWxTdGF0dXMnLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcblxuXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuXG5cblxuXG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgbG9ja1BlcmZvcm1hbmNlTW9kZWw6IGZ1bmN0aW9uKF9kZWYsIHV1aWQsIF9XRkluc3RhbmNlKSB7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICAgICAgICAgIHZhciBzdWJwcm9jZXNzT2JqZWN0ID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG5cbiAgICAgICAgICAgICAgICB2YXIgZW50cnlVVUlEID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW2lkIGVxICdcIiArIFBFUkZPUk1BTkNFX1NFVF9JRCArIFwiJ10vaW5zdGFuY2VzL3V1aWRcIiwgc3VicHJvY2Vzc09iamVjdCwge30pWzBdO1xuICAgICAgICAgICAgICAgIHZhciBlbmRkYXRlID0gc3VicHJvY2Vzc09iamVjdC5kYXRlcy52YWxpZDtcblxuICAgICAgICAgICAgICAgIGxpYnJhcnkubG9ja1BlcmZvcm1hbmNlTW9kZWwoZW50cnlVVUlELCBlbmRkYXRlLCB1dWlkKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcygnTG9jayBwZXJmb3JtYW5jZSBtb2RlbC4nLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcblxuXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuXG5cblxuXG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn0pKCk7XG5cbnZhciBzZG8gPSAoZnVuY3Rpb24oKSB7XG5cbiAgICByZXR1cm4ge1xuXG4gICAgICAgIGNyZWF0ZTogZnVuY3Rpb24oX2RlZiwgdXVpZCwgX1dGSW5zdGFuY2UpIHtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHdvcmtlck9iamVjdCA9IHdvcmtlci5nZXRXb3JrZXJXcmFwcGVyKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3VicHJvZmlsZUlkID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoYXBwLnByb2ZpbGUgIT0gdW5kZWZpbmVkICYmIGFwcC5wcm9maWxlLnN1YnByb2ZpbGVJZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VicHJvZmlsZUlkID0gYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5faWQgPSBnZW5lcmF0ZVVVSUQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY29tbXVuaXR5SWQgPSBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuYXBwbGljYXRpb25JZCA9IGFwcC5TQ09QRS5hcHBsaWNhdGlvbklkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jcmVhdGVkRGF0ZVRpbWUgPSBtb21lbnQoKS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc2VuZGVyVXNlcklkID0gTE9DQUxfU0VUVElOR1MuU1VCU0NSSVBUSU9OUy51c2VySWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnByb2ZpbGVJZCA9IF9XRkluc3RhbmNlLnByb2ZpbGU7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnN1YlByb2Nlc3NVVUlEID0gdXVpZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc3VicHJvZmlsZUlkID0gc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwiZm9sbG93XCIpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwiY29tbXVuaXR5X1wiICsgYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCkpO1xuICAgICAgICAgICAgICAgIHZhciBzZG9VVUlEID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddL2luZGljYXRvcnNbaWQgZXEgJ1NETyddL2luc3RhbmNlc1sxXS91dWlkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG5cbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBcImNyZWF0ZVNET1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInNkb1VVSURcIjogc2RvVVVJRFxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmFjdGlvbiA9IGFjdGlvbjtcbiAgICAgICAgICAgICAgICB3b3JrZXIuc2VuZCh3b3JrZXJPYmplY3QpLnRoZW4oZnVuY3Rpb24od29ya2VyU3VjY2Vzcykge1xuXG4gICAgICAgICAgICAgICAgICAgIHdvcmtlci5zZXRXb3JrZXJJbmZvSW5TdWJwcm9jZXNzKHdvcmtlck9iamVjdCwgX1dGSW5zdGFuY2UsIHV1aWQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdXb3JrZXIgcHJvY2Vzc2VzIHN1Y2Nlc3NmdWxseS4nLCB3b3JrZXJTdWNjZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcblxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHdvcmtlckZhaWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHdvcmtlckZhaWwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG59KSgpO1xuXG52YXIgdGF4b25vbXkgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICByZXR1cm4ge1xuXG4gICAgICAgIGNyZWF0ZTogZnVuY3Rpb24oX2RlZiwgdXVpZCwgX1dGSW5zdGFuY2UpIHtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHdvcmtlck9iamVjdCA9IHdvcmtlci5nZXRXb3JrZXJXcmFwcGVyKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3VicHJvZmlsZUlkID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoYXBwLnByb2ZpbGUgIT0gdW5kZWZpbmVkICYmIGFwcC5wcm9maWxlLnN1YnByb2ZpbGVJZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VicHJvZmlsZUlkID0gYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5faWQgPSBnZW5lcmF0ZVVVSUQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY29tbXVuaXR5SWQgPSBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuYXBwbGljYXRpb25JZCA9IGFwcC5TQ09QRS5hcHBsaWNhdGlvbklkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jcmVhdGVkRGF0ZVRpbWUgPSBtb21lbnQoKS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc2VuZGVyVXNlcklkID0gTE9DQUxfU0VUVElOR1MuU1VCU0NSSVBUSU9OUy51c2VySWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnByb2ZpbGVJZCA9IF9XRkluc3RhbmNlLnByb2ZpbGU7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnN1YlByb2Nlc3NVVUlEID0gdXVpZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc3VicHJvZmlsZUlkID0gc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwiZm9sbG93XCIpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwiY29tbXVuaXR5X1wiICsgYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCkpO1xuICAgICAgICAgICAgICAgIHZhciB0YXhvbm9teVVVSUQgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vaW5kaWNhdG9yc1tpZCBlcSAnVGF4b25vbXknXS9pbnN0YW5jZXNbMV0vdXVpZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJjcmVhdGVUYXhvbm9teVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInRheG9ub215VVVJRFwiOiB0YXhvbm9teVVVSURcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgICAgICAgICAgd29ya2VyLnNlbmQod29ya2VyT2JqZWN0KS50aGVuKGZ1bmN0aW9uKHdvcmtlclN1Y2Nlc3MpIHtcblxuICAgICAgICAgICAgICAgICAgICB3b3JrZXIuc2V0V29ya2VySW5mb0luU3VicHJvY2Vzcyh3b3JrZXJPYmplY3QsIF9XRkluc3RhbmNlLCB1dWlkKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcygnV29ya2VyIHByb2Nlc3NlcyBzdWNjZXNzZnVsbHkuJywgd29ya2VyU3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG5cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbih3b3JrZXJGYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh3b3JrZXJGYWlsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH1cblxufSkoKTtcblxudmFyIHN1YlByb2Nlc3NJbnN0YW5jZSA9IChmdW5jdGlvbigpIHtcblxuICAgIHJldHVybiB7XG5cbiAgICAgICAgc2V0VGl0bGU6IGZ1bmN0aW9uKF9kZWYsIHV1aWQsIGRhdGFWYWx1ZSwgX1dGSW5zdGFuY2UpIHtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHNwUHJvY2Vzc09iamVjdCA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXVwiLCBhcHAuU0NPUEUud29ya2Zsb3csIHt9KVswXTtcbiAgICAgICAgICAgICAgICBzcFByb2Nlc3NPYmplY3QubGFiZWwgPSBkYXRhVmFsdWU7XG5cbiAgICAgICAgICAgICAgICB2YXIgaXRlbXNUb1Byb2Nlc3MgPSAxO1xuICAgICAgICAgICAgICAgIHZhciBzdHVmZiA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBvYmogPSB7fTtcblxuICAgICAgICAgICAgICAgIG9iai5tb2RlbCA9IF9XRkluc3RhbmNlLnN1YnByb2Nlc3NlcztcbiAgICAgICAgICAgICAgICBzdHVmZi5wdXNoKG9iaik7XG4gICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ1N1YnByb2Nlc3Mgc2V0VGl0bGUgc3VjY2Vzcy4nLCBfV0ZJbnN0YW5jZS5zdWJwcm9jZXNzZXMpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIHNldFZhbGlkRGF0ZTogZnVuY3Rpb24oX2RlZiwgdXVpZCwgZGF0YVZhbHVlLCBfV0ZJbnN0YW5jZSkge1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3BQcm9jZXNzT2JqZWN0ID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddXCIsIGFwcC5TQ09QRS53b3JrZmxvdywge30pWzBdO1xuICAgICAgICAgICAgICAgIHNwUHJvY2Vzc09iamVjdC5kYXRlcy52YWxpZCA9IGRhdGFWYWx1ZTtcblxuICAgICAgICAgICAgICAgIHZhciBpdGVtc1RvUHJvY2VzcyA9IDE7XG4gICAgICAgICAgICAgICAgdmFyIHN0dWZmID0gW107XG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IHt9O1xuXG4gICAgICAgICAgICAgICAgb2JqLm1vZGVsID0gc3BQcm9jZXNzT2JqZWN0O1xuICAgICAgICAgICAgICAgIHN0dWZmLnB1c2gob2JqKTtcblxuICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCd2YWxpZCBkYXRlIHNldC4nLCBfV0ZJbnN0YW5jZS5zdWJwcm9jZXNzZXMpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIHNldFNQU3RhdHVzOiBmdW5jdGlvbihfZGVmLCB1dWlkLCBkYXRhVmFsdWUsIF9XRkluc3RhbmNlKSB7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICAgICAgICAgIHZhciBzcFByb2Nlc3NPYmplY3QgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ11cIiwgYXBwLlNDT1BFLndvcmtmbG93LCB7fSlbMF07XG4gICAgICAgICAgICAgICAgc3BQcm9jZXNzT2JqZWN0LnNwU3RhdHVzID0gZGF0YVZhbHVlO1xuXG4gICAgICAgICAgICAgICAgdmFyIGl0ZW1zVG9Qcm9jZXNzID0gMTtcbiAgICAgICAgICAgICAgICB2YXIgc3R1ZmYgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0ge307XG5cbiAgICAgICAgICAgICAgICBvYmoubW9kZWwgPSBfV0ZJbnN0YW5jZS5zdWJwcm9jZXNzZXM7XG4gICAgICAgICAgICAgICAgc3R1ZmYucHVzaChvYmopO1xuICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdTdWJwcm9jZXNzIHNwU3RhdHVzIHN1Y2Nlc3MuJywgX1dGSW5zdGFuY2Uuc3VicHJvY2Vzc2VzKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSxcblxuICAgIH1cblxufSkoKTtcblxudmFyIHZhcmlhYmxlcyA9IChmdW5jdGlvbigpIHtcblxuICAgIHJldHVybiB7XG5cbiAgICAgICAgc2V0VmFyaWFibGU6IGZ1bmN0aW9uKHNldFZhcmlhYmxlLCBfV0ZJbnN0YW5jZSwgdXVpZCkge1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgICAgICBoZWxwZXIuZ2V0Tm9kZVZhbHVlKHNldFZhcmlhYmxlLmRhdGEsIF9XRkluc3RhbmNlLCB1dWlkKS50aGVuKGZ1bmN0aW9uKGRhdGFWYWx1ZSkge1xuXG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjb3BlID0gc2V0VmFyaWFibGUuc2NvcGU7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YXJpYWJsZU5hbWUgPSBzZXRWYXJpYWJsZS5uYW1lO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFyaWFibGVUeXBlID0gc2V0VmFyaWFibGUudmFyaWFibGVUeXBlO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWxpZERhdGUgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vZGF0ZXMvdmFsaWRcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcblxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHNjb3BlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdwcm9maWxlJzpcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9maWxlSWQgPSBfV0ZJbnN0YW5jZS5wcm9maWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9maWxlVmFyaWFibGVGaWxlTmFtZSA9IHByb2ZpbGVJZCArICc6dmFyaWFibGVzJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHhuUGFja2V0ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShhcHAuU0NPUEUudHhuKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW8uZ2V0KHByb2ZpbGVWYXJpYWJsZUZpbGVOYW1lKS50aGVuKGZ1bmN0aW9uKGZpbGUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVmUGFjayA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYWxQcm9jZXNzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFyaWFibGVUeXBlID09ICdwZXJpb2RpYycpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IE92ZXJ3cml0ZSB0aGUgZXhpc3RpbmcgdmFyaWFibGUgaW4gY2FzZSB3aGVyZSBzYW1lIHZhcmlhYmxlIGlzIGFzc2lnbmVkIGF0IG11bHRpcGxlIHN0ZXBzLlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NPYmogPSBKU09OLnhwYXRoKFwiL2luc3RhbmNlL3Byb2Nlc3Nlc1tzdWJQcm9jZXNzZXMvdXVpZCBlcSAnXCIgKyB1dWlkICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZXEgPSBwcm9jZXNzT2JqLnNlcTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN1YlByb2Nlc3NVVUlEXCI6IHV1aWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidXNlclwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVzZXJOYW1lXCI6IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVzZXJJZFwiOiBMT0NBTF9TRVRUSU5HUy5TVUJTQ1JJUFRJT05TLnVzZXJQcm9maWxlSWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZXFcIjogc2VxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInZhbGlkRGF0ZVwiOiB2YWxpZERhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidmFsdWVcIjogZGF0YVZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVbdmFyaWFibGVOYW1lXSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZhbCgnZmlsZS4nICsgdmFyaWFibGVOYW1lICsgJy5wdXNoKG9iaiknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlW3ZhcmlhYmxlTmFtZV0gPSBbb2JqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVt2YXJpYWJsZU5hbWVdID0gZGF0YVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW8udXBzZXJ0KGZpbGUpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZlBhY2sucmV2ID0gZGF0YS5yZXY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShcIlZhcmlhYmxlIHNldCBzdWNjZXNzZnVsbHlcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChcIkZhaWxlZCB0byBzZXQgVmFyaWFibGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR4blBhY2tldC5kb2N1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9maWxlVmFyaWFibGVGaWxlTmFtZSA9PSB0eG5QYWNrZXQuZG9jdW1lbnRzW2ldLmRvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmUGFjayA9ICB0eG5QYWNrZXQuZG9jdW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4blBhY2tldC5kb2N1bWVudHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZlBhY2sgPSB7IFwiZG9jdW1lbnRcIjogcHJvZmlsZVZhcmlhYmxlRmlsZU5hbWUsIFwicmV2XCI6IGZpbGUuX3JldiB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHhuUGFja2V0LmRvY3VtZW50cy5wdXNoKHJlZlBhY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwLlNDT1BFLnR4bi5kb2N1bWVudHMucHVzaChyZWZQYWNrKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFvLnVwZGF0ZVRyYW5zYWN0aW9uKHR4blBhY2tldCkudGhlbihmdW5jdGlvbihzdWNjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxQcm9jZXNzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFByb2Nlc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiX2lkXCI6IHByb2ZpbGVWYXJpYWJsZUZpbGVOYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5jaGFubmVscyA9IGFwcC5wcm9maWxlLmNoYW5uZWxzO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YXJpYWJsZVR5cGUgPT0gJ3BlcmlvZGljJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NPYmogPSBKU09OLnhwYXRoKFwiL2luc3RhbmNlL3Byb2Nlc3Nlc1tzdWJQcm9jZXNzZXMvdXVpZCBlcSAnXCIgKyB1dWlkICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlcSA9IHByb2Nlc3NPYmouc2VxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVt2YXJpYWJsZU5hbWVdID0gW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN1YlByb2Nlc3NVVUlEXCI6IHV1aWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ1c2VyXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ1c2VyTmFtZVwiOiBMT0NBTF9TRVRUSU5HUy5TVUJTQ1JJUFRJT05TLnVzZXJuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVzZXJJZFwiOiBMT0NBTF9TRVRUSU5HUy5TVUJTQ1JJUFRJT05TLnVzZXJQcm9maWxlSWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2VxXCI6IHNlcSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInZhbGlkRGF0ZVwiOiB2YWxpZERhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBkYXRhVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVt2YXJpYWJsZU5hbWVdID0gZGF0YVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFvLnVwc2VydChmaWxlKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoXCJWYXJpYWJsZSBzZXQgc3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwiRmFpbGVkIHRvIHNldCBWYXJpYWJsZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N1YlByb2Nlc3NJbnN0YW5jZSc6XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKFwibm90IGltcGxlbWVudGVkXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzdGVwJzpcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoXCJub3QgaW1wbGVtZW50ZWRcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzdWJQcm9maWxlU3ViUHJvY2Vzc0luc3RhbmNlJzpcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJQcm9maWxlSWQgPSBhcHAucHJvZmlsZS5zdWJwcm9maWxlSWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YlByb2ZpbGVWYXJpYWJsZUZpbGVOYW1lID0gc3ViUHJvZmlsZUlkICsgJzp2YXJpYWJsZXMnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdXBkYXRlIHRyeG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHhuUGFja2V0ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShhcHAuU0NPUEUudHhuKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFvLmdldChzdWJQcm9maWxlVmFyaWFibGVGaWxlTmFtZSkudGhlbihmdW5jdGlvbihmaWxlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWZQYWNrID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2NhbFByb2Nlc3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YXJpYWJsZVR5cGUgPT0gJ3BlcmlvZGljJykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnQgPSBsaWJyYXJ5LmdldFN1YnByb2ZpbGVTdWJwcm9jZXNzSWRzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlcSA9IEpTT04ueHBhdGgoXCJjb3VudCgvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXS9wcmVjZWRpbmctc2libGluZzo6bm9kZSgpW2lkID0gL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vaWQgYW5kIF9pZCA9IC9zdWJwcm9jZXNzZXNbX2lkID0gXCIgKyBwYXJ0ICsgXCJdL19pZF0pXCIsIF9XRkluc3RhbmNlLCB7fSlbMF0gKyAxO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN1YlByb2Nlc3NVVUlEXCI6IHV1aWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidXNlclwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVzZXJOYW1lXCI6IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVzZXJJZFwiOiBMT0NBTF9TRVRUSU5HUy5TVUJTQ1JJUFRJT05TLnVzZXJQcm9maWxlSWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZXFcIjogc2VxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInZhbGlkRGF0ZVwiOiB2YWxpZERhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidmFsdWVcIjogZGF0YVZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVbdmFyaWFibGVOYW1lXSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZhbCgnZmlsZS4nICsgdmFyaWFibGVOYW1lICsgJy5wdXNoKG9iaiknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlW3ZhcmlhYmxlTmFtZV0gPSBbb2JqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVt2YXJpYWJsZU5hbWVdID0gZGF0YVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW8udXBzZXJ0KGZpbGUpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZlBhY2sucmV2ID0gZGF0YS5yZXY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShcIlZhcmlhYmxlIGF0IHN1YnByb2ZpbGUgc2V0IHN1Y2Nlc3NmdWxseVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwiRmFpbGVkIHRvIHNldCBWYXJpYWJsZSBhdCBzdWJwcm9maWxlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eG5QYWNrZXQuZG9jdW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3ViUHJvZmlsZVZhcmlhYmxlRmlsZU5hbWUgPT0gdHhuUGFja2V0LmRvY3VtZW50c1tpXS5kb2N1bWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZlBhY2sgPSAgdHhuUGFja2V0LmRvY3VtZW50c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eG5QYWNrZXQuZG9jdW1lbnRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZQYWNrID0geyBcImRvY3VtZW50XCI6IHN1YlByb2ZpbGVWYXJpYWJsZUZpbGVOYW1lLCBcInJldlwiOiBmaWxlLl9yZXYgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4blBhY2tldC5kb2N1bWVudHMucHVzaChyZWZQYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5TQ09QRS50eG4uZG9jdW1lbnRzLnB1c2gocmVmUGFjayk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhby51cGRhdGVUcmFuc2FjdGlvbih0eG5QYWNrZXQpLnRoZW4oZnVuY3Rpb24oc3VjYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsUHJvY2VzcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxQcm9jZXNzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl9pZFwiOiBzdWJQcm9maWxlVmFyaWFibGVGaWxlTmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUuY2hhbm5lbHMgPSBhcHAucHJvZmlsZS5jaGFubmVscztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFyaWFibGVUeXBlID09ICdwZXJpb2RpYycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFyIHByb2Nlc3NPYmogPSBKU09OLnhwYXRoKFwiL2luc3RhbmNlL3Byb2Nlc3Nlc1tzdWJQcm9jZXNzZXMvdXVpZCBlcSAnXCIgKyB1dWlkICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgc2VxID0gcHJvY2Vzc09iai5zZXE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFyIHNlcSA9IEpTT04ueHBhdGgoXCJjb3VudCgvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXS9wcmVjZWRpbmctc2libGluZzo6bm9kZSgpW2lkID0gL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vaWQgYW5kIGlkID0gL3N1YnByb2Nlc3Nlc1tfaWQgPSAvaW5zdGFuY2UvcHJvY2Vzc2VzL3N1YlByb2Nlc3Nlc1tzdWJwcm9maWxlSWQgZXEgJ1wiICsgc3ViUHJvZmlsZUlkICsgXCInXS91dWlkXS9faWRdKVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0ID0gbGlicmFyeS5nZXRTdWJwcm9maWxlU3VicHJvY2Vzc0lkcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlcSA9IEpTT04ueHBhdGgoXCJjb3VudCgvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXS9wcmVjZWRpbmctc2libGluZzo6bm9kZSgpW2lkID0gL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vaWQgYW5kIF9pZCA9IC9zdWJwcm9jZXNzZXNbX2lkID0gXCIgKyBwYXJ0ICsgXCJdL19pZF0pXCIsIF9XRkluc3RhbmNlLCB7fSlbMF0gKyAxO1xuXG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVt2YXJpYWJsZU5hbWVdID0gW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN1YlByb2Nlc3NVVUlEXCI6IHV1aWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ1c2VyXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ1c2VyTmFtZVwiOiBMT0NBTF9TRVRUSU5HUy5TVUJTQ1JJUFRJT05TLnVzZXJuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVzZXJJZFwiOiBMT0NBTF9TRVRUSU5HUy5TVUJTQ1JJUFRJT05TLnVzZXJQcm9maWxlSWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2VxXCI6IHNlcSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInZhbGlkRGF0ZVwiOiB2YWxpZERhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBkYXRhVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVt2YXJpYWJsZU5hbWVdID0gZGF0YVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFvLnVwc2VydChmaWxlKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoXCJWYXJpYWJsZSBhdCBzdWJwcm9maWxlIHNldCBzdWNjZXNzZnVsbHlcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJGYWlsZWQgdG8gc2V0IFZhcmlhYmxlIGF0IHN1YnByb2ZpbGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChcImdldE5vZGVWYWx1ZSB2YWx1ZSBub3QgZm91bmQuXCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG5cblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG59KSgpO1xuXG52YXIgbm90aWZpY2F0aW9uID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgcmV0dXJuIHtcblxuICAgICAgICBzZW5kTm90aWZpY2F0aW9uV29ya2VyOiBmdW5jdGlvbihub3RpZmljYXRpb24sIF9XRkluc3RhbmNlLCB1dWlkKSB7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXG4gICAgICAgICAgICAgICAgdmFyIGdldFJlY2lwaWVudHMgPSBmdW5jdGlvbihub3RpZmljYXRpb24pIHtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVjaXBpZW50cyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGlmaWNhdGlvbi5yZWNpcGllbnRzLnJvbGUgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNpcGllbnRzLnJvbGUgPSBub3RpZmljYXRpb24ucmVjaXBpZW50cy5yb2xlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVjaXBpZW50cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90aWZpY2F0aW9uLnJlY2lwaWVudHMucHJvZmlsZVJvbGUgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNpcGllbnRzLnByb2ZpbGVSb2xlID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjaXBpZW50cy5wcm9maWxlUm9sZS5yb2xlID0gbm90aWZpY2F0aW9uLnJlY2lwaWVudHMucHJvZmlsZVJvbGUucm9sZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNpcGllbnRzLnByb2ZpbGVSb2xlLnByb2ZpbGUgPSBub3RpZmljYXRpb24ucmVjaXBpZW50cy5wcm9maWxlUm9sZS5wcm9maWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVjaXBpZW50cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90aWZpY2F0aW9uLnJlY2lwaWVudHMuc3ViUHJvZmlsZVJvbGUgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNpcGllbnRzLnN1YlByb2ZpbGVSb2xlID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjaXBpZW50cy5zdWJQcm9maWxlUm9sZS5yb2xlID0gbm90aWZpY2F0aW9uLnJlY2lwaWVudHMuc3ViUHJvZmlsZVJvbGUucm9sZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNpcGllbnRzLnN1YlByb2ZpbGVSb2xlLnN1YlByb2ZpbGVDYXRlZ29yeSA9IG5vdGlmaWNhdGlvbi5yZWNpcGllbnRzLnN1YlByb2ZpbGVSb2xlLnN1YlByb2ZpbGVDYXRlZ29yeTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNpcGllbnRzLnN1YlByb2ZpbGVSb2xlLnByb2ZpbGUgPSBub3RpZmljYXRpb24ucmVjaXBpZW50cy5zdWJQcm9maWxlUm9sZS5wcm9maWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVjaXBpZW50cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90aWZpY2F0aW9uLnJlY2lwaWVudHMuZnVuY3Rpb24gIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNpcGllbnRzLmZ1bmN0aW9uID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjaXBpZW50cy5mdW5jdGlvbi51c2VycyA9IHt9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyLmdldE5vZGVWYWx1ZShub3RpZmljYXRpb24ucmVjaXBpZW50cy5mdW5jdGlvbi51c2VycywgX1dGSW5zdGFuY2UsIHV1aWQpLnRoZW4oZnVuY3Rpb24oZGF0YVZhbHVlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjaXBpZW50cy5mdW5jdGlvbi51c2VycyA9IGRhdGFWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZWNpcGllbnRzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWooZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90aWZpY2F0aW9uLnJlY2lwaWVudHMuc3RlcEFzc2lnbmVlICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjaXBpZW50cy5zdGVwQXNzaWduZWUgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNpcGllbnRzLnN0ZXBBc3NpZ25lZS5yb2xlID0gbm90aWZpY2F0aW9uLnJlY2lwaWVudHMuc3RlcEFzc2lnbmVlLnJvbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZWNpcGllbnRzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciB3b3JrZXJPYmplY3QgPSBuZXcgTm90aWZpY2F0aW9Xb3JrZXIoYXBwKTtcblxuXG4gICAgICAgICAgICAgICAgdmFyIHN1YlByb2ZpbGVJZCA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXS9tZXRhLWRhdGEvc3VicHJvZmlsZUlkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG5cbiAgICAgICAgICAgICAgICB2YXIgcGF0aEFycmF5ID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLnNwbGl0KCcvJyk7XG4gICAgICAgICAgICAgICAgdmFyIGJhc2VVUkwgPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyB3aW5kb3cubG9jYXRpb24uaG9zdCArIFwiL1wiICsgcGF0aEFycmF5WzFdO1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgc3VicHJvZmlsZUlkID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoYXBwLnByb2ZpbGUgIT0gdW5kZWZpbmVkICYmIGFwcC5wcm9maWxlLnN1YnByb2ZpbGVJZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VicHJvZmlsZUlkID0gYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJub3RpZmljYXRpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXNzYWdlXCI6IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibWVzc2FnZVR5cGVcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibWV0YS1kYXRhXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uSWRcIjogX1dGSW5zdGFuY2UuYXBwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29tbXVuaXR5SWRcIjogX1dGSW5zdGFuY2UuY29tbXVuaXR5SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwcm9maWxlSWRcIjogX1dGSW5zdGFuY2UucHJvZmlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN1YlByb2Nlc3NVVUlEXCI6IHV1aWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdWJQcm9maWxlSWRcIjogc3ViUHJvZmlsZUlkXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJub3RpZmljYXRpb25UeXBlXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInN1YnByb2ZpbGVJZFwiOiBzdWJwcm9maWxlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInByaW9yaXR5XCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInJlY2lwaWVudHNcIjoge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ1cmxcIjogYmFzZVVSTCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwia2V5c1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwcm9maWxlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb21tdW5pdHlcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjdXJyZW50VXNlclwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3ViUHJvY2Vzc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidmFsaWREYXRlXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZHVlRGF0ZVwiOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5vdGlmaWNhdGlvblwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY3JlYXRlZERhdGVUaW1lXCI6IG1vbWVudCgpLmZvcm1hdCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN0ZXBcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN0ZXBDcmVhdGVkRGF0ZVRpbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdGVwTmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN0ZXBJZFwiOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5vZGVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAgICBLZXlzIG1lc3NhZ2UgXG4gICAgICAgICAgICAgICAgKi9cblxuXG5cblxuICAgICAgICAgICAgICAgIHZhciBpbmRpY2F0b3JUaXRsZSA9IEpTT04ueHBhdGgoXCIvaW5kaWNhdG9yc1tfaWQgZXEgJ1wiICsgYXBwLnByb2ZpbGUuX2lkICsgXCInXS90aXRsZVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ua2V5cy5wcm9maWxlLm5hbWUgPSBpbmRpY2F0b3JUaXRsZTtcblxuICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ua2V5cy5wcm9maWxlLmlkID0gYXBwLnByb2ZpbGUuX2lkO1xuXG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLmNvbW11bml0eS5uYW1lID0gYXBwLmdldE5hbWVCeUxhbmcoTE9DQUxfU0VUVElOR1MuQ09NTVVOSVRZX0NPTkZJRy5jb21tdW5pdHlOYW1lKTtcbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuY29tbXVuaXR5LmlkID0gTE9DQUxfU0VUVElOR1MuQ09NTVVOSVRZX0NPTkZJRy5jb21tdW5pdHlJZDtcblxuICAgICAgICAgICAgICAgIHZhciBhcHBsaWNhdGlvbiA9IEpTT04ueHBhdGgoXCIvYXBwbGljYXRpb25zW2FwcElkIGVxICdcIiArIGFwcC5TQ09QRS5hcHBsaWNhdGlvbklkICsgXCInXVwiLCBMT0NBTF9TRVRUSU5HUy5DT01NVU5JVFlfQ09ORklHLCB7fSlbMF07XG5cbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuYXBwbGljYXRpb24ubmFtZSA9IGFwcC5nZXROYW1lQnlMYW5nKGFwcGxpY2F0aW9uLm5hbWUpO1xuICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ua2V5cy5hcHBsaWNhdGlvbi5pZCA9IGFwcGxpY2F0aW9uLmFwcElkO1xuXG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLmN1cnJlbnRVc2VyLm5hbWUgPSBMT0NBTF9TRVRUSU5HUy5TRVNTSU9OLmZpcnN0TmFtZSArIFwiIFwiICsgTE9DQUxfU0VUVElOR1MuU0VTU0lPTi5sYXN0TmFtZTtcbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuY3VycmVudFVzZXIuaWQgPSBMT0NBTF9TRVRUSU5HUy5TVUJTQ1JJUFRJT05TLnVzZXJJZDtcblxuICAgICAgICAgICAgICAgIHZhciBzdWJQcm9jZXNzT2JqZWN0ID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG5cbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuc3ViUHJvY2Vzcy5uYW1lID0gc3ViUHJvY2Vzc09iamVjdC5sYWJlbDtcbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuc3ViUHJvY2Vzcy5pZCA9IHV1aWQ7XG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLnN1YlByb2Nlc3MudmFsaWREYXRlID0gc3ViUHJvY2Vzc09iamVjdC5kYXRlcy52YWxpZDtcbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuc3ViUHJvY2Vzcy5kdWVEYXRlID0gc3ViUHJvY2Vzc09iamVjdC5kYXRlcy5kdWU7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3RlcE9iamVjdCA9IHN1YlByb2Nlc3NPYmplY3Quc3RlcDtcbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuc3RlcC5zdGVwQ3JlYXRlZERhdGVUaW1lID0gc3RlcE9iamVjdC5kYXRlVGltZUNyZWF0ZWQ7XG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLnN0ZXAuc3RlcElkID0gc3RlcE9iamVjdC5pZDtcblxuICAgICAgICAgICAgICAgIHZhciBzdGVwQ29uZmlnT2JqZWN0ID0gSlNPTi54cGF0aChcIi9wcm9jZXNzZXMvc3ViUHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBzdWJQcm9jZXNzT2JqZWN0LmlkICsgXCInXS9zdGVwc1tfaWQgZXEgJ1wiICsgc3RlcE9iamVjdC5pZCArIFwiJ11cIiwgYXBwLlNDT1BFLndvcmtmbG93LmNvbmZpZywge30pWzBdO1xuICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ua2V5cy5zdGVwLnN0ZXBOYW1lID0gYXBwLmdldE5hbWVCeUxhbmcoc3RlcENvbmZpZ09iamVjdC5uYW1lKTtcblxuICAgICAgICAgICAgICAgIHZhciBub2RlVGl0bGUgPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbX2lkIGVxICdcIiArIHN1YnByb2ZpbGVJZCArIFwiJ10vdGl0bGVcIiwgYXBwLlNDT1BFLndvcmtmbG93LCB7fSlbMF07XG4gICAgICAgICAgICAgICAgaWYgKG5vZGVUaXRsZSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLm5vZGUudGl0bGUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ua2V5cy5ub2RlLnRpdGxlID0gbm9kZVRpdGxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICAgIFdvcmtlciBtZXNzYWdlIFxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5tZXNzYWdlLmRlZmF1bHQgPSBub3RpZmljYXRpb24ubWVzc2FnZS5kZWZhdWx0O1xuICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ubWVzc2FnZS50aXRsZSA9IG5vdGlmaWNhdGlvbi5tZXNzYWdlLnRpdGxlO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5vdGlmaWNhdGlvbi5tZXNzYWdlLnJ0ZiAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5tZXNzYWdlLnJ0ZiA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBpZiAobm90aWZpY2F0aW9uLm1lc3NhZ2UucnRmLnRlbXBsYXRlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5tZXNzYWdlLnJ0Zi50ZW1wbGF0ZSA9IG5vdGlmaWNhdGlvbi5tZXNzYWdlLnJ0Zi50ZW1wbGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub3RpZmljYXRpb24ubWVzc2FnZS5ydGYubWFya3VwICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5tZXNzYWdlLnJ0Zi5tYXJrdXAgPSBub3RpZmljYXRpb24ubWVzc2FnZS5ydGYubWFya3VwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgICAgV29ya2VyIG1lc3NhZ2VUeXBlIFxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5tZXNzYWdlVHlwZSA9IG5vdGlmaWNhdGlvbi5tZXNzYWdlVHlwZTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICAgIFdvcmtlciBub3RpZmljYXRpb25UeXBlIFxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5ub3RpZmljYXRpb25UeXBlID0gbm90aWZpY2F0aW9uLm5vdGlmaWNhdGlvblR5cGU7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAgICBXb3JrZXIgcHJpb3JpdHkgXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLnByaW9yaXR5ID0gbm90aWZpY2F0aW9uLnByaW9yaXR5O1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgICAgV29ya2VyIG5vdGlmaWNhdGlvbkFjdGlvbiBpZiBleGlzdHMgXG4gICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb24ubm90aWZpY2F0aW9uQWN0aW9uICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ubm90aWZpY2F0aW9uQWN0aW9uID0ge307XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ubm90aWZpY2F0aW9uQWN0aW9uLmxhYmVsID0gbm90aWZpY2F0aW9uLm5vdGlmaWNhdGlvbkFjdGlvbi5sYWJlbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGlmaWNhdGlvbi5ub3RpZmljYXRpb25BY3Rpb24uYWN0aW9uLlVSSSAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5ub3RpZmljYXRpb25BY3Rpb24uYWN0aW9uID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLm5vdGlmaWNhdGlvbkFjdGlvbi5hY3Rpb24uVVJJID0gbm90aWZpY2F0aW9uLm5vdGlmaWNhdGlvbkFjdGlvbi5hY3Rpb24uVVJJO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90aWZpY2F0aW9uLm5vdGlmaWNhdGlvbkFjdGlvbi5hY3Rpb24uZ290byAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5ub3RpZmljYXRpb25BY3Rpb24uYWN0aW9uID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLm5vdGlmaWNhdGlvbkFjdGlvbi5hY3Rpb24uZ290byA9IG5vdGlmaWNhdGlvbi5ub3RpZmljYXRpb25BY3Rpb24uYWN0aW9uLmdvdG87XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb24uc2NoZWR1bGUgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4ZWN1dGVPYmplY3QgPSBub3RpZmljYXRpb24uc2NoZWR1bGUuZXhlY3V0ZUNvbW1hbmQ7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHdvcmtlclNjaGVkdWxlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZVRpbWU6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB1bml0OiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFjdG9yOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZXhlY3V0ZU9iamVjdC5ub3cgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlclNjaGVkdWxlLmRhdGVUaW1lID0gbW9tZW50KCkuZm9ybWF0KCk7XG5cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV4ZWN1dGVPYmplY3QuZXhhY3QgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlclNjaGVkdWxlLmRhdGVUaW1lID0gZXhlY3V0ZU9iamVjdC5leGFjdC5kYXRlVGltZTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV4ZWN1dGVPYmplY3QuZHVlRGF0ZSAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YlByb2Nlc3NPYmplY3QgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ11cIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYWxjdWxhdGVkRGF0ZVRpbWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGR1ZURhdGUgPSBzdWJQcm9jZXNzT2JqZWN0LmRhdGVzLmR1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGR1ZURhdGUgIT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZWREYXRlVGltZSA9IG1vbWVudChkdWVEYXRlLCBcIllZWVktTU0tRERcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZWREYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS5kYXRlVGltZSA9IGNhbGN1bGF0ZWREYXRlVGltZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlclNjaGVkdWxlLmZhY3RvciA9IGV4ZWN1dGVPYmplY3QuZHVlRGF0ZS5mYWN0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS51bml0ID0gZXhlY3V0ZU9iamVjdC5kdWVEYXRlLnVuaXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChleGVjdXRlT2JqZWN0LnZhbGlkRGF0ZSAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YlByb2Nlc3NPYmplY3QgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ11cIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYWxjdWxhdGVkRGF0ZVRpbWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGR1ZURhdGUgPSBzdWJQcm9jZXNzT2JqZWN0LmRhdGVzLnZhbGlkO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWREYXRlICE9IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxjdWxhdGVkRGF0ZVRpbWUgPSBtb21lbnQodmFsaWREYXRlLCBcIllZWVktTU0tRERcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZWREYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS5kYXRlVGltZSA9IGNhbGN1bGF0ZWREYXRlVGltZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlclNjaGVkdWxlLmZhY3RvciA9IGV4ZWN1dGVPYmplY3QudmFsaWREYXRlLmZhY3RvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlclNjaGVkdWxlLnVuaXQgPSBleGVjdXRlT2JqZWN0LnZhbGlkRGF0ZS51bml0O1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXhlY3V0ZU9iamVjdC5zdGVwQ3JlYXRlZERhdGUgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJQcm9jZXNzT2JqZWN0ID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FsY3VsYXRlZERhdGVUaW1lID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGVwQ3JlYXRlZERhdGVUaW1lID0gc3ViUHJvY2Vzc09iamVjdC5zdGVwLmR1ZURhdGVUaW1lO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RlcENyZWF0ZWREYXRlVGltZSAhPSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsY3VsYXRlZERhdGVUaW1lID0gbW9tZW50KHN0ZXBDcmVhdGVkRGF0ZVRpbWUpLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxjdWxhdGVkRGF0ZVRpbWUgPSBtb21lbnQoKS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2VyU2NoZWR1bGUuZGF0ZVRpbWUgPSBjYWxjdWxhdGVkRGF0ZVRpbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS5mYWN0b3IgPSBleGVjdXRlT2JqZWN0LnN0ZXBDcmVhdGVkRGF0ZS5mYWN0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS51bml0ID0gZXhlY3V0ZU9iamVjdC5zdGVwQ3JlYXRlZERhdGUudW5pdDtcblxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlclNjaGVkdWxlLmRhdGVUaW1lID0gbW9tZW50KCkuZm9ybWF0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zZXRTY2hlZHVsZSh3b3JrZXJTY2hlZHVsZSk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICAgIFdvcmtlciByZWNpcGllbnRzXG4gICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgIGdldFJlY2lwaWVudHMobm90aWZpY2F0aW9uKS50aGVuKGZ1bmN0aW9uKHJlY2lwaWVudCkge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLnJlY2lwaWVudHMgPSByZWNpcGllbnQ7XG4gICAgICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zZXRNZXNzYWdlKFwiVGhlIHNlcnZlciBpcyBwcm9jZXNzaW5nIHlvdXIgcmVxdWVzdC4gUGxlYXNlIHdhaXQgYSBmZXcgc2Vjb25kcyBhbmQgdGhlbiBjbGljayB0aGUgcmVmcmVzaCBidXR0b24uXCIpO1xuICAgICAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc2V0QWN0aW9uKGFjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWJQcm9jZXNzT2JqZWN0ID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zZXRDb250ZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVwRGF0ZVRpbWU6IHN1YlByb2Nlc3NPYmplY3Quc3RlcC5kYXRlVGltZUNyZWF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zZW5kKCkudGhlbihmdW5jdGlvbih3b3JrZXJTdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh3b3JrZXJPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ05vdGlmaWNhdGlvbiBXb3JrZXIgcHJvY2Vzc2VzIHN1Y2Nlc3NmdWxseS4nLCB3b3JrZXJTdWNjZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24od29ya2VyRmFpbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh3b3JrZXJGYWlsKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTm90aWZpY2F0aW9uIC0gZ2V0UmVjaXBpZW50cyBmYWlsZWQgd2l0aCBlcnJvciBcIiArIGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuXG5cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSxcblxuXG4gICAgICAgIHJlQXNzaWdubWVudE5vdGlmaWNhdGlvbjogZnVuY3Rpb24obm90aWZpY2F0aW9uLCBfV0ZJbnN0YW5jZSwgdXVpZCwgdXNlcikge1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cblxuICAgICAgICAgICAgICAgIHZhciBnZXRSZWNpcGllbnRzID0gZnVuY3Rpb24odXNlck9iaikge1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWNpcGllbnRzID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICByZWNpcGllbnRzLmZ1bmN0aW9uID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICByZWNpcGllbnRzLmZ1bmN0aW9uLnVzZXJzID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICByZWNpcGllbnRzLmZ1bmN0aW9uLnVzZXJzID0gdXNlck9iai5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVjaXBpZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgdmFyIHdvcmtlck9iamVjdCA9IG5ldyBOb3RpZmljYXRpb1dvcmtlcihhcHApO1xuXG4gICAgICAgICAgICAgICAgdmFyIHN1YlByb2ZpbGVJZCA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXS9tZXRhLWRhdGEvc3VicHJvZmlsZUlkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgdmFyIHBhdGhBcnJheSA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5zcGxpdCgnLycpO1xuICAgICAgICAgICAgICAgIHZhciBiYXNlVVJMID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgd2luZG93LmxvY2F0aW9uLmhvc3QgKyBcIi9cIiArIHBhdGhBcnJheVsxXTtcblxuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJub3RpZmljYXRpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXNzYWdlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJ0ZlwiOiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXNzYWdlVHlwZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXRhLWRhdGFcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYXBwbGljYXRpb25JZFwiOiBfV0ZJbnN0YW5jZS5hcHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb21tdW5pdHlJZFwiOiBfV0ZJbnN0YW5jZS5jb21tdW5pdHlJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInByb2ZpbGVJZFwiOiBfV0ZJbnN0YW5jZS5wcm9maWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3ViUHJvY2Vzc1VVSURcIjogdXVpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN1YlByb2ZpbGVJZFwiOiBzdWJQcm9maWxlSWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm5vdGlmaWNhdGlvblR5cGVcIjogXCJ3b3JrZmxvd1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJwcmlvcml0eVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJyZWNpcGllbnRzXCI6IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidXJsXCI6IGJhc2VVUkwsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImtleXNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicHJvZmlsZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29tbXVuaXR5XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvblwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY3VycmVudFVzZXJcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN1YlByb2Nlc3NcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInZhbGlkRGF0ZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImR1ZURhdGVcIjogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJub3RpZmljYXRpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNyZWF0ZWREYXRlVGltZVwiOiBtb21lbnQoKS5mb3JtYXQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdGVwXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdGVwQ3JlYXRlZERhdGVUaW1lXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3RlcE5hbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdGVwSWRcIjogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJub2RlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgICAgS2V5cyBtZXNzYWdlIFxuICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICB2YXIgaW5kaWNhdG9yVGl0bGUgPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbX2lkIGVxICdcIiArIGFwcC5wcm9maWxlLl9pZCArIFwiJ10vdGl0bGVcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMucHJvZmlsZS5uYW1lID0gaW5kaWNhdG9yVGl0bGU7XG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLnByb2ZpbGUuaWQgPSBhcHAucHJvZmlsZS5faWQ7XG5cbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuY29tbXVuaXR5Lm5hbWUgPSBhcHAuZ2V0TmFtZUJ5TGFuZyhMT0NBTF9TRVRUSU5HUy5DT01NVU5JVFlfQ09ORklHLmNvbW11bml0eU5hbWUpO1xuICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ua2V5cy5jb21tdW5pdHkuaWQgPSBMT0NBTF9TRVRUSU5HUy5DT01NVU5JVFlfQ09ORklHLmNvbW11bml0eUlkO1xuXG4gICAgICAgICAgICAgICAgdmFyIGFwcGxpY2F0aW9uID0gSlNPTi54cGF0aChcIi9hcHBsaWNhdGlvbnNbYXBwSWQgZXEgJ1wiICsgYXBwLlNDT1BFLmFwcGxpY2F0aW9uSWQgKyBcIiddXCIsIExPQ0FMX1NFVFRJTkdTLkNPTU1VTklUWV9DT05GSUcsIHt9KVswXTtcblxuICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ua2V5cy5hcHBsaWNhdGlvbi5uYW1lID0gYXBwLmdldE5hbWVCeUxhbmcoYXBwbGljYXRpb24ubmFtZSk7XG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLmFwcGxpY2F0aW9uLmlkID0gYXBwbGljYXRpb24uYXBwSWQ7XG5cbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuY3VycmVudFVzZXIubmFtZSA9IExPQ0FMX1NFVFRJTkdTLlNFU1NJT04uZmlyc3ROYW1lICsgXCIgXCIgKyBMT0NBTF9TRVRUSU5HUy5TRVNTSU9OLmxhc3ROYW1lO1xuICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ua2V5cy5jdXJyZW50VXNlci5pZCA9IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcklkO1xuXG5cbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuc3ViUHJvY2Vzcy5uYW1lID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddL2xhYmVsXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLnN1YlByb2Nlc3MuaWQgPSB1dWlkO1xuXG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLnN1YlByb2Nlc3MudmFsaWREYXRlID0gc3ViUHJvY2Vzc09iamVjdC5kYXRlcy52YWxpZDtcbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuc3ViUHJvY2Vzcy5kdWVEYXRlID0gc3ViUHJvY2Vzc09iamVjdC5kYXRlcy5kdWU7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3RlcE9iamVjdCA9IHN1YlByb2Nlc3NPYmplY3Quc3RlcDtcbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuc3RlcC5zdGVwQ3JlYXRlZERhdGVUaW1lID0gc3RlcE9iamVjdC5kYXRlVGltZUNyZWF0ZWQ7XG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLnN0ZXAuc3RlcElkID0gc3RlcE9iamVjdC5pZDtcblxuICAgICAgICAgICAgICAgIHZhciBzdGVwQ29uZmlnT2JqZWN0ID0gSlNPTi54cGF0aChcIi9wcm9jZXNzZXMvc3ViUHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBzdWJQcm9jZXNzT2JqZWN0LmlkICsgXCInXS9zdGVwc1tfaWQgZXEgJ1wiICsgc3RlcE9iamVjdC5pZCArIFwiJ11cIiwgYXBwLlNDT1BFLndvcmtmbG93LmNvbmZpZywge30pWzBdO1xuICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ua2V5cy5zdGVwLnN0ZXBOYW1lID0gYXBwLmdldE5hbWVCeUxhbmcoc3RlcENvbmZpZ09iamVjdC5uYW1lKTtcblxuICAgICAgICAgICAgICAgIHZhciBub2RlVGl0bGUgPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbX2lkIGVxICdcIiArIHN1YnByb2ZpbGVJZCArIFwiJ10vdGl0bGVcIiwgYXBwLlNDT1BFLndvcmtmbG93LCB7fSlbMF07XG4gICAgICAgICAgICAgICAgaWYgKG5vZGVUaXRsZSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLm5vZGUudGl0bGUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ua2V5cy5ub2RlLnRpdGxlID0gbm9kZVRpdGxlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgICAgV29ya2VyIG1lc3NhZ2UgXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLm1lc3NhZ2UuZGVmYXVsdCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5tZXNzYWdlLnRpdGxlID0gbm90aWZpY2F0aW9uLnJlQXNzaWdubWVudC50aXRsZTtcblxuICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ubWVzc2FnZS5ydGYubWFya3VwID0gbm90aWZpY2F0aW9uLnJlQXNzaWdubWVudC5tZXNzYWdlO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgICAgV29ya2VyIG1lc3NhZ2VUeXBlIFxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5tZXNzYWdlVHlwZSA9IG5vdGlmaWNhdGlvbi5yZUFzc2lnbm1lbnQubWVzc2FnZVR5cGU7XG5cblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgICAgV29ya2VyIHByaW9yaXR5IFxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5wcmlvcml0eSA9IG5vdGlmaWNhdGlvbi5yZUFzc2lnbm1lbnQucHJpb3JpdHk7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAgICBXb3JrZXIgbm90aWZpY2F0aW9uQWN0aW9uIGlmIGV4aXN0cyBcbiAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgaWYgKG5vdGlmaWNhdGlvbi5yZUFzc2lnbm1lbnQubm90aWZpY2F0aW9uQWN0aW9uICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ubm90aWZpY2F0aW9uQWN0aW9uID0ge307XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ubm90aWZpY2F0aW9uQWN0aW9uLmxhYmVsID0gbm90aWZpY2F0aW9uLnJlQXNzaWdubWVudC5ub3RpZmljYXRpb25BY3Rpb24ubGFiZWw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb24ucmVBc3NpZ25tZW50Lm5vdGlmaWNhdGlvbkFjdGlvbi5hY3Rpb24uVVJJICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLm5vdGlmaWNhdGlvbkFjdGlvbi5hY3Rpb24gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ubm90aWZpY2F0aW9uQWN0aW9uLmFjdGlvbi5VUkkgPSBub3RpZmljYXRpb24ucmVBc3NpZ25tZW50Lm5vdGlmaWNhdGlvbkFjdGlvbi5hY3Rpb24uVVJJO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm90aWZpY2F0aW9uLnJlQXNzaWdubWVudC5ub3RpZmljYXRpb25BY3Rpb24uYWN0aW9uLmdvdG8gIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ubm90aWZpY2F0aW9uQWN0aW9uLmFjdGlvbiA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5ub3RpZmljYXRpb25BY3Rpb24uYWN0aW9uLmdvdG8gPSBub3RpZmljYXRpb24ucmVBc3NpZ25tZW50Lm5vdGlmaWNhdGlvbkFjdGlvbi5hY3Rpb24uZ290bztcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICBpZiAobm90aWZpY2F0aW9uLnJlQXNzaWdubWVudC5zY2hlZHVsZSAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgZXhlY3V0ZU9iamVjdCA9IG5vdGlmaWNhdGlvbi5yZUFzc2lnbm1lbnQuc2NoZWR1bGUuZXhlY3V0ZUNvbW1hbmQ7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHdvcmtlclNjaGVkdWxlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZVRpbWU6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB1bml0OiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFjdG9yOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZXhlY3V0ZU9iamVjdC5ub3cgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlclNjaGVkdWxlLmRhdGVUaW1lID0gbW9tZW50KCkuZm9ybWF0KCk7XG5cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV4ZWN1dGVPYmplY3QuZXhhY3QgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlclNjaGVkdWxlLmRhdGVUaW1lID0gZXhlY3V0ZU9iamVjdC5leGFjdC5kYXRlVGltZTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV4ZWN1dGVPYmplY3QuZHVlRGF0ZSAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YlByb2Nlc3NPYmplY3QgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ11cIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYWxjdWxhdGVkRGF0ZVRpbWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGR1ZURhdGUgPSBzdWJQcm9jZXNzT2JqZWN0LmRhdGVzLmR1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGR1ZURhdGUgIT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZWREYXRlVGltZSA9IG1vbWVudChkdWVEYXRlLCBcIllZWVktTU0tRERcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZWREYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS5kYXRlVGltZSA9IGNhbGN1bGF0ZWREYXRlVGltZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlclNjaGVkdWxlLmZhY3RvciA9IGV4ZWN1dGVPYmplY3QuZHVlRGF0ZS5mYWN0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS51bml0ID0gZXhlY3V0ZU9iamVjdC5kdWVEYXRlLnVuaXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChleGVjdXRlT2JqZWN0LnZhbGlkRGF0ZSAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YlByb2Nlc3NPYmplY3QgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ11cIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYWxjdWxhdGVkRGF0ZVRpbWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGR1ZURhdGUgPSBzdWJQcm9jZXNzT2JqZWN0LmRhdGVzLnZhbGlkO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWREYXRlICE9IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxjdWxhdGVkRGF0ZVRpbWUgPSBtb21lbnQodmFsaWREYXRlLCBcIllZWVktTU0tRERcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZWREYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS5kYXRlVGltZSA9IGNhbGN1bGF0ZWREYXRlVGltZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlclNjaGVkdWxlLmZhY3RvciA9IGV4ZWN1dGVPYmplY3QudmFsaWREYXRlLmZhY3RvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlclNjaGVkdWxlLnVuaXQgPSBleGVjdXRlT2JqZWN0LnZhbGlkRGF0ZS51bml0O1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXhlY3V0ZU9iamVjdC5zdGVwQ3JlYXRlZERhdGUgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJQcm9jZXNzT2JqZWN0ID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FsY3VsYXRlZERhdGVUaW1lID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGVwQ3JlYXRlZERhdGVUaW1lID0gc3ViUHJvY2Vzc09iamVjdC5zdGVwLmR1ZURhdGVUaW1lO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RlcENyZWF0ZWREYXRlVGltZSAhPSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsY3VsYXRlZERhdGVUaW1lID0gbW9tZW50KHN0ZXBDcmVhdGVkRGF0ZVRpbWUpLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxjdWxhdGVkRGF0ZVRpbWUgPSBtb21lbnQoKS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2VyU2NoZWR1bGUuZGF0ZVRpbWUgPSBjYWxjdWxhdGVkRGF0ZVRpbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS5mYWN0b3IgPSBleGVjdXRlT2JqZWN0LnN0ZXBDcmVhdGVkRGF0ZS5mYWN0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS51bml0ID0gZXhlY3V0ZU9iamVjdC5zdGVwQ3JlYXRlZERhdGUudW5pdDtcblxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlclNjaGVkdWxlLmRhdGVUaW1lID0gbW9tZW50KCkuZm9ybWF0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zZXRTY2hlZHVsZSh3b3JrZXJTY2hlZHVsZSk7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAgICBXb3JrZXIgcmVjaXBpZW50c1xuICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICBnZXRSZWNpcGllbnRzKHVzZXIpLnRoZW4oZnVuY3Rpb24ocmVjaXBpZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ucmVjaXBpZW50cyA9IHJlY2lwaWVudDtcbiAgICAgICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnNldEFjdGlvbihhY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc2V0TWVzc2FnZShcIlRoZSBzZXJ2ZXIgaXMgcHJvY2Vzc2luZyB5b3VyIHJlcXVlc3QuIFBsZWFzZSB3YWl0IGEgZmV3IHNlY29uZHMgYW5kIHRoZW4gY2xpY2sgdGhlIHJlZnJlc2ggYnV0dG9uLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnNlbmQoKS50aGVuKGZ1bmN0aW9uKHdvcmtlclN1Y2Nlc3MpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ05vdGlmaWNhdGlvbiBXb3JrZXIgcHJvY2Vzc2VzIHN1Y2Nlc3NmdWxseSBmb3IgcmVhc3NpZ25tZW50LicsIHdvcmtlclN1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcblxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbih3b3JrZXJGYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHdvcmtlckZhaWwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJOb3RpZmljYXRpb24gLSBnZXRSZWNpcGllbnRzIGZhaWxlZCB3aXRoIGVycm9yIFwiICsgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG5cblxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIGFzc2lnbm1lbnROb3RpZmljYXRpb246IGZ1bmN0aW9uKG5vdGlmaWNhdGlvbiwgX1dGSW5zdGFuY2UsIHV1aWQsIHVzZXIpIHtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgZ2V0UmVjaXBpZW50cyA9IGZ1bmN0aW9uKHVzZXJPYmopIHtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVjaXBpZW50cyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjaXBpZW50cy5mdW5jdGlvbiA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjaXBpZW50cy5mdW5jdGlvbi51c2VycyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjaXBpZW50cy5mdW5jdGlvbi51c2VycyA9IHVzZXJPYmouaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlY2lwaWVudHMpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgd29ya2VyT2JqZWN0ID0gbmV3IE5vdGlmaWNhdGlvV29ya2VyKGFwcCk7XG5cblxuICAgICAgICAgICAgICAgIHZhciBzdWJQcm9maWxlSWQgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vbWV0YS1kYXRhL3N1YnByb2ZpbGVJZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuXG4gICAgICAgICAgICAgICAgdmFyIHBhdGhBcnJheSA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5zcGxpdCgnLycpO1xuICAgICAgICAgICAgICAgIHZhciBiYXNlVVJMID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgd2luZG93LmxvY2F0aW9uLmhvc3QgKyBcIi9cIiArIHBhdGhBcnJheVsxXTtcblxuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJub3RpZmljYXRpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXNzYWdlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJ0ZlwiOiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXNzYWdlVHlwZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXRhLWRhdGFcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYXBwbGljYXRpb25JZFwiOiBfV0ZJbnN0YW5jZS5hcHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb21tdW5pdHlJZFwiOiBfV0ZJbnN0YW5jZS5jb21tdW5pdHlJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInByb2ZpbGVJZFwiOiBfV0ZJbnN0YW5jZS5wcm9maWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3ViUHJvY2Vzc1VVSURcIjogdXVpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN1YlByb2ZpbGVJZFwiOiBzdWJQcm9maWxlSWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm5vdGlmaWNhdGlvblR5cGVcIjogXCJ3b3JrZmxvd1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJwcmlvcml0eVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJyZWNpcGllbnRzXCI6IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidXJsXCI6IGJhc2VVUkwsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImtleXNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicHJvZmlsZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29tbXVuaXR5XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvblwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY3VycmVudFVzZXJcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN1YlByb2Nlc3NcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInZhbGlkRGF0ZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImR1ZURhdGVcIjogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJub3RpZmljYXRpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNyZWF0ZWREYXRlVGltZVwiOiBtb21lbnQoKS5mb3JtYXQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdGVwXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdGVwQ3JlYXRlZERhdGVUaW1lXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3RlcE5hbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdGVwSWRcIjogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJub2RlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgICAgS2V5cyBtZXNzYWdlIFxuICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICB2YXIgaW5kaWNhdG9yVGl0bGUgPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbX2lkIGVxICdcIiArIGFwcC5wcm9maWxlLl9pZCArIFwiJ10vdGl0bGVcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMucHJvZmlsZS5uYW1lID0gaW5kaWNhdG9yVGl0bGU7XG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLnByb2ZpbGUuaWQgPSBhcHAucHJvZmlsZS5faWQ7XG5cbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuY29tbXVuaXR5Lm5hbWUgPSBhcHAuZ2V0TmFtZUJ5TGFuZyhMT0NBTF9TRVRUSU5HUy5DT01NVU5JVFlfQ09ORklHLmNvbW11bml0eU5hbWUpO1xuICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ua2V5cy5jb21tdW5pdHkuaWQgPSBMT0NBTF9TRVRUSU5HUy5DT01NVU5JVFlfQ09ORklHLmNvbW11bml0eUlkO1xuXG4gICAgICAgICAgICAgICAgdmFyIGFwcGxpY2F0aW9uID0gSlNPTi54cGF0aChcIi9hcHBsaWNhdGlvbnNbYXBwSWQgZXEgJ1wiICsgYXBwLlNDT1BFLmFwcGxpY2F0aW9uSWQgKyBcIiddXCIsIExPQ0FMX1NFVFRJTkdTLkNPTU1VTklUWV9DT05GSUcsIHt9KVswXTtcblxuICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ua2V5cy5hcHBsaWNhdGlvbi5uYW1lID0gYXBwLmdldE5hbWVCeUxhbmcoYXBwbGljYXRpb24ubmFtZSk7XG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLmFwcGxpY2F0aW9uLmlkID0gYXBwbGljYXRpb24uYXBwSWQ7XG5cbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuY3VycmVudFVzZXIubmFtZSA9IExPQ0FMX1NFVFRJTkdTLlNFU1NJT04uZmlyc3ROYW1lICsgXCIgXCIgKyBMT0NBTF9TRVRUSU5HUy5TRVNTSU9OLmxhc3ROYW1lO1xuICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ua2V5cy5jdXJyZW50VXNlci5pZCA9IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcklkO1xuXG5cbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuc3ViUHJvY2Vzcy5uYW1lID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddL2xhYmVsXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLnN1YlByb2Nlc3MuaWQgPSB1dWlkO1xuXG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLnN1YlByb2Nlc3MudmFsaWREYXRlID0gc3ViUHJvY2Vzc09iamVjdC5kYXRlcy52YWxpZDtcbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuc3ViUHJvY2Vzcy5kdWVEYXRlID0gc3ViUHJvY2Vzc09iamVjdC5kYXRlcy5kdWU7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3RlcE9iamVjdCA9IHN1YlByb2Nlc3NPYmplY3Quc3RlcDtcbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuc3RlcC5zdGVwQ3JlYXRlZERhdGVUaW1lID0gc3RlcE9iamVjdC5kYXRlVGltZUNyZWF0ZWQ7XG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLnN0ZXAuc3RlcElkID0gc3RlcE9iamVjdC5pZDtcblxuICAgICAgICAgICAgICAgIHZhciBzdGVwQ29uZmlnT2JqZWN0ID0gSlNPTi54cGF0aChcIi9wcm9jZXNzZXMvc3ViUHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBzdWJQcm9jZXNzT2JqZWN0LmlkICsgXCInXS9zdGVwc1tfaWQgZXEgJ1wiICsgc3RlcE9iamVjdC5pZCArIFwiJ11cIiwgYXBwLlNDT1BFLndvcmtmbG93LmNvbmZpZywge30pWzBdO1xuICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ua2V5cy5zdGVwLnN0ZXBOYW1lID0gYXBwLmdldE5hbWVCeUxhbmcoc3RlcENvbmZpZ09iamVjdC5uYW1lKTtcblxuICAgICAgICAgICAgICAgIHZhciBub2RlVGl0bGUgPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbX2lkIGVxICdcIiArIHN1YnByb2ZpbGVJZCArIFwiJ10vdGl0bGVcIiwgYXBwLlNDT1BFLndvcmtmbG93LCB7fSlbMF07XG4gICAgICAgICAgICAgICAgaWYgKG5vZGVUaXRsZSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLm5vZGUudGl0bGUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ua2V5cy5ub2RlLnRpdGxlID0gbm9kZVRpdGxlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgICAgV29ya2VyIG1lc3NhZ2UgXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLm1lc3NhZ2UuZGVmYXVsdCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5tZXNzYWdlLnRpdGxlID0gbm90aWZpY2F0aW9uLmFzc2lnbm1lbnQudGl0bGU7XG5cbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLm1lc3NhZ2UucnRmLm1hcmt1cCA9IG5vdGlmaWNhdGlvbi5hc3NpZ25tZW50Lm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAgICBXb3JrZXIgbWVzc2FnZVR5cGUgXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLm1lc3NhZ2VUeXBlID0gbm90aWZpY2F0aW9uLmFzc2lnbm1lbnQubWVzc2FnZVR5cGU7XG5cblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgICAgV29ya2VyIHByaW9yaXR5IFxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5wcmlvcml0eSA9IG5vdGlmaWNhdGlvbi5hc3NpZ25tZW50LnByaW9yaXR5O1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgICAgV29ya2VyIG5vdGlmaWNhdGlvbkFjdGlvbiBpZiBleGlzdHMgXG4gICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb24uYXNzaWdubWVudC5ub3RpZmljYXRpb25BY3Rpb24gIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5ub3RpZmljYXRpb25BY3Rpb24gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5ub3RpZmljYXRpb25BY3Rpb24ubGFiZWwgPSBub3RpZmljYXRpb24uYXNzaWdubWVudC5ub3RpZmljYXRpb25BY3Rpb24ubGFiZWw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb24uYXNzaWdubWVudC5ub3RpZmljYXRpb25BY3Rpb24uYWN0aW9uLlVSSSAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5ub3RpZmljYXRpb25BY3Rpb24uYWN0aW9uID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLm5vdGlmaWNhdGlvbkFjdGlvbi5hY3Rpb24uVVJJID0gbm90aWZpY2F0aW9uLmFzc2lnbm1lbnQubm90aWZpY2F0aW9uQWN0aW9uLmFjdGlvbi5VUkk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub3RpZmljYXRpb24uYXNzaWdubWVudC5ub3RpZmljYXRpb25BY3Rpb24uYWN0aW9uLmdvdG8gIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ubm90aWZpY2F0aW9uQWN0aW9uLmFjdGlvbiA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5ub3RpZmljYXRpb25BY3Rpb24uYWN0aW9uLmdvdG8gPSBub3RpZmljYXRpb24uYXNzaWdubWVudC5ub3RpZmljYXRpb25BY3Rpb24uYWN0aW9uLmdvdG87XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb24uYXNzaWdubWVudC5zY2hlZHVsZSAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgZXhlY3V0ZU9iamVjdCA9IG5vdGlmaWNhdGlvbi5hc3NpZ25tZW50LnNjaGVkdWxlLmV4ZWN1dGVDb21tYW5kO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciB3b3JrZXJTY2hlZHVsZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVUaW1lOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdW5pdDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY3RvcjogXCJcIlxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4ZWN1dGVPYmplY3Qubm93ICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS5kYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChleGVjdXRlT2JqZWN0LmV4YWN0ICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS5kYXRlVGltZSA9IGV4ZWN1dGVPYmplY3QuZXhhY3QuZGF0ZVRpbWU7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChleGVjdXRlT2JqZWN0LmR1ZURhdGUgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJQcm9jZXNzT2JqZWN0ID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FsY3VsYXRlZERhdGVUaW1lID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkdWVEYXRlID0gc3ViUHJvY2Vzc09iamVjdC5kYXRlcy5kdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkdWVEYXRlICE9IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxjdWxhdGVkRGF0ZVRpbWUgPSBtb21lbnQoZHVlRGF0ZSwgXCJZWVlZLU1NLUREXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxjdWxhdGVkRGF0ZVRpbWUgPSBtb21lbnQoKS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2VyU2NoZWR1bGUuZGF0ZVRpbWUgPSBjYWxjdWxhdGVkRGF0ZVRpbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS5mYWN0b3IgPSBleGVjdXRlT2JqZWN0LmR1ZURhdGUuZmFjdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2VyU2NoZWR1bGUudW5pdCA9IGV4ZWN1dGVPYmplY3QuZHVlRGF0ZS51bml0O1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXhlY3V0ZU9iamVjdC52YWxpZERhdGUgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJQcm9jZXNzT2JqZWN0ID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FsY3VsYXRlZERhdGVUaW1lID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkdWVEYXRlID0gc3ViUHJvY2Vzc09iamVjdC5kYXRlcy52YWxpZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkRGF0ZSAhPSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsY3VsYXRlZERhdGVUaW1lID0gbW9tZW50KHZhbGlkRGF0ZSwgXCJZWVlZLU1NLUREXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxjdWxhdGVkRGF0ZVRpbWUgPSBtb21lbnQoKS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2VyU2NoZWR1bGUuZGF0ZVRpbWUgPSBjYWxjdWxhdGVkRGF0ZVRpbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS5mYWN0b3IgPSBleGVjdXRlT2JqZWN0LnZhbGlkRGF0ZS5mYWN0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS51bml0ID0gZXhlY3V0ZU9iamVjdC52YWxpZERhdGUudW5pdDtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV4ZWN1dGVPYmplY3Quc3RlcENyZWF0ZWREYXRlICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3ViUHJvY2Vzc09iamVjdCA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhbGN1bGF0ZWREYXRlVGltZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RlcENyZWF0ZWREYXRlVGltZSA9IHN1YlByb2Nlc3NPYmplY3Quc3RlcC5kdWVEYXRlVGltZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0ZXBDcmVhdGVkRGF0ZVRpbWUgIT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZWREYXRlVGltZSA9IG1vbWVudChzdGVwQ3JlYXRlZERhdGVUaW1lKS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsY3VsYXRlZERhdGVUaW1lID0gbW9tZW50KCkuZm9ybWF0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlclNjaGVkdWxlLmRhdGVUaW1lID0gY2FsY3VsYXRlZERhdGVUaW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2VyU2NoZWR1bGUuZmFjdG9yID0gZXhlY3V0ZU9iamVjdC5zdGVwQ3JlYXRlZERhdGUuZmFjdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2VyU2NoZWR1bGUudW5pdCA9IGV4ZWN1dGVPYmplY3Quc3RlcENyZWF0ZWREYXRlLnVuaXQ7XG5cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS5kYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc2V0U2NoZWR1bGUod29ya2VyU2NoZWR1bGUpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAgICBXb3JrZXIgcmVjaXBpZW50c1xuICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICBnZXRSZWNpcGllbnRzKHVzZXIpLnRoZW4oZnVuY3Rpb24ocmVjaXBpZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ucmVjaXBpZW50cyA9IHJlY2lwaWVudDtcbiAgICAgICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnNldEFjdGlvbihhY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc2V0TWVzc2FnZShcIlRoZSBzZXJ2ZXIgaXMgcHJvY2Vzc2luZyB5b3VyIHJlcXVlc3QuIFBsZWFzZSB3YWl0IGEgZmV3IHNlY29uZHMgYW5kIHRoZW4gY2xpY2sgdGhlIHJlZnJlc2ggYnV0dG9uLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnNlbmQoKS50aGVuKGZ1bmN0aW9uKHdvcmtlclN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHdvcmtlck9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcygnTm90aWZpY2F0aW9uIFdvcmtlciBwcm9jZXNzZXMgc3VjY2Vzc2Z1bGx5IGZvciBhc3NpZ25tZW50LicsIHdvcmtlclN1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcblxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbih3b3JrZXJGYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHdvcmtlckZhaWwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJOb3RpZmljYXRpb24gLSBnZXRSZWNpcGllbnRzIGZhaWxlZCB3aXRoIGVycm9yIFwiICsgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG5cblxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIGFjY2VwdGFuY2VOb3RpZmljYXRpb246IGZ1bmN0aW9uKG5vdGlmaWNhdGlvbiwgX1dGSW5zdGFuY2UsIHV1aWQsIHJvbGUpIHtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgZ2V0Um9sZXMgPSBmdW5jdGlvbihyb2xlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlY2lwaWVudHMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2lwaWVudHMucm9sZSA9IHJvbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlY2lwaWVudHMpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgd29ya2VyT2JqZWN0ID0gbmV3IE5vdGlmaWNhdGlvV29ya2VyKGFwcCk7XG5cblxuICAgICAgICAgICAgICAgIHZhciBzdWJQcm9maWxlSWQgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vbWV0YS1kYXRhL3N1YnByb2ZpbGVJZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuXG4gICAgICAgICAgICAgICAgdmFyIHBhdGhBcnJheSA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5zcGxpdCgnLycpO1xuICAgICAgICAgICAgICAgIHZhciBiYXNlVVJMID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgd2luZG93LmxvY2F0aW9uLmhvc3QgKyBcIi9cIiArIHBhdGhBcnJheVsxXTtcblxuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJub3RpZmljYXRpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXNzYWdlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJ0ZlwiOiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXNzYWdlVHlwZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXRhLWRhdGFcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYXBwbGljYXRpb25JZFwiOiBfV0ZJbnN0YW5jZS5hcHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb21tdW5pdHlJZFwiOiBfV0ZJbnN0YW5jZS5jb21tdW5pdHlJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInByb2ZpbGVJZFwiOiBfV0ZJbnN0YW5jZS5wcm9maWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3ViUHJvY2Vzc1VVSURcIjogdXVpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN1YlByb2ZpbGVJZFwiOiBzdWJQcm9maWxlSWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm5vdGlmaWNhdGlvblR5cGVcIjogXCJ3b3JrZmxvd1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJwcmlvcml0eVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJyZWNpcGllbnRzXCI6IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidXJsXCI6IGJhc2VVUkwsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImtleXNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicHJvZmlsZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29tbXVuaXR5XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvblwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY3VycmVudFVzZXJcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN1YlByb2Nlc3NcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInZhbGlkRGF0ZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImR1ZURhdGVcIjogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJub3RpZmljYXRpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNyZWF0ZWREYXRlVGltZVwiOiBtb21lbnQoKS5mb3JtYXQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdGVwXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdGVwQ3JlYXRlZERhdGVUaW1lXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3RlcE5hbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdGVwSWRcIjogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJub2RlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgICAgS2V5cyBtZXNzYWdlIFxuICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICB2YXIgaW5kaWNhdG9yVGl0bGUgPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbX2lkIGVxICdcIiArIGFwcC5wcm9maWxlLl9pZCArIFwiJ10vdGl0bGVcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMucHJvZmlsZS5uYW1lID0gaW5kaWNhdG9yVGl0bGU7XG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLnByb2ZpbGUuaWQgPSBhcHAucHJvZmlsZS5faWQ7XG5cbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuY29tbXVuaXR5Lm5hbWUgPSBhcHAuZ2V0TmFtZUJ5TGFuZyhMT0NBTF9TRVRUSU5HUy5DT01NVU5JVFlfQ09ORklHLmNvbW11bml0eU5hbWUpO1xuICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ua2V5cy5jb21tdW5pdHkuaWQgPSBMT0NBTF9TRVRUSU5HUy5DT01NVU5JVFlfQ09ORklHLmNvbW11bml0eUlkO1xuXG4gICAgICAgICAgICAgICAgdmFyIGFwcGxpY2F0aW9uID0gSlNPTi54cGF0aChcIi9hcHBsaWNhdGlvbnNbYXBwSWQgZXEgJ1wiICsgYXBwLlNDT1BFLmFwcGxpY2F0aW9uSWQgKyBcIiddXCIsIExPQ0FMX1NFVFRJTkdTLkNPTU1VTklUWV9DT05GSUcsIHt9KVswXTtcblxuICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ua2V5cy5hcHBsaWNhdGlvbi5uYW1lID0gYXBwLmdldE5hbWVCeUxhbmcoYXBwbGljYXRpb24ubmFtZSk7XG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLmFwcGxpY2F0aW9uLmlkID0gYXBwbGljYXRpb24uYXBwSWQ7XG5cbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuY3VycmVudFVzZXIubmFtZSA9IExPQ0FMX1NFVFRJTkdTLlNFU1NJT04uZmlyc3ROYW1lICsgXCIgXCIgKyBMT0NBTF9TRVRUSU5HUy5TRVNTSU9OLmxhc3ROYW1lO1xuICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ua2V5cy5jdXJyZW50VXNlci5pZCA9IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcklkO1xuXG5cbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuc3ViUHJvY2Vzcy5uYW1lID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddL2xhYmVsXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLnN1YlByb2Nlc3MuaWQgPSB1dWlkO1xuXG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLnN1YlByb2Nlc3MudmFsaWREYXRlID0gc3ViUHJvY2Vzc09iamVjdC5kYXRlcy52YWxpZDtcbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuc3ViUHJvY2Vzcy5kdWVEYXRlID0gc3ViUHJvY2Vzc09iamVjdC5kYXRlcy5kdWU7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3RlcE9iamVjdCA9IHN1YlByb2Nlc3NPYmplY3Quc3RlcDtcbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLmtleXMuc3RlcC5zdGVwQ3JlYXRlZERhdGVUaW1lID0gc3RlcE9iamVjdC5kYXRlVGltZUNyZWF0ZWQ7XG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLnN0ZXAuc3RlcElkID0gc3RlcE9iamVjdC5pZDtcblxuICAgICAgICAgICAgICAgIHZhciBzdGVwQ29uZmlnT2JqZWN0ID0gSlNPTi54cGF0aChcIi9wcm9jZXNzZXMvc3ViUHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBzdWJQcm9jZXNzT2JqZWN0LmlkICsgXCInXS9zdGVwc1tfaWQgZXEgJ1wiICsgc3RlcE9iamVjdC5pZCArIFwiJ11cIiwgYXBwLlNDT1BFLndvcmtmbG93LmNvbmZpZywge30pWzBdO1xuICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ua2V5cy5zdGVwLnN0ZXBOYW1lID0gYXBwLmdldE5hbWVCeUxhbmcoc3RlcENvbmZpZ09iamVjdC5uYW1lKTtcblxuICAgICAgICAgICAgICAgIHZhciBub2RlVGl0bGUgPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbX2lkIGVxICdcIiArIHN1YnByb2ZpbGVJZCArIFwiJ10vdGl0bGVcIiwgYXBwLlNDT1BFLndvcmtmbG93LCB7fSlbMF07XG4gICAgICAgICAgICAgICAgaWYgKG5vZGVUaXRsZSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5rZXlzLm5vZGUudGl0bGUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ua2V5cy5ub2RlLnRpdGxlID0gbm9kZVRpdGxlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgICAgV29ya2VyIG1lc3NhZ2UgXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLm1lc3NhZ2UuZGVmYXVsdCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5tZXNzYWdlLnRpdGxlID0gbm90aWZpY2F0aW9uLmFzc2lnbm1lbnRBY2NlcHRhbmNlLnRpdGxlO1xuXG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5tZXNzYWdlLnJ0Zi5tYXJrdXAgPSBub3RpZmljYXRpb24uYXNzaWdubWVudEFjY2VwdGFuY2UubWVzc2FnZTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICAgIFdvcmtlciBtZXNzYWdlVHlwZSBcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ubWVzc2FnZVR5cGUgPSBub3RpZmljYXRpb24uYXNzaWdubWVudEFjY2VwdGFuY2UubWVzc2FnZVR5cGU7XG5cblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgICAgV29ya2VyIHByaW9yaXR5IFxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5wcmlvcml0eSA9IG5vdGlmaWNhdGlvbi5hc3NpZ25tZW50QWNjZXB0YW5jZS5wcmlvcml0eTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICAgIFdvcmtlciBub3RpZmljYXRpb25BY3Rpb24gaWYgZXhpc3RzIFxuICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICBpZiAobm90aWZpY2F0aW9uLmFzc2lnbm1lbnRBY2NlcHRhbmNlLm5vdGlmaWNhdGlvbkFjdGlvbiAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLm5vdGlmaWNhdGlvbkFjdGlvbiA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLm5vdGlmaWNhdGlvbkFjdGlvbi5sYWJlbCA9IG5vdGlmaWNhdGlvbi5hc3NpZ25tZW50QWNjZXB0YW5jZS5ub3RpZmljYXRpb25BY3Rpb24ubGFiZWw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb24uYXNzaWdubWVudEFjY2VwdGFuY2Uubm90aWZpY2F0aW9uQWN0aW9uLmFjdGlvbi5VUkkgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ubm90aWZpY2F0aW9uQWN0aW9uLmFjdGlvbiA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5ub3RpZmljYXRpb25BY3Rpb24uYWN0aW9uLlVSSSA9IG5vdGlmaWNhdGlvbi5hc3NpZ25tZW50QWNjZXB0YW5jZS5ub3RpZmljYXRpb25BY3Rpb24uYWN0aW9uLlVSSTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vdGlmaWNhdGlvbi5hc3NpZ25tZW50QWNjZXB0YW5jZS5ub3RpZmljYXRpb25BY3Rpb24uYWN0aW9uLmdvdG8gIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5ub3RpZmljYXRpb24ubm90aWZpY2F0aW9uQWN0aW9uLmFjdGlvbiA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLm5vdGlmaWNhdGlvbi5ub3RpZmljYXRpb25BY3Rpb24uYWN0aW9uLmdvdG8gPSBub3RpZmljYXRpb24uYXNzaWdubWVudEFjY2VwdGFuY2Uubm90aWZpY2F0aW9uQWN0aW9uLmFjdGlvbi5nb3RvO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobm90aWZpY2F0aW9uLmFzc2lnbm1lbnRBY2NlcHRhbmNlLnNjaGVkdWxlICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBleGVjdXRlT2JqZWN0ID0gbm90aWZpY2F0aW9uLmFzc2lnbm1lbnRBY2NlcHRhbmNlLnNjaGVkdWxlLmV4ZWN1dGVDb21tYW5kO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciB3b3JrZXJTY2hlZHVsZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVUaW1lOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdW5pdDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY3RvcjogXCJcIlxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4ZWN1dGVPYmplY3Qubm93ICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS5kYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChleGVjdXRlT2JqZWN0LmV4YWN0ICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS5kYXRlVGltZSA9IGV4ZWN1dGVPYmplY3QuZXhhY3QuZGF0ZVRpbWU7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChleGVjdXRlT2JqZWN0LmR1ZURhdGUgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJQcm9jZXNzT2JqZWN0ID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FsY3VsYXRlZERhdGVUaW1lID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkdWVEYXRlID0gc3ViUHJvY2Vzc09iamVjdC5kYXRlcy5kdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkdWVEYXRlICE9IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxjdWxhdGVkRGF0ZVRpbWUgPSBtb21lbnQoZHVlRGF0ZSwgXCJZWVlZLU1NLUREXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxjdWxhdGVkRGF0ZVRpbWUgPSBtb21lbnQoKS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2VyU2NoZWR1bGUuZGF0ZVRpbWUgPSBjYWxjdWxhdGVkRGF0ZVRpbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS5mYWN0b3IgPSBleGVjdXRlT2JqZWN0LmR1ZURhdGUuZmFjdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2VyU2NoZWR1bGUudW5pdCA9IGV4ZWN1dGVPYmplY3QuZHVlRGF0ZS51bml0O1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXhlY3V0ZU9iamVjdC52YWxpZERhdGUgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJQcm9jZXNzT2JqZWN0ID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FsY3VsYXRlZERhdGVUaW1lID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkdWVEYXRlID0gc3ViUHJvY2Vzc09iamVjdC5kYXRlcy52YWxpZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkRGF0ZSAhPSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsY3VsYXRlZERhdGVUaW1lID0gbW9tZW50KHZhbGlkRGF0ZSwgXCJZWVlZLU1NLUREXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxjdWxhdGVkRGF0ZVRpbWUgPSBtb21lbnQoKS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2VyU2NoZWR1bGUuZGF0ZVRpbWUgPSBjYWxjdWxhdGVkRGF0ZVRpbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS5mYWN0b3IgPSBleGVjdXRlT2JqZWN0LnZhbGlkRGF0ZS5mYWN0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS51bml0ID0gZXhlY3V0ZU9iamVjdC52YWxpZERhdGUudW5pdDtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV4ZWN1dGVPYmplY3Quc3RlcENyZWF0ZWREYXRlICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3ViUHJvY2Vzc09iamVjdCA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhbGN1bGF0ZWREYXRlVGltZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RlcENyZWF0ZWREYXRlVGltZSA9IHN1YlByb2Nlc3NPYmplY3Quc3RlcC5kdWVEYXRlVGltZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0ZXBDcmVhdGVkRGF0ZVRpbWUgIT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0ZWREYXRlVGltZSA9IG1vbWVudChzdGVwQ3JlYXRlZERhdGVUaW1lKS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsY3VsYXRlZERhdGVUaW1lID0gbW9tZW50KCkuZm9ybWF0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlclNjaGVkdWxlLmRhdGVUaW1lID0gY2FsY3VsYXRlZERhdGVUaW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2VyU2NoZWR1bGUuZmFjdG9yID0gZXhlY3V0ZU9iamVjdC5zdGVwQ3JlYXRlZERhdGUuZmFjdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2VyU2NoZWR1bGUudW5pdCA9IGV4ZWN1dGVPYmplY3Quc3RlcENyZWF0ZWREYXRlLnVuaXQ7XG5cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJTY2hlZHVsZS5kYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc2V0U2NoZWR1bGUod29ya2VyU2NoZWR1bGUpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAgICBXb3JrZXIgcmVjaXBpZW50c1xuICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICBnZXRSb2xlcyhyb2xlKS50aGVuKGZ1bmN0aW9uKHJlY2lwaWVudCkge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb24ubm90aWZpY2F0aW9uLnJlY2lwaWVudHMgPSByZWNpcGllbnQ7XG4gICAgICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zZXRBY3Rpb24oYWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnNldE1lc3NhZ2UoXCJUaGUgc2VydmVyIGlzIHByb2Nlc3NpbmcgeW91ciByZXF1ZXN0LiBQbGVhc2Ugd2FpdCBhIGZldyBzZWNvbmRzIGFuZCB0aGVuIGNsaWNrIHRoZSByZWZyZXNoIGJ1dHRvbi5cIik7XG4gICAgICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zZXRDb250ZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3M6IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnNlbmQod29ya2VyT2JqZWN0KS50aGVuKGZ1bmN0aW9uKHdvcmtlclN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHdvcmtlck9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcygnTm90aWZpY2F0aW9uIFdvcmtlciBwcm9jZXNzZXMgc3VjY2Vzc2Z1bGx5IGZvciBhc3NpZ25tZW50LicsIHdvcmtlclN1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcblxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbih3b3JrZXJGYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHdvcmtlckZhaWwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJOb3RpZmljYXRpb24gLSBnZXRSZWNpcGllbnRzIGZhaWxlZCB3aXRoIGVycm9yIFwiICsgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG5cblxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cblxuICAgIH1cblxufSkoKTtcblxuXG52YXIgcmVwb3J0ID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgcmV0dXJuIHtcblxuXG5cblxuICAgICAgICBjcmVhdGVQZXJmb3JtYW5jZVJlcG9ydDogZnVuY3Rpb24ocGVyZm9ybWFuY2VSZXBvcnRPYmplY3QsIF9XRkluc3RhbmNlLCB1dWlkKSB7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICAgICAgICAgIHZhciB3b3JrZXJPYmplY3QgPSB3b3JrZXIuZ2V0V29ya2VyV3JhcHBlcigpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHN1YnByb2ZpbGVJZCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKGFwcC5wcm9maWxlICE9IHVuZGVmaW5lZCAmJiBhcHAucHJvZmlsZS5zdWJwcm9maWxlSWQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnByb2ZpbGVJZCA9IGFwcC5wcm9maWxlLnN1YnByb2ZpbGVJZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuX2lkID0gZ2VuZXJhdGVVVUlEKCk7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNvbW11bml0eUlkID0gYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCk7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmFwcGxpY2F0aW9uSWQgPSBhcHAuU0NPUEUuYXBwbGljYXRpb25JZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY3JlYXRlZERhdGVUaW1lID0gbW9tZW50KCkuZm9ybWF0KCk7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnNlbmRlclVzZXJJZCA9IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcklkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5wcm9maWxlSWQgPSBfV0ZJbnN0YW5jZS5wcm9maWxlO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zdWJQcm9jZXNzVVVJRCA9IHV1aWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnN1YnByb2ZpbGVJZCA9IHN1YnByb2ZpbGVJZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY2hhbm5lbHMucHVzaChcImNyZWF0ZVBlcmZvcm1hbmNlUmVwb3J0XCIpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwiY29tbXVuaXR5X1wiICsgYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCkpO1xuICAgICAgICAgICAgICAgIHZhciB3b3JrcGxhblNldElkID0gcGVyZm9ybWFuY2VSZXBvcnRPYmplY3Qud29ya3BsYW5TZXRJZDtcbiAgICAgICAgICAgICAgICB2YXIgY29uZmlnU2V0SWQgPSBwZXJmb3JtYW5jZVJlcG9ydE9iamVjdC5jb25maWdTZXRJZDtcblxuXG4gICAgICAgICAgICAgICAgLy8gd29ya3BsYW5TZXRJZCBzY29wZSBpcyBwcm9maWxlXG4gICAgICAgICAgICAgICAgLy8gY29uZmlnU2V0SWQgc2NvcGUgaXMgc3VicHJvY2Vzc2VzXG5cbiAgICAgICAgICAgICAgICB2YXIgd29ya3BsYW5VVUlEID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW2NhdGVnb3J5L3Rlcm0gZXEgJ1wiICsgd29ya3BsYW5TZXRJZCArIFwiJ10vX2lkXCIsIGFwcC5TQ09QRS53b3JrZmxvdywge30pWzBdO1xuICAgICAgICAgICAgICAgIHZhciBjb25maWdVVUlEID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddL2luZGljYXRvcnNbaWQgZXEgJ1wiICsgY29uZmlnU2V0SWQgKyBcIiddL2luc3RhbmNlc1sxXS91dWlkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG5cblxuICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIFwiY3JlYXRlUGVyZm9ybWFuY2VSZXBvcnRcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ3b3JrcGxhblVVSURcIjogd29ya3BsYW5VVUlELFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb25maWdVVUlEXCI6IGNvbmZpZ1VVSUQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInByb2ZpbElkXCI6IF9XRkluc3RhbmNlLnByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuYWN0aW9uID0gYWN0aW9uO1xuICAgICAgICAgICAgICAgIHdvcmtlci5zZW5kKHdvcmtlck9iamVjdCkudGhlbihmdW5jdGlvbih3b3JrZXJTdWNjZXNzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgd29ya2VyLnNldFdvcmtlckluZm9JblN1YnByb2Nlc3Mod29ya2VyT2JqZWN0LCBfV0ZJbnN0YW5jZSwgdXVpZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ1dvcmtwbGFuUmVwb3J0IFdvcmtlciBwcm9jZXNzZWQgc3VjY2Vzc2Z1bGx5LicsIHdvcmtlclN1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24od29ya2VyRmFpbCkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3Qod29ya2VyRmFpbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZVJlcG9ydDogZnVuY3Rpb24oY3JlYXRlUmVwb3J0LCBfV0ZJbnN0YW5jZSwgdXVpZCkge1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgd29ya2VyT2JqZWN0ID0gd29ya2VyLmdldFdvcmtlcldyYXBwZXIoKTtcblxuICAgICAgICAgICAgICAgIHZhciBzdWJwcm9maWxlSWQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGlmIChhcHAucHJvZmlsZSAhPSB1bmRlZmluZWQgJiYgYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJwcm9maWxlSWQgPSBhcHAucHJvZmlsZS5zdWJwcm9maWxlSWQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0Ll9pZCA9IGdlbmVyYXRlVVVJRCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jb21tdW5pdHlJZCA9IGFwcC5TQ09QRS5nZXRDb21tdW5pdHlJZCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5hcHBsaWNhdGlvbklkID0gYXBwLlNDT1BFLmFwcGxpY2F0aW9uSWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNyZWF0ZWREYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zZW5kZXJVc2VySWQgPSBMT0NBTF9TRVRUSU5HUy5TVUJTQ1JJUFRJT05TLnVzZXJJZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QucHJvZmlsZUlkID0gX1dGSW5zdGFuY2UucHJvZmlsZTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc3ViUHJvY2Vzc1VVSUQgPSB1dWlkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zdWJwcm9maWxlSWQgPSBzdWJwcm9maWxlSWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNoYW5uZWxzLnB1c2goXCJleGVjdXRlUmVwb3J0XCIpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwiY29tbXVuaXR5X1wiICsgYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCkpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHBlcmZvcm1hbmNlUmVwb3J0RGVmaW5pdGlvblNldElkID0gY3JlYXRlUmVwb3J0LlBlcmZvcm1hbmNlUmVwb3J0RGVmaW5pdGlvblNldElkO1xuICAgICAgICAgICAgICAgIHZhciByZXBvcnRpbmdTRE9TZXRJZCA9IGNyZWF0ZVJlcG9ydC5yZXBvcnRpbmdTRE9TZXRJZDtcblxuICAgICAgICAgICAgICAgIHZhciBwZXJmb3JtYW5jZVJlcG9ydERlZmluaXRpb24gPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbY2F0ZWdvcnkvdGVybSBlcSAnXCIgKyBwZXJmb3JtYW5jZVJlcG9ydERlZmluaXRpb25TZXRJZCArIFwiJ10vX2lkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgdmFyIHJlcG9ydGluZ1NETyA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXS9pbmRpY2F0b3JzW2lkIGVxICdcIiArIHJlcG9ydGluZ1NET1NldElkICsgXCInXS9pbnN0YW5jZXNbMV0vdXVpZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBcImNyZWF0ZVJlcG9ydFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInBlcmZvcm1hbmNlUmVwb3J0RGVmaW5pdGlvblwiOiBwZXJmb3JtYW5jZVJlcG9ydERlZmluaXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBcInJlcG9ydGluZ1NET1wiOiByZXBvcnRpbmdTRE8sXG4gICAgICAgICAgICAgICAgICAgICAgICBcInByb2ZpbElkXCI6IF9XRkluc3RhbmNlLnByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuYWN0aW9uID0gYWN0aW9uO1xuICAgICAgICAgICAgICAgIHdvcmtlci5zZW5kKHdvcmtlck9iamVjdCkudGhlbihmdW5jdGlvbih3b3JrZXJTdWNjZXNzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgd29ya2VyLnNldFdvcmtlckluZm9JblN1YnByb2Nlc3Mod29ya2VyT2JqZWN0LCBfV0ZJbnN0YW5jZSwgdXVpZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ1JlcHJvdCBXb3JrZXIgcHJvY2Vzc2VkIHN1Y2Nlc3NmdWxseS4nLCB3b3JrZXJTdWNjZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcblxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHdvcmtlckZhaWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHdvcmtlckZhaWwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSxcblxuXG5cblxuICAgICAgICBzZG9SZXBvcnQ6IGZ1bmN0aW9uKHNkb1JlcG9ydCwgX1dGSW5zdGFuY2UsIHV1aWQpIHtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHdvcmtlck9iamVjdCA9IHdvcmtlci5nZXRXb3JrZXJXcmFwcGVyKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3VicHJvZmlsZUlkID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoYXBwLnByb2ZpbGUgIT0gdW5kZWZpbmVkICYmIGFwcC5wcm9maWxlLnN1YnByb2ZpbGVJZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VicHJvZmlsZUlkID0gYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5faWQgPSBnZW5lcmF0ZVVVSUQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY29tbXVuaXR5SWQgPSBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuYXBwbGljYXRpb25JZCA9IGFwcC5TQ09QRS5hcHBsaWNhdGlvbklkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jcmVhdGVkRGF0ZVRpbWUgPSBtb21lbnQoKS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc2VuZGVyVXNlcklkID0gTE9DQUxfU0VUVElOR1MuU1VCU0NSSVBUSU9OUy51c2VySWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnByb2ZpbGVJZCA9IF9XRkluc3RhbmNlLnByb2ZpbGU7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnN1YlByb2Nlc3NVVUlEID0gdXVpZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc3VicHJvZmlsZUlkID0gc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwic2RvUmVwb3J0XCIpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwiY29tbXVuaXR5X1wiICsgYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCkpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHNldElkID0gc2RvUmVwb3J0LmluZGljYXRvclNldElkO1xuICAgICAgICAgICAgICAgIHZhciBzZG9SZXBvcnRVVUlEID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddL2luZGljYXRvcnNbaWQgZXEgJ1wiICsgc2V0SWQgKyBcIiddL2luc3RhbmNlc1sxXS91dWlkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG5cblxuICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIFwic2RvUmVwb3J0XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2RvUmVwb3J0VVVJRFwiOiBzZG9SZXBvcnRVVUlELFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbklkXCI6IGFwcC5TQ09QRS5hcHBsaWNhdGlvbklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb21tdW5pdHlJZFwiOiBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicHJvZmlsZUlkXCI6IGFwcC5TQ09QRS53b3JrZmxvdy5wcm9maWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzdWJQcm9jZXNzVVVJRFwiOiB1dWlkXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmFjdGlvbiA9IGFjdGlvbjtcbiAgICAgICAgICAgICAgICB3b3JrZXIuc2VuZCh3b3JrZXJPYmplY3QpLnRoZW4oZnVuY3Rpb24od29ya2VyU3VjY2Vzcykge1xuXG4gICAgICAgICAgICAgICAgICAgIHdvcmtlci5zZXRXb3JrZXJJbmZvSW5TdWJwcm9jZXNzKHdvcmtlck9iamVjdCwgX1dGSW5zdGFuY2UsIHV1aWQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdyZXBvcnQgV29ya2VyIHByb2Nlc3NlZCBzdWNjZXNzZnVsbHkuJywgd29ya2VyU3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG5cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbih3b3JrZXJGYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh3b3JrZXJGYWlsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZXhlY3V0ZVJlcG9ydDogZnVuY3Rpb24oZXhlY3V0ZVJlcG9ydCwgX1dGSW5zdGFuY2UsIHV1aWQpIHtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHdvcmtlck9iamVjdCA9IHdvcmtlci5nZXRXb3JrZXJXcmFwcGVyKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3VicHJvZmlsZUlkID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoYXBwLnByb2ZpbGUgIT0gdW5kZWZpbmVkICYmIGFwcC5wcm9maWxlLnN1YnByb2ZpbGVJZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VicHJvZmlsZUlkID0gYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5faWQgPSBnZW5lcmF0ZVVVSUQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY29tbXVuaXR5SWQgPSBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuYXBwbGljYXRpb25JZCA9IGFwcC5TQ09QRS5hcHBsaWNhdGlvbklkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jcmVhdGVkRGF0ZVRpbWUgPSBtb21lbnQoKS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc2VuZGVyVXNlcklkID0gTE9DQUxfU0VUVElOR1MuU1VCU0NSSVBUSU9OUy51c2VySWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnByb2ZpbGVJZCA9IF9XRkluc3RhbmNlLnByb2ZpbGU7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnN1YlByb2Nlc3NVVUlEID0gdXVpZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc3VicHJvZmlsZUlkID0gc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwiZXhlY3V0ZVJlcG9ydFwiKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY2hhbm5lbHMucHVzaChcImNvbW11bml0eV9cIiArIGFwcC5TQ09QRS5nZXRDb21tdW5pdHlJZCgpKTtcblxuXG5cbiAgICAgICAgICAgICAgICB2YXIgU0RPcmVwb3J0U2V0SWQgPSBleGVjdXRlUmVwb3J0LlNET3JlcG9ydFNldElkO1xuICAgICAgICAgICAgICAgIHZhciByZXBvcnRpbmdTRE9TZXRpZCA9IGV4ZWN1dGVSZXBvcnQucmVwb3J0aW5nU0RPU2V0aWQ7XG5cblxuICAgICAgICAgICAgICAgIHZhciBTRE9yZXBvcnRVVUlEID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddL2luZGljYXRvcnNbaWQgZXEgJ1wiICsgU0RPcmVwb3J0U2V0SWQgKyBcIiddL2luc3RhbmNlc1sxXS91dWlkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgdmFyIHJlcG9ydGluZ1NET1VVSUQgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vaW5kaWNhdG9yc1tpZCBlcSAnXCIgKyByZXBvcnRpbmdTRE9TZXRpZCArIFwiJ10vaW5zdGFuY2VzWzFdL3V1aWRcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcblxuICAgICAgICAgICAgICAgIGlmIChTRE9yZXBvcnRVVUlEID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBTRE9yZXBvcnRVVUlEID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW2NhdGVnb3J5L3Rlcm0gZXEgJ1wiICsgU0RPcmVwb3J0U2V0SWQgKyBcIiddL19pZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJleGVjdXRlUmVwb3J0XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2RvUmVwb3J0VVVJRFwiOiBTRE9yZXBvcnRVVUlELFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJyZXBvcnRpbmdTRE9VVUlEXCI6IHJlcG9ydGluZ1NET1VVSUQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uSWRcIjogYXBwLlNDT1BFLmFwcGxpY2F0aW9uSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbW11bml0eUlkXCI6IGFwcC5TQ09QRS5nZXRDb21tdW5pdHlJZCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJwcm9maWxlSWRcIjogYXBwLlNDT1BFLndvcmtmbG93LnByb2ZpbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInN1YlByb2Nlc3NVVUlEXCI6IHV1aWRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuYWN0aW9uID0gYWN0aW9uO1xuICAgICAgICAgICAgICAgIHdvcmtlci5zZW5kKHdvcmtlck9iamVjdCkudGhlbihmdW5jdGlvbih3b3JrZXJTdWNjZXNzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgd29ya2VyLnNldFdvcmtlckluZm9JblN1YnByb2Nlc3Mod29ya2VyT2JqZWN0LCBfV0ZJbnN0YW5jZSwgdXVpZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ3JlcG9ydCBXb3JrZXIgcHJvY2Vzc2VkIHN1Y2Nlc3NmdWxseS4nLCB3b3JrZXJTdWNjZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcblxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHdvcmtlckZhaWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHdvcmtlckZhaWwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBnZW5lcmF0ZVZpZXc6IGZ1bmN0aW9uKGdlbmVyYXRlVmlldywgX1dGSW5zdGFuY2UsIHV1aWQpIHtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHdvcmtlck9iamVjdCA9IHdvcmtlci5nZXRXb3JrZXJXcmFwcGVyKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3VicHJvZmlsZUlkID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoYXBwLnByb2ZpbGUgIT0gdW5kZWZpbmVkICYmIGFwcC5wcm9maWxlLnN1YnByb2ZpbGVJZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VicHJvZmlsZUlkID0gYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5faWQgPSBnZW5lcmF0ZVVVSUQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY29tbXVuaXR5SWQgPSBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuYXBwbGljYXRpb25JZCA9IGFwcC5TQ09QRS5hcHBsaWNhdGlvbklkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jcmVhdGVkRGF0ZVRpbWUgPSBtb21lbnQoKS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc2VuZGVyVXNlcklkID0gTE9DQUxfU0VUVElOR1MuU1VCU0NSSVBUSU9OUy51c2VySWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnByb2ZpbGVJZCA9IF9XRkluc3RhbmNlLnByb2ZpbGU7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnN1YlByb2Nlc3NVVUlEID0gdXVpZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc3VicHJvZmlsZUlkID0gc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwic2RvUmVwb3J0XCIpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwiY29tbXVuaXR5X1wiICsgYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCkpO1xuICAgICAgICAgICAgICAgIHZhciBWaWV3Q29uZmlnU2V0SWQgPSBnZW5lcmF0ZVZpZXcuVmlld0NvbmZpZ1NldElkO1xuICAgICAgICAgICAgICAgIHZhciBWaWV3Q29uZmlnVVVJRCA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXS9pbmRpY2F0b3JzW2lkIGVxICdcIiArIFZpZXdDb25maWdTZXRJZCArIFwiJ10vaW5zdGFuY2VzWzFdL3V1aWRcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcblxuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJnZW5lcmF0ZVZpZXdcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ2aWV3Q29uZmlnVVVJRFwiOiBWaWV3Q29uZmlnVVVJRCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYXBwbGljYXRpb25JZFwiOiBhcHAuU0NPUEUuYXBwbGljYXRpb25JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29tbXVuaXR5SWRcIjogYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBcInByb2ZpbGVJZFwiOiBhcHAuU0NPUEUud29ya2Zsb3cucHJvZmlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3ViUHJvY2Vzc1VVSURcIjogdXVpZFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgICAgICAgICAgd29ya2VyLnNlbmQod29ya2VyT2JqZWN0KS50aGVuKGZ1bmN0aW9uKHdvcmtlclN1Y2Nlc3MpIHtcblxuICAgICAgICAgICAgICAgICAgICB3b3JrZXIuc2V0V29ya2VySW5mb0luU3VicHJvY2Vzcyh3b3JrZXJPYmplY3QsIF9XRkluc3RhbmNlLCB1dWlkKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcygncmVwb3J0IFdvcmtlciBwcm9jZXNzZWQgc3VjY2Vzc2Z1bGx5LicsIHdvcmtlclN1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24od29ya2VyRmFpbCkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3Qod29ya2VyRmFpbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIHJlcXVlc3RSZXBvcnQ6IGZ1bmN0aW9uKHJlcXVlc3RSZXBvcnQsIF9XRkluc3RhbmNlLCB1dWlkKSB7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICAgICAgICAgIHZhciB3b3JrZXJPYmplY3QgPSB3b3JrZXIuZ2V0V29ya2VyV3JhcHBlcigpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHN1YnByb2ZpbGVJZCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKGFwcC5wcm9maWxlICE9IHVuZGVmaW5lZCAmJiBhcHAucHJvZmlsZS5zdWJwcm9maWxlSWQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnByb2ZpbGVJZCA9IGFwcC5wcm9maWxlLnN1YnByb2ZpbGVJZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuX2lkID0gZ2VuZXJhdGVVVUlEKCk7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNvbW11bml0eUlkID0gYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCk7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmFwcGxpY2F0aW9uSWQgPSBhcHAuU0NPUEUuYXBwbGljYXRpb25JZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY3JlYXRlZERhdGVUaW1lID0gbW9tZW50KCkuZm9ybWF0KCk7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnNlbmRlclVzZXJJZCA9IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcklkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5wcm9maWxlSWQgPSBfV0ZJbnN0YW5jZS5wcm9maWxlO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zdWJQcm9jZXNzVVVJRCA9IHV1aWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnN1YnByb2ZpbGVJZCA9IHN1YnByb2ZpbGVJZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY2hhbm5lbHMucHVzaChcImV4ZWN1dGVSZXBvcnRcIik7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNoYW5uZWxzLnB1c2goXCJjb21tdW5pdHlfXCIgKyBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2RvUmVxdWVzdFJlcG9ydFNldElkID0gcmVxdWVzdFJlcG9ydC5zZG9SZXF1ZXN0UmVwb3J0U2V0SWQ7XG4gICAgICAgICAgICAgICAgdmFyIHNkb1JlcG9ydENyZWF0aW9uU2V0SWQgPSByZXF1ZXN0UmVwb3J0LnNkb1JlcG9ydENyZWF0aW9uU2V0SWQ7XG4gICAgICAgICAgICAgICAgdmFyIHBlcmZvcm1hbmNlUmVwb3J0U2V0SWQgPSByZXF1ZXN0UmVwb3J0LnBlcmZvcm1hbmNlUmVwb3J0U2V0SWQ7XG4gICAgICAgICAgICAgICAgdmFyIHNkb1JlcXVlc3RSZXBvcnRVVUlEID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddL2luZGljYXRvcnNbaWQgZXEgJ1wiICsgc2RvUmVxdWVzdFJlcG9ydFNldElkICsgXCInXS9pbnN0YW5jZXNbMV0vdXVpZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgIHZhciBzZG9SZXBvcnRDcmVhdGlvblVVSUQgPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbY2F0ZWdvcnkvdGVybSBlcSAnXCIgKyBzZG9SZXBvcnRDcmVhdGlvblNldElkICsgXCInXS9faWRcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICB2YXIgcGVyZm9ybWFuY2VSZXBvcnRVVUlEID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW2NhdGVnb3J5L3Rlcm0gZXEgJ1wiICsgcGVyZm9ybWFuY2VSZXBvcnRTZXRJZCArIFwiJ10vX2lkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG5cbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBcInJlcXVlc3RSZXBvcnRcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJwZXJmb3JtYW5jZVJlcG9ydFVVSURcIjogcGVyZm9ybWFuY2VSZXBvcnRVVUlELFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzZG9SZXF1ZXN0UmVwb3J0VVVJRFwiOiBzZG9SZXF1ZXN0UmVwb3J0VVVJRCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2RvUmVwb3J0Q3JlYXRpb25VVUlEXCI6IHNkb1JlcG9ydENyZWF0aW9uVVVJRCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYXBwbGljYXRpb25JZFwiOiBhcHAuU0NPUEUuYXBwbGljYXRpb25JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29tbXVuaXR5SWRcIjogYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBcInByb2ZpbGVJZFwiOiBhcHAuU0NPUEUud29ya2Zsb3cucHJvZmlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3ViUHJvY2Vzc1VVSURcIjogdXVpZFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgICAgICAgICAgd29ya2VyLnNlbmQod29ya2VyT2JqZWN0KS50aGVuKGZ1bmN0aW9uKHdvcmtlclN1Y2Nlc3MpIHtcblxuICAgICAgICAgICAgICAgICAgICB3b3JrZXIuc2V0V29ya2VySW5mb0luU3VicHJvY2Vzcyh3b3JrZXJPYmplY3QsIF9XRkluc3RhbmNlLCB1dWlkKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcygnUmVxdWVzdCByZXBvcnQgV29ya2VyIHByb2Nlc3NlZCBzdWNjZXNzZnVsbHkuJywgd29ya2VyU3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG5cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbih3b3JrZXJGYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh3b3JrZXJGYWlsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sXG5cblxuICAgICAgICBnZW5lcmF0ZUJhc2ljVmlldzogZnVuY3Rpb24oZ2VuZXJhdGVCYXNpY1ZpZXcsIF9XRkluc3RhbmNlLCB1dWlkKSB7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICAgICAgICAgIHZhciB3b3JrZXJPYmplY3QgPSB3b3JrZXIuZ2V0V29ya2VyV3JhcHBlcigpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHN1YnByb2ZpbGVJZCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKGFwcC5wcm9maWxlICE9IHVuZGVmaW5lZCAmJiBhcHAucHJvZmlsZS5zdWJwcm9maWxlSWQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnByb2ZpbGVJZCA9IGFwcC5wcm9maWxlLnN1YnByb2ZpbGVJZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuX2lkID0gZ2VuZXJhdGVVVUlEKCk7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNvbW11bml0eUlkID0gYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCk7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmFwcGxpY2F0aW9uSWQgPSBhcHAuU0NPUEUuYXBwbGljYXRpb25JZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY3JlYXRlZERhdGVUaW1lID0gbW9tZW50KCkuZm9ybWF0KCk7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnNlbmRlclVzZXJJZCA9IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcklkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5wcm9maWxlSWQgPSBfV0ZJbnN0YW5jZS5wcm9maWxlO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zdWJQcm9jZXNzVVVJRCA9IHV1aWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnN1YnByb2ZpbGVJZCA9IHN1YnByb2ZpbGVJZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY2hhbm5lbHMucHVzaChcInNkb1JlcG9ydFwiKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY2hhbm5lbHMucHVzaChcImNvbW11bml0eV9cIiArIGFwcC5TQ09QRS5nZXRDb21tdW5pdHlJZCgpKTtcblxuICAgICAgICAgICAgICAgIHZhciBzZG9EYXRhT2JqZWN0Vmlld1NldElkID0gZ2VuZXJhdGVCYXNpY1ZpZXcuc2RvRGF0YU9iamVjdFZpZXdTZXRJZDtcbiAgICAgICAgICAgICAgICB2YXIgc2RvRGF0YU9iamVjdFZpZXdVVUlEID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddL2luZGljYXRvcnNbaWQgZXEgJ1wiICsgc2RvRGF0YU9iamVjdFZpZXdTZXRJZCArIFwiJ10vaW5zdGFuY2VzWzFdL3V1aWRcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcblxuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJnZW5lcmF0ZUJhc2ljVmlld1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInNkb0RhdGFPYmplY3RWaWV3VVVJRFwiOiBzZG9EYXRhT2JqZWN0Vmlld1VVSUQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uSWRcIjogYXBwLlNDT1BFLmFwcGxpY2F0aW9uSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbW11bml0eUlkXCI6IGFwcC5TQ09QRS5nZXRDb21tdW5pdHlJZCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJwcm9maWxlSWRcIjogYXBwLlNDT1BFLndvcmtmbG93LnByb2ZpbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInN1YlByb2Nlc3NVVUlEXCI6IHV1aWRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuYWN0aW9uID0gYWN0aW9uO1xuICAgICAgICAgICAgICAgIHdvcmtlci5zZW5kKHdvcmtlck9iamVjdCkudGhlbihmdW5jdGlvbih3b3JrZXJTdWNjZXNzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgd29ya2VyLnNldFdvcmtlckluZm9JblN1YnByb2Nlc3Mod29ya2VyT2JqZWN0LCBfV0ZJbnN0YW5jZSwgdXVpZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ2dlbmVyYXRlQmFzaWNWaWV3IFdvcmtlciBwcm9jZXNzZWQgc3VjY2Vzc2Z1bGx5LicsIHdvcmtlclN1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24od29ya2VyRmFpbCkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3Qod29ya2VyRmFpbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIGdlbmVyYXRlVW5pb25WaWV3OiBmdW5jdGlvbihnZW5lcmF0ZVVuaW9uVmlldywgX1dGSW5zdGFuY2UsIHV1aWQpIHtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHdvcmtlck9iamVjdCA9IHdvcmtlci5nZXRXb3JrZXJXcmFwcGVyKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3VicHJvZmlsZUlkID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoYXBwLnByb2ZpbGUgIT0gdW5kZWZpbmVkICYmIGFwcC5wcm9maWxlLnN1YnByb2ZpbGVJZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VicHJvZmlsZUlkID0gYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5faWQgPSBnZW5lcmF0ZVVVSUQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY29tbXVuaXR5SWQgPSBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuYXBwbGljYXRpb25JZCA9IGFwcC5TQ09QRS5hcHBsaWNhdGlvbklkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jcmVhdGVkRGF0ZVRpbWUgPSBtb21lbnQoKS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc2VuZGVyVXNlcklkID0gTE9DQUxfU0VUVElOR1MuU1VCU0NSSVBUSU9OUy51c2VySWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnByb2ZpbGVJZCA9IF9XRkluc3RhbmNlLnByb2ZpbGU7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnN1YlByb2Nlc3NVVUlEID0gdXVpZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc3VicHJvZmlsZUlkID0gc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwic2RvUmVwb3J0XCIpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwiY29tbXVuaXR5X1wiICsgYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCkpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHNkb0RhdGFPYmplY3RWaWV3VW5pb25TZXRJZCA9IGdlbmVyYXRlVW5pb25WaWV3LnNkb0RhdGFPYmplY3RWaWV3VW5pb25TZXRJZDtcbiAgICAgICAgICAgICAgICB2YXIgc2RvRGF0YU9iamVjdFZpZXdVbmlvblVVSUQgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vaW5kaWNhdG9yc1tpZCBlcSAnXCIgKyBzZG9EYXRhT2JqZWN0Vmlld1VuaW9uU2V0SWQgKyBcIiddL2luc3RhbmNlc1sxXS91dWlkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG5cblxuICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIFwiZ2VuZXJhdGVVbmlvblZpZXdcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJzZG9EYXRhT2JqZWN0Vmlld1VuaW9uVVVJRFwiOiBzZG9EYXRhT2JqZWN0Vmlld1VuaW9uVVVJRCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYXBwbGljYXRpb25JZFwiOiBhcHAuU0NPUEUuYXBwbGljYXRpb25JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29tbXVuaXR5SWRcIjogYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBcInByb2ZpbGVJZFwiOiBhcHAuU0NPUEUud29ya2Zsb3cucHJvZmlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3ViUHJvY2Vzc1VVSURcIjogdXVpZFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgICAgICAgICAgd29ya2VyLnNlbmQod29ya2VyT2JqZWN0KS50aGVuKGZ1bmN0aW9uKHdvcmtlclN1Y2Nlc3MpIHtcblxuICAgICAgICAgICAgICAgICAgICB3b3JrZXIuc2V0V29ya2VySW5mb0luU3VicHJvY2Vzcyh3b3JrZXJPYmplY3QsIF9XRkluc3RhbmNlLCB1dWlkKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcygnZ2VuZXJhdGVVbmlvblZpZXcgV29ya2VyIHByb2Nlc3NlZCBzdWNjZXNzZnVsbHkuJywgd29ya2VyU3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG5cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbih3b3JrZXJGYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh3b3JrZXJGYWlsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgc2RvUmVwb3J0TXVsdGlwbGU6IGZ1bmN0aW9uKHNkb1JlcG9ydE11bHRpcGxlLCBfV0ZJbnN0YW5jZSwgdXVpZCkge1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgd29ya2VyT2JqZWN0ID0gd29ya2VyLmdldFdvcmtlcldyYXBwZXIoKTtcblxuICAgICAgICAgICAgICAgIHZhciBzdWJwcm9maWxlSWQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGlmIChhcHAucHJvZmlsZSAhPSB1bmRlZmluZWQgJiYgYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJwcm9maWxlSWQgPSBhcHAucHJvZmlsZS5zdWJwcm9maWxlSWQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0Ll9pZCA9IGdlbmVyYXRlVVVJRCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jb21tdW5pdHlJZCA9IGFwcC5TQ09QRS5nZXRDb21tdW5pdHlJZCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5hcHBsaWNhdGlvbklkID0gYXBwLlNDT1BFLmFwcGxpY2F0aW9uSWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNyZWF0ZWREYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zZW5kZXJVc2VySWQgPSBMT0NBTF9TRVRUSU5HUy5TVUJTQ1JJUFRJT05TLnVzZXJJZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QucHJvZmlsZUlkID0gX1dGSW5zdGFuY2UucHJvZmlsZTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc3ViUHJvY2Vzc1VVSUQgPSB1dWlkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zdWJwcm9maWxlSWQgPSBzdWJwcm9maWxlSWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNoYW5uZWxzLnB1c2goXCJzZG9SZXBvcnRcIik7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNoYW5uZWxzLnB1c2goXCJjb21tdW5pdHlfXCIgKyBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2RvUmVwb3J0Q3JlYXRpb25TZXRJZCA9IHNkb1JlcG9ydE11bHRpcGxlLnNkb1JlcG9ydENyZWF0aW9uU2V0SWQ7XG4gICAgICAgICAgICAgICAgdmFyIHNkb1JlcG9ydFZpZXdzU2V0SWQgPSBzZG9SZXBvcnRNdWx0aXBsZS5zZG9SZXBvcnRWaWV3c1NldElkO1xuICAgICAgICAgICAgICAgIHZhciBzZG9SZXBvcnRKb2luc1NldElkID0gc2RvUmVwb3J0TXVsdGlwbGUuc2RvUmVwb3J0Sm9pbnNTZXRJZDtcblxuICAgICAgICAgICAgICAgIHZhciBzZG9SZXBvcnRDcmVhdGlvblVVSUQgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vaW5kaWNhdG9yc1tpZCBlcSAnXCIgKyBzZG9SZXBvcnRDcmVhdGlvblNldElkICsgXCInXS9pbnN0YW5jZXNbMV0vdXVpZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgIHZhciBzZG9SZXBvcnRWaWV3c1VVSUQgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vaW5kaWNhdG9yc1tpZCBlcSAnXCIgKyBzZG9SZXBvcnRWaWV3c1NldElkICsgXCInXS9pbnN0YW5jZXNbMV0vdXVpZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgIHZhciBzZG9SZXBvcnRKb2luc1VVSUQgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vaW5kaWNhdG9yc1tpZCBlcSAnXCIgKyBzZG9SZXBvcnRKb2luc1NldElkICsgXCInXS9pbnN0YW5jZXNbMV0vdXVpZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBcInNkb1JlcG9ydE11bHRpcGxlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2RvUmVwb3J0Q3JlYXRpb25VVUlEXCI6IHNkb1JlcG9ydENyZWF0aW9uVVVJRCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2RvUmVwb3J0Vmlld3NVVUlEXCI6IHNkb1JlcG9ydFZpZXdzVVVJRCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2RvUmVwb3J0Sm9pbnNVVUlEXCI6IHNkb1JlcG9ydEpvaW5zVVVJRCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYXBwbGljYXRpb25JZFwiOiBhcHAuU0NPUEUuYXBwbGljYXRpb25JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29tbXVuaXR5SWRcIjogYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBcInByb2ZpbGVJZFwiOiBhcHAuU0NPUEUud29ya2Zsb3cucHJvZmlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3ViUHJvY2Vzc1VVSURcIjogdXVpZFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgICAgICAgICAgd29ya2VyLnNlbmQod29ya2VyT2JqZWN0KS50aGVuKGZ1bmN0aW9uKHdvcmtlclN1Y2Nlc3MpIHtcblxuICAgICAgICAgICAgICAgICAgICB3b3JrZXIuc2V0V29ya2VySW5mb0luU3VicHJvY2Vzcyh3b3JrZXJPYmplY3QsIF9XRkluc3RhbmNlLCB1dWlkKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2Vzcygnc2RvUmVwb3J0TXVsdGlwbGUgV29ya2VyIHByb2Nlc3NlZCBzdWNjZXNzZnVsbHkuJywgd29ya2VyU3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG5cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbih3b3JrZXJGYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh3b3JrZXJGYWlsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgc3VicHJvZmlsZVF1YXJ0ZXJseVJlcG9ydDogZnVuY3Rpb24oc3VicHJvZmlsZVF1YXJ0ZXJseVJlcG9ydCwgX1dGSW5zdGFuY2UsIHV1aWQpIHtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHdvcmtlck9iamVjdCA9IHdvcmtlci5nZXRXb3JrZXJXcmFwcGVyKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3VicHJvZmlsZUlkID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoYXBwLnByb2ZpbGUgIT0gdW5kZWZpbmVkICYmIGFwcC5wcm9maWxlLnN1YnByb2ZpbGVJZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VicHJvZmlsZUlkID0gYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5faWQgPSBnZW5lcmF0ZVVVSUQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY29tbXVuaXR5SWQgPSBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuYXBwbGljYXRpb25JZCA9IGFwcC5TQ09QRS5hcHBsaWNhdGlvbklkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jcmVhdGVkRGF0ZVRpbWUgPSBtb21lbnQoKS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc2VuZGVyVXNlcklkID0gTE9DQUxfU0VUVElOR1MuU1VCU0NSSVBUSU9OUy51c2VySWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnByb2ZpbGVJZCA9IF9XRkluc3RhbmNlLnByb2ZpbGU7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnN1YlByb2Nlc3NVVUlEID0gdXVpZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc3VicHJvZmlsZUlkID0gc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwiZXhlY3V0ZVJlcG9ydFwiKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY2hhbm5lbHMucHVzaChcImNvbW11bml0eV9cIiArIGFwcC5TQ09QRS5nZXRDb21tdW5pdHlJZCgpKTtcblxuICAgICAgICAgICAgICAgIHZhciBzY2hlZHVsZVJlcG9ydEluZGljYXRvciA9IHN1YnByb2ZpbGVRdWFydGVybHlSZXBvcnQuc2NoZWR1bGVSZXBvcnRJbmRpY2F0b3I7XG4gICAgICAgICAgICAgICAgdmFyIHNjaGVkdWxlUmVwb3J0SW5kaWNhdG9yVVVJRCA9IEpTT04ueHBhdGgoXCIvaW5kaWNhdG9yc1tjYXRlZ29yeS90ZXJtIGVxICdcIiArIHNjaGVkdWxlUmVwb3J0SW5kaWNhdG9yICsgXCInXS9faWRcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICB2YXIgc2RvUmVwb3J0QXBwcm92YWxJbmRpY2F0b3IgPSBzdWJwcm9maWxlUXVhcnRlcmx5UmVwb3J0LnNkb1JlcG9ydEFwcHJvdmFsSW5kaWNhdG9yO1xuICAgICAgICAgICAgICAgIHZhciBzZG9SZXBvcnRBcHByb3ZhbEluZGljYXRvclVVSUQgPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbY2F0ZWdvcnkvdGVybSBlcSAnXCIgKyBzZG9SZXBvcnRBcHByb3ZhbEluZGljYXRvciArIFwiJyBhbmQgd29ya2Zsb3dzWzFdL3Byb2Nlc3Nlc1sxXS9zdWJQcm9jZXNzVVVJRCBlcSAnXCIgKyB1dWlkICsgXCInXS9faWRcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcblxuXG5cblxuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJzdWJwcm9maWxlUXVhcnRlcmx5UmVwb3J0XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2NoZWR1bGVSZXBvcnRJbmRpY2F0b3JVVUlEXCI6IHNjaGVkdWxlUmVwb3J0SW5kaWNhdG9yVVVJRCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2RvUmVwb3J0QXBwcm92YWxJbmRpY2F0b3JVVUlEXCI6IHNkb1JlcG9ydEFwcHJvdmFsSW5kaWNhdG9yVVVJRCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3VicHJvZmlsZUNvZGVcIjogYXBwLnByb2ZpbGUuc3ViUHJvZmlsZS5jb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzdWJwcm9maWxlVGl0bGVcIjogYXBwLnByb2ZpbGUuc3ViUHJvZmlsZS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYXBwbGljYXRpb25JZFwiOiBhcHAuU0NPUEUuYXBwbGljYXRpb25JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29tbXVuaXR5SWRcIjogYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBcInByb2ZpbGVJZFwiOiBhcHAuU0NPUEUud29ya2Zsb3cucHJvZmlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3ViUHJvY2Vzc1VVSURcIjogdXVpZFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgICAgICAgICAgd29ya2VyLnNlbmQod29ya2VyT2JqZWN0KS50aGVuKGZ1bmN0aW9uKHdvcmtlclN1Y2Nlc3MpIHtcblxuICAgICAgICAgICAgICAgICAgICB3b3JrZXIuc2V0V29ya2VySW5mb0luU3VicHJvY2Vzcyh3b3JrZXJPYmplY3QsIF9XRkluc3RhbmNlLCB1dWlkKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcygnUXVhcnRlcmx5UmVwb3J0IHJlcG9ydCBXb3JrZXIgcHJvY2Vzc2VkIHN1Y2Nlc3NmdWxseS4nLCB3b3JrZXJTdWNjZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcblxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHdvcmtlckZhaWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHdvcmtlckZhaWwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICB9XG5cblxuXG5cblxuICAgIH1cblxufSkoKTtcblxudmFyIHBhcnRpY2lwYW50cyA9IChmdW5jdGlvbigpIHtcblxuICAgIHJldHVybiB7XG5cbiAgICAgICAgbGlua1BhcnRpY2lwYW50czogZnVuY3Rpb24obGlua1BhcnRpY2lwYW50cywgX1dGSW5zdGFuY2UsIHV1aWQpIHtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHdvcmtlck9iamVjdCA9IHdvcmtlci5nZXRXb3JrZXJXcmFwcGVyKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3VicHJvZmlsZUlkID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoYXBwLnByb2ZpbGUgIT0gdW5kZWZpbmVkICYmIGFwcC5wcm9maWxlLnN1YnByb2ZpbGVJZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VicHJvZmlsZUlkID0gYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5faWQgPSBnZW5lcmF0ZVVVSUQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY29tbXVuaXR5SWQgPSBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuYXBwbGljYXRpb25JZCA9IGFwcC5TQ09QRS5hcHBsaWNhdGlvbklkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jcmVhdGVkRGF0ZVRpbWUgPSBtb21lbnQoKS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc2VuZGVyVXNlcklkID0gTE9DQUxfU0VUVElOR1MuU1VCU0NSSVBUSU9OUy51c2VySWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnByb2ZpbGVJZCA9IF9XRkluc3RhbmNlLnByb2ZpbGU7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnN1YlByb2Nlc3NVVUlEID0gdXVpZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc3VicHJvZmlsZUlkID0gc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwiZm9sbG93XCIpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwiY29tbXVuaXR5X1wiICsgYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCkpO1xuXG4gICAgICAgICAgICAgICAgdmFyIEVQV1BMaW5rUGFydGljaXBhbnRzSW5CdWxrSWQgPSBsaW5rUGFydGljaXBhbnRzLkVQV1BMaW5rUGFydGljaXBhbnRzSW5CdWxrSWQ7XG4gICAgICAgICAgICAgICAgdmFyIEVQV1BMaW5rUGFydGljaXBhbnRzSW5CdWxrSWRVVUlEID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddL2luZGljYXRvcnNbaWQgZXEgJ1wiICsgRVBXUExpbmtQYXJ0aWNpcGFudHNJbkJ1bGtJZCArIFwiJ10vaW5zdGFuY2VzWzFdL3V1aWRcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcblxuICAgICAgICAgICAgICAgIHZhciBFUFdQTG9jYWxpdHlJZCA9IGxpbmtQYXJ0aWNpcGFudHMuRVBXUExvY2FsaXR5SWQ7XG4gICAgICAgICAgICAgICAgdmFyIEVQV1BMb2NhbGl0eUlkVVVJRCA9IEpTT04ueHBhdGgoXCIvaW5kaWNhdG9yc1tjYXRlZ29yeS90ZXJtIGVxICdcIiArIEVQV1BMb2NhbGl0eUlkICsgXCInXS9faWRcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcblxuICAgICAgICAgICAgICAgIHZhciBFUFdQQWN0aXZlUGFydGljaXBhbnRzSWQgPSBsaW5rUGFydGljaXBhbnRzLkVQV1BBY3RpdmVQYXJ0aWNpcGFudHNJZDtcbiAgICAgICAgICAgICAgICB2YXIgRVBXUEFjdGl2ZVBhcnRpY2lwYW50c0lkVVVJRCA9IEpTT04ueHBhdGgoXCIvaW5kaWNhdG9yc1tjYXRlZ29yeS90ZXJtIGVxICdcIiArIEVQV1BBY3RpdmVQYXJ0aWNpcGFudHNJZCArIFwiJ10vX2lkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG5cbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBcImxpbmtQYXJ0aWNpcGFudHNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJFUFdQTGlua1BhcnRpY2lwYW50c0luQnVsa0lkVVVJRFwiOiBFUFdQTGlua1BhcnRpY2lwYW50c0luQnVsa0lkVVVJRCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiRVBXUExvY2FsaXR5SWRVVUlEXCI6IEVQV1BMb2NhbGl0eUlkVVVJRCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiRVBXUEFjdGl2ZVBhcnRpY2lwYW50c0lkVVVJRFwiOiBFUFdQQWN0aXZlUGFydGljaXBhbnRzSWRVVUlELFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJwcm9maWxJZFwiOiBfV0ZJbnN0YW5jZS5wcm9maWxlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgICAgICAgICAgd29ya2VyLnNlbmQod29ya2VyT2JqZWN0KS50aGVuKGZ1bmN0aW9uKHdvcmtlclN1Y2Nlc3MpIHtcblxuICAgICAgICAgICAgICAgICAgICB3b3JrZXIuc2V0V29ya2VySW5mb0luU3VicHJvY2Vzcyh3b3JrZXJPYmplY3QsIF9XRkluc3RhbmNlLCB1dWlkKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcygnRVBXUExpbmtQYXJ0aWNpcGFudHMgV29ya2VyIHByb2Nlc3NlZCBzdWNjZXNzZnVsbHkuJywgd29ya2VyU3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG5cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbih3b3JrZXJGYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh3b3JrZXJGYWlsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgbW9udGhseUF0dGVuZGFuY2U6IGZ1bmN0aW9uKG1vbnRobHlBdHRlbmRhbmNlLCBfV0ZJbnN0YW5jZSwgdXVpZCkge1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgd29ya2VyT2JqZWN0ID0gd29ya2VyLmdldFdvcmtlcldyYXBwZXIoKTtcblxuICAgICAgICAgICAgICAgIHZhciBzdWJwcm9maWxlSWQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGlmIChhcHAucHJvZmlsZSAhPSB1bmRlZmluZWQgJiYgYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJwcm9maWxlSWQgPSBhcHAucHJvZmlsZS5zdWJwcm9maWxlSWQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0Ll9pZCA9IGdlbmVyYXRlVVVJRCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jb21tdW5pdHlJZCA9IGFwcC5TQ09QRS5nZXRDb21tdW5pdHlJZCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5hcHBsaWNhdGlvbklkID0gYXBwLlNDT1BFLmFwcGxpY2F0aW9uSWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNyZWF0ZWREYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zZW5kZXJVc2VySWQgPSBMT0NBTF9TRVRUSU5HUy5TVUJTQ1JJUFRJT05TLnVzZXJJZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QucHJvZmlsZUlkID0gX1dGSW5zdGFuY2UucHJvZmlsZTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc3ViUHJvY2Vzc1VVSUQgPSB1dWlkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zdWJwcm9maWxlSWQgPSBzdWJwcm9maWxlSWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNoYW5uZWxzLnB1c2goXCJmb2xsb3dcIik7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNoYW5uZWxzLnB1c2goXCJjb21tdW5pdHlfXCIgKyBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgRVBXUE1vbnRobHlBdHRlbmRhbmNlQnVsa1VwbG9hZElkID0gbW9udGhseUF0dGVuZGFuY2UuRVBXUE1vbnRobHlBdHRlbmRhbmNlQnVsa1VwbG9hZFVVSUQ7XG4gICAgICAgICAgICAgICAgdmFyIEVQV1BNb250aGx5QXR0ZW5kYW5jZUJ1bGtVcGxvYWRVVUlEID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddL2luZGljYXRvcnNbaWQgZXEgJ1wiICsgRVBXUE1vbnRobHlBdHRlbmRhbmNlQnVsa1VwbG9hZElkICsgXCInXS9pbnN0YW5jZXNbMV0vdXVpZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuXG4gICAgICAgICAgICAgICAgdmFyIEVQV1BBY3RpdmVQYXJ0aWNpcGFudHNJZCA9IG1vbnRobHlBdHRlbmRhbmNlLkVQV1BBY3RpdmVQYXJ0aWNpcGFudHNJZFVVSUQ7XG4gICAgICAgICAgICAgICAgdmFyIEVQV1BBY3RpdmVQYXJ0aWNpcGFudHNJZFVVSUQgPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbY2F0ZWdvcnkvdGVybSBlcSAnXCIgKyBFUFdQQWN0aXZlUGFydGljaXBhbnRzSWQgKyBcIiddL19pZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuXG4gICAgICAgICAgICAgICAgdmFyIEVQV1BNb250aGx5RW1wbG95bWVudFBlckxvY2FsaXR5SWQgPSBtb250aGx5QXR0ZW5kYW5jZS5FUFdQTW9udGhseUVtcGxveW1lbnRQZXJMb2NhbGl0eVVVSUQ7XG4gICAgICAgICAgICAgICAgdmFyIEVQV1BNb250aGx5RW1wbG95bWVudFBlckxvY2FsaXR5VVVJRCA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXS9pbmRpY2F0b3JzW2lkIGVxICdcIiArIEVQV1BNb250aGx5RW1wbG95bWVudFBlckxvY2FsaXR5SWQgKyBcIiddL2luc3RhbmNlc1sxXS91dWlkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG5cblxuXG5cbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBcIm1vbnRobHlBdHRlbmRhbmNlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiRVBXUE1vbnRobHlBdHRlbmRhbmNlQnVsa1VwbG9hZFVVSURcIjogRVBXUE1vbnRobHlBdHRlbmRhbmNlQnVsa1VwbG9hZFVVSUQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkVQV1BBY3RpdmVQYXJ0aWNpcGFudHNJZFVVSURcIjogRVBXUEFjdGl2ZVBhcnRpY2lwYW50c0lkVVVJRCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiRVBXUE1vbnRobHlFbXBsb3ltZW50UGVyTG9jYWxpdHlVVUlEXCI6IEVQV1BNb250aGx5RW1wbG95bWVudFBlckxvY2FsaXR5VVVJRCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicHJvZmlsSWRcIjogX1dGSW5zdGFuY2UucHJvZmlsZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuYWN0aW9uID0gYWN0aW9uO1xuICAgICAgICAgICAgICAgIHdvcmtlci5zZW5kKHdvcmtlck9iamVjdCkudGhlbihmdW5jdGlvbih3b3JrZXJTdWNjZXNzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgd29ya2VyLnNldFdvcmtlckluZm9JblN1YnByb2Nlc3Mod29ya2VyT2JqZWN0LCBfV0ZJbnN0YW5jZSwgdXVpZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ21vbnRobHlBdHRlbmRhbmNlIFdvcmtlciBwcm9jZXNzZWQgc3VjY2Vzc2Z1bGx5LicsIHdvcmtlclN1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24od29ya2VyRmFpbCkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3Qod29ya2VyRmFpbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIG1vbnRobHlQcm9ncmVzc1N1bW1hcnk6IGZ1bmN0aW9uKG1vbnRobHlQcm9ncmVzc1N1bW1hcnksIF9XRkluc3RhbmNlLCB1dWlkKSB7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICAgICAgICAgIHZhciB3b3JrZXJPYmplY3QgPSB3b3JrZXIuZ2V0V29ya2VyV3JhcHBlcigpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHN1YnByb2ZpbGVJZCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKGFwcC5wcm9maWxlICE9IHVuZGVmaW5lZCAmJiBhcHAucHJvZmlsZS5zdWJwcm9maWxlSWQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnByb2ZpbGVJZCA9IGFwcC5wcm9maWxlLnN1YnByb2ZpbGVJZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuX2lkID0gZ2VuZXJhdGVVVUlEKCk7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNvbW11bml0eUlkID0gYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCk7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmFwcGxpY2F0aW9uSWQgPSBhcHAuU0NPUEUuYXBwbGljYXRpb25JZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY3JlYXRlZERhdGVUaW1lID0gbW9tZW50KCkuZm9ybWF0KCk7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnNlbmRlclVzZXJJZCA9IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcklkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5wcm9maWxlSWQgPSBfV0ZJbnN0YW5jZS5wcm9maWxlO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zdWJQcm9jZXNzVVVJRCA9IHV1aWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnN1YnByb2ZpbGVJZCA9IHN1YnByb2ZpbGVJZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY2hhbm5lbHMucHVzaChcImZvbGxvd1wiKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY2hhbm5lbHMucHVzaChcImNvbW11bml0eV9cIiArIGFwcC5TQ09QRS5nZXRDb21tdW5pdHlJZCgpKTtcblxuICAgICAgICAgICAgICAgIHZhciBFUFdQTW9udGhseVByb2dyZXNzU3VtbWFyeUlkID0gbW9udGhseVByb2dyZXNzU3VtbWFyeS5FUFdQTW9udGhseVByb2dyZXNzU3VtbWFyeUlkVVVJRDtcbiAgICAgICAgICAgICAgICB2YXIgRVBXUE1vbnRobHlQcm9ncmVzc1N1bW1hcnlJZFVVSUQgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vaW5kaWNhdG9yc1tpZCBlcSAnXCIgKyBFUFdQTW9udGhseVByb2dyZXNzU3VtbWFyeUlkICsgXCInXS9pbnN0YW5jZXNbMV0vdXVpZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuXG5cblxuXG5cbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBcIm1vbnRobHlQcm9ncmVzc1N1bW1hcnlcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJFUFdQTW9udGhseVByb2dyZXNzU3VtbWFyeUlkVVVJRFwiOiBFUFdQTW9udGhseVByb2dyZXNzU3VtbWFyeUlkVVVJRCxcblxuICAgICAgICAgICAgICAgICAgICAgICAgXCJwcm9maWxJZFwiOiBfV0ZJbnN0YW5jZS5wcm9maWxlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgICAgICAgICAgd29ya2VyLnNlbmQod29ya2VyT2JqZWN0KS50aGVuKGZ1bmN0aW9uKHdvcmtlclN1Y2Nlc3MpIHtcblxuICAgICAgICAgICAgICAgICAgICB3b3JrZXIuc2V0V29ya2VySW5mb0luU3VicHJvY2Vzcyh3b3JrZXJPYmplY3QsIF9XRkluc3RhbmNlLCB1dWlkKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcygnbW9udGhseUF0dGVuZGFuY2UgV29ya2VyIHByb2Nlc3NlZCBzdWNjZXNzZnVsbHkuJywgd29ya2VyU3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG5cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbih3b3JrZXJGYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh3b3JrZXJGYWlsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgcGFydGljaXBhbnRDb250cmFjdHM6IGZ1bmN0aW9uKHBhcnRpY2lwYW50Q29udHJhY3RzLCBfV0ZJbnN0YW5jZSwgdXVpZCkge1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgd29ya2VyT2JqZWN0ID0gd29ya2VyLmdldFdvcmtlcldyYXBwZXIoKTtcblxuICAgICAgICAgICAgICAgIHZhciBzdWJwcm9maWxlSWQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGlmIChhcHAucHJvZmlsZSAhPSB1bmRlZmluZWQgJiYgYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJwcm9maWxlSWQgPSBhcHAucHJvZmlsZS5zdWJwcm9maWxlSWQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0Ll9pZCA9IGdlbmVyYXRlVVVJRCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jb21tdW5pdHlJZCA9IGFwcC5TQ09QRS5nZXRDb21tdW5pdHlJZCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5hcHBsaWNhdGlvbklkID0gYXBwLlNDT1BFLmFwcGxpY2F0aW9uSWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNyZWF0ZWREYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zZW5kZXJVc2VySWQgPSBMT0NBTF9TRVRUSU5HUy5TVUJTQ1JJUFRJT05TLnVzZXJJZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QucHJvZmlsZUlkID0gX1dGSW5zdGFuY2UucHJvZmlsZTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc3ViUHJvY2Vzc1VVSUQgPSB1dWlkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zdWJwcm9maWxlSWQgPSBzdWJwcm9maWxlSWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNoYW5uZWxzLnB1c2goXCJmb2xsb3dcIik7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNoYW5uZWxzLnB1c2goXCJjb21tdW5pdHlfXCIgKyBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgRVBXUFBhcnRpY2lwYW50Q29udHJhY3RzSWQgPSBwYXJ0aWNpcGFudENvbnRyYWN0cy5FUFdQUGFydGljaXBhbnRDb250cmFjdHNJZFVVSUQ7XG4gICAgICAgICAgICAgICAgdmFyIEVQV1BQYXJ0aWNpcGFudENvbnRyYWN0c0lkVVVJRCA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXS9pbmRpY2F0b3JzW2lkIGVxICdcIiArIEVQV1BQYXJ0aWNpcGFudENvbnRyYWN0c0lkICsgXCInXS9pbnN0YW5jZXNbMV0vdXVpZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuXG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJwYXJ0aWNpcGFudENvbnRyYWN0c1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcIkVQV1BQYXJ0aWNpcGFudENvbnRyYWN0c0lkVVVJRFwiOiBFUFdQUGFydGljaXBhbnRDb250cmFjdHNJZFVVSUQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInByb2ZpbElkXCI6IF9XRkluc3RhbmNlLnByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuYWN0aW9uID0gYWN0aW9uO1xuICAgICAgICAgICAgICAgIHdvcmtlci5zZW5kKHdvcmtlck9iamVjdCkudGhlbihmdW5jdGlvbih3b3JrZXJTdWNjZXNzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgd29ya2VyLnNldFdvcmtlckluZm9JblN1YnByb2Nlc3Mod29ya2VyT2JqZWN0LCBfV0ZJbnN0YW5jZSwgdXVpZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ3BhcnRpY2lwYW50Q29udHJhY3RzIFdvcmtlciBwcm9jZXNzZWQgc3VjY2Vzc2Z1bGx5LicsIHdvcmtlclN1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24od29ya2VyRmFpbCkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3Qod29ya2VyRmFpbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIGdlbmVyaWNMaW5rUGFydGljaXBhbnRzOiBmdW5jdGlvbihnZW5lcmljTGlua1BhcnRpY2lwYW50cywgX1dGSW5zdGFuY2UsIHV1aWQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn0pKCk7XG5cbnZhciB3b3JrZXIgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICByZXR1cm4ge1xuXG4gICAgICAgIGdldFdvcmtlcldyYXBwZXI6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9IHtcbiAgICAgICAgICAgICAgICBcInNvdXJjZVwiOiBcInJlbW90ZVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIndvcmtlck9iamVjdFwiLFxuICAgICAgICAgICAgICAgIFwiX2lkXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgXCJjaGFubmVsc1wiOiBbXCJ3b3JrZXJPYmplY3RcIl0sXG4gICAgICAgICAgICAgICAgXCJwcm9maWxlSWRcIjogXCJcIixcbiAgICAgICAgICAgICAgICBcImNvbW11bml0eUlkXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgXCJhcHBsaWNhdGlvbklkXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgXCJzdWJQcm9jZXNzVVVJRFwiOiBcIlwiLFxuICAgICAgICAgICAgICAgIFwibWVzc2FnZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgIFwibWVzc2FnZVR5cGVcIjogXCJpbmZvXCIsXG4gICAgICAgICAgICAgICAgXCJjcmVhdGVkRGF0ZVRpbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICBcInNlbmRlclVzZXJJZFwiOiBcIlwiLFxuICAgICAgICAgICAgICAgIFwic3ViUHJvZmlsZUlkXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgXCJhY3Rpb25cIjoge1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlcjtcblxuICAgICAgICB9LFxuICAgICAgICBzZW5kOiBmdW5jdGlvbih3b3JrZXJPYmplY3QpIHtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1N1Ym1pdHRpbmcgV29ya2VyIE9iamVjdCB0byBzZXJ2ZXInKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh3b3JrZXJPYmplY3QpO1xuICAgICAgICAgICAgICAgIGRhby5zYXZlKHdvcmtlck9iamVjdCkudGhlbihmdW5jdGlvbih3b3JrZXJSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHdvcmtlclJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIHN1Ym1pdHRpbmcgd29ya2VyIHJlc3BvbnNlICEhJyArIGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgc2VuZFdvcmtlcjogZnVuY3Rpb24od29ya2VyQ29uZmlnLCBfV0ZJbnN0YW5jZSwgdXVpZCkge1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgd29ya2VyT2JqZWN0ID0gd29ya2VyLmdldFdvcmtlcldyYXBwZXIoKTtcblxuICAgICAgICAgICAgICAgIHZhciBzdWJwcm9maWxlSWQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGlmIChhcHAucHJvZmlsZSAhPSB1bmRlZmluZWQgJiYgYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJwcm9maWxlSWQgPSBhcHAucHJvZmlsZS5zdWJwcm9maWxlSWQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0Ll9pZCA9IGdlbmVyYXRlVVVJRCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jb21tdW5pdHlJZCA9IGFwcC5TQ09QRS5nZXRDb21tdW5pdHlJZCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5hcHBsaWNhdGlvbklkID0gYXBwLlNDT1BFLmFwcGxpY2F0aW9uSWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNyZWF0ZWREYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zZW5kZXJVc2VySWQgPSBMT0NBTF9TRVRUSU5HUy5TVUJTQ1JJUFRJT05TLnVzZXJJZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QucHJvZmlsZUlkID0gX1dGSW5zdGFuY2UucHJvZmlsZTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3Quc3ViUHJvY2Vzc1VVSUQgPSB1dWlkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zdWJwcm9maWxlSWQgPSBzdWJwcm9maWxlSWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNoYW5uZWxzLnB1c2goXCJzZW5kV29ya2VyXCIpO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5jaGFubmVscy5wdXNoKFwiY29tbXVuaXR5X1wiICsgYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCkpO1xuICAgICAgICAgICAgICAgIHZhciBwcm9jZXNzR2V0Tm9kZVZhbHVlID0gZnVuY3Rpb24ocGFyYW1CbG9jaywgc2VxLCBwYXJhbU5hbWUpIHtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzLCByZWopIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyLmdldE5vZGVWYWx1ZShwYXJhbUJsb2NrLCBfV0ZJbnN0YW5jZSwgdXVpZCkudGhlbihmdW5jdGlvbihkYXRhVmFsdWUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2VxXCI6IHNlcSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwYXJhbU5hbWVcIjogcGFyYW1OYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRhdGFWYWx1ZVwiOiBkYXRhVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc1BhcmFtcyA9IGZ1bmN0aW9uKGNvbmZpZ1BhcmFtKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlcywgcmVqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1ldGVyc0FycmF5ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbXNUb1Byb2Nlc3MgPSBjb25maWdQYXJhbS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbmZpZ1BhcmFtLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtQmxvY2sgPSBjb25maWdQYXJhbVtpXS5wYXJhbWV0ZXJWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VxID0gY29uZmlnUGFyYW1baV0uc2VxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbU5hbWUgPSBjb25maWdQYXJhbVtpXS5wYXJhbWV0ZXJOYW1lO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtVmFsdWUgPSBwcm9jZXNzR2V0Tm9kZVZhbHVlKHBhcmFtQmxvY2ssIHNlcSwgcGFyYW1OYW1lKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyc0FycmF5LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZXFcIjogcmVzcG9uc2Uuc2VxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwYXJhbU5hbWVcIjogcmVzcG9uc2UucGFyYW1OYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwYXJhbVZhbHVlXCI6IHJlc3BvbnNlLmRhdGFWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zVG9Qcm9jZXNzLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtc1RvUHJvY2VzcyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzQXJyYXkucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZXFcIjogaXRlbXNUb1Byb2Nlc3MgKyAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFyYW1OYW1lXCI6IFwiY29tbXVuaXR5SWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBhcmFtVmFsdWVcIjogX1dGSW5zdGFuY2UuY29tbXVuaXR5SWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzQXJyYXkucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZXFcIjogaXRlbXNUb1Byb2Nlc3MgKyAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFyYW1OYW1lXCI6IFwiYXBwbGljYXRpb25JZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFyYW1WYWx1ZVwiOiBfV0ZJbnN0YW5jZS5hcHBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzQXJyYXkucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZXFcIjogaXRlbXNUb1Byb2Nlc3MgKyAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFyYW1OYW1lXCI6IFwicHJvZmlsZUlkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwYXJhbVZhbHVlXCI6IF9XRkluc3RhbmNlLnByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzQXJyYXkucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZXFcIjogaXRlbXNUb1Byb2Nlc3MgKyA0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFyYW1OYW1lXCI6IFwic3ViUHJvY2Vzc1VVSURcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBhcmFtVmFsdWVcIjogdXVpZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcyhwYXJhbWV0ZXJzQXJyYXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zVG9Qcm9jZXNzLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtc1RvUHJvY2VzcyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzQXJyYXkucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZXFcIjogaXRlbXNUb1Byb2Nlc3MgKyAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFyYW1OYW1lXCI6IFwiY29tbXVuaXR5SWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBhcmFtVmFsdWVcIjogX1dGSW5zdGFuY2UuY29tbXVuaXR5SWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzQXJyYXkucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZXFcIjogaXRlbXNUb1Byb2Nlc3MgKyAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFyYW1OYW1lXCI6IFwiYXBwbGljYXRpb25JZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFyYW1WYWx1ZVwiOiBfV0ZJbnN0YW5jZS5hcHBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzQXJyYXkucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZXFcIjogaXRlbXNUb1Byb2Nlc3MgKyAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFyYW1OYW1lXCI6IFwicHJvZmlsZUlkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwYXJhbVZhbHVlXCI6IF9XRkluc3RhbmNlLnByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzQXJyYXkucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZXFcIjogaXRlbXNUb1Byb2Nlc3MgKyA0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFyYW1OYW1lXCI6IFwic3ViUHJvY2Vzc1VVSURcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBhcmFtVmFsdWVcIjogdXVpZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcyhwYXJhbWV0ZXJzQXJyYXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKHdvcmtlckNvbmZpZy5yZXN0ICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb25maWdQYXJhbSA9IHdvcmtlckNvbmZpZy5yZXN0LnBhcmFtZXRlcnM7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NQYXJhbXMoY29uZmlnUGFyYW0pLnRoZW4oZnVuY3Rpb24ocGFyYW1zQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZW5kV29ya2VyXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyZXN0XCI6IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5zZW5kV29ya2VyLnJlc3QudXJpID0gd29ya2VyQ29uZmlnLnJlc3QudXJpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLnNlbmRXb3JrZXIucmVzdC5wcm9maWxJZCA9IF9XRkluc3RhbmNlLnByb2ZpbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24uc2VuZFdvcmtlci5yZXN0LnBhcmFtZXRlcnMgPSBwYXJhbXNBcnJheTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmFjdGlvbiA9IGFjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlci5zZW5kKHdvcmtlck9iamVjdCkudGhlbihmdW5jdGlvbih3b3JrZXJTdWNjZXNzKSB7XG5cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNwT2JqZWN0ID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BPYmplY3Quc3BTdGF0dXMgPSAnc3VibWl0dGVkJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcE9iamVjdC5tZXNzYWdlcyA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BPYmplY3QubWVzc2FnZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBlbmRpbmdTdWJtaXNzaW9uT2JqZWN0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1lc3NhZ2VcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpMThuXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl9pZFwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZW5cIjogXCJUaGUgc2VydmVyIGlzIHByb2Nlc3NpbmcgeW91ciByZXF1ZXN0LiBQbGVhc2Ugd2FpdCBhIGZldyBzZWNvbmRzIGFuZCB0aGVuIGNsaWNrIHRoZSByZWZyZXNoIGJ1dHRvbi5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInB0XCI6IFwiVGhlIHNlcnZlciBpcyBwcm9jZXNzaW5nIHlvdXIgcmVxdWVzdC4gUGxlYXNlIHdhaXQgYSBmZXcgc2Vjb25kcyBhbmQgdGhlbiBjbGljayB0aGUgcmVmcmVzaCBidXR0b24uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW5mb1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcE9iamVjdC5tZXNzYWdlcy5wdXNoKHBlbmRpbmdTdWJtaXNzaW9uT2JqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3b3JrZXIgaWQgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcE9iamVjdC53b3JrZXJzID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcE9iamVjdC53b3JrZXJzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwT2JqZWN0LndvcmtlcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwid29ya2VySWRcIjogd29ya2VyT2JqZWN0Ll9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkYXRlVGltZVwiOiBtb21lbnQoKS5mb3JtYXQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyc2lzdERhdGEoJ3N1YnByb2Nlc3NlcycsIGFwcC5TQ09QRS53b3JrZmxvdywgdXVpZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oc2F2ZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ1dvcmtlciBSZXN0IHByb2Nlc3NlZCBzdWNjZXNzZnVsbHkuJywgd29ya2VyU3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGZhaWxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1dvcmtlciBzdWJtaXR0ZWQgc3VicHJvY2VzcyBmaWxlIHVwZGF0ZSBmYWlsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChmYWlsZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG5cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbih3b3JrZXJGYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1dvcmtlciBmYWlsZWQgJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHdvcmtlckZhaWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInBhcmFtZXRlciBjcmVhdGlvbiBmYWlsZWQuIEFib3JkaW5nIHdvcmtlciBvYmplY3RcIik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3b3JrZXJDb25maWcuZnVuY3Rpb25hbCAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgY29uZmlnUGFyYW0gPSB3b3JrZXJDb25maWcuZnVuY3Rpb25hbC5wYXJhbWV0ZXJzO1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzUGFyYW1zKGNvbmZpZ1BhcmFtKS50aGVuKGZ1bmN0aW9uKHBhcmFtc0FycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2VuZFdvcmtlclwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25hbFwiOiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24uc2VuZFdvcmtlci5mdW5jdGlvbmFsLm1ldGhvZE5hbWUgPSB3b3JrZXJDb25maWcuZnVuY3Rpb25hbC5tZXRob2ROYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLnNlbmRXb3JrZXIuZnVuY3Rpb25hbC5wcm9maWxJZCA9IF9XRkluc3RhbmNlLnByb2ZpbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24uc2VuZFdvcmtlci5mdW5jdGlvbmFsLnBhcmFtZXRlcnMgPSBwYXJhbXNBcnJheTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXIuc2VuZCh3b3JrZXJPYmplY3QpLnRoZW4oZnVuY3Rpb24od29ya2VyU3VjY2Vzcykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNwT2JqZWN0ID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BPYmplY3Quc3BTdGF0dXMgPSAnc3VibWl0dGVkJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcE9iamVjdC5tZXNzYWdlcyA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BPYmplY3QubWVzc2FnZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBlbmRpbmdTdWJtaXNzaW9uT2JqZWN0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1lc3NhZ2VcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpMThuXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl9pZFwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZW5cIjogXCJUaGUgc2VydmVyIGlzIHByb2Nlc3NpbmcgeW91ciByZXF1ZXN0LiBQbGVhc2Ugd2FpdCBhIGZldyBzZWNvbmRzIGFuZCB0aGVuIGNsaWNrIHRoZSByZWZyZXNoIGJ1dHRvbi5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInB0XCI6IFwiVGhlIHNlcnZlciBpcyBwcm9jZXNzaW5nIHlvdXIgcmVxdWVzdC4gUGxlYXNlIHdhaXQgYSBmZXcgc2Vjb25kcyBhbmQgdGhlbiBjbGljayB0aGUgcmVmcmVzaCBidXR0b24uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW5mb1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcE9iamVjdC5tZXNzYWdlcy5wdXNoKHBlbmRpbmdTdWJtaXNzaW9uT2JqZWN0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdvcmtlciBpZCBoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNwT2JqZWN0LndvcmtlcnMgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwT2JqZWN0LndvcmtlcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BPYmplY3Qud29ya2Vycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ3b3JrZXJJZFwiOiB3b3JrZXJPYmplY3QuX2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRhdGVUaW1lXCI6IG1vbWVudCgpLmZvcm1hdCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJzaXN0RGF0YSgnc3VicHJvY2Vzc2VzJywgYXBwLlNDT1BFLndvcmtmbG93LCB1dWlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihzYXZlZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcygnV29ya2VyIGZ1bmN0aW9uYWwgcHJvY2Vzc2VkIHN1Y2Nlc3NmdWxseS4nLCB3b3JrZXJTdWNjZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZmFpbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnV29ya2VyIHN1Ym1pdHRlZCBzdWJwcm9jZXNzIGZpbGUgdXBkYXRlIGZhaWxlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGZhaWxlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24od29ya2VyRmFpbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdXb3JrZXIgZmFpbGVkICcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCh3b3JrZXJGYWlsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJwYXJhbWV0ZXIgY3JlYXRpb24gZmFpbGVkLiBBYm9yZGluZyB3b3JrZXIgb2JqZWN0XCIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZXhlY3V0ZUxvY2FsOiBmdW5jdGlvbih3b3JrZXJDb25maWcsIF9XRkluc3RhbmNlLCB1dWlkKSB7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXG5cbiAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc0dldE5vZGVWYWx1ZSA9IGZ1bmN0aW9uKHBhcmFtQmxvY2ssIHNlcSwgZGF0YVR5cGUpIHtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzLCByZWopIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyLmdldE5vZGVWYWx1ZShwYXJhbUJsb2NrLCBfV0ZJbnN0YW5jZSwgdXVpZCkudGhlbihmdW5jdGlvbihkYXRhVmFsdWUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2VxXCI6IHNlcSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkYXRhVHlwZVwiOiBkYXRhVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkYXRhVmFsdWVcIjogZGF0YVZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlaihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc1BhcmFtcyA9IGZ1bmN0aW9uKGNvbmZpZ1BhcmFtKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlcywgcmVqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1ldGVyc0FycmF5ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbXNUb1Byb2Nlc3MgPSBjb25maWdQYXJhbS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbmZpZ1BhcmFtLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtQmxvY2sgPSBjb25maWdQYXJhbVtpXS5wYXJhbWV0ZXJWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VxID0gY29uZmlnUGFyYW1baV0uc2VxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhVHlwZSA9IGNvbmZpZ1BhcmFtW2ldLmRhdGFUeXBlLmRhdGFUeXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbVZhbHVlID0gcHJvY2Vzc0dldE5vZGVWYWx1ZShwYXJhbUJsb2NrLCBzZXEsIGRhdGFUeXBlKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyc0FycmF5LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZXFcIjogcmVzcG9uc2Uuc2VxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkYXRhVHlwZVwiOiByZXNwb25zZS5kYXRhVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFyYW1WYWx1ZVwiOiByZXNwb25zZS5kYXRhVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1RvUHJvY2Vzcy0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbXNUb1Byb2Nlc3MgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzKHBhcmFtZXRlcnNBcnJheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXNUb1Byb2Nlc3MtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1zVG9Qcm9jZXNzID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcyhwYXJhbWV0ZXJzQXJyYXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgZml4UGFyYW1UeXBlID0gZnVuY3Rpb24ocGFyYW1WYWx1ZSwgZGF0YVR5cGUpIHtcblxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGRhdGFUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR4dCA9IHBhcmFtVmFsdWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIidcIiArIHR4dCArIFwiJ1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImRhdGVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkYXRlVGltZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIidcIiArIHBhcmFtVmFsdWUgKyBcIidcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkZWNpbWFsXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdmFyIG1ldGhvZE5hbWUgPSB3b3JrZXJDb25maWcubWV0aG9kTmFtZTtcbiAgICAgICAgICAgICAgICB2YXIgY29uZmlnUGFyYW0gPSB3b3JrZXJDb25maWcucGFyYW1ldGVycztcbiAgICAgICAgICAgICAgICBwcm9jZXNzUGFyYW1zKGNvbmZpZ1BhcmFtKS50aGVuKGZ1bmN0aW9uKHBhcmFtc0FycmF5KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHBMaXN0ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1zQXJyYXkubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwTGlzdCA9IHBMaXN0ICsgZml4UGFyYW1UeXBlKHBhcmFtc0FycmF5W2ldLnBhcmFtVmFsdWUsIHBhcmFtc0FycmF5W2ldLmRhdGFUeXBlKSArICcsJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwTGlzdCA9IHBMaXN0ICsgZml4UGFyYW1UeXBlKHBhcmFtc0FycmF5W2ldLnBhcmFtVmFsdWUsIHBhcmFtc0FycmF5W2ldLmRhdGFUeXBlKVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjYWxsYmFja1N1Y2Nlc3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKFwiRnVuY3Rpb24gJ1wiICsgbWV0aG9kTmFtZSArIFwiJyBleGVjdXRlZC4gUmVzcG9uc2Ugc3VjY2Vzcy5cIik7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYWxsYmFja0ZhaWx1cmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoXCJGdW5jdGlvbiAnXCIgKyBtZXRob2ROYW1lICsgXCInIGV4ZWN1dGVkLiBSZXNwb25zZSBmYWlsZWQuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3BVVUlEID0gXCInXCIgKyB1dWlkICsgXCInXCJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZ1bmMgPSBtZXRob2ROYW1lICsgJygnICsgcExpc3QgKyAnLGNhbGxiYWNrU3VjY2VzcywgY2FsbGJhY2tGYWlsdXJlLCcgKyBzcFVVSUQgKyAnKSc7XG4gICAgICAgICAgICAgICAgICAgIHZhciBleGUgPSBldmFsKGZ1bmMpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhleGUpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKFwiTG9jYWwgZnVuY3Rpb24gZXhlY3V0ZWRcIik7XG5cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJwYXJhbWV0ZXIgY3JlYXRpb24gZmFpbGVkLiBBYm9yZGluZyB3b3JrZXIgb2JqZWN0XCIpO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuXG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0V29ya2VySW5mb0luU3VicHJvY2VzczogZnVuY3Rpb24od29ya2VyT2JqZWN0LCBfV0ZJbnN0YW5jZSwgdXVpZCkge1xuXG4gICAgICAgICAgICB2YXIgc3VicHJvY2Vzc09iamVjdCA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgdmFyIHBlbmRpbmdTdWJtaXNzaW9uT2JqZWN0ID0ge1xuICAgICAgICAgICAgICAgIFwibWVzc2FnZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiaTE4blwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcIl9pZFwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJlblwiOiBcIlRoZSBzZXJ2ZXIgaXMgcHJvY2Vzc2luZyB5b3VyIHJlcXVlc3QuIFBsZWFzZSB3YWl0IGEgZmV3IHNlY29uZHMgYW5kIHRoZW4gY2xpY2sgdGhlIHJlZnJlc2ggYnV0dG9uLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJwdFwiOiBcIk8gc2Vydmlkb3IgZXN0w6EgcHJvY2Vzc2FuZG8gc3VhIHNvbGljaXRhw6fDo28uIFBvciBmYXZvciBhZ3VhcmRlIGFsZ3VucyBzZWd1bmRvcyBlIGRlcG9pcyBjbGlxdWUgbm8gYm90w6NvIGF0dWFsaXphci5cIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbmZvXCJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzdWJwcm9jZXNzT2JqZWN0Lm1lc3NhZ2VzID0gW107XG4gICAgICAgICAgICBzdWJwcm9jZXNzT2JqZWN0Lm1lc3NhZ2VzLnB1c2gocGVuZGluZ1N1Ym1pc3Npb25PYmplY3QpO1xuXG4gICAgICAgICAgICBpZiAoc3VicHJvY2Vzc09iamVjdC53b3JrZXJzID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHN1YnByb2Nlc3NPYmplY3Qud29ya2VycyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3VicHJvY2Vzc09iamVjdC53b3JrZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgIFwid29ya2VySWRcIjogd29ya2VyT2JqZWN0Ll9pZCxcbiAgICAgICAgICAgICAgICBcImRhdGVUaW1lXCI6IG1vbWVudCgpLmZvcm1hdCgpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIH0sXG5cblxuICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uKHdvcmtlckNvbmZpZywgX1dGSW5zdGFuY2UsIHV1aWQpIHtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGNoYW5uZWwgPSB3b3JrZXJDb25maWcuY2hhbm5lbDtcbiAgICAgICAgICAgICAgICB2YXIgd29ya2VyQWN0aW9uID0gd29ya2VyQ29uZmlnLmFjdGlvbjtcblxuICAgICAgICAgICAgICAgIHZhciB3b3JrZXJPYmplY3QgPSB3b3JrZXIuZ2V0V29ya2VyV3JhcHBlcigpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHN1YnByb2ZpbGVJZCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKGFwcC5wcm9maWxlICE9IHVuZGVmaW5lZCAmJiBhcHAucHJvZmlsZS5zdWJwcm9maWxlSWQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnByb2ZpbGVJZCA9IGFwcC5wcm9maWxlLnN1YnByb2ZpbGVJZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuX2lkID0gZ2VuZXJhdGVVVUlEKCk7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmNvbW11bml0eUlkID0gYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCk7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LmFwcGxpY2F0aW9uSWQgPSBhcHAuU0NPUEUuYXBwbGljYXRpb25JZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY3JlYXRlZERhdGVUaW1lID0gbW9tZW50KCkuZm9ybWF0KCk7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnNlbmRlclVzZXJJZCA9IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcklkO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5wcm9maWxlSWQgPSBfV0ZJbnN0YW5jZS5wcm9maWxlO1xuICAgICAgICAgICAgICAgIHdvcmtlck9iamVjdC5zdWJQcm9jZXNzVVVJRCA9IHV1aWQ7XG4gICAgICAgICAgICAgICAgd29ya2VyT2JqZWN0LnN1YnByb2ZpbGVJZCA9IHN1YnByb2ZpbGVJZDtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY2hhbm5lbHMucHVzaChjaGFubmVsKTtcbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuY2hhbm5lbHMucHVzaChcImNvbW11bml0eV9cIiArIGFwcC5TQ09QRS5nZXRDb21tdW5pdHlJZCgpKTtcblxuICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSB7XG5cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGFjdGlvblt3b3JrZXJBY3Rpb25dID0ge307XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdvcmtlckNvbmZpZy5pbmRpY2F0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYWJlbCA9IHdvcmtlckNvbmZpZy5pbmRpY2F0b3JzW2ldLmxhYmVsO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2V0SWQgPSB3b3JrZXJDb25maWcuaW5kaWNhdG9yc1tpXS5zZXRJZDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB3b3JrZXJDb25maWcuaW5kaWNhdG9yc1tpXS5jb250ZXh0O1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IFwiXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRleHQgPT0gJ3N1YlByb2Nlc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZCA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXS9pbmRpY2F0b3JzW2lkIGVxICdcIiArIHNldElkICsgXCInXS9pbnN0YW5jZXNbMV0vdXVpZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQgPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbY2F0ZWdvcnkvdGVybSBlcSAnXCIgKyBzZXRJZCArIFwiJ10vX2lkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uW3dvcmtlckFjdGlvbl1bbGFiZWxdID0gaWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWN0aW9uW3dvcmtlckFjdGlvbl0ucHJvZmlsSWQgPSBfV0ZJbnN0YW5jZS5wcm9maWxlO1xuXG4gICAgICAgICAgICAgICAgaWYgKHdvcmtlckNvbmZpZy5maXhlZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3b3JrZXJDb25maWcuZml4ZWQubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IHdvcmtlckNvbmZpZy5maXhlZFtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBPYmplY3Qua2V5cyhvYmopWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uW3dvcmtlckFjdGlvbl1ba2V5XSA9IG9ialtrZXldXG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAod29ya2VyQ29uZmlnLmRhdGFGaWVsZHMgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvblt3b3JrZXJBY3Rpb25dLmRhdGFGaWVsZHMgPSB3b3JrZXJDb25maWcuZGF0YUZpZWxkcztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB3b3JrZXJPYmplY3QuYWN0aW9uID0gYWN0aW9uO1xuICAgICAgICAgICAgICAgIHdvcmtlci5zZW5kKHdvcmtlck9iamVjdCkudGhlbihmdW5jdGlvbih3b3JrZXJTdWNjZXNzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgd29ya2VyLnNldFdvcmtlckluZm9JblN1YnByb2Nlc3Mod29ya2VyT2JqZWN0LCBfV0ZJbnN0YW5jZSwgdXVpZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3Mod29ya2VyQWN0aW9uICsgJyB3b3JrZXIgcHJvY2Vzc2VkIHN1Y2Nlc3NmdWxseS4nLCB3b3JrZXJTdWNjZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcblxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHdvcmtlckZhaWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHdvcmtlckZhaWwpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG5cblxuXG5cblxuXG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sXG5cbiAgICB9XG5cbn0pKCk7XG5cbnZhciB1c2VyID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgcmV0dXJuIHtcblxuICAgICAgICBhZGRUb1JvbGU6IGZ1bmN0aW9uKGFkZFRvUm9sZSwgdXVpZCwgX1dGSW5zdGFuY2UpIHtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIGhlbHBlci5nZXROb2RlVmFsdWUoYWRkVG9Sb2xlLnVzZXJOYW1lLCBfV0ZJbnN0YW5jZSwgdXVpZCkudGhlbihmdW5jdGlvbih1c2VyRGlzcGxheU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVscGVyLmdldE5vZGVWYWx1ZShhZGRUb1JvbGUudXNlcklkLCBfV0ZJbnN0YW5jZSwgdXVpZCkudGhlbihmdW5jdGlvbih1c2VySWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250ZXh0VHlwZSA9IEpTT04ueHBhdGgoXCIvcm9sZXNbaWQgZXEgJ1wiICsgYWRkVG9Sb2xlLnJvbGVJZCArIFwiJ10vdHlwZVwiLCBhcHAuU0NPUEUuQVBQX0NPTkZJRywge30pWzBdXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0VHlwZSA9PSAnaW5zdGFuY2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZXNNYW5hZ2VyLmRvVXNlclJlZ2lzdHJhdGlvbih1c2VySWQsIHVzZXJEaXNwbGF5TmFtZSwgYWRkVG9Sb2xlLnJvbGVJZCwgJ2luc3RhbmNlJykudGhlbihmdW5jdGlvbihzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdSb2xlIGFzc2lnbmVkIHRvIHVzZXIgaW4gY29udGV4dCBpbnN0YW5jZScsIHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncm9sZXNNYW5hZ2VyLSBpbnN0YW5jZSBmYWlsJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoJ3JvbGUgdXBkYXRlIGZhaWxlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0VHlwZSA9PSAnc3VicHJvZmlsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlc01hbmFnZXIuZG9Vc2VyUmVnaXN0cmF0aW9uX25vZGUodXNlcklkLCB1c2VyRGlzcGxheU5hbWUsIGFkZFRvUm9sZS5yb2xlSWQsICdzdWJwcm9maWxlJykudGhlbihmdW5jdGlvbihzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdSb2xlIGFzc2lnbmVkIHRvIHVzZXIgaW4gY29udGV4dCBzdWJwcm9maWxlJywgcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyb2xlc01hbmFnZXItIHN1YnByb2ZpbGUgZmFpbCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCdyb2xlIHVwZGF0ZSBmYWlsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udGV4dFR5cGUgPT0gJ2Fkb3B0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGVzTWFuYWdlci5kb1VzZXJSZWdpc3RyYXRpb25fYWRvcHRpb24odXNlcklkLCB1c2VyRGlzcGxheU5hbWUsIGFkZFRvUm9sZS5yb2xlSWQsICdhZG9wdGlvbicpLnRoZW4oZnVuY3Rpb24ocykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcygnUm9sZSBhc3NpZ25lZCB0byB1c2VyIGluIGNvbnRleHQgYWRvcHRpb24nLCBzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JvbGVzTWFuYWdlci0gYWRvcHRpb24gZmFpbCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCdyb2xlIHVwZGF0ZSBmYWlsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1JvbGUgbm90IGZvdW5kIGluIGFueSBjb250ZXh0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCdSb2xlIG5vdCBmb3VuZCBpbiBhbnkgY29udGV4dCcpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIGNvbW11bml0eTogY29tbXVuaXR5LFxuICAgIGFwcGxpY2F0aW9uOiBhcHBsaWNhdGlvbixcbiAgICBwZXJmb3JtYW5jZTogcGVyZm9ybWFuY2UsXG4gICAgd29ya2VyOiB3b3JrZXIsXG4gICAgc2RvOiBzZG8sXG4gICAgdGF4b25vbXk6IHRheG9ub215LFxuICAgIHN1YlByb2Nlc3NJbnN0YW5jZTogc3ViUHJvY2Vzc0luc3RhbmNlLFxuICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgIG5vdGlmaWNhdGlvbjogbm90aWZpY2F0aW9uLFxuICAgIHJlcG9ydDogcmVwb3J0LFxuICAgIHBhcnRpY2lwYW50czogcGFydGljaXBhbnRzLFxuICAgIHVzZXI6IHVzZXJcbn0iLCIndXNlIHN0cmljdCc7XG5cbi8vdmFyIGdhdGVrZWVwZXIgPSByZXF1aXJlKCcuLi9ib3dlcl9jb21wb25lbnRzL2dhdGVrZWVwZXInKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbGl0eScpO1xuXG4vLyB2YXIgdXVpZCA9IHJlcXVpcmUoJ25vZGUtdXVpZCcpO1xuXG52YXIgZ2F0ZWtlZXBlciA9IG5ldyBHSygpO1xuXG4vKipcbiAqIEZvcm0gTW9kdWxlXG4gKlxuICogQG1vZHVsZSBsaWIvZm9ybVxuICogQGF1dGhvciBCcmVudCBHb3Jkb25cbiAqIEB2ZXJzaW9uIDIuMC4wXG4gKiBAZGVzY3JpcHRpb24gdGVzdCBkZXNjcmlwdGlvblxuICogQGNvcHlyaWdodCBLd2FudHUgTHRkIFJTQSAyMDA5LTIwMTUuXG4gKlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZShhcmdzKSB7XG5cbiAgICB2YXIgcHJvY2Vzc0lkID0gYXJnc1swXSB8fCAnJztcblxuICAgIHZhciBzdWJQcm9jZXNzID0gYXJnc1sxXSB8fCB7fTtcblxuICAgIHZhciBzdGVwID0gYXJnc1syXSB8fCB7fTtcblxuICAgIHZhciBhY3Rpb24gPSBhcmdzWzNdIHx8IHt9O1xuXG4gICAgdmFyIF9XRkluc3RhbmNlID0gYXJnc1s2XSB8fCB7fTtcblxuICAgIHZhciBkYXRhID0gYXJnc1s2XSB8fCB7fTtcblxuICAgIHZhciBpbmRpY2F0b3JzID0gc3ViUHJvY2Vzcy5pbmRpY2F0b3JzIHx8IFtdO1xuXG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgdmFyIGluZGljYXRvclR5cGUgPSBhY3Rpb24uX3R5cGU7XG5cbiAgICB2YXIgcHJvY2Vzc1NlcSA9IGFyZ3NbNF0gfHwgJyc7XG5cbiAgICB2YXIgc3ViUHJvY2Vzc1NlcSA9IGFyZ3NbNV0gfHwgJyc7XG5cbiAgICB2YXIgY3JlYXRlVHlwZSA9IGFyZ3NbN10gfHwgJyc7XG5cbiAgICB2YXIgc3ViUHJvY2Vzc0lkID0gc3ViUHJvY2Vzcy5faWQ7XG5cbiAgICB2YXIgdXVpZCA9IGFyZ3NbOF0gfHwgJyc7XG5cbiAgICB2YXIgYmFzZVVVSUQgPSBhcmdzWzldIHx8ICcnO1xuXG4gICAgdmFyIHByb2ZpbGUgPSBfV0ZJbnN0YW5jZS5wcm9maWxlO1xuXG4gICAgdmFyIGlucHV0RGF0YSA9IGFyZ3NbMTBdIHx8IHt9O1xuXG4gICAgdmFyIGZvcm1DcmVhdGVUeXBlID0gYWN0aW9uLm1ldGhvZC5mb3JtLmNyZWF0ZTtcblxuICAgIHZhciBmb3JtVHlwZSA9IGFjdGlvbi5tZXRob2QuZm9ybS50eXBlO1xuXG4gICAgdmFyIHBhcmFtT2JqZWN0ID0ge1xuXG4gICAgICAgIFwiZm9ybUNyZWF0ZVR5cGVcIjogZm9ybUNyZWF0ZVR5cGUsXG4gICAgICAgIFwiZm9ybVR5cGVcIjogZm9ybVR5cGVcblxuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciB0b1Byb2Nlc3MgPSBpbmRpY2F0b3JzLmxlbmd0aDtcbiAgICAgICAgdmFyIGJyb2tlID0gZmFsc2U7XG5cbiAgICAgICAgdmFyIHJlc29sdmVDYWxsZXIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGlmIChicm9rZSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdGb3JtIGNyZWF0ZSBpbmRpY2F0b3IgcGVyc2lzdCBzdWNjZXNzLicsIF9XRkluc3RhbmNlLmluZGljYXRvcnMpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgdmFyIHRvQWRkUHJvY2VzcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX1dGSW5zdGFuY2UuaW5zdGFuY2UucHJvY2Vzc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfV0ZJbnN0YW5jZS5pbnN0YW5jZS5wcm9jZXNzZXNbaV0uc3ViUHJvY2Vzc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvQWRkUHJvY2Vzcy5wdXNoKF9XRkluc3RhbmNlLmluc3RhbmNlLnByb2Nlc3Nlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9XRkluc3RhbmNlLmluc3RhbmNlLnByb2Nlc3NlcyA9IFtdO1xuICAgICAgICAgICAgICAgIF9XRkluc3RhbmNlLmluc3RhbmNlLnByb2Nlc3NlcyA9IHRvQWRkUHJvY2VzcztcblxuXG4gICAgICAgICAgICAgICAgdmFyIGludm9sdmVkU3ViUHJvY2Vzc2VzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHN1YlByb2Nlc3NPYmplY3QgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ11cIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICB2YXIgc3ViUHJvY2Vzc0lkID0gc3ViUHJvY2Vzc09iamVjdC5pZDtcbiAgICAgICAgICAgICAgICB2YXIgc3ViUHJvY2Vzc0NvbmZpZ09iamVjdCA9IEpTT04ueHBhdGgoXCIvY29uZmlnL3Byb2Nlc3Nlcy9zdWJQcm9jZXNzZXNbX2lkIGVxICdcIiArIHN1YlByb2Nlc3NJZCArIFwiJ11cIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICBpZiAoc3ViUHJvY2Vzc0NvbmZpZ09iamVjdC5pbnN0YW5jZVR5cGUubmV3U2VxdWVuY2UgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJQcm9jZXNzQ29uZmlnT2JqZWN0LmluZGljYXRvcnMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGljYXRvciA9IHN1YlByb2Nlc3NDb25maWdPYmplY3QuaW5kaWNhdG9yc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZXRJZCA9IGluZGljYXRvci5faWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kaWNhdG9yVVVJRCA9IEpTT04ueHBhdGgoXCJkaXN0aW5jdC12YWx1ZXMoL3N1YnByb2Nlc3Nlc1tncm91cEtleSA9ICdcIiArIHN1YlByb2Nlc3NPYmplY3QuZ3JvdXBLZXkgKyBcIiddL2luZGljYXRvcnNbaWQgPSAnXCIgKyBzZXRJZCArIFwiJ10vaW5zdGFuY2VzL3V1aWQpXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXMvaW5kaWNhdG9yc1tpZCBlcSAnXCIgKyBzZXRJZCArIFwiJ10vaW5zdGFuY2VzL3V1aWRcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGljYXRvclVVSUQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGljYXRvck9iamVjdCA9IEpTT04ueHBhdGgoXCIvaW5kaWNhdG9yc1tfaWQgZXEgJ1wiICsgaW5kaWNhdG9yVVVJRCArIFwiJ11cIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kaWNhdG9yT2JqZWN0ICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRpY2F0b3JPYmplY3QubW9kZWwucGVuZGluZyA9IGluZGljYXRvck9iamVjdC5tb2RlbC5hcHByb3ZlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kTGlzdE5hbWVzID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3ViUHJvY2Vzc0NvbmZpZ09iamVjdC5pbmRpY2F0b3JzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kTGlzdE5hbWVzID0gaW5kTGlzdE5hbWVzICsgXCInXCIgKyBzdWJQcm9jZXNzQ29uZmlnT2JqZWN0LmluZGljYXRvcnNbaV0uX2lkICsgXCInLFwiXG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpbmRMaXN0TmFtZXMgPSBpbmRMaXN0TmFtZXMgKyBcIidcIiArIHN1YlByb2Nlc3NDb25maWdPYmplY3QuaW5kaWNhdG9yc1tzdWJQcm9jZXNzQ29uZmlnT2JqZWN0LmluZGljYXRvcnMubGVuZ3RoIC0gMV0uX2lkICsgXCInXCJcbiAgICAgICAgICAgICAgICAgICAgaW52b2x2ZWRTdWJQcm9jZXNzZXMgPSBKU09OLnhwYXRoKFwiZGlzdGluY3QtdmFsdWVzKC9pbmRpY2F0b3JzW2NhdGVnb3J5L3Rlcm0gPSAoXCIgKyBpbmRMaXN0TmFtZXMgKyBcIildL21vZGVsL2FwcHJvdmVkL3N1YlByb2Nlc3NVVUlEKVwiLCBfV0ZJbnN0YW5jZSwge30pO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBwZXJzaXN0U3ViUHJvY2VzcyA9IGZ1bmN0aW9uIChpbmRleCwgaW52b2x2ZWRTdWJQcm9jZXNzZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSBpbnZvbHZlZFN1YlByb2Nlc3Nlcy5sZW5ndGgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b0FkZFN1YlByb2Nlc3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF9XRkluc3RhbmNlLnN1YnByb2Nlc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX1dGSW5zdGFuY2Uuc3VicHJvY2Vzc2VzW2ldLmluZGljYXRvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9BZGRTdWJQcm9jZXNzLnB1c2goX1dGSW5zdGFuY2Uuc3VicHJvY2Vzc2VzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9XRkluc3RhbmNlLnN1YnByb2Nlc3NlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9XRkluc3RhbmNlLnN1YnByb2Nlc3NlcyA9IHRvQWRkU3ViUHJvY2VzcztcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZhaWx1cmUgPSB1dGlsLnN1Y2Nlc3MoJ0dhdGVrZWVwZXIgaW5pdGlhbGlzYXRpb24gZmFpbGVkICgxMDApJywge30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChmYWlsdXJlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJzaXN0RGF0YSgnaW5kaWNhdG9ycycsIF9XRkluc3RhbmNlLCBpbnZvbHZlZFN1YlByb2Nlc3Nlc1tpbmRleF0pLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyc2lzdFN1YlByb2Nlc3MoaW5kZXggKyAxLCBpbnZvbHZlZFN1YlByb2Nlc3Nlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJzaXN0U3ViUHJvY2VzcyhpbmRleCArIDEsIGludm9sdmVkU3ViUHJvY2Vzc2VzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcGVyc2lzdFN1YlByb2Nlc3MoMCwgaW52b2x2ZWRTdWJQcm9jZXNzZXMpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgdG9BZGRTdWJQcm9jZXNzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX1dGSW5zdGFuY2Uuc3VicHJvY2Vzc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX1dGSW5zdGFuY2Uuc3VicHJvY2Vzc2VzW2ldLmluZGljYXRvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvQWRkU3ViUHJvY2Vzcy5wdXNoKF9XRkluc3RhbmNlLnN1YnByb2Nlc3Nlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfV0ZJbnN0YW5jZS5zdWJwcm9jZXNzZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgX1dGSW5zdGFuY2Uuc3VicHJvY2Vzc2VzID0gdG9BZGRTdWJQcm9jZXNzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmFpbHVyZSA9IHV0aWwuc3VjY2VzcygnR2F0ZWtlZXBlciBpbml0aWFsaXNhdGlvbiBmYWlsZWQgKDEwMCknLCB7fSk7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChmYWlsdXJlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3VicHJvY2Vzc1R5cGUgPSBKU09OLnhwYXRoKFwiL2NvbmZpZy9wcm9jZXNzZXMvc3ViUHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBzdWJQcm9jZXNzSWQgKyBcIiddL3R5cGVcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcblxuICAgICAgICB2YXIgZm9ybUNyZWF0ZUZuID0gZnVuY3Rpb24gKGluZGljYXRvclR5cGUsIGluZGljYXRvcklkLCB2YWxpZERhdGUsIGluc3RhbnRpYXRlU291cmNlKSB7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgICAgICBnYXRla2VlcGVyLmluc3RhbnRpYXRlKGJhc2VVVUlELCBpbmRpY2F0b3JUeXBlLCBpbmRpY2F0b3JJZCwgX1dGSW5zdGFuY2UucHJvZmlsZSwgdmFsaWREYXRlLCBzdWJQcm9jZXNzSWQsIHN1YnByb2Nlc3NUeXBlKS50aGVuKGZ1bmN0aW9uIChkb2NBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGluZGljYXRvciB3b3JrZmxvdyBwcm9jZXNzZXMgc2VjdGlvblxuXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZG9jQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYmplY3QgPSBkb2NBcnJheVtpXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IF9XRkluc3RhbmNlLmluZGljYXRvcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGljYXRvciA9IF9XRkluc3RhbmNlLmluZGljYXRvcnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRpY2F0b3IuX2lkID09IG9iamVjdC5tb2RlbC5faWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfV0ZJbnN0YW5jZS5pbmRpY2F0b3JzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9XRkluc3RhbmNlLmluZGljYXRvcnMucHVzaChvYmplY3QubW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb2JqZWN0Lm1vZGVsLl9pZC5lbmRzV2l0aCgnOmFwcHJvdmVkJykgJiYgIW9iamVjdC5tb2RlbC5faWQuZW5kc1dpdGgoJzpyZWplY3RlZCcpKSB7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5tb2RlbC5tb2RlbC5wZW5kaW5nLnZhbGlkRGF0ZSA9IHZhbGlkRGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QubW9kZWwubW9kZWwucGVuZGluZy5zdWJQcm9jZXNzVVVJRCA9IHV1aWQ7XG5cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdvcmtmbG93T2JqID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IF9XRkluc3RhbmNlLmNvbmZpZy5faWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW5zdGFuY2VcIjogX1dGSW5zdGFuY2UuaW5zdGFuY2UuX2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInByb2Nlc3Nlc1wiOiBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBwcm9jZXNzSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN1YlByb2Nlc3NJZFwiOiBzdWJQcm9jZXNzLl9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3ViUHJvY2Vzc1VVSURcIjogdXVpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3RlcFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBzdGVwLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2VxXCI6IHN0ZXAuc2VxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3RhcnREYXRlXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdGF0dXNcIjogc3RlcC5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXNzYWdlXCI6IHN0ZXAubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFzc2lnbmVkVG9cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVzZXJJZFwiOiBzdGVwLmFzc2lnbmVkVG8udXNlcklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogc3RlcC5hc3NpZ25lZFRvLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29tbWVudFwiOiBzdGVwLmNvbW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb21wbGV0ZVwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImVuZERhdGVcIjogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iamVjdC5tb2RlbC5tb2RlbC5wZW5kaW5nLnNlcSA9PSAxICYmIGFjdGlvbi5zZXRXb3JrZmxvd0xhYmVsSW5UaXRsZSAhPSB1bmRlZmluZWQgJiYgYWN0aW9uLnNldFdvcmtmbG93TGFiZWxJblRpdGxlICE9ICcnICYmIGFjdGlvbi5zZXRXb3JrZmxvd0xhYmVsSW5UaXRsZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5tb2RlbC50aXRsZSA9IGlucHV0RGF0YS5sYWJlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLnNldERyYWZ0ICE9IHVuZGVmaW5lZCAmJiBhY3Rpb24uc2V0RHJhZnQgIT0gJycgJiYgYWN0aW9uLnNldERyYWZ0ID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0Lm1vZGVsLmNvbnRyb2wuZHJhZnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5tb2RlbC53b3JrZmxvd3MucHVzaCh3b3JrZmxvd09iaik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1haW5JZCA9IG9iamVjdC5tb2RlbC5faWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGVyc2lzdCB2aWEgZ2sgc28gdGhhdCBpdCBpcyBzYXZlIGluIGNvdWNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2F0ZWtlZXBlci5wZXJzaXN0KGRvY0FycmF5KS50aGVuKGZ1bmN0aW9uIChzYXZlZEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdXNpbmcgc2FtZSBpZCBjYWxsIGluaXRpYWxpc2VEYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY2FsbCBjb2RlIHRvIHNldCB0byBzZXRJbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW8uZ2V0KG1haW5JZCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kaWNhdG9yTW9kZWwgPSBrby5tYXBwaW5nLmZyb21KUyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkZWZhdWx0TW9kZWxcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNldElkXCI6IGluZGljYXRvcklkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZXF1ZW5jZSA9IGRhdGEubW9kZWwucGVuZGluZy5zZXE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYXRla2VlcGVyLmluc3RhbnRpYXRlRGF0YShtYWluSWQsIGluc3RhbnRpYXRlU291cmNlLCBpbmRpY2F0b3JNb2RlbCwgZGF0YS5tb2RlbC5wZW5kaW5nLnNlcSwgcGFyYW1PYmplY3QpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVswXS5zdGF0dXMgPT0gXCIyMDBcIikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBfV0ZJbnN0YW5jZS5pbmRpY2F0b3JzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGljYXRvciA9IF9XRkluc3RhbmNlLmluZGljYXRvcnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGljYXRvci5faWQgPT0gZGF0YVswXS5tb2RlbC5faWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9XRkluc3RhbmNlLmluZGljYXRvcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfV0ZJbnN0YW5jZS5pbmRpY2F0b3JzLnB1c2goZGF0YVswXS5tb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24uc2V0V29ya2Zsb3dMYWJlbEluRmllbGQgIT0gdW5kZWZpbmVkICYmIGFjdGlvbi5zZXRXb3JrZmxvd0xhYmVsSW5GaWVsZCAhPSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhc3NpZ25tZW50U2V0SWQgPSBhY3Rpb24uc2V0V29ya2Zsb3dMYWJlbEluRmllbGQuc3BsaXQoXCIuXCIpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhc3NpZ25tZW50U2V0SWQgPT0gaW5kaWNhdG9ySWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0eHQgPSBpbnB1dERhdGEubGFiZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcXVvdGUgPSB0eHQucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF0aCA9IFwiZGF0YVswXS5tb2RlbC5tb2RlbC5wZW5kaW5nLmRhdGEuXCIgKyBhY3Rpb24uc2V0V29ya2Zsb3dMYWJlbEluRmllbGQgKyBcIj0nXCIgKyBzcXVvdGUgKyBcIidcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZhbChwYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYXRla2VlcGVyLnBlcnNpc3QoZGF0YSkudGhlbihmdW5jdGlvbiAoc2F2ZWRBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFvLmdldChtYWluSWQpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX1dGSW5zdGFuY2UuaW5kaWNhdG9ycy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfV0ZJbnN0YW5jZS5pbmRpY2F0b3JzLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvUHJvY2Vzcy0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9Qcm9jZXNzID09IDApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyc2lzdERhdGEoJ2luZGljYXRvcnMnLCBfV0ZJbnN0YW5jZSwgdXVpZCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ0Zvcm0gY3JlYXRlIGluZGljYXRvciBwZXJzaXN0IHN1Y2Nlc3MuJywgX1dGSW5zdGFuY2UuaW5kaWNhdG9ycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUNhbGxlcigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZhaWx1cmUgPSB1dGlsLnN1Y2Nlc3MoJ0Zvcm0gY3JlYXRlIGluZGljYXRvciBwZXJzaXN0IGZhaWxlZC4nLCB7fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJva2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVDYWxsZXIoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcblxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHt9KTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBfV0ZJbnN0YW5jZS5pbmRpY2F0b3JzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGljYXRvciA9IF9XRkluc3RhbmNlLmluZGljYXRvcnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGljYXRvci5faWQgPT0gZGF0YS5faWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGN1cnJlbnQgaXRlbSBmcm9tIHRoZSBhcnJheSBhbmQgYWRkIHRoZSB1cGRhdGVkIHByb2Nlc3NNb2RlbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9XRkluc3RhbmNlLmluZGljYXRvcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfV0ZJbnN0YW5jZS5pbmRpY2F0b3JzLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBfV0ZJbnN0YW5jZS5pbmRpY2F0b3JzLmxlbmd0aDtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9Qcm9jZXNzLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvUHJvY2VzcyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlcnNpc3REYXRhKCdpbmRpY2F0b3JzJywgX1dGSW5zdGFuY2UsIHV1aWQpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ0Zvcm0gY3JlYXRlIGluZGljYXRvciBwZXJzaXN0IHN1Y2Nlc3MuJywgX1dGSW5zdGFuY2UuaW5kaWNhdG9ycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlQ2FsbGVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmFpbHVyZSA9IHV0aWwuc3VjY2VzcygnRm9ybSBjcmVhdGUgaW5kaWNhdG9yIHBlcnNpc3QgZmFpbGVkLicsIHt9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyb2tlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVDYWxsZXIoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe30pO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfV0ZJbnN0YW5jZS5pbmRpY2F0b3JzLnB1c2goZGF0YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvUHJvY2Vzcy0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvUHJvY2VzcyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyc2lzdERhdGEoJ2luZGljYXRvcnMnLCBfV0ZJbnN0YW5jZSwgdXVpZCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdGb3JtIGNyZWF0ZSBpbmRpY2F0b3IgcGVyc2lzdCBzdWNjZXNzLicsIF9XRkluc3RhbmNlLmluZGljYXRvcnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlQ2FsbGVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmFpbHVyZSA9IHV0aWwuc3VjY2VzcygnRm9ybSBjcmVhdGUgaW5kaWNhdG9yIHBlcnNpc3QgZmFpbGVkLicsIHt9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJva2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlQ2FsbGVyKCk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe30pO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmYWlsdXJlID0gdXRpbC5zdWNjZXNzKCcxIEdhdGVrZWVwZXIgaW5pdGlhbGlzYXRpb24gZmFpbGVkIHdpdGggaW5pdGlhbGlzZURhdGEgbWVzc2FnZSAnLCB7fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJva2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvUHJvY2Vzcy0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b1Byb2Nlc3MgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlQ2FsbGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7fSk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZhaWx1cmUgPSB1dGlsLnN1Y2Nlc3MoJzIgR2F0ZWtlZXBlciBpbml0aWFsaXNhdGlvbiBmYWlsZWQgd2l0aCBpbml0aWFsaXNlRGF0YSBtZXNzYWdlICcsIHt9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyb2tlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvUHJvY2Vzcy0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvUHJvY2VzcyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUNhbGxlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHt9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmYWlsdXJlID0gdXRpbC5zdWNjZXNzKCczIEdhdGVrZWVwZXIgaW5pdGlhbGlzYXRpb24gZmFpbGVkIHdpdGggaW5pdGlhbGlzZURhdGEgbWVzc2FnZSAnLCB7fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyb2tlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9Qcm9jZXNzLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b1Byb2Nlc3MgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUNhbGxlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7fSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmFpbHVyZSA9IHV0aWwuc3VjY2VzcygnNCBHYXRla2VlcGVyIGluaXRpYWxpc2F0aW9uIGZhaWxlZCB3aXRoIGluaXRpYWxpc2VEYXRhIG1lc3NhZ2UgJywge30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyb2tlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b1Byb2Nlc3MtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9Qcm9jZXNzID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUNhbGxlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe30pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmFpbHVyZSA9IHV0aWwuc3VjY2VzcygnNSBHYXRla2VlcGVyIGluaXRpYWxpc2F0aW9uIGZhaWxlZCB3aXRoIGluaXRpYWxpc2VEYXRhIG1lc3NhZ2UgJywge30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJva2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9Qcm9jZXNzLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9Qcm9jZXNzID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlQ2FsbGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe30pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmYWlsdXJlID0gdXRpbC5zdWNjZXNzKCc2IEdhdGVrZWVwZXIgaW5pdGlhbGlzYXRpb24gZmFpbGVkIHdpdGggaW5pdGlhbGlzZURhdGEgbWVzc2FnZSAnLCB7fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyb2tlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9Qcm9jZXNzLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b1Byb2Nlc3MgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUNhbGxlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7fSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJva2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0b1Byb2Nlc3MtLTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvUHJvY2VzcyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlQ2FsbGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHt9KTtcblxuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0pO1xuXG5cblxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBpbnN0YW50aWF0ZVNvdXJjZSA9IEZST01fREVGSU5JVElPTjtcblxuICAgICAgICB2YXIgbG9vcEZ1bmN0aW9uID0gZnVuY3Rpb24gKGluZGljYXRvcnMsIGNvdW50ZXIpIHtcblxuICAgICAgICAgICAgaWYgKGluZGljYXRvcnMubGVuZ3RoID09IDApIHtcblxuICAgICAgICAgICAgICAgIHRvUHJvY2Vzcy0tO1xuICAgICAgICAgICAgICAgIGlmICh0b1Byb2Nlc3MgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlQ2FsbGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb3VudGVyIDwgaW5kaWNhdG9ycy5sZW5ndGgpIHtcblxuICAgICAgICAgICAgICAgIHZhciBpbmRpY2F0b3JJZCA9IGluZGljYXRvcnNbY291bnRlcl0uX2lkO1xuICAgICAgICAgICAgICAgIHZhciBpbmRpY2F0b3JOYW1lID0gdXRpbC5nZXROYW1lKGluZGljYXRvcnNbY291bnRlcl0ubmFtZSwgJ2VuJyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc291cmNlID0gaW5kaWNhdG9yc1tjb3VudGVyXS5pbml0aWF0ZURhdGE7XG5cbiAgICAgICAgICAgICAgICB2YXIgaW5pdFR5cGUgPSAnJztcbiAgICAgICAgICAgICAgICBpZiAoc3ViUHJvY2Vzcy5pbnN0YW5jZVR5cGUubmV3U2VxdWVuY2UgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXRUeXBlID0gSU5TVEFOQ0VfVFlQRV9ORVdfU0VRO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ViUHJvY2Vzcy5pbnN0YW5jZVR5cGUubmV3SW5zdGFuY2UgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXRUeXBlID0gSU5TVEFOQ0VfVFlQRV9ORVdfSU5TO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBpbmRpY2F0b3JEb2MgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiAoYmFzZVVVSUQgIT0gdW5kZWZpbmVkICYmIGJhc2VVVUlEICE9ICcnICYmIGJhc2VVVUlELmxlbmd0aCA+IDApIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3AgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgYmFzZVVVSUQgKyBcIiddXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YlByb2Nlc3MucGVyaW9kVHlwZS5wZXJpb2RpYyA9PSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJhc2VVVUlEICE9IHV1aWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcC5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cblxuXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbnRpYXRlU291cmNlID0gRlJPTV9BVVRIT1JJU0VEO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmRpbmFsaXR5ID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW3NldElkIGVxICdcIiArIGluZGljYXRvcklkICsgXCInXS9jYXJkaW5hbGl0eVwiLCBhcHAuU0NPUEUuQVBQX0NPTkZJRywge30pWzBdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbml0VHlwZSA9PSBJTlNUQU5DRV9UWVBFX05FV19JTlMpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhcmRpbmFsaXR5ID09IElORElDQVRPUl9DQVJESU5BTElUWV9TSU5HTEUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleGlzdGluZ1VVSUQgPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbY2F0ZWdvcnkvdGVybSBlcSAnXCIgKyBpbmRpY2F0b3JJZCArIFwiJ10vX2lkXCIsIF9XRkluc3RhbmNlLCB7fSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdVVUlELmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFudGlhdGVTb3VyY2UgPSBGUk9NX0FVVEhPUklTRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFudGlhdGVTb3VyY2UgPSBGUk9NX0RFRklOSVRJT047XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW50aWF0ZVNvdXJjZSA9IEZST01fREVGSU5JVElPTjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FyZGluYWxpdHkgPT0gSU5ESUNBVE9SX0NBUkRJTkFMSVRZX1NJTkdMRSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4aXN0aW5nVVVJRCA9IEpTT04ueHBhdGgoXCIvaW5kaWNhdG9yc1tjYXRlZ29yeS90ZXJtIGVxICdcIiArIGluZGljYXRvcklkICsgXCInXS9faWRcIiwgYXBwLlNDT1BFLndvcmtmbG93LCB7fSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdVVUlELmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFudGlhdGVTb3VyY2UgPSBGUk9NX0FVVEhPUklTRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFudGlhdGVTb3VyY2UgPSBGUk9NX0RFRklOSVRJT047XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF0aCA9IFwiL2luZGljYXRvcnNbY2F0ZWdvcnkvdGVybSBlcSAnXCIgKyBpbmRpY2F0b3JJZCArIFwiJyBhbmQgaWQgPSAvc3VicHJvY2Vzc2VzW2lkID0gJ1wiICsgc3ViUHJvY2Vzc0lkICsgXCInXS9pbmRpY2F0b3JzL2luc3RhbmNlcy91dWlkXS9faWRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydCA9IGxpYnJhcnkuZ2V0U3VicHJvZmlsZVN1YnByb2Nlc3NJZHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VicHJvY2Vzc1R5cGUgPT0gUFJPQ0VTU19UWVBFX1NVQlBST0ZJTEUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCA9IFwiL2luZGljYXRvcnNbY2F0ZWdvcnkvdGVybSBlcSAnXCIgKyBpbmRpY2F0b3JJZCArIFwiJyBhbmQgaWQgPSAvc3VicHJvY2Vzc2VzW2lkID0gJ1wiICsgc3ViUHJvY2Vzc0lkICsgXCInIGFuZCBpZCA9IFwiICsgcGFydCArIFwiXS9pbmRpY2F0b3JzL2luc3RhbmNlcy91dWlkXS9faWRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4aXN0aW5nVVVJRCA9IEpTT04ueHBhdGgocGF0aCwgX1dGSW5zdGFuY2UsIHt9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ1VVSUQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW50aWF0ZVNvdXJjZSA9IEZST01fQVVUSE9SSVNFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW50aWF0ZVNvdXJjZSA9IEZST01fREVGSU5JVElPTjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3JtQ3JlYXRlRm4oaW5pdFR5cGUsIGluZGljYXRvcklkLCBpbnB1dERhdGEudmFsaWREYXRlLCBpbnN0YW50aWF0ZVNvdXJjZSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvb3BGdW5jdGlvbihpbmRpY2F0b3JzLCAoY291bnRlciArIDEpKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYnJva2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9Qcm9jZXNzLS07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9Qcm9jZXNzID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlQ2FsbGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgbG9vcEZ1bmN0aW9uKGluZGljYXRvcnMsIDApO1xuXG4gICAgfSk7XG59O1xuXG5mdW5jdGlvbiBzZXRJbnN0YW5jZVRpdGxlKGFyZ3MpIHtcblxuICAgIHZhciBfV0ZJbnN0YW5jZSA9IGFyZ3NbMF0gfHwge307XG5cbiAgICB2YXIgdXVpZCA9IGFyZ3NbMl0gfHwgJyc7XG4gICAgdmFyIGRhdGEgPSBhcmdzWzRdIHx8IHt9O1xuXG4gICAgdmFyIHRpdGxlID0gZGF0YS5sYWJlbDtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgdmFyIHN1YlByb2Nlc3NJbnN0YW5jZSA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICB2YXIgaW5kaWNhdG9ySW5zdGFuY2VzID0gc3ViUHJvY2Vzc0luc3RhbmNlLmluZGljYXRvcnM7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmRpY2F0b3JJbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpbmRpY2F0b3JVVUlEID0gaW5kaWNhdG9ySW5zdGFuY2VzW2ldLmluc3RhbmNlc1swXS51dWlkO1xuICAgICAgICAgICAgdmFyIGluZGljYXRvckluc3RhbmNlID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW19pZCBlcSAnXCIgKyBpbmRpY2F0b3JVVUlEICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgaW5kaWNhdG9ySW5zdGFuY2UudGl0bGUgPSBpbmRpY2F0b3JJbnN0YW5jZXNbaV0uaWQgKyAnICcgKyB0aXRsZTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXNvbHZlKFwiU2V0IFRpdGxlIFN1Y2Nlc3NcIiwgaW5kaWNhdG9ySW5zdGFuY2VzKTtcblxuICAgIH0pO1xuXG59O1xuXG5mdW5jdGlvbiBkZWxldGVQcm9maWxlKGFyZ3MpIHtcblxuICAgIHZhciBfV0ZJbnN0YW5jZSA9IGFyZ3NbMF0gfHwge307XG5cbiAgICB2YXIgcHJvZmlsZUlkID0gX1dGSW5zdGFuY2UucHJvZmlsZTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgdmFyIHN1YnByb2ZpbGVJZCA9IFwiXCI7XG4gICAgICAgIGlmIChhcHAucHJvZmlsZSAhPSB1bmRlZmluZWQgJiYgYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3VicHJvZmlsZUlkID0gYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHdvcmtlck9iamVjdCA9IHtcbiAgICAgICAgICAgIFwic291cmNlXCI6IFwicmVtb3RlXCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJ3b3JrZXJPYmplY3RcIixcbiAgICAgICAgICAgIFwiX2lkXCI6IGdlbmVyYXRlVVVJRCgpLFxuICAgICAgICAgICAgXCJjaGFubmVsc1wiOiBbXCJkZWxldGVQcm9maWxlXCIsIFwiY29tbXVuaXR5X1wiICsgYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCksIFwid29ya2VyT2JqZWN0XCJdLFxuICAgICAgICAgICAgXCJjb21tdW5pdHlJZFwiOiBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKSxcbiAgICAgICAgICAgIFwiYXBwbGljYXRpb25JZFwiOiBhcHAuU0NPUEUuYXBwbGljYXRpb25JZCxcbiAgICAgICAgICAgIFwicHJvZmlsZUlkXCI6IF9XRkluc3RhbmNlLnByb2ZpbGUsXG4gICAgICAgICAgICBcIm1lc3NhZ2VcIjogXCJcIixcbiAgICAgICAgICAgIFwic3VicHJvZmlsZUlkXCI6IHN1YnByb2ZpbGVJZCxcbiAgICAgICAgICAgIFwibWVzc2FnZVR5cGVcIjogXCJpbmZvXCIsXG4gICAgICAgICAgICBcImNyZWF0ZWREYXRlVGltZVwiOiBtb21lbnQoKS5mb3JtYXQoKSxcbiAgICAgICAgICAgIFwic2VuZGVyVXNlcklkXCI6IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcklkLFxuICAgICAgICAgICAgXCJub3RpZmljYXRpb25cIjoge1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJwcm9maWxlXCI6IHtcbiAgICAgICAgICAgICAgICBcImFjdGlvblwiOiBcImRlbGV0ZVByb2ZpbGVcIixcbiAgICAgICAgICAgICAgICBcInByb2ZpbGVJZFwiOiBwcm9maWxlSWRcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2cod29ya2VyT2JqZWN0KTtcbiAgICAgICAgZGFvLnVwc2VydCh3b3JrZXJPYmplY3QpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiV29ya2VyIE9iamVjdCBzdWJtaXR0ZWQgZm9yIHByb2ZpbGUoXCIgKyBwcm9maWxlSWQgKyBcIikgZGVsZXRpb24uXCIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgcmVqZWN0KGRhdGEpO1xuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVQcm9maWxlKGFyZ3MpIHtcblxuICAgIHZhciBfV0ZJbnN0YW5jZSA9IGFyZ3NbMV0gfHwge307XG5cbiAgICB2YXIgY29tbXVuaXR5SWQgPSBfV0ZJbnN0YW5jZS5jb21tdW5pdHlJZDtcbiAgICB2YXIgcHJvZmlsZUlkID0gX1dGSW5zdGFuY2UucHJvZmlsZTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgbGlicmFyeS5jcmVhdGVQcm9maWxlRG9jdW1lbnRzKGNvbW11bml0eUlkLCBwcm9maWxlSWQpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblxuICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ0Zvcm0gY3JlYXRlZCBzdWNjZXNzZnVsbHkuJywgZGF0YSk7XG4gICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcblxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgdmFyIGZhaWx1cmUgPSB1dGlsLnN1Y2Nlc3MoJ0VSUk9SOiBQcm9maWxlIGNyZWF0aW9uIGZhaWxlZCcsIHt9KTtcbiAgICAgICAgICAgIHJlamVjdChmYWlsdXJlKTtcblxuICAgICAgICB9KTtcblxuICAgIH0pO1xufTtcblxuZnVuY3Rpb24gc2V0RHJhZnQoYXJncykge1xuXG4gICAgdmFyIF9XRkluc3RhbmNlID0gYXJnc1swXSB8fCB7fTtcblxuICAgIHZhciBjb21tdW5pdHlJZCA9IF9XRkluc3RhbmNlLmNvbW11bml0eUlkO1xuICAgIHZhciBwcm9maWxlSWQgPSBfV0ZJbnN0YW5jZS5wcm9maWxlO1xuICAgIHZhciB1dWlkID0gYXJnc1syXSB8fCAnJztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgdmFyIHN1YlByb2Nlc3NJbnN0YW5jZSA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICB2YXIgaW5kaWNhdG9ySW5zdGFuY2VzID0gc3ViUHJvY2Vzc0luc3RhbmNlLmluZGljYXRvcnM7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmRpY2F0b3JJbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpbmRpY2F0b3JVVUlEID0gaW5kaWNhdG9ySW5zdGFuY2VzW2ldLmluc3RhbmNlc1swXS51dWlkO1xuICAgICAgICAgICAgdmFyIGluZGljYXRvckluc3RhbmNlID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW19pZCBlcSAnXCIgKyBpbmRpY2F0b3JVVUlEICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgaW5kaWNhdG9ySW5zdGFuY2UuY29udHJvbC5kcmFmdCA9IHRydWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVzb2x2ZShcIlNldCBEcmFmdCBTdWNjZXNzXCIsIGluZGljYXRvckluc3RhbmNlcyk7XG5cbiAgICB9KTtcbn07XG5cbmZ1bmN0aW9uIHNldFVuRHJhZnQoYXJncykge1xuXG4gICAgdmFyIF9XRkluc3RhbmNlID0gYXJnc1swXSB8fCB7fTtcblxuICAgIHZhciBjb21tdW5pdHlJZCA9IF9XRkluc3RhbmNlLmNvbW11bml0eUlkO1xuICAgIHZhciBwcm9maWxlSWQgPSBfV0ZJbnN0YW5jZS5wcm9maWxlO1xuICAgIHZhciB1dWlkID0gYXJnc1syXSB8fCAnJztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgdmFyIHN1YlByb2Nlc3NJbnN0YW5jZSA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICB2YXIgaW5kaWNhdG9ySW5zdGFuY2VzID0gc3ViUHJvY2Vzc0luc3RhbmNlLmluZGljYXRvcnM7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmRpY2F0b3JJbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpbmRpY2F0b3JVVUlEID0gaW5kaWNhdG9ySW5zdGFuY2VzW2ldLmluc3RhbmNlc1swXS51dWlkO1xuICAgICAgICAgICAgdmFyIGluZGljYXRvckluc3RhbmNlID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW19pZCBlcSAnXCIgKyBpbmRpY2F0b3JVVUlEICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgaW5kaWNhdG9ySW5zdGFuY2UuY29udHJvbC5kcmFmdCA9IGZhbHNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlc29sdmUoXCJTZXQgRHJhZnQgU3VjY2Vzc1wiLCBpbmRpY2F0b3JJbnN0YW5jZXMpO1xuXG4gICAgfSk7XG59O1xuXG5mdW5jdGlvbiBzYXZlKGluZGljYXRvcikge1xuICAgIHZhciBjb21wbGV0ZWQgPSBbXTtcbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBjb21wbGV0ZTogdHJ1ZSxcbiAgICAgICAgZGF0YTogW11cbiAgICB9O1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ0Zvcm0gaW5kaWNhdG9yIHNldCBzYXZlZCBzdWNjZXNzZnVsbHkuJywgcmVzdWx0KTtcbiAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcbiAgICB9KTtcbn07XG5cbmZ1bmN0aW9uIHN1Ym1pdChmb3JtKSB7XG4gICAgdmFyIGNvbXBsZXRlZCA9IFtdO1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIGNvbXBsZXRlOiB0cnVlLFxuICAgICAgICBkYXRhOiBbXVxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcygnRm9ybSBzdWJtaXR0ZWQgc3VjY2Vzc2Z1bGx5LicsIHJlc3VsdCk7XG4gICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG4gICAgfSk7XG59O1xuXG5mdW5jdGlvbiBhdXRob3Jpc2UoZm9ybSkge1xuICAgIHZhciBjb21wbGV0ZWQgPSBbXTtcbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBjb21wbGV0ZTogdHJ1ZSxcbiAgICAgICAgZGF0YTogW11cbiAgICB9O1xuXG4gICAgdmFyIHByb2Nlc3NJZCA9IGZvcm1bMF0gfHwgJyc7XG5cbiAgICB2YXIgc3ViUHJvY2VzcyA9IGZvcm1bMV0gfHwge307XG5cbiAgICB2YXIgc3ViUHJvY2Vzc0lkID0gc3ViUHJvY2Vzcy5faWQ7XG5cbiAgICB2YXIgcHJvY2Vzc1NlcSA9IGZvcm1bMl0gfHwgJyc7XG5cbiAgICB2YXIgc3ViUHJvY2Vzc1NlcSA9IGZvcm1bM10gfHwgJyc7XG5cbiAgICB2YXIgX1dGSW5zdGFuY2UgPSBmb3JtWzRdIHx8IHt9O1xuXG4gICAgdmFyIHN1YlByb2Nlc3NVVUlEID0gZm9ybVs2XSB8fCAnJztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgdmFyIHNwbyA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBzdWJQcm9jZXNzVVVJRCArIFwiJ11cIiwgYXBwLlNDT1BFLndvcmtmbG93LCB7fSlbMF07XG5cblxuXG4gICAgICAgIC8vdmFyIHN1YlByb2Nlc3NVVUlEID0gSlNPTi54cGF0aChcIi9wcm9jZXNzZXNbaWQgZXEgJ1wiICsgcHJvY2Vzc0lkICsgXCInIGFuZCBzZXEgZXEgJ1wiICsgcHJvY2Vzc1NlcSArIFwiJ10vc3ViUHJvY2Vzc2VzW2lkIGVxICdcIiArIHN1YlByb2Nlc3NJZCArIFwiJyBhbmQgc2VxIGVxICdcIiArIHN1YlByb2Nlc3NTZXEgKyBcIiddL3V1aWRcIiwgX1dGSW5zdGFuY2UuaW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgdmFyIHNwSW5kaWNhdG9ycyA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBzdWJQcm9jZXNzVVVJRCArIFwiJ10vaW5kaWNhdG9ycy9pbnN0YW5jZXMvdXVpZFwiLCBfV0ZJbnN0YW5jZSwge30pO1xuICAgICAgICB2YXIgaXRlbXNUb1Byb2Nlc3MgPSBzcEluZGljYXRvcnMubGVuZ3RoO1xuICAgICAgICB2YXIgdXBkYXRlZE9iamVjdHNBcnJheSA9IFtdO1xuICAgICAgICB2YXIgdGVtcEFycmF5ID0gW107XG5cbiAgICAgICAgLy9zdGFydCB0eG4gb24gaW5kdXVpZCArIDphcHByb3ZlZCB0aGVuIGNvbW1pdFxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3BJbmRpY2F0b3JzLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgIGdhdGVrZWVwZXIuYXV0aG9yaXNlKHNwSW5kaWNhdG9yc1tpXSkudGhlbihmdW5jdGlvbiAoYXV0aG9yaXNlZFJldHVybikge1xuXG4gICAgICAgICAgICAgICAgZ2F0ZWtlZXBlci5wZXJzaXN0KGF1dGhvcmlzZWRSZXR1cm4pLnRoZW4oZnVuY3Rpb24gKHNhdmVkQXJyYXkpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgdXVpZFNhdmVkSW5kaWNhdG9yID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgc2F2ZWRBcnJheS5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzYXZlZEFycmF5W2NdLmlkLmVuZHNXaXRoKCc6YXBwcm92ZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV1aWRTYXZlZEluZGljYXRvciA9IHNhdmVkQXJyYXlbY10uaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGRhby5nZXQodXVpZFNhdmVkSW5kaWNhdG9yKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfV0ZJbnN0YW5jZS5pbmRpY2F0b3JzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX1dGSW5zdGFuY2UuaW5kaWNhdG9ycy5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zVG9Qcm9jZXNzLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1zVG9Qcm9jZXNzID09IDApIHtcblxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyc2lzdERhdGEoJ2luZGljYXRvcnMnLCBfV0ZJbnN0YW5jZSwgc3ViUHJvY2Vzc1VVSUQpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ0Zvcm0gYXV0aG9yaXNlZCBzdWNjZXNzZnVsbHkuJywgdXBkYXRlZE9iamVjdHNBcnJheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuXG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmYWlsdXJlID0gdXRpbC5zdWNjZXNzKCdGb3JtIGF1dGhvcmlzZWQgcGVyc2lzdCBmYWlsZWQuJywge30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGZhaWx1cmUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgX1dGSW5zdGFuY2UuaW5kaWNhdG9ycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGljYXRvciA9IF9XRkluc3RhbmNlLmluZGljYXRvcnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kaWNhdG9yLl9pZCA9PSBkYXRhLl9pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBjdXJyZW50IGl0ZW0gZnJvbSB0aGUgYXJyYXkgYW5kIGFkZCB0aGUgdXBkYXRlZCBwcm9jZXNzTW9kZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBBcnJheS5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9fV0ZJbnN0YW5jZS5pbmRpY2F0b3JzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL19XRkluc3RhbmNlLmluZGljYXRvcnMucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zVG9Qcm9jZXNzLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbXNUb1Byb2Nlc3MgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRMZW5ndGggPSBfV0ZJbnN0YW5jZS5pbmRpY2F0b3JzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcExlbmd0aCA9IHRlbXBBcnJheS5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBwID0gMDsgcCA8IGluZExlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wT2JqID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHEgPSAwOyBxIDwgdGVtcExlbmd0aDsgcSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX1dGSW5zdGFuY2UuaW5kaWNhdG9yc1twXS5faWQgPT0gdGVtcEFycmF5W3FdLl9pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBPYmogPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVtcE9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEFycmF5LnB1c2goX1dGSW5zdGFuY2UuaW5kaWNhdG9yc1twXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9XRkluc3RhbmNlLmluZGljYXRvcnMgPSB0ZW1wQXJyYXk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm91bmQgPT0gdHJ1ZSAmJiBpdGVtc1RvUHJvY2VzcyA9PSAwKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyc2lzdERhdGEoJ2luZGljYXRvcnMnLCBfV0ZJbnN0YW5jZSwgc3ViUHJvY2Vzc1VVSUQpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ0Zvcm0gYXV0aG9yaXNlZCBzdWNjZXNzZnVsbHkuJywgdXBkYXRlZE9iamVjdHNBcnJheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZhaWx1cmUgPSB1dGlsLnN1Y2Nlc3MoJ0Zvcm0gYXV0aG9yaXNlZCBwZXJzaXN0IGZhaWxlZC4nLCB7fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZmFpbHVyZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaXRlbXNUb1Byb2Nlc3MtLTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbXNUb1Byb2Nlc3MgPT0gMCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdGb3JtIGF1dGhvcmlzZWQgc3VjY2Vzc2Z1bGx5LicsIHVwZGF0ZWRPYmplY3RzQXJyYXkpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG5cblxuXG4gICAgfSk7XG59O1xuXG5mdW5jdGlvbiBjbG9zZShmb3JtKSB7XG4gICAgdmFyIGNvbXBsZXRlZCA9IFtdO1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIGNvbXBsZXRlOiB0cnVlLFxuICAgICAgICBkYXRhOiBbXVxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcygnRm9ybSBjbG9zZWQgc3VjY2Vzc2Z1bGx5LicsIHJlc3VsdCk7XG4gICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG4gICAgfSk7XG59O1xuXG5cblxuZnVuY3Rpb24gdXBkYXRlSW5kaWNhdG9yKGFyZ3MpIHtcblxuICAgIHZhciBfV0ZJbnN0YW5jZSA9IGFyZ3NbMF0gfHwge307XG5cbiAgICB2YXIgdXVpZCA9IGFyZ3NbMV0gfHwgJyc7XG4gICAgdmFyIHBhdGggPSBhcmdzWzJdIHx8ICcnO1xuICAgIHZhciBkYXRhVmFsdWUgPSBhcmdzWzNdIHx8ICcnO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICB2YXIgc2V0SWQgPSBwYXRoLnNwbGl0KFwiLlwiLCAxKVswXTtcbiAgICAgICAgdmFyIGluZE9iamVjdCA9IEpTT04ueHBhdGgoXCIvaW5kaWNhdG9yc1t3b3JrZmxvd3MvcHJvY2Vzc2VzL3N1YlByb2Nlc3NVVUlEID0gJ1wiICsgdXVpZCArIFwiJyBhbmQgY2F0ZWdvcnkvdGVybSA9ICdcIiArIHNldElkICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuXG4gICAgICAgIHZhciBzcXVvdGUgPSAoZGF0YVZhbHVlICsgXCJcIikucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpO1xuICAgICAgICB2YXIgZXhwciA9IFwiaW5kT2JqZWN0Lm1vZGVsLnBlbmRpbmcuZGF0YS5cIiArIHBhdGggKyBcIiA9ICdcIiArIHNxdW90ZSArIFwiJ1wiO1xuICAgICAgICBldmFsKGV4cHIpO1xuICAgICAgICB2YXIgaXRlbXNUb1Byb2Nlc3MgPSAxO1xuICAgICAgICB2YXIgc3R1ZmYgPSBbXTtcbiAgICAgICAgdmFyIG9iaiA9IHt9O1xuXG4gICAgICAgIG9iai5tb2RlbCA9IGluZE9iamVjdDtcbiAgICAgICAgc3R1ZmYucHVzaChvYmopO1xuXG4gICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdJbmRpY2F0b3IgdXBkYXRlZC4nLCBzdHVmZik7XG4gICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG5cbiAgICB9KTtcbn07XG5cblxuZnVuY3Rpb24gdXBkYXRlSW5kaWNhdG9yV3JhcHBlcihhcmdzKSB7XG5cbiAgICB2YXIgX1dGSW5zdGFuY2UgPSBhcmdzWzBdIHx8IHt9O1xuXG4gICAgdmFyIHV1aWQgPSBhcmdzWzFdIHx8ICcnO1xuICAgIHZhciBwYXRoID0gYXJnc1syXSB8fCAnJztcbiAgICB2YXIgZGF0YVZhbHVlID0gYXJnc1szXSB8fCAnJztcbiAgICB2YXIgaW5kaWNhdG9yU2V0SWQgPSBhcmdzWzRdIHx8ICcnO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblxuXG4gICAgICAgIHZhciBpbmRPYmplY3QgPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbd29ya2Zsb3dzL3Byb2Nlc3Nlcy9zdWJQcm9jZXNzVVVJRCA9ICdcIiArIHV1aWQgKyBcIicgYW5kIGNhdGVnb3J5L3Rlcm0gPSAnXCIgKyBpbmRpY2F0b3JTZXRJZCArIFwiJ11cIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcblxuXG5cbiAgICAgICAgdmFyIHNxdW90ZSA9IGRhdGFWYWx1ZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIik7XG4gICAgICAgIHZhciBleHByID0gXCJpbmRPYmplY3QuXCIgKyBwYXRoICsgXCIgPSAnXCIgKyBzcXVvdGUgKyBcIidcIjtcbiAgICAgICAgZXZhbChleHByKTtcbiAgICAgICAgdmFyIGl0ZW1zVG9Qcm9jZXNzID0gMTtcbiAgICAgICAgdmFyIHN0dWZmID0gW107XG4gICAgICAgIHZhciBvYmogPSB7fTtcblxuICAgICAgICBvYmoubW9kZWwgPSBpbmRPYmplY3Q7XG4gICAgICAgIHN0dWZmLnB1c2gob2JqKTtcblxuICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcygnSW5kaWNhdG9yIHVwZGF0ZWQuJywgc3R1ZmYpO1xuICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuXG4gICAgfSk7XG59O1xuXG5mdW5jdGlvbiBtYXJrVXBkYXRlSW5kaWNhdG9yKGFyZ3MpIHtcblxuICAgIHZhciBfV0ZJbnN0YW5jZSA9IGFyZ3NbMF0gfHwge307XG5cbiAgICB2YXIgdXVpZCA9IGFyZ3NbMV0gfHwgJyc7XG4gICAgdmFyIHN0YXR1cyA9IGFyZ3NbMl0gfHwgJyc7XG4gICAgdmFyIGluZGljYXRvclNldElkID0gYXJnc1szXSB8fCAnJztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgdmFyIGluZE9iamVjdCA9IEpTT04ueHBhdGgoXCIvaW5kaWNhdG9yc1t3b3JrZmxvd3MvcHJvY2Vzc2VzL3N1YlByb2Nlc3NVVUlEID0gJ1wiICsgdXVpZCArIFwiJyBhbmQgY2F0ZWdvcnkvdGVybSA9ICdcIiArIGluZGljYXRvclNldElkICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICBpbmRPYmplY3QubW9kZWwucGVuZGluZy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgICAgIHZhciBpdGVtc1RvUHJvY2VzcyA9IDE7XG4gICAgICAgIHZhciBzdHVmZiA9IFtdO1xuICAgICAgICB2YXIgb2JqID0ge307XG4gICAgICAgIG9iai5tb2RlbCA9IGluZE9iamVjdDtcbiAgICAgICAgc3R1ZmYucHVzaChvYmopO1xuXG4gICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdJbmRpY2F0b3IgdXBkYXRlZC4nLCBzdHVmZik7XG4gICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG5cbiAgICB9KTtcbn07XG5cblxuZnVuY3Rpb24gc2V0U3RhdHVzKGFyZ3MpIHtcblxuXG4gICAgLy8gQ3VycmVudGx5IHNldHRpbmcgc3RhdHVzIHRvIHN1YnByb2Nlc3MgaW5zdGFuY2UuIGl0IHNob3VsZCB1cGRhdGUgc29tZSBmaWVsZCBpbiBhcHBQcm9maWxlIG9yIHdoYXRldmVyIGluZGljYXRvciB0aGUgcHJvZmlsZSBoYXMuXG4gICAgdmFyIF9XRkluc3RhbmNlID0gYXJnc1swXSB8fCB7fTtcbiAgICB2YXIgdXVpZCA9IGFyZ3NbMV0gfHwgJyc7XG4gICAgdmFyIHN0YXR1cyA9IGFyZ3NbMl0gfHwgJyc7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgIHZhciBzdWJQcm9jZXNzSW5zdGFuY2UgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ11cIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgc3ViUHJvY2Vzc0luc3RhbmNlLnN0ZXAubWVzc2FnZSA9IHN0YXR1cztcblxuICAgICAgICByZXNvbHZlKFwiU2V0IHByb2ZpbGUgc3RhdHVzIFN1Y2Nlc3NcIiwgc3ViUHJvY2Vzc0luc3RhbmNlKTtcblxuICAgIH0pO1xuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIGNyZWF0ZTogY3JlYXRlLFxuICAgIHNhdmU6IHNhdmUsXG4gICAgc3VibWl0OiBzdWJtaXQsXG4gICAgYXV0aG9yaXNlOiBhdXRob3Jpc2UsXG4gICAgY2xvc2U6IGNsb3NlLFxuICAgIHNldERyYWZ0OiBzZXREcmFmdCxcbiAgICBzZXRVbkRyYWZ0OiBzZXRVbkRyYWZ0LFxuICAgIGNyZWF0ZVByb2ZpbGU6IGNyZWF0ZVByb2ZpbGUsXG4gICAgc2V0SW5zdGFuY2VUaXRsZTogc2V0SW5zdGFuY2VUaXRsZSxcbiAgICBkZWxldGVQcm9maWxlOiBkZWxldGVQcm9maWxlLFxuICAgIHVwZGF0ZUluZGljYXRvcjogdXBkYXRlSW5kaWNhdG9yLFxuICAgIG1hcmtVcGRhdGVJbmRpY2F0b3I6IG1hcmtVcGRhdGVJbmRpY2F0b3IsXG4gICAgdXBkYXRlSW5kaWNhdG9yV3JhcHBlcjogdXBkYXRlSW5kaWNhdG9yV3JhcHBlclxuXG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIGdldExhbmd1YWdlTWVzc2FnZShtZXNzYWdlKSB7XG5cbiAgICB2YXIgbGFuZ3VhZ2UgPSBzZXJ2aWNlLmdldExhbmd1YWdlKCk7XG4gICAgdmFyIHJlcyA9IGV2YWwoXCJtZXNzYWdlLmkxOG4uXCIgKyBsYW5ndWFnZSk7XG4gICAgcmV0dXJuIHJlcztcblxufTtcblxuZnVuY3Rpb24gZ2V0Tm9kZVZhbHVlKGRhdGEsIF9XRkluc3RhbmNlLCB1dWlkKSB7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgaWYgKGRhdGEudmFsdWUgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgIHZhciBpbnB1dERhdGFUeXBlID0gJ3N0cmluZyc7XG5cbiAgICAgICAgICAgIGlmIChkYXRhLnZhbHVlLmRhdGF0eXBlLmRhdGFUeXBlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlucHV0RGF0YVR5cGUgPSBkYXRhLnZhbHVlLmRhdGF0eXBlLmRhdGFUeXBlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbnB1dERhdGFUeXBlID0gZGF0YS52YWx1ZS5kYXRhdHlwZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICB2YXIgaW5wdXRWYWx1ZSA9IGRhdGEudmFsdWUuZGF0YTtcblxuICAgICAgICAgICAgaWYgKGlucHV0RGF0YVR5cGUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKE51bWJlcihpbnB1dFZhbHVlKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0RGF0YVR5cGUgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGlucHV0VmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dERhdGFUeXBlID09ICdpbnRlZ2VyJykge1xuICAgICAgICAgICAgICAgIHJlc29sdmUocGFyc2VJbnQoaW5wdXRWYWx1ZSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dERhdGFUeXBlID09ICdkZWNpbWFsJykge1xuICAgICAgICAgICAgICAgIHJlc29sdmUocGFyc2VGbG9hdChpbnB1dFZhbHVlKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0RGF0YVR5cGUgPT0gJ2RhdGUnIHx8IGlucHV0RGF0YVR5cGUgPT0gJ2RhdGVUaW1lJykge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoaW5wdXRWYWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEluIGNhc2UgZGF0YSB0eXBlIG5vdCBtYXRjaGVkXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShpbnB1dFZhbHVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2UgaWYgKGRhdGEuaW5kaWNhdG9yVVVJRCAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgLy8gQSBjaGFuZ2UgaXMgcmVxdWlyZWQgdG8gbWFrZSBzdXJlIHByb3BlciBzY29wZSBpcyBpZGVudGlmaWVkLlxuICAgICAgICAgICAgdmFyIGluZGljYXRvclVVSUQgPSBudWxsO1xuXG4gICAgICAgICAgICB2YXIgc3VicHJvY2VzcyA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgaWYgKHN1YnByb2Nlc3MuaW5kaWNhdG9ycy5sZW5ndGggPT0gMCkge1xuXG4gICAgICAgICAgICAgICAgaW5kaWNhdG9yVVVJRCA9IEpTT04ueHBhdGgoXCIvaW5kaWNhdG9yc1tjYXRlZ29yeS90ZXJtIGVxICdcIiArIGRhdGEuaW5kaWNhdG9yVVVJRC5pbmRpY2F0b3JTZXRJZCArIFwiJ10vX2lkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBpbmRpY2F0b3JVVUlEID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW2lkIGVxICdcIiArIGRhdGEuaW5kaWNhdG9yVVVJRC5pbmRpY2F0b3JTZXRJZCArIFwiJ10vaW5zdGFuY2VzL3V1aWRcIiwgc3VicHJvY2Vzcywge30pWzBdO1xuICAgICAgICAgICAgICAgIGlmIChpbmRpY2F0b3JVVUlEID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpbmRpY2F0b3JVVUlEID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW2NhdGVnb3J5L3Rlcm0gZXEgJ1wiICsgZGF0YS5pbmRpY2F0b3JVVUlELmluZGljYXRvclNldElkICsgXCInXS9faWRcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cblxuXG4gICAgICAgICAgICByZXNvbHZlKGluZGljYXRvclVVSUQpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS5pbmRpY2F0b3IgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgIHZhciBpbmRpY2F0b3JVVUlEID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddL2luZGljYXRvcnNbaWQgZXEgJ1wiICsgZGF0YS5pbmRpY2F0b3IuaW5kaWNhdG9yU2V0SWQgKyBcIiddL2luc3RhbmNlcy91dWlkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICB2YXIgaW5kT2JqZWN0ID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW19pZCBlcSAnXCIgKyBpbmRpY2F0b3JVVUlEICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgdmFyIHhwYXRoID0gJy9tb2RlbC9wZW5kaW5nL2RhdGEvJyArIGRhdGEuaW5kaWNhdG9yLmluZGljYXRvclNldElkICsgJy8nICsgZGF0YS5pbmRpY2F0b3IuZWxlbWVudElkO1xuXG4gICAgICAgICAgICB2YXIgc2VxID0gSlNPTi54cGF0aChcImNvdW50KC9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddL3ByZWNlZGluZy1zaWJsaW5nOjpub2RlKClbaWQgPSAvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXS9pZF0pXCIsIF9XRkluc3RhbmNlLCB7fSlbMF0gKyAxO1xuICAgICAgICAgICAgdmFyIHN1YnByb2Nlc3NUeXBlID0gSlNPTi54cGF0aChcIi9jb25maWcvcHJvY2Vzc2VzL3N1YlByb2Nlc3Nlc1tfaWQgZXEgL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vaWRdL3R5cGVcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgIHZhciBwYXJ0ID0gbGlicmFyeS5nZXRTdWJwcm9maWxlU3VicHJvY2Vzc0lkcygpO1xuXG4gICAgICAgICAgICBpZiAoc3VicHJvY2Vzc1R5cGUgPT0gUFJPQ0VTU19UWVBFX1NVQlBST0ZJTEUpIHtcbiAgICAgICAgICAgICAgICBzZXEgPSBKU09OLnhwYXRoKFwiY291bnQoL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vcHJlY2VkaW5nLXNpYmxpbmc6Om5vZGUoKVtpZCA9IC9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddL2lkIGFuZCBfaWQgPSAvc3VicHJvY2Vzc2VzW19pZCA9IFwiICsgcGFydCArIFwiXS9faWRdKVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdICsgMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHJlcGxhY2VkUGF0aCA9IHJlcGxhY2VBbGwoeHBhdGgsICcjU0VRVUVOQ0UjJywgc2VxKTtcblxuICAgICAgICAgICAgdmFyIHZhbGlkRGF0ZSA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXS9kYXRlcy92YWxpZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgdmFyIGNvbmNhdFZhbGlkRGF0ZSA9IFwiJ1wiICsgdmFsaWREYXRlICsgXCInXCI7XG4gICAgICAgICAgICB2YXIgbmV3UGF0aCA9IHJlcGxhY2VBbGwocmVwbGFjZWRQYXRoLCAnI0VORF9EQVRFIycsIGNvbmNhdFZhbGlkRGF0ZSk7XG4gICAgICAgICAgICB2YXIgZG90UmVwbGFjZWQgPSByZXBsYWNlQWxsKG5ld1BhdGgsICdbLl0nLCAnLycpO1xuICAgICAgICAgICAgdmFyIHJldFZhbHVlID0gSlNPTi54cGF0aChkb3RSZXBsYWNlZCwgaW5kT2JqZWN0LCB7fSlbMF07XG5cbiAgICAgICAgICAgIHJlc29sdmUocmV0VmFsdWUpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS5zeXN0ZW0gIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgIHJlc29sdmUoXCJFUlJPUjogVW5pbXBsZW1lbnRlZCBzeXN0ZW0gdHlwZSBmb3VuZC5cIik7XG5cbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLnZhcmlhYmxlICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogVGFrZW4gb3V0IG9mIHNjaGVtYVxuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgICAgICAgICAgICBcInN1YlByb2Nlc3NJbnN0YW5jZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInZhbHVlIG9mIHRoZSB2YXJpYWJsZSBzdWJQcm9jZXNzSW5zdGFuY2UgdmFyaWFibGUgY3VycmVudCBzdWJwcm9jZXNzSW5zdGFuY2VcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3RlcFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInZhbHVlIG9mIHRoZSB2YXJpYWJsZSBpbiB0aGUgY3VycmVudCBzdGVwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcInN1YlByb2Nlc3NJZFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcInZhbHVlIG9mIHRoZSBjdXJyZW50IGFwcGxpY2FpdG9uIElEXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGRhdGEudmFyaWFibGUucHJvZmlsZSAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgIHZhciB2YXJpYWJsZU5hbWUgPSBkYXRhLnZhcmlhYmxlLnByb2ZpbGU7XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJvZmlsZUlkID0gX1dGSW5zdGFuY2UucHJvZmlsZTtcbiAgICAgICAgICAgICAgICB2YXIgcHJvZmlsZVZhcmlhYmxlRmlsZU5hbWUgPSBwcm9maWxlSWQgKyAnOnZhcmlhYmxlcyc7XG5cbiAgICAgICAgICAgICAgICBkYW8uZ2V0KHByb2ZpbGVWYXJpYWJsZUZpbGVOYW1lKS50aGVuKGZ1bmN0aW9uKGZpbGUpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgb2JqID0gZXZhbCgnZmlsZS4nICsgdmFyaWFibGVOYW1lKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9iaiA9PSAnb2JqZWN0Jykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VxID0gSlNPTi54cGF0aChcImNvdW50KC9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddL3ByZWNlZGluZy1zaWJsaW5nOjpub2RlKClbaWQgPSAvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXS9pZF0pXCIsIF9XRkluc3RhbmNlLCB7fSlbMF0gKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YnByb2Nlc3NUeXBlID0gSlNPTi54cGF0aChcIi9jb25maWcvcHJvY2Vzc2VzL3N1YlByb2Nlc3Nlc1tfaWQgZXEgL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vaWRdL3R5cGVcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0ID0gbGlicmFyeS5nZXRTdWJwcm9maWxlU3VicHJvY2Vzc0lkcygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VicHJvY2Vzc1R5cGUgPT0gUFJPQ0VTU19UWVBFX1NVQlBST0ZJTEUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXEgPSBKU09OLnhwYXRoKFwiY291bnQoL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vcHJlY2VkaW5nLXNpYmxpbmc6Om5vZGUoKVtpZCA9IC9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddL2lkIGFuZCBfaWQgPSAvc3VicHJvY2Vzc2VzW19pZCA9IFwiICsgcGFydCArIFwiXS9faWRdKVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlUGF0aCA9IFwiL1wiICsgdmFyaWFibGVOYW1lICsgXCJbXCIgKyBzZXEgKyBcIl0vdmFsdWVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXRWYWx1ZSA9IEpTT04ueHBhdGgodmFsdWVQYXRoLCBmaWxlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJldFZhbHVlKTtcblxuXG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09ICdzdHJpbmcnKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUob2JqKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChcIkVSUk9SOiBQcm9maWxlIHZhcmlhYmxlcyBub3QgZm91bmRcIik7XG5cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWplY3QoXCJFUlJPUjogVW5pbXBsZW1lbnRlZCBwcm9maWxlIHR5cGUgZm91bmQuXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS5pbmRpY2F0b3JXcmFwcGVyICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICB2YXIgaW5kaWNhdG9yU2V0ID0gZGF0YS5pbmRpY2F0b3JXcmFwcGVyLmluZGljYXRvclNldElkO1xuICAgICAgICAgICAgdmFyIGluZGljYXRvclVVSUQgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vaW5kaWNhdG9yc1tpZCBlcSAnXCIgKyBpbmRpY2F0b3JTZXQgKyBcIiddL2luc3RhbmNlcy91dWlkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICB2YXIgaW5kT2JqZWN0ID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW19pZCBlcSAnXCIgKyBpbmRpY2F0b3JVVUlEICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgdmFyIGVsZW1lbnRwYXRoID0gcmVwbGFjZUFsbChkYXRhLmluZGljYXRvcldyYXBwZXIucGF0aCwgXCJbLl1cIiwgXCIvXCIpXG4gICAgICAgICAgICB2YXIgeHBhdGggPSAnLycgKyBlbGVtZW50cGF0aFxuICAgICAgICAgICAgdmFyIHZhbHVlID0gSlNPTi54cGF0aCh4cGF0aCwgaW5kT2JqZWN0LCB7fSlbMF07XG4gICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGRhdGEuY2FsY3VsYXRlZCAhPSB1bmRlZmluZWQpIHtcblxuXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSAnJztcbiAgICAgICAgICAgIHZhciBzZXBhcmF0b3IgPSBkYXRhLmNhbGN1bGF0ZWQuc2VwYXJhdG9yO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEuY2FsY3VsYXRlZC5lbGVtZW50cy5sZW5ndGggLSAxOyBpKyspIHtcblxuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50cyA9IGRhdGEuY2FsY3VsYXRlZC5lbGVtZW50cztcblxuICAgICAgICAgICAgICAgIHZhciBwb3NzaWJsZUl0ZW1zID0gW1wiZWxlbWVudFByb3BlcnR5XCIsIFwiY29uc3RhbnRWYWx1ZVwiLCBcImVsZW1lbnRXcmFwcGVyXCIsIFwiY3VycmVudERhdGVcIiwgXCJyYW5kb21EaWdpdHNcIiwgXCJwcm9maWxlT2JqZWN0RWxlbWVudFwiLCBcInByb2ZpbGVPYmplY3RXcmFwcGVyXCIsIFwiY3VycmVudEZpbmFuY2lhbFllYXJcIl07XG4gICAgICAgICAgICAgICAgc3dpdGNoIChwcm9wZXJ0eUV4aXN0cyhlbGVtZW50c1tpXSwgcG9zc2libGVJdGVtcykpIHtcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdlbGVtZW50UHJvcGVydHknOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGljYXRvclNldCA9IGVsZW1lbnRzW2ldLmVsZW1lbnRQcm9wZXJ0eS5pbmRpY2F0b3JTZXRJZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRpY2F0b3JVVUlEID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddL2luZGljYXRvcnNbaWQgZXEgJ1wiICsgaW5kaWNhdG9yU2V0ICsgXCInXS9pbnN0YW5jZXMvdXVpZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZE9iamVjdCA9IEpTT04ueHBhdGgoXCIvaW5kaWNhdG9yc1tfaWQgZXEgJ1wiICsgaW5kaWNhdG9yVVVJRCArIFwiJ11cIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50cGF0aCA9IHJlcGxhY2VBbGwoZWxlbWVudHNbaV0uZWxlbWVudFByb3BlcnR5LmVsZW1lbnRJZCwgXCJbLl1cIiwgXCIvXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeHBhdGggPSAnL21vZGVsL3BlbmRpbmcvZGF0YS8nICsgaW5kaWNhdG9yU2V0ICsgJy8nICsgZWxlbWVudHBhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbVZhbHVlID0gSlNPTi54cGF0aCh4cGF0aCwgaW5kT2JqZWN0LCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgaXRlbVZhbHVlICsgc2VwYXJhdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdjb25zdGFudFZhbHVlJzpcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW1WYWx1ZSA9IGVsZW1lbnRzW2ldLmNvbnN0YW50VmFsdWUudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgaXRlbVZhbHVlICsgc2VwYXJhdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZWxlbWVudFdyYXBwZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGljYXRvclNldCA9IGVsZW1lbnRzW2ldLmVsZW1lbnRXcmFwcGVyLmluZGljYXRvclNldElkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGljYXRvclVVSUQgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vaW5kaWNhdG9yc1tpZCBlcSAnXCIgKyBpbmRpY2F0b3JTZXQgKyBcIiddL2luc3RhbmNlcy91dWlkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kT2JqZWN0ID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW19pZCBlcSAnXCIgKyBpbmRpY2F0b3JVVUlEICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRwYXRoID0gcmVwbGFjZUFsbChlbGVtZW50c1tpXS5lbGVtZW50V3JhcHBlci5lbGVtZW50SWQsIFwiWy5dXCIsIFwiL1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHhwYXRoID0gJy8nICsgZWxlbWVudHBhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbVZhbHVlID0gSlNPTi54cGF0aCh4cGF0aCwgaW5kT2JqZWN0LCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgaXRlbVZhbHVlICsgc2VwYXJhdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdjdXJyZW50RGF0ZSc6XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKyBmb3JtYXREYXRlKG5ldyBEYXRlKCkpICsgc2VwYXJhdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncmFuZG9tRGlnaXRzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaWdpdHMgPSBlbGVtZW50c1tpXS5yYW5kb21EaWdpdHMuZGlnaXRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmRvbSA9IE1hdGgucmFuZG9tKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwID0gTWF0aC5wb3coMTAsIGRpZ2l0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW50UGFydCA9IChyYW5kb20gKiBleHApIF4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSArIGludFBhcnQgKyBzZXBhcmF0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdwcm9maWxlT2JqZWN0RWxlbWVudCc6XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRpY2F0b3JTZXQgPSBlbGVtZW50c1tpXS5wcm9maWxlT2JqZWN0RWxlbWVudC5pbmRpY2F0b3JTZXRJZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRPYmplY3QgPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbY2F0ZWdvcnkvdGVybSBlcSAnYXBwUHJvZmlsZSddXCIsIGFwcC5TQ09QRS53b3JrZmxvdywge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRwYXRoID0gcmVwbGFjZUFsbChlbGVtZW50c1tpXS5wcm9maWxlT2JqZWN0RWxlbWVudC5lbGVtZW50SWQsIFwiWy5dXCIsIFwiL1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHhwYXRoID0gJy9tb2RlbC9wZW5kaW5nL2RhdGEvJyArIGluZGljYXRvclNldCArICcvJyArIGVsZW1lbnRwYXRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW1WYWx1ZSA9IEpTT04ueHBhdGgoeHBhdGgsIGluZE9iamVjdCwge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSArIGl0ZW1WYWx1ZSArIHNlcGFyYXRvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Byb2ZpbGVPYmplY3RXcmFwcGVyJzpcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGljYXRvclNldCA9IGVsZW1lbnRzW2ldLnByb2ZpbGVPYmplY3RXcmFwcGVyLmluZGljYXRvclNldElkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZE9iamVjdCA9IEpTT04ueHBhdGgoXCIvaW5kaWNhdG9yc1tjYXRlZ29yeS90ZXJtIGVxICdhcHBQcm9maWxlJ11cIiwgYXBwLlNDT1BFLndvcmtmbG93LCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudHBhdGggPSByZXBsYWNlQWxsKGVsZW1lbnRzW2ldLnByb2ZpbGVPYmplY3RXcmFwcGVyLndyYXBwZXJFbGVtZW50SWQsIFwiWy5dXCIsIFwiL1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHhwYXRoID0gJy8nICsgZWxlbWVudHBhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbVZhbHVlID0gSlNPTi54cGF0aCh4cGF0aCwgaW5kT2JqZWN0LCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgaXRlbVZhbHVlICsgc2VwYXJhdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2N1cnJlbnRGaW5hbmNpYWxZZWFyJzpcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0RGF0ZSA9IGVsZW1lbnRzW2ldLmN1cnJlbnRGaW5hbmNpYWxZZWFyLnN0YXJ0RGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydE1vbnRoID0gZWxlbWVudHNbaV0uY3VycmVudEZpbmFuY2lhbFllYXIuc3RhcnRNb250aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaW5hbmNpYWxZZWFyID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpICsgXCItXCIgKyBzdGFydE1vbnRoICsgXCItXCIgKyBzdGFydERhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgZmluYW5jaWFsWWVhciArIHNlcGFyYXRvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChcIk5vIG1ldGhvZCBmb3VuZCBmcm9tIGltcGxlbWVudGVkIGxpc3QuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpID0gZGF0YS5jYWxjdWxhdGVkLmVsZW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB2YXIgZWxlbWVudHMgPSBkYXRhLmNhbGN1bGF0ZWQuZWxlbWVudHM7XG5cbiAgICAgICAgICAgIHZhciBwb3NzaWJsZUl0ZW1zID0gW1wiZWxlbWVudFByb3BlcnR5XCIsIFwiY29uc3RhbnRWYWx1ZVwiLCBcImVsZW1lbnRXcmFwcGVyXCIsIFwiY3VycmVudERhdGVcIiwgXCJyYW5kb21EaWdpdHNcIiwgXCJwcm9maWxlT2JqZWN0RWxlbWVudFwiLCBcInByb2ZpbGVPYmplY3RXcmFwcGVyXCIsIFwiY3VycmVudEZpbmFuY2lhbFllYXJcIl07XG4gICAgICAgICAgICBzd2l0Y2ggKHByb3BlcnR5RXhpc3RzKGVsZW1lbnRzW2ldLCBwb3NzaWJsZUl0ZW1zKSkge1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnZWxlbWVudFByb3BlcnR5JzpcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGljYXRvclNldCA9IGVsZW1lbnRzW2ldLmVsZW1lbnRQcm9wZXJ0eS5pbmRpY2F0b3JTZXRJZDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGljYXRvclVVSUQgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vaW5kaWNhdG9yc1tpZCBlcSAnXCIgKyBpbmRpY2F0b3JTZXQgKyBcIiddL2luc3RhbmNlcy91dWlkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRPYmplY3QgPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbX2lkIGVxICdcIiArIGluZGljYXRvclVVSUQgKyBcIiddXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50cGF0aCA9IHJlcGxhY2VBbGwoZWxlbWVudHNbaV0uZWxlbWVudFByb3BlcnR5LmVsZW1lbnRJZCwgXCJbLl1cIiwgXCIvXCIpXG4gICAgICAgICAgICAgICAgICAgIHZhciB4cGF0aCA9ICcvbW9kZWwvcGVuZGluZy9kYXRhLycgKyBpbmRpY2F0b3JTZXQgKyAnLycgKyBlbGVtZW50cGF0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW1WYWx1ZSA9IEpTT04ueHBhdGgoeHBhdGgsIGluZE9iamVjdCwge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgaXRlbVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuXG4gICAgICAgICAgICAgICAgY2FzZSAnY29uc3RhbnRWYWx1ZSc6XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW1WYWx1ZSA9IGVsZW1lbnRzW2ldLmNvbnN0YW50VmFsdWUudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKyBpdGVtVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnZWxlbWVudFdyYXBwZXInOlxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kaWNhdG9yU2V0ID0gZWxlbWVudHNbaV0uZWxlbWVudFdyYXBwZXIuaW5kaWNhdG9yU2V0SWQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRpY2F0b3JVVUlEID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHV1aWQgKyBcIiddL2luZGljYXRvcnNbaWQgZXEgJ1wiICsgaW5kaWNhdG9yU2V0ICsgXCInXS9pbnN0YW5jZXMvdXVpZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kT2JqZWN0ID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW19pZCBlcSAnXCIgKyBpbmRpY2F0b3JVVUlEICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudHBhdGggPSByZXBsYWNlQWxsKGVsZW1lbnRzW2ldLmVsZW1lbnRXcmFwcGVyLmVsZW1lbnRJZCwgXCJbLl1cIiwgXCIvXCIpXG4gICAgICAgICAgICAgICAgICAgIHZhciB4cGF0aCA9ICcvJyArIGVsZW1lbnRwYXRoO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbVZhbHVlID0gSlNPTi54cGF0aCh4cGF0aCwgaW5kT2JqZWN0LCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKyBpdGVtVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cbiAgICAgICAgICAgICAgICBjYXNlICdjdXJyZW50RGF0ZSc6XG5cbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSArIGZvcm1hdERhdGUobmV3IERhdGUoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAncmFuZG9tRGlnaXRzJzpcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpZ2l0cyA9IGVsZW1lbnRzW2ldLnJhbmRvbURpZ2l0cy5kaWdpdHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciByYW5kb20gPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXhwID0gTWF0aC5wb3coMTAsIGRpZ2l0cyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnRQYXJ0ID0gKHJhbmRvbSAqIGV4cCkgXiAwXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKyBpbnRQYXJ0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3Byb2ZpbGVPYmplY3RFbGVtZW50JzpcblxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kaWNhdG9yU2V0ID0gZWxlbWVudHNbaV0ucHJvZmlsZU9iamVjdEVsZW1lbnQuaW5kaWNhdG9yU2V0SWQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRPYmplY3QgPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbY2F0ZWdvcnkvdGVybSBlcSAnYXBwUHJvZmlsZSddXCIsIGFwcC5TQ09QRS53b3JrZmxvdywge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudHBhdGggPSByZXBsYWNlQWxsKGVsZW1lbnRzW2ldLnByb2ZpbGVPYmplY3RFbGVtZW50LmVsZW1lbnRJZCwgXCJbLl1cIiwgXCIvXCIpXG4gICAgICAgICAgICAgICAgICAgIHZhciB4cGF0aCA9ICcvbW9kZWwvcGVuZGluZy9kYXRhLycgKyBpbmRpY2F0b3JTZXQgKyAnLycgKyBlbGVtZW50cGF0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW1WYWx1ZSA9IEpTT04ueHBhdGgoeHBhdGgsIGluZE9iamVjdCwge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgaXRlbVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3Byb2ZpbGVPYmplY3RXcmFwcGVyJzpcblxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kaWNhdG9yU2V0ID0gZWxlbWVudHNbaV0ucHJvZmlsZU9iamVjdFdyYXBwZXIuaW5kaWNhdG9yU2V0SWQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRPYmplY3QgPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbY2F0ZWdvcnkvdGVybSBlcSAnYXBwUHJvZmlsZSddXCIsIGFwcC5TQ09QRS53b3JrZmxvdywge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudHBhdGggPSByZXBsYWNlQWxsKGVsZW1lbnRzW2ldLnByb2ZpbGVPYmplY3RXcmFwcGVyLndyYXBwZXJFbGVtZW50SWQsIFwiWy5dXCIsIFwiL1wiKVxuICAgICAgICAgICAgICAgICAgICB2YXIgeHBhdGggPSAnLycgKyBlbGVtZW50cGF0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW1WYWx1ZSA9IEpTT04ueHBhdGgoeHBhdGgsIGluZE9iamVjdCwge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgaXRlbVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2N1cnJlbnRGaW5hbmNpYWxZZWFyJzpcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnREYXRlID0gZWxlbWVudHNbaV0uY3VycmVudEZpbmFuY2lhbFllYXIuc3RhcnREYXRlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnRNb250aCA9IGVsZW1lbnRzW2ldLmN1cnJlbnRGaW5hbmNpYWxZZWFyLnN0YXJ0TW9udGg7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmaW5hbmNpYWxZZWFyID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpICsgXCItXCIgKyBzdGFydE1vbnRoICsgXCItXCIgKyBzdGFydERhdGU7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKyBmaW5hbmNpYWxZZWFyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChcIk5vIG1ldGhvZCBmb3VuZCBmcm9tIGltcGxlbWVudGVkIGxpc3QuXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuXG5cblxuICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLnN1YlByb2Nlc3MgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgIGlmIChkYXRhLnN1YlByb2Nlc3MucGF0aCAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgIHZhciBwYXRoID0gZGF0YS5zdWJQcm9jZXNzLnBhdGg7XG4gICAgICAgICAgICAgICAgdmFyIGFyciA9IHBhdGguc3BsaXQoXCIuXCIpO1xuICAgICAgICAgICAgICAgIHZhciBwYXRoSXRlbXMgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGhJdGVtcyA9IHBhdGhJdGVtcyArIFwiWydcIiArIGFycltpXSArIFwiJ11cIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHN1YnByb2Nlc3MgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ11cIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBldmFsKFwic3VicHJvY2Vzc1wiICsgcGF0aEl0ZW1zKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKVxuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuc3ViUHJvY2Vzcy5zdGVwVXNlciAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgfVxuXG5cblxuICAgICAgICB9XG5cbiAgICB9KTtcblxuXG5cbn07XG5cblxuZnVuY3Rpb24gcmVwbGFjZUFsbCh0eHQsIHJlcGxhY2UsIHdpdGhfdGhpcykge1xuICAgIGlmICh0eXBlb2YgdHh0LnJlcGxhY2UgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXBsYWNlICsgJyAnICsgd2l0aF90aGlzKTtcbiAgICAgICAgY29uc29sZS5sb2codHh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHR4dC5yZXBsYWNlKG5ldyBSZWdFeHAocmVwbGFjZSwgJ2cnKSwgd2l0aF90aGlzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF0ZShkYXRlKSB7XG5cbiAgICB2YXIgZGF5ID0gZGF0ZS5nZXREYXRlKCk7XG4gICAgdmFyIG1vbnRoSW5kZXggPSBkYXRlLmdldE1vbnRoKCk7XG4gICAgdmFyIHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG5cbiAgICByZXR1cm4gZGF5ICsgJy0nICsgbW9udGhJbmRleCArICctJyArIHllYXI7XG59XG5cblxuZnVuY3Rpb24gY29tcGFyZShzdWJqZWN0LCBvcGVyYXRvciwgdmFsdWUpIHtcbiAgICBzd2l0Y2ggKG9wZXJhdG9yKSB7XG4gICAgICAgIGNhc2UgJz4nOlxuICAgICAgICAgICAgcmV0dXJuIHN1YmplY3QgPiB2YWx1ZTtcbiAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgICByZXR1cm4gc3ViamVjdCA8IHZhbHVlO1xuICAgICAgICBjYXNlICc+PSc6XG4gICAgICAgICAgICByZXR1cm4gc3ViamVjdCA+PSB2YWx1ZTtcbiAgICAgICAgY2FzZSAnPD0nOlxuICAgICAgICAgICAgcmV0dXJuIHN1YmplY3QgPD0gdmFsdWU7XG4gICAgICAgIGNhc2UgJz09JzpcbiAgICAgICAgICAgIHJldHVybiBzdWJqZWN0ID09IHZhbHVlO1xuICAgICAgICBjYXNlICchPSc6XG4gICAgICAgICAgICByZXR1cm4gc3ViamVjdCAhPSB2YWx1ZTtcbiAgICB9XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgZ2V0TGFuZ3VhZ2VNZXNzYWdlOiBnZXRMYW5ndWFnZU1lc3NhZ2UsXG4gICAgZ2V0Tm9kZVZhbHVlOiBnZXROb2RlVmFsdWUsXG4gICAgY29tcGFyZTogY29tcGFyZVxuXG59IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWxpdHknKTtcblxuLyoqXG4gKiBVc2VyIEludGVyZmFjZSBNb2R1bGVcbiAqXG4gKiBAbW9kdWxlIGxpYi91aVxuICogQGF1dGhvciBCcmVudCBHb3Jkb25cbiAqIEB2ZXJzaW9uIDAuMS4wXG4gKiBAZGVzY3JpcHRpb24gdGVzdCBkZXNjcmlwdGlvblxuICpcbiAqL1xuXG4gLyoqXG4gICogR2V0IGFsbCBwcm9jZXNzIHN1Yi1wcm9jZXNzZXMgdXNlciBpbnRlcmZhY2UgZGF0YVxuICAqXG4gICogQHBhcmFtIHtzdHJpbmd9IHByb2Nlc3NJZCAtIHRoZSBXb3JrZmxvdyBjb25maWcgLyBkZWZpbml0aW9uIHByb2Nlc3MgaWRcbiAgKiBAcGFyYW0ge3N0cmluZ30gbGFuZyAtIHRoZSB1c2VyIHByZWZmZXJlZCBsYW5nYXVnZVxuICAqIEBwYXJhbSB7b2JqZWN0fSBfV0ZJbnN0YW5jZSAtIHRoZSBjdXJyZW50IHdvcmtmbG93IGNvbnN0cnVjdG9yIGluc3RhbmNlXG4gICpcbiAgKiBAZXhhbXBsZSAnJ1xuICAqXG4gICogQHJldHVybiAnJ1xuICAqXG4gICovXG4gZnVuY3Rpb24gZ2V0UHJvY2Vzcyhwcm9jZXNzSWQsIGxhbmcsIF9XRkluc3RhbmNlKXtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgcHJvY2Vzc01vZGVsID0gW107XG4gICAgICB2YXIgcHJvY2Vzc0luc3RhbmNlID0gW107XG4gICAgXHRfV0ZJbnN0YW5jZS5pbnN0YW5jZS5wcm9jZXNzZXMuZmlsdGVyKGZ1bmN0aW9uKHByb2Nlc3NJdGVtKXtcbiAgICBcdFx0aWYgKHByb2Nlc3NJdGVtLmlkID09IHByb2Nlc3NJZCkge1xuICAgIFx0XHRcdHByb2Nlc3NJbnN0YW5jZSA9IHByb2Nlc3NJdGVtO1xuICAgIFx0XHR9XG4gICAgXHR9KVxuICAgICAgLy8gY29uc29sZS5sb2cocHJvY2Vzc0luc3RhbmNlLnN1YlByb2Nlc3Nlcy5sZW5ndGgpO1xuICAgICAgdXRpbC5zeW5jTG9vcChwcm9jZXNzSW5zdGFuY2Uuc3ViUHJvY2Vzc2VzLmxlbmd0aCwgZnVuY3Rpb24obG9vcCl7XG4gIFx0XHRcdHZhciBjb3VudGVyID0gbG9vcC5pdGVyYXRpb24oKTtcbiAgICAgICAgdmFyIHByb2Nlc3NTZXEgPSBwcm9jZXNzSW5zdGFuY2Uuc2VxO1xuICAgICAgICB2YXIgc3ViUHJvY2Vzc0lkID0gcHJvY2Vzc0luc3RhbmNlLnN1YlByb2Nlc3Nlc1tjb3VudGVyXS5pZDtcbiAgICAgICAgdmFyIHN1YlByb2Nlc3NTZXEgPSBwcm9jZXNzSW5zdGFuY2Uuc3ViUHJvY2Vzc2VzW2NvdW50ZXJdLnNlcTtcbiAgICAgICAgZ2V0U3ViUHJvY2Vzcyhwcm9jZXNzSWQsIHByb2Nlc3NTZXEsIHN1YlByb2Nlc3NJZCwgc3ViUHJvY2Vzc1NlcSwgbGFuZywgX1dGSW5zdGFuY2UpLnRoZW4oZnVuY3Rpb24obW9kZWwpe1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG1vZGVsKTtcbiAgICAgICAgICBwcm9jZXNzTW9kZWwucHVzaChtb2RlbCk7XG4gICAgICAgICAgbG9vcC5uZXh0KCk7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2cocHJvY2Vzc01vZGVsKTtcbiAgXHRcdFx0fSwgZnVuY3Rpb24oZXJyKXtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhwcm9jZXNzTW9kZWwpO1xuICBcdFx0XHRcdGxvb3AuYnJlYWsoKTtcbiAgXHRcdFx0XHRyZWplY3QoZXJyKTtcbiAgXHRcdFx0fSk7XG4gIFx0XHR9LCBmdW5jdGlvbigpe1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhwcm9jZXNzTW9kZWwpO1xuICBcdFx0XHRyZXNvbHZlKHByb2Nlc3NNb2RlbCk7XG4gIFx0XHR9KTtcbiAgICB9IGNhdGNoKGVycil7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9XG4gIH0pXG59O1xuXG4gLyoqXG4gICogR2V0IFN1YlByb2Nlc3MgdXNlciBpbnRlcmZhY2UgZGF0YVxuICAqXG4gICogQHBhcmFtIHtzdHJpbmd9IHByb2Nlc3NJZCAtIHRoZSBXb3JrZmxvdyBjb25maWcgLyBkZWZpbml0aW9uIHByb2Nlc3MgaWRcbiAgKiBAcGFyYW0ge251bWJlcn0gcHJvY2Vzc1NlcSAtIHRoZSBXb3JrZmxvdyBpbnN0YW5jZSBwcm9jZXNzIHNlcVxuICAqIEBwYXJhbSB7c3RyaW5nfSBzdWJQcm9jZXNzSWQgLSB0aGUgV29ya2Zsb3cgY29uZmlnIC8gZGVmaW5pdGlvbiBzdWItcHJvY2VzcyBpZFxuICAqIEBwYXJhbSB7bnVtYmVyfSBzdWJQcm9jZXNzU2VxIC0gdGhlIFdvcmtmbG93IGluc3RhbmNlIHN1Yi1wcm9jZXNzIHNlcVxuICAqIEBwYXJhbSB7b2JqZWN0fSBfV0ZJbnN0YW5jZSAtIHRoZSBjdXJyZW50IHdvcmtmbG93IGNvbnN0cnVjdG9yIGluc3RhbmNlXG4gICpcbiAgKiBAZXhhbXBsZSAnJ1xuICAqXG4gICogQHJldHVybiAnJ1xuICAqXG4gICovXG5mdW5jdGlvbiBnZXRTdWJQcm9jZXNzKHByb2Nlc3NJZCwgcHJvY2Vzc1NlcSwgc3ViUHJvY2Vzc0lkLCBzdWJQcm9jZXNzU2VxLCBsYW5nLCBfV0ZJbnN0YW5jZSl7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIG1vZGVsID0ge1xuICAgICAgICBpZDogJycsXG4gICAgICAgIHNlcTogJycsXG4gICAgICAgIG5hbWU6ICcnLFxuICAgICAgICBoZWxwOiAnJyxcbiAgICAgICAgZGF0ZXM6ICcnLFxuICAgICAgICBzdGVwOiAnJ1xuICAgICAgfTtcbiAgICAgIHZhciBzdWJQcm9jZXNzID0gW107XG4gICAgXHR2YXIgc3ViUHJvY2Vzc0NvbmYgPSBbXTtcbiAgICBcdF9XRkluc3RhbmNlLmluc3RhbmNlLnByb2Nlc3Nlcy5maWx0ZXIoZnVuY3Rpb24ocHJvY2Vzc0l0ZW0pe1xuICAgIFx0XHRpZiAocHJvY2Vzc0l0ZW0uaWQgPT0gcHJvY2Vzc0lkICYmIHByb2Nlc3NJdGVtLnNlcSA9PSBwcm9jZXNzU2VxKSB7XG4gICAgXHRcdFx0dmFyIHNwTGVuZ3RoID0gcHJvY2Vzc0l0ZW0uc3ViUHJvY2Vzc2VzLmxlbmd0aDtcbiAgICBcdFx0XHRwcm9jZXNzSXRlbS5zdWJQcm9jZXNzZXMuZmlsdGVyKGZ1bmN0aW9uKHN1YlByb2Nlc3NJdGVtKXtcbiAgICBcdFx0XHRcdGlmIChzdWJQcm9jZXNzSXRlbS5pZCA9PSBzdWJQcm9jZXNzSWQgJiYgc3ViUHJvY2Vzc0l0ZW0uc2VxID09IHN1YlByb2Nlc3NTZXEgJiYgc3ViUHJvY2Vzc0l0ZW0uY29tcGxldGUgPT0gZmFsc2UpIHtcbiAgICBcdFx0XHRcdFx0c3ViUHJvY2VzcyA9IHN1YlByb2Nlc3NJdGVtO1xuICAgIFx0XHRcdFx0fVxuICAgIFx0XHRcdH0pXG4gICAgXHRcdH1cbiAgICBcdH0pXG4gICAgXHQvLyBHZXQgdGhlIGN1cnJlbnQgc3ViUHJvY2VzcyBjb25maWd1cmF0aW9uXG4gICAgXHRfV0ZJbnN0YW5jZS5jb25maWcucHJvY2Vzc2VzLmZpbHRlcihmdW5jdGlvbihwcm9jZXNzQ29uZmlnKXtcbiAgICBcdFx0aWYgKHByb2Nlc3NDb25maWcuX2lkID09IHByb2Nlc3NJZCkge1xuICAgIFx0XHRcdHByb2Nlc3NDb25maWcuc3ViUHJvY2Vzc2VzLmZpbHRlcihmdW5jdGlvbihzdWJQcm9jZXNzQ29uZmlnKXtcbiAgICBcdFx0XHRcdGlmIChzdWJQcm9jZXNzQ29uZmlnLl9pZCA9PSBzdWJQcm9jZXNzSWQpIHtcbiAgICBcdFx0XHRcdFx0c3ViUHJvY2Vzc0NvbmYgPSBzdWJQcm9jZXNzQ29uZmlnO1xuICAgIFx0XHRcdFx0fVxuICAgIFx0XHRcdH0pXG4gICAgXHRcdH1cbiAgICBcdH0pXG4gICAgICAvLyBVcGRhdGUgdGhlIG1vZGVsXG4gICAgICBtb2RlbC5pZCA9IHN1YlByb2Nlc3NDb25mLl9pZDtcbiAgICAgIG1vZGVsLnNlcSA9IHN1YlByb2Nlc3Muc2VxO1xuICAgICAgbW9kZWwubmFtZSA9IHV0aWwuZ2V0TmFtZShzdWJQcm9jZXNzQ29uZi5uYW1lLCBsYW5nKTtcbiAgICAgIG1vZGVsLmhlbHAgPSB1dGlsLmdldE5hbWUoc3ViUHJvY2Vzc0NvbmYuaGVscCwgbGFuZyk7XG4gICAgICBtb2RlbC5kYXRlcyA9IHN1YlByb2Nlc3MuZGF0ZXM7XG4gICAgICBtb2RlbC5zdGVwID0gc3ViUHJvY2Vzcy5zdGVwO1xuICAgICAgcmVzb2x2ZShtb2RlbCk7XG4gICAgfSBjYXRjaChlcnIpIHtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH1cbiAgfSlcbn07XG5cblxuXG5cbmZ1bmN0aW9uIHByZXBhcmVOb3RpZmljYXRpb25TY3JlZW4oKXtcblxuICBcIlwiXG59O1xuXG4gbW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgZ2V0UHJvY2VzczogZ2V0UHJvY2Vzc1xuXG4gfVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIGdldCgpIHtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgIH0pO1xuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIGdldDogZ2V0XG5cbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbGl0eScpO1xudmFyIGFjdGlvbnNNb2R1bGUgPSByZXF1aXJlKCcuL2FjdGlvbnMnKTtcbnZhciBoZWxwZXIgPSByZXF1aXJlKCcuL2hlbHBlcicpO1xudmFyIGZvcm0gPSByZXF1aXJlKCcuL2Zvcm0nKTtcblxuLyoqXG4gKiBQcm9jZXNzIE1vZHVsZVxuICpcbiAqIEBtb2R1bGUgbGliL3Byb2Nlc3NcbiAqIEBhdXRob3IgSGFzYW4gQWJiYXNcbiAqIEB2ZXJzaW9uIDAuMi4xXG4gKiBAZGVzY3JpcHRpb24gV29ya2Zsb3cgaW1wbGVtZW50YXRpb24gY2hhbmdlZCBhcyBwZXIgbmV3IHNjaGVtYSBpbXBsZW1lbnRhdGlvblxuICpcbiAqL1xuXG4vKipcbiAqIENvdW50IGFuIGFycmF5IG9mIGl0ZW1zXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyIC0gdGhlIGFycmF5IGRhdGFcbiAqXG4gKiBAZXhhbXBsZSAnJ1xuICpcbiAqIEByZXR1cm4gJydcbiAqXG4gKi9cbmZ1bmN0aW9uIGNvdW50KGFycikge1xuICAgIGlmIChhcnIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gYXJyLmxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG5cbn07XG5cbi8qKlxuICogUHJvY2VzcyBwcmUtcmVxdWlzaXRlc1xuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcmVyZXF1aXNpdGVzIC0gdGhlIHByZS1yZXF1aXNpdGVzIGNvbmZpZyBkYXRhXG4gKlxuICogQGV4YW1wbGUgJydcbiAqXG4gKiBAcmV0dXJuICcnXG4gKlxuICovXG5mdW5jdGlvbiBwcmVSZXF1aXNpdGVzKHByZXJlcXVpc2l0ZXMsIF9XRkluc3RhbmNlLCBzcHV1aWQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIC8vIFVuY29tbWVudCBiZWxvdyBzZWN0aW9uIHdoZW4gcmVhZHkgdG8gaW1wbGVtZW50XG4gICAgICAgIHZhciBjb21wbGV0ZWQgPSBbXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHV0aWwuc3luY0xvb3AocHJlcmVxdWlzaXRlcy5sZW5ndGgsIGZ1bmN0aW9uKGxvb3ApIHtcbiAgICAgICAgICAgICAgICB2YXIgY291bnRlciA9IGxvb3AuaXRlcmF0aW9uKCk7XG4gICAgICAgICAgICAgICAgcHJlUmVxdWlzaXRlKHByZXJlcXVpc2l0ZXNbY291bnRlcl0sIF9XRkluc3RhbmNlLCBzcHV1aWQpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBhbGwgcHJlLXJlcXVpc2l0ZXMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseS5cbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkLnB1c2godHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGxvb3AubmV4dCgpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQucHVzaChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGxvb3AuYnJlYWsoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29tcGxldGVkLmV2ZXJ5KEJvb2xlYW4pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdQcmUtcmVxdWlzaXRlcyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LicsIHt9KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSB1dGlsLmVycm9yKCdXRlByZVJlcXVpc2l0ZUVycm9yJywgJ05vdCBhbGwgcHJlLXJlcXVpc2l0ZXMgcGFzc2VkLicpO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH1cblxuICAgIH0pO1xufTtcblxuLyoqXG4gKiBQcm9jZXNzIHByZS1yZXF1aXNpdGUsIGV4ZWN1dGUgdGhlIHByZS1yZXF1aXNpdGUgY29uZGl0aW9uLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcmVyZXF1aXNpdGUgLSB0aGUgcHJlLXJlcXVpc2l0ZSBjb25maWcgZGF0YVxuICogQHBhcmFtIHtvYmplY3R9IF9XRkluc3RhbmNlIC0gdGhlIHdvcmtmbG93IGNvbnN0cnVjdG9yIGluc3RhbmNlXG4gKlxuICogQGV4YW1wbGVcbiAqIFByb2Nlc3MucHJlUmVxdWlzaXRlKGNvbmZpZywgY291bnRlciwgaW5zdGFuY2UsIGRvYyk7XG4gKlxuICogQHJldHVybiAnJ1xuICpcbiAqL1xuZnVuY3Rpb24gcHJlUmVxdWlzaXRlKHByZXJlcXVpc2l0ZSwgX1dGSW5zdGFuY2UsIHNwdXVpZCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXG5cbiAgICAgICAgaWYgKHByZXJlcXVpc2l0ZS5jaGVjay5udW1iZXJQcm9jZXNzSW5zdGFuY2VzICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICB2YXIgbnVtYmVyUHJvY2Vzc0luc3RhbmNlcyA9IHByZXJlcXVpc2l0ZS5jaGVjay5udW1iZXJQcm9jZXNzSW5zdGFuY2VzO1xuICAgICAgICAgICAgdmFyIF9maWx0ZXJPcGVyYXRvciA9IG51bWJlclByb2Nlc3NJbnN0YW5jZXMub3BlcmF0b3I7XG4gICAgICAgICAgICB2YXIgeHBhdGhPcGVyYXRvciA9ICcnO1xuICAgICAgICAgICAgc3dpdGNoIChfZmlsdGVyT3BlcmF0b3IpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdncmVhdGVyVGhhbic6XG4gICAgICAgICAgICAgICAgICAgIHhwYXRoT3BlcmF0b3IgPSAnZ3QnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdsZXNzVGhhbic6XG4gICAgICAgICAgICAgICAgICAgIHhwYXRoT3BlcmF0b3IgPSAnbHQnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdncmVhdGVyVGhhbkVxdWFsJzpcbiAgICAgICAgICAgICAgICAgICAgeHBhdGhPcGVyYXRvciA9ICdnZSc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2xlc3NUaGFuRXF1YWwnOlxuICAgICAgICAgICAgICAgICAgICB4cGF0aE9wZXJhdG9yID0gJ2xlJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZXF1YWxUbyc6XG4gICAgICAgICAgICAgICAgICAgIHhwYXRoT3BlcmF0b3IgPSAnZXEnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdub3RFcXVhbFRvJzpcbiAgICAgICAgICAgICAgICAgICAgeHBhdGhPcGVyYXRvciA9ICduZSc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgX3N1YnByb2Nlc3NJZCA9IG51bWJlclByb2Nlc3NJbnN0YW5jZXMuc3ViUHJvY2Vzc0lkO1xuICAgICAgICAgICAgdmFyIF9maWx0ZXJFbGVtZW50ID0gXCJzdGVwL3N0YXR1c1wiO1xuICAgICAgICAgICAgdmFyIF9maWx0ZXJWYWx1ZSA9IG51bWJlclByb2Nlc3NJbnN0YW5jZXMudHlwZTtcbiAgICAgICAgICAgIHZhciBpbm5lclhwYXRoID0gXCIvXCIgKyBfZmlsdGVyRWxlbWVudCArIFwiWy4gZXEgJ1wiICsgX2ZpbHRlclZhbHVlICsgXCInXVwiO1xuXG4gICAgICAgICAgICB2YXIgZnVsbFBhdGggPSBcImNvdW50KC9zdWJwcm9jZXNzZXNbaWQgZXEgJ1wiICsgX3N1YnByb2Nlc3NJZCArIFwiJ11cIiArIGlubmVyWHBhdGggKyBcIilcIjtcblxuICAgICAgICAgICAgdmFyIHByZXJlcVByb2Nlc3NUeXBlID0gSlNPTi54cGF0aChcIi9jb25maWcvcHJvY2Vzc2VzL3N1YlByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgX3N1YnByb2Nlc3NJZCArIFwiJ10vdHlwZVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgdmFyIHBhcnQgPSBsaWJyYXJ5LmdldFN1YnByb2ZpbGVTdWJwcm9jZXNzSWRzKCk7XG5cbiAgICAgICAgICAgIGlmIChhcHAucHJvZmlsZS5zdWJwcm9maWxlSWQgIT0gdW5kZWZpbmVkICYmIGFwcC5wcm9maWxlLnN1YnByb2ZpbGVJZCAhPSAnJyAmJiBwcmVyZXFQcm9jZXNzVHlwZSAhPSB1bmRlZmluZWQgJiYgcHJlcmVxUHJvY2Vzc1R5cGUgPT0gUFJPQ0VTU19UWVBFX1NVQlBST0ZJTEUpIHtcbiAgICAgICAgICAgICAgICBmdWxsUGF0aCA9IFwiY291bnQoL3N1YnByb2Nlc3Nlc1tpZCBlcSAnXCIgKyBfc3VicHJvY2Vzc0lkICsgXCInIGFuZCBfaWQgPSBcIiArIHBhcnQgKyBcIl1cIiArIGlubmVyWHBhdGggKyBcIilcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHN1YmplY3RDb3VudCA9IEpTT04ueHBhdGgoZnVsbFBhdGgsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICB2YXIgY291bnRWYWx1ZSA9IHByZXJlcXVpc2l0ZS5jaGVjay5udW1iZXJQcm9jZXNzSW5zdGFuY2VzLmNvdW50O1xuICAgICAgICAgICAgdmFyIGNvbXBhcmUgPSB1dGlsLmNvbXBhcmUoc3ViamVjdENvdW50LCBwcmVyZXF1aXNpdGUuY2hlY2subnVtYmVyUHJvY2Vzc0luc3RhbmNlcy5vcGVyYXRvciwgcGFyc2VJbnQoY291bnRWYWx1ZSkpO1xuXG5cbiAgICAgICAgICAgIGlmIChjb21wYXJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ1ByZS1yZXF1aXNpdGVzIHBhc3NlZC4nLCB7fSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IGhlbHBlci5nZXRMYW5ndWFnZU1lc3NhZ2UocHJlcmVxdWlzaXRlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IHV0aWwuZXJyb3IoJ1dGUHJlUmVxdWlzaXRlRXJyb3InLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfSBlbHNlIGlmIChwcmVyZXF1aXNpdGUuY2hlY2sudmFyaWFibGUgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgIHZhciBzY29wZSA9IHByZXJlcXVpc2l0ZS5jaGVjay52YXJpYWJsZS5zY29wZTtcbiAgICAgICAgICAgIHZhciBmaWxlTmFtZSA9ICcnO1xuXG4gICAgICAgICAgICBpZiAoc2NvcGUgPT0gXCJwcm9maWxlXCIpIHtcblxuICAgICAgICAgICAgICAgIHZhciBwcm9maWxlSWQgPSBfV0ZJbnN0YW5jZS5wcm9maWxlO1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lID0gcHJvZmlsZUlkICsgJzp2YXJpYWJsZXMnO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNjb3BlID09IFwic3ViUHJvZmlsZVN1YlByb2Nlc3NJbnN0YW5jZVwiKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3ViUHJvZmlsZUlkID0gYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkO1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lID0gc3ViUHJvZmlsZUlkICsgJzp2YXJpYWJsZXMnO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlamVjdChcIkVSUk9SOiBTY29wZSAnXCIgKyBzY29wZSArIFwiJyBub3QgaW1wbGVtZW50ZWQgaW4gcHJlLXJlcXVpc2l0ZXNcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhby5nZXQoZmlsZU5hbWUpLnRoZW4oZnVuY3Rpb24oZmlsZSkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHZhcmlhYmxlTmFtZSA9IHByZXJlcXVpc2l0ZS5jaGVjay52YXJpYWJsZS5uYW1lO1xuICAgICAgICAgICAgICAgIHZhciBvYmogPSBldmFsKCdmaWxlLicgKyB2YXJpYWJsZU5hbWUpO1xuICAgICAgICAgICAgICAgIHZhciBzdWJqZWN0VmFsdWVDYWxjdWxhdGVkO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmogPT0gJ29iamVjdCcpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VxID0gSlNPTi54cGF0aChcImNvdW50KC9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHNwdXVpZCArIFwiJ10vcHJlY2VkaW5nLXNpYmxpbmc6Om5vZGUoKVtpZCA9IC9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHNwdXVpZCArIFwiJ10vaWRdKVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdICsgMTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1YnByb2Nlc3NUeXBlID0gSlNPTi54cGF0aChcIi9jb25maWcvcHJvY2Vzc2VzL3N1YlByb2Nlc3Nlc1tfaWQgZXEgL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgc3B1dWlkICsgXCInXS9pZF0vdHlwZVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFydCA9IGxpYnJhcnkuZ2V0U3VicHJvZmlsZVN1YnByb2Nlc3NJZHMoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnByb2Nlc3NUeXBlID09IFBST0NFU1NfVFlQRV9TVUJQUk9GSUxFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXEgPSBKU09OLnhwYXRoKFwiY291bnQoL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgc3B1dWlkICsgXCInXS9wcmVjZWRpbmctc2libGluZzo6bm9kZSgpW2lkID0gL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgc3B1dWlkICsgXCInXS9pZCBhbmQgX2lkID0gL3N1YnByb2Nlc3Nlc1tfaWQgPSBcIiArIHBhcnQgKyBcIl0vX2lkXSlcIiwgX1dGSW5zdGFuY2UsIHt9KVswXSArIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlUGF0aCA9IFwiL1wiICsgdmFyaWFibGVOYW1lICsgXCJbXCIgKyBzZXEgKyBcIl0vdmFsdWVcIjtcbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdFZhbHVlQ2FsY3VsYXRlZCA9IEpTT04ueHBhdGgodmFsdWVQYXRoLCBmaWxlLCB7fSlbMF07XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT0gJ3N0cmluZycpIHtcblxuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0VmFsdWVDYWxjdWxhdGVkID0gb2JqO1xuXG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICB2YXIgaW5wdXRWYWx1ZSA9IHByZXJlcXVpc2l0ZS5jaGVjay52YXJpYWJsZS52YWx1ZS5kYXRhO1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dERhdGFUeXBlID0gcHJlcmVxdWlzaXRlLmNoZWNrLnZhcmlhYmxlLnZhbHVlLmRhdGFUeXBlLmRhdGFUeXBlO1xuXG4gICAgICAgICAgICAgICAgdmFyIGZpbmFsVmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0RGF0YVR5cGUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgZmluYWxWYWx1ZSA9IE51bWJlcihpbnB1dFZhbHVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0RGF0YVR5cGUgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgZmluYWxWYWx1ZSA9IGlucHV0VmFsdWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dERhdGFUeXBlID09ICdpbnRlZ2VyJykge1xuICAgICAgICAgICAgICAgICAgICBmaW5hbFZhbHVlID0gcGFyc2VJbnQoaW5wdXRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dERhdGFUeXBlID09ICdkZWNpbWFsJykge1xuICAgICAgICAgICAgICAgICAgICBmaW5hbFZhbHVlID0gcGFyc2VGbG9hdChpbnB1dFZhbHVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0RGF0YVR5cGUgPT0gJ2RhdGUnIHx8IGlucHV0RGF0YVR5cGUgPT0gJ2RhdGVUaW1lJykge1xuICAgICAgICAgICAgICAgICAgICBmaW5hbFZhbHVlID0gaW5wdXRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgY29tcGFyZSA9IHV0aWwuY29tcGFyZShzdWJqZWN0VmFsdWVDYWxjdWxhdGVkLCBwcmVyZXF1aXNpdGUuY2hlY2sudmFyaWFibGUub3BlcmF0b3IsIGZpbmFsVmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChjb21wYXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdWYXJpYWJsZSBQcmUtcmVxdWlzaXRlcyBwYXNzZWQuJywge30pO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBoZWxwZXIuZ2V0TGFuZ3VhZ2VNZXNzYWdlKHByZXJlcXVpc2l0ZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gdXRpbC5lcnJvcignV0ZQcmVSZXF1aXNpdGVFcnJvcicsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IGhlbHBlci5nZXRMYW5ndWFnZU1lc3NhZ2UocHJlcmVxdWlzaXRlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IHV0aWwuZXJyb3IoJ1dGUHJlUmVxdWlzaXRlRXJyb3I6JywgbWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgdmFyIGVycm9yID0gdXRpbC5lcnJvcignV0ZQcmVSZXF1aXNpdGVFcnJvcicsICdQcmUtcmVxdWlzaXRlIHR5cGUgbm90IGRlZmluZWQuJyk7XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuXG4gICAgICAgIH1cblxuXG5cbiAgICB9KTtcbn07XG5cbi8qKlxuICogUHJvY2VzcyBwcmUtYWN0aW9uc3NcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcHJlQWN0aW9ucyAtIHRoZSBwcmUtYWN0aW9ucyBjb25maWcgZGF0YVxuICogQHBhcmFtIHtvYmplY3R9IF9XRkluc3RhbmNlIC0gdGhlIGN1cnJlbnQgd29ya2Zsb3cgY29uc3RydWN0b3IgaW5zdGFuY2VcbiAqXG4gKiBAZXhhbXBsZSAnJ1xuICpcbiAqIEByZXR1cm4gJydcbiAqXG4gKi9cbmZ1bmN0aW9uIHByZUFjdGlvbnMocHJlQWN0aW9ucywgX1dGSW5zdGFuY2UsIHNwdXVpZCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIGNvbXBsZXRlZCA9IFtdO1xuICAgICAgICB0cnkge1xuXG4gICAgICAgICAgICB2YXIgc3BPYmplY3QgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgc3B1dWlkICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgdmFyIHByb2Nlc3NJRCA9IHNwT2JqZWN0W1wibWV0YS1kYXRhXCJdLnByb2Nlc3NDb25maWdJZDtcbiAgICAgICAgICAgIHZhciBwcm9jZXNzSWQgPSBzcE9iamVjdFtcIm1ldGEtZGF0YVwiXS5zdWJQcm9jZXNzQ29uZmlnSWQ7XG4gICAgICAgICAgICB2YXIgcHJvY2Vzc1NFUSA9IHNwT2JqZWN0W1wibWV0YS1kYXRhXCJdLnN1YlByb2Nlc3NJbnNTZXE7XG4gICAgICAgICAgICB2YXIgcHJvY2Vzc1NlcSA9IHNwT2JqZWN0W1wibWV0YS1kYXRhXCJdLnN1YlByb2Nlc3NJbnNTZXE7XG5cbiAgICAgICAgICAgIHZhciBzdWJQcm9jZXNzQ29uZmlnT2JqZWN0ID0gSlNPTi54cGF0aChcIi9wcm9jZXNzZXNbX2lkIGVxICdcIiArIHByb2Nlc3NJRCArIFwiJ10vc3ViUHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBwcm9jZXNzSWQgKyBcIiddXCIsIF9XRkluc3RhbmNlLmNvbmZpZywge30pWzBdO1xuICAgICAgICAgICAgdmFyIHN0ZXBPYmplY3QgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgc3B1dWlkICsgXCInXS9zdGVwXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICB1dGlsLnN5bmNMb29wKHByZUFjdGlvbnMubGVuZ3RoLCBmdW5jdGlvbihsb29wKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvdW50ZXIgPSBsb29wLml0ZXJhdGlvbigpO1xuICAgICAgICAgICAgICAgIGFjdGlvbihwcmVBY3Rpb25zW2NvdW50ZXJdLCBwcm9jZXNzSUQsIHByb2Nlc3NTRVEsIHByb2Nlc3NJZCwgcHJvY2Vzc1NlcSwgc3ViUHJvY2Vzc0NvbmZpZ09iamVjdCwgc3RlcE9iamVjdCwgX1dGSW5zdGFuY2UsIHt9LCBzcHV1aWQpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBhbGwgcHJlLXJlcXVpc2l0ZXMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseS5cbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkLnB1c2godHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGxvb3AubmV4dCgpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQucHVzaChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGxvb3AuYnJlYWsoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29tcGxldGVkLmV2ZXJ5KEJvb2xlYW4pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdQcmUtYWN0aW9ucyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LicsIHt9KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSB1dGlsLmVycm9yKCdXRlByZVJlcXVpc2l0ZUVycm9yJywgJ05vdCBhbGwgcHJlLWFjdGlvbnMgcGFzc2VkLicpO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH1cblxuICAgIH0pO1xufTtcblxuLyoqXG4gKiBXb3JrZmxvdyBnZXQgc3ViLXByb2Nlc3MgZGF0YS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgLSB0aGUgc3ViUHJvY2VzcyBjb25maWcgaWRcbiAqIEBwYXJhbSB7b2JqZWN0fSBfV0ZJbnN0YW5jZSAtIHRoZSBjdXJyZW50IHdvcmtmbG93IGNvbnN0cnVjdG9yIGluc3RhbmNlXG4gKlxuICogQGV4YW1wbGUgXCJcIlxuICpcbiAqIEByZXR1cm4gXCJcIlxuICpcbiAqL1xuZnVuY3Rpb24gZ2V0U3ViUHJvY2VzcyhpZCwgX1dGSW5zdGFuY2UpIHtcbiAgICBpZiAoX1dGSW5zdGFuY2Uuc3VicHJvY2Vzc2VzID09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfSBlbHNlIHtcbiAgICAgICAgX1dGSW5zdGFuY2Uuc3VicHJvY2Vzc2VzLmZpbHRlcihmdW5jdGlvbihzdWJQcm9jZXNzKSB7XG4gICAgICAgICAgICBpZiAoc3ViUHJvY2Vzcy5pZCA9PSBpZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWJQcm9jZXNzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgIH1cblxufTtcblxuLyoqXG4gKiBQcm9jZXNzIHN1Yi1wcm9jZXNzXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByb2Nlc3MgLSB0aGUgY3VycmVudCBwcm9jZXNzIGlkIGFuZCBzZXFcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdWJQcm9jZXNzIC0gdGhlIHN1Yi1wcm9jZXNzIGlkIGFuZCBzZXFcbiAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gdGhlIHVzZXIgaW5wdXQgZGF0YVxuICogQHBhcmFtIHtvYmplY3R9IF9XRkluc3RhbmNlIC0gdGhlIGN1cnJlbnQgd29ya2Zsb3cgY29uc3RydWN0b3IgaW5zdGFuY2VcbiAqXG4gKiBAZXhhbXBsZSAnJ1xuICpcbiAqIEByZXR1cm4gJydcbiAqXG4gKi9cbmZ1bmN0aW9uIHN1YlByb2Nlc3ModXVpZCwgcHJvY2Vzc0lkLCBwcm9jZXNzU2VxLCBzdWJQcm9jZXNzSWQsIHN1YlByb2Nlc3NTZXEsIHN1YnByb2ZpbGVJZCwgZGF0YSwgX1dGSW5zdGFuY2UpIHtcbiAgICAvLyBHZXQgdGhlIGN1cnJlbnQgcHJvY2VzcyBzdWJQcm9jZXNzIGluc3RhbmNlXG4gICAgLy8gdmFyIHN1YlByb2Nlc3NTZXEgPSAxO1xuICAgIHZhciBzdWJQcm9jZXNzID0gW107XG4gICAgdmFyIHByb2Nlc3NDb25mID0gW107XG4gICAgdmFyIHN1YlByb2Nlc3NDb25mID0gW107XG4gICAgX1dGSW5zdGFuY2UuaW5zdGFuY2UucHJvY2Vzc2VzLmZpbHRlcihmdW5jdGlvbihvYmpQcm9jZXNzKSB7XG4gICAgICAgIGlmIChvYmpQcm9jZXNzLmlkID09IHByb2Nlc3NJZCAmJiBvYmpQcm9jZXNzLnNlcSA9PSBwcm9jZXNzU2VxKSB7XG4gICAgICAgICAgICB2YXIgc3BMZW5ndGggPSBvYmpQcm9jZXNzLnN1YlByb2Nlc3Nlcy5sZW5ndGg7XG4gICAgICAgICAgICBvYmpQcm9jZXNzLnN1YlByb2Nlc3Nlcy5maWx0ZXIoZnVuY3Rpb24ob2JqU3ViUHJvY2Vzcykge1xuICAgICAgICAgICAgICAgIGlmIChvYmpTdWJQcm9jZXNzLmlkID09IHN1YlByb2Nlc3NJZCAmJiBvYmpTdWJQcm9jZXNzLnNlcSA9PSBzdWJQcm9jZXNzU2VxKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1dWlkID0gb2JqU3ViUHJvY2Vzcy51dWlkO1xuICAgICAgICAgICAgICAgICAgICBfV0ZJbnN0YW5jZS5zdWJwcm9jZXNzZXMuZmlsdGVyKGZ1bmN0aW9uKHN1YlByb2Nlc3NJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3ViUHJvY2Vzc0l0ZW0uX2lkID09IHV1aWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJQcm9jZXNzID0gc3ViUHJvY2Vzc0l0ZW07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgIH0pO1xuICAgIC8vIEdldCB0aGUgY3VycmVudCBzdWJQcm9jZXNzIGNvbmZpZ3VyYXRpb25cbiAgICBfV0ZJbnN0YW5jZS5jb25maWcucHJvY2Vzc2VzLmZpbHRlcihmdW5jdGlvbihwcm9jZXNzQ29uZmlnKSB7XG4gICAgICAgIGlmIChwcm9jZXNzQ29uZmlnLl9pZCA9PSBwcm9jZXNzSWQpIHtcbiAgICAgICAgICAgIHByb2Nlc3NDb25mID0gcHJvY2Vzc0NvbmZpZztcbiAgICAgICAgICAgIHByb2Nlc3NDb25maWcuc3ViUHJvY2Vzc2VzLmZpbHRlcihmdW5jdGlvbihzdWJQcm9jZXNzQ29uZmlnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1YlByb2Nlc3NDb25maWcuX2lkID09IHN1YlByb2Nlc3NJZCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJQcm9jZXNzQ29uZiA9IHN1YlByb2Nlc3NDb25maWc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICB9KTtcblxuICAgIC8vVE9ETzogQ2hhbmdlIHJlcXVpcmVkIHRvIG1vdmUgaXNBY3RpdmUgdG8gc3ViUHJvY2VzcyBmaWxlLkhlcmVcbiAgICB2YXIgZ3JvdXBLZXkgPSAnJztcbiAgICB2YXIgYmFzZVVVSUQgPSBkYXRhLmJhc2VVVUlEO1xuXG4gICAgaWYgKGJhc2VVVUlEICE9IHVuZGVmaW5lZCAmJiBiYXNlVVVJRCAhPSAnJyAmJiBiYXNlVVVJRC5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgdmFyIHByZXZpb3VzT2JqZWN0ID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIGJhc2VVVUlEICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICBncm91cEtleSA9IHByZXZpb3VzT2JqZWN0Lmdyb3VwS2V5O1xuXG4gICAgfSBlbHNlIHtcblxuICAgICAgICB2YXIgY2FyZEluZExpc3QgPSAnJztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJQcm9jZXNzQ29uZi5pbmRpY2F0b3JzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgY2FyZEluZExpc3QgPSBjYXJkSW5kTGlzdCArIFwiJ1wiICsgc3ViUHJvY2Vzc0NvbmYuaW5kaWNhdG9yc1tpXS5faWQgKyBcIicsXCI7XG4gICAgICAgIH1cbiAgICAgICAgY2FyZEluZExpc3QgPSBjYXJkSW5kTGlzdCArIFwiJ1wiICsgc3ViUHJvY2Vzc0NvbmYuaW5kaWNhdG9yc1tpXS5faWQgKyBcIidcIjtcbiAgICAgICAgdmFyIHNpbmdsZUNhcmQgPSBKU09OLnhwYXRoKFwiL2luZGljYXRvcnNbc2V0SWQgPSAoXCIgKyBjYXJkSW5kTGlzdCArIFwiKSBhbmQgY2FyZGluYWxpdHkgZXEgJ3NpbmdsZSddXCIsIGFwcC5TQ09QRS5BUFBfQ09ORklHLCB7fSkubGVuZ3RoO1xuXG4gICAgICAgIGlmIChzdWJQcm9jZXNzQ29uZi5pbnN0YW5jZVR5cGUubmV3U2VxdWVuY2UgIT0gdW5kZWZpbmVkIHx8IHNpbmdsZUNhcmQgPiAwKSB7XG4gICAgICAgICAgICB2YXIgcHJldmlvdXNPYmplY3QgPSBKU09OLnhwYXRoKFwiL2luc3RhbmNlL3Byb2Nlc3Nlc1tpZCBlcSAnXCIgKyBwcm9jZXNzSWQgKyBcIiddXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICBpZiAocHJldmlvdXNPYmplY3QgIT0gdW5kZWZpbmVkICYmIHByZXZpb3VzT2JqZWN0LnN1YlByb2Nlc3Nlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXBLZXkgPSBwcmV2aW91c09iamVjdC5zdWJQcm9jZXNzZXNbMF0uZ3JvdXBLZXk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGdyb3VwS2V5ID0gZ2VuZXJhdGVVVUlEKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBncm91cEtleSA9IGdlbmVyYXRlVVVJRCgpO1xuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY291bnRTdWJwcm9jZXNzSW5Db250ZXh0ID0gSlNPTi54cGF0aChcImNvdW50KC9wcm9jZXNzZXMvc3ViUHJvY2Vzc2VzW2dyb3VwS2V5IGVxICdcIiArIGdyb3VwS2V5ICsgXCInXSlcIiwgX1dGSW5zdGFuY2UuaW5zdGFuY2UsIHt9KVswXTtcbiAgICB2YXIgbGFiZWwgPSBkYXRhLmxhYmVsO1xuICAgIHZhciBzdWJQcm9jZXNzT2JqZWN0SWQgPSB1dWlkO1xuXG5cblxuXG5cblxuICAgIHZhciBtb2RlbCA9IHtcbiAgICAgICAgX2lkOiBzdWJQcm9jZXNzT2JqZWN0SWQsXG4gICAgICAgIGlkOiBzdWJQcm9jZXNzSWQsXG4gICAgICAgIHR5cGU6ICd3b3JrZmxvd0luc3RhbmNlU3ViUHJvY2VzcycsXG4gICAgICAgIGRhdGVUaW1lQ3JlYXRlZDogbW9tZW50KCkuZm9ybWF0KCksXG4gICAgICAgIGR1ZURhdGVUaW1lOiBtb21lbnQoKS5mb3JtYXQoKSxcbiAgICAgICAgc2VxOiBzdWJQcm9jZXNzU2VxLFxuICAgICAgICBpbml0aWF0ZWQ6IGZhbHNlLFxuICAgICAgICBkYXRlczoge1xuICAgICAgICAgICAgY3JlYXRlZDogJycsXG4gICAgICAgICAgICB2YWxpZDogJycsXG4gICAgICAgICAgICBzdGFydDogJycsXG4gICAgICAgICAgICBkdWU6ICcnLFxuICAgICAgICAgICAgY2xvc2VkOiAnJ1xuICAgICAgICB9LFxuICAgICAgICBjb21wbGV0ZTogZmFsc2UsXG4gICAgICAgIGluZGljYXRvcnM6IFtdLFxuICAgICAgICBzdGVwOiB7fSxcbiAgICAgICAgYWN0aXZlOiB0cnVlLFxuICAgICAgICBncm91cEtleTogZ3JvdXBLZXksXG4gICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgY2hhbm5lbHM6IFtcbiAgICAgICAgICAgIFwiY29tbXVuaXR5X1wiICsgYXBwLlNDT1BFLmdldENvbW11bml0eUlkKCksXG4gICAgICAgICAgICBcInByb2ZpbGVfXCIgKyBhcHAuU0NPUEUucHJvZmlsZUlkLFxuICAgICAgICAgICAgXCJhcHBsaWNhdGlvbl9cIiArIGFwcC5TQ09QRS5hcHBsaWNhdGlvbklkLFxuICAgICAgICAgICAgXCJjb21tdW5pdHlfXCIgKyBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKSArIFwiX2FwcGxpY2F0aW9uX1wiICsgYXBwLlNDT1BFLmFwcGxpY2F0aW9uSWRcbiAgICAgICAgXSxcbiAgICAgICAgaGlzdG9yeTogW10sXG4gICAgICAgIC8vbWV0YSBpbmZvcm1hdGlvbiBhZGRlZCBmb3Igc2VydmVyIHNpZGUgY29uZmxpY3QgbWFuYWdlbWVudCBhbmQgbWVyZ2VyXG4gICAgICAgIFwibWV0YS1kYXRhXCI6IHtcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uSWQ6IGFwcC5TQ09QRS5hcHBsaWNhdGlvbklkLFxuICAgICAgICAgICAgY29tbXVuaXR5SWQ6IGFwcC5TQ09QRS5nZXRDb21tdW5pdHlJZCgpLFxuICAgICAgICAgICAgcHJvZmlsZUlkOiBhcHAuU0NPUEUucHJvZmlsZUlkLFxuICAgICAgICAgICAgc3VicHJvZmlsZUlkOiBzdWJwcm9maWxlSWQgPT0gdW5kZWZpbmVkID8gJycgOiBzdWJwcm9maWxlSWQsXG4gICAgICAgICAgICBwcm9jZXNzQ29uZmlnSWQ6IHByb2Nlc3NJZCxcbiAgICAgICAgICAgIHN1YlByb2Nlc3NDb25maWdJZDogc3ViUHJvY2Vzc0lkLFxuICAgICAgICAgICAgc3ViUHJvY2Vzc0luc1NlcTogY291bnRTdWJwcm9jZXNzSW5Db250ZXh0ICsgMVxuICAgICAgICB9LFxuICAgICAgICBtZXNzYWdlczogW10sXG4gICAgICAgIHNwU3RhdHVzOiAnJ1xuICAgIH07XG5cbiAgICBpZiAoYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkICE9IHVuZGVmaW5lZCAmJiBhcHAucHJvZmlsZS5zdWJwcm9maWxlSWQgIT0gXCJcIikge1xuICAgICAgICBtb2RlbC5jaGFubmVscy5wdXNoKFwicHJvZmlsZV9cIiArIGFwcC5TQ09QRS5wcm9maWxlSWQgKyBcIl9zdWJwcm9maWxlX1wiICsgYXBwLnByb2ZpbGUuc3VicHJvZmlsZUlkKTtcbiAgICAgICAgbW9kZWwuY2hhbm5lbHMucHVzaChcInN1YnByb2ZpbGVfXCIgKyBhcHAucHJvZmlsZS5zdWJwcm9maWxlSWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG1vZGVsLmNoYW5uZWxzLnB1c2goXCJwcm9maWxlX1wiICsgYXBwLlNDT1BFLnByb2ZpbGVJZCArIFwiX3N1YnByb2ZpbGVfXCIgKyAwKTtcbiAgICAgICAgbW9kZWwuY2hhbm5lbHMucHVzaChcInN1YnByb2ZpbGVfXCIgKyAwKTtcbiAgICB9XG5cbiAgICBfV0ZJbnN0YW5jZS5zdWJwcm9jZXNzZXMucHVzaChtb2RlbCk7XG4gICAgLy8gUmV0dXJuIGEgcHJvbWlzZVxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgLy8gQ2F0Y2ggYWxsIHVuY2F1Z2h0IGVycm9yc1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gMS4gUHJvY2VzcyB0aGUgcHJlLWFjdGlvbnNcbiAgICAgICAgICAgIHZhciBwcmVBY3Rpb25zQ29uZiA9IHByb2Nlc3NDb25mLnByZUFjdGlvbnM7XG4gICAgICAgICAgICAvL2FjdGlvbihhY3Rpb25zW2NvdW50ZXJdLCBwcm9jZXNzSWQsIHByb2Nlc3NTZXEsIHN1YlByb2Nlc3NJZCwgc3ViUHJvY2Vzc1NlcSwgc3ViUHJvY2Vzcywgc3RlcCwgX1dGSW5zdGFuY2UsIGRhdGEsIHV1aWQpXG4gICAgICAgICAgICBwcmVBY3Rpb25zKHByZUFjdGlvbnNDb25mLCBfV0ZJbnN0YW5jZSwgc3ViUHJvY2Vzc09iamVjdElkKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIC8vIDIuIFByb2Nlc3MgdGhlIHByZS1yZXF1aXNpdGVzXG4gICAgICAgICAgICAgICAgdmFyIHByZXJlcXVpc2l0ZUNvbmYgPSBwcm9jZXNzQ29uZi5wcmVyZXF1aXNpdGVzO1xuICAgICAgICAgICAgICAgIHByZVJlcXVpc2l0ZXMocHJlcmVxdWlzaXRlQ29uZiwgX1dGSW5zdGFuY2UsIHN1YlByb2Nlc3NPYmplY3RJZCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gMy4gSW5pdGlhdGUgdGhlIHN1YlByb2Nlc3NcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluaXRpYXRlQ29uZiA9IHN1YlByb2Nlc3NDb25mLmluaXRpYXRlO1xuICAgICAgICAgICAgICAgICAgICBpbml0aWF0ZShpbml0aWF0ZUNvbmYsIHN1YlByb2Nlc3MsIGRhdGEpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL1VwZGF0ZSB0aGUgc3ViUHJvY2VzcyBtb2RlbFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuaW5pdGlhdGVkID0gcmVzdWx0LmRhdGEuaW5pdGlhdGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuZGF0ZXMgPSByZXN1bHQuZGF0YS5kYXRlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4ZWN1dGUgdGhlIGZpcnN0IHN0ZXBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGVwSWQgPSBzdWJQcm9jZXNzQ29uZi5zdGVwc1swXS5faWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNpdGlvbklkID0gc3ViUHJvY2Vzc0NvbmYuc3RlcHNbMF0udHJhbnNpdGlvblswXS5faWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RlcFNlcSA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwKHByb2Nlc3NJZCwgcHJvY2Vzc1NlcSwgc3ViUHJvY2Vzc0lkLCBzdWJQcm9jZXNzU2VxLCBzdGVwSWQsIHN0ZXBTZXEsIGRhdGEsIF9XRkluc3RhbmNlLCBzdWJQcm9jZXNzT2JqZWN0SWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU3RlcCBleGVjdXRpb24gY29tcGxldGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3RlcCA9IHJlc3VsdC5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRpY2F0b3JzKHN1YlByb2Nlc3NDb25mLmluZGljYXRvcnMsIF9XRkluc3RhbmNlLCBtb2RlbC5faWQpLnRoZW4oZnVuY3Rpb24ocmVzdWx0MSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuaW5kaWNhdG9ycyA9IHJlc3VsdDEuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaW5kaWNhdG9ycyBmdW5jdGlvbiBleGVjdXRpb24gY29tcGxldGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQxKTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFeGVjdXRlIHRoZSB0cmFuc2l0aW9ucywgaWYgYXV0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9TdWJwcm9jZXNzIHBvc3RBY3Rpb25zIHJlbW92ZWQgZnJvbSBoZXJlIGFzIHRoZXkgc2hvdWxkIGJlIGV4ZWN1dGVkIGF0IHRoZSBlbmQgb2YgdGhlIHN1YlByb2Nlc3MsIG1lYW5zIGF0IGxhc3Qgc3RlcCBhZnRlciB0cmFuc2l0aW9uLCBqdXN0IGJlZm9yZSBmaW5pc2guXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhbiBhZGQgaGlzdG9yeSBvYmplY3QgaGVyZSBpbiBjYXNlIGZvciBmaXJzdCBzdGVwLCBpLmUgaW5pdGlhbGlzYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1vZGVsLmhpc3RvcnkucHVzaChyZXN1bHQuZGF0YSk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MocmVzdWx0MS5tZXNzYWdlLCBtb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyID09ICcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfV0ZJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHN1YlByb2Nlc3NPYmplY3RJZCk7XG5cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX1dGSW5zdGFuY2Uuc3VicHJvY2Vzc2VzID0gX1dGSW5zdGFuY2Uuc3VicHJvY2Vzc2VzLmZpbHRlcihmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIShvYmouX2lkID09IHN1YlByb2Nlc3NPYmplY3RJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICBfV0ZJbnN0YW5jZS5zdWJwcm9jZXNzZXMgPSBfV0ZJbnN0YW5jZS5zdWJwcm9jZXNzZXMuZmlsdGVyKGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEob2JqLl9pZCA9PSBzdWJQcm9jZXNzT2JqZWN0SWQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgIF9XRkluc3RhbmNlLnN1YnByb2Nlc3NlcyA9IF9XRkluc3RhbmNlLnN1YnByb2Nlc3Nlcy5maWx0ZXIoZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhKG9iai5faWQgPT0gc3ViUHJvY2Vzc09iamVjdElkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH1cblxuICAgIH0pO1xufTtcblxuLyoqXG4gKiBQcm9jZXNzIGluaXRpYXRlXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGluaXRpYXRlIC0gdGhlIGluaXRpYXRlIGNvbmZpZyBkYXRhXG4gKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIHRoZSB1c2VyIGlucHV0IGRhdGFcbiAqXG4gKiBAZXhhbXBsZSAnJ1xuICpcbiAqIEByZXR1cm4gJydcbiAqXG4gKi9cbmZ1bmN0aW9uIGluaXRpYXRlKGluaXRpYXRlLCBzdWJQcm9jZXNzLCBkYXRhKSB7XG4gICAgdmFyIGNvbXBsZXRlZCA9IFtdO1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIGluaXRpYXRlZDogZmFsc2UsXG4gICAgICAgIGRhdGVzOiB7XG4gICAgICAgICAgICBjcmVhdGVkOiAnJyxcbiAgICAgICAgICAgIHZhbGlkOiAnJyxcbiAgICAgICAgICAgIHN0YXJ0OiAnJyxcbiAgICAgICAgICAgIGR1ZTogJycsXG4gICAgICAgICAgICBjbG9zZWQ6ICcnXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciBpbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIGlmIChpbml0aWF0ZS51c2VyICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5kYXRlcy5jcmVhdGVkID0gZGF0YS5jcmVhdGVkRGF0ZTtcbiAgICAgICAgICAgICAgICBpZiAoaW5pdGlhdGUudXNlci52YWxpZERhdGUuX3R5cGUgPT0gJ3VzZXJTZWxlY3RlZCcgfHwgaW5pdGlhdGUudXNlci52YWxpZERhdGUuX3R5cGUgPT0gJ2F1dG9TZWxlY3RlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEudmFsaWREYXRlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmRhdGVzLnZhbGlkID0gZGF0YS52YWxpZERhdGU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuZGF0ZXMudmFsaWQgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc3Vic3RyaW5nKDAsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGluaXRpYXRlLnVzZXIuZHVlRGF0ZS5fdHlwZSA9PSAndXNlclNlbGVjdGVkJyB8fCBpbml0aWF0ZS51c2VyLmR1ZURhdGUuX3R5cGUgPT0gJ2F1dG9TZWxlY3RlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZHVlRGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuZGF0ZXMuZHVlID0gZGF0YS5kdWVEYXRlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC53YXJuKCdXRkluaXRpYXRlRXJyb3InLCAnTm8gZHVlIGRhdGUgcGFzc2VkIGluIC0ge2RhdGEuZHVlRGF0ZX0nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmVzdWx0LmRhdGVzLnN0YXJ0ID0gZGF0YS5maXJzdERhdGU7XG5cblxuXG4gICAgICAgICAgICAgICAgcmVzdWx0LmluaXRpYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ1N1Yi1Qcm9jZXNzIGluaXRpYXRlIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuJywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGluaXRpYXRlLmF1dG8gIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgIHJlc3VsdC5kYXRlcy5jcmVhdGVkID0gZGF0YS5jcmVhdGVkRGF0ZTtcblxuICAgICAgICAgICAgICAgIGlmIChpbml0aWF0ZS5kYXRlcy52YWxpZC5fdHlwZSA9PSAndXNlclNlbGVjdGVkJyB8fCBpbml0aWF0ZS5kYXRlcy52YWxpZC5fdHlwZSA9PSAnYXV0b1NlbGVjdGVkJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS52YWxpZERhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmRhdGVzLnZhbGlkID0gZGF0YS52YWxpZERhdGU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLndhcm4oJ1dGSW5pdGlhdGVFcnJvcicsICdObyB2YWxpZCBkYXRlIHBhc3NlZCBpbiAtIHtkYXRhLnZhbGlkRGF0ZX0nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGluaXRpYXRlLmRhdGVzLmR1ZS5fdHlwZSA9PSAndXNlclNlbGVjdGVkJyB8fCBpbml0aWF0ZS5kYXRlcy5kdWUuX3R5cGUgPT0gJ2F1dG9TZWxlY3RlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZHVlRGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuZGF0ZXMuZHVlID0gZGF0YS5kdWVEYXRlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC53YXJuKCdXRkluaXRpYXRlRXJyb3InLCAnTm8gZHVlIGRhdGUgcGFzc2VkIGluIC0ge2RhdGEuZHVlRGF0ZX0nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmVzdWx0LmluaXRpYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ1N1Yi1Qcm9jZXNzIGluaXRpYXRlIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuJywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpOyovXG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSB1dGlsLmVycm9yKCdXRkluaXRpYXRlRXJyb3InLCAnSW5pdGlhdGUgdHlwZTogJyArIGluaXRpYXRlLl90eXBlICsgJyBub3QgZGVmaW5lZC4nKTtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdWJQcm9jZXNzLmNvbXBsZXRlID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5pdCgpO1xuICAgICAgICB9IGVsc2UgaWYgKCFzdWJQcm9jZXNzLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICBpZiAoaW5pdGlhdGUucGFyYWxsZWxJbnN0YW5jZXMpIHtcbiAgICAgICAgICAgICAgICBpbml0KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IHV0aWwuZXJyb3IoJ1dGSW5pdGlhdGVFcnJvcicsICdTdWItcHJvY2VzczogJyArIHN1YlByb2Nlc3MuaWQgKyAnIHN0aWxsIGFjdGl2ZSBhbmQgcGFyYWxsZWwgaW5zdGFuY2VzIGFyZSBub3QgYWxsb3dlZC4nKTtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH0pO1xufTtcblxuLyoqXG4gKiBQcm9jZXNzIHN0ZXBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvY2Vzc0lkIC0gdGhlIGN1cnJlbnQgcHJvY2VzcyBpZFxuICogQHBhcmFtIHtzdHJpbmd9IHN1YlByb2Nlc3NJZCAtIHRoZSBjdXJyZW50IHN1Yi1wcm9jZXNzIGlkXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RlcElkIC0gdGhlIGN1cnJlbnQgc3ViLXByb2Nlc3Mgc3RlcCBpZFxuICogQHBhcmFtIHtudW1iZXJ9IHN0ZXBTZXEgLSB0aGUgY3VycmVudCBzdWItcHJvY2VzcyBzdGVwIGluc3RhbmNlIGNvdW50ZXIgLyBzZXF1ZW5jZVxuICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSB0aGUgdXNlciBpbnB1dCBkYXRhXG4gKiBAcGFyYW0ge29iamVjdH0gX1dGSW5zdGFuY2UgLSB0aGUgY3VycmVudCBfV0ZJbnN0YW5jZSBjb25zdHJ1Y3RvciBpbnN0YW5jZVxuICpcbiAqIEBleGFtcGxlICcnXG4gKlxuICogQHJldHVybiAnJ1xuICpcbiAqL1xuZnVuY3Rpb24gc3RlcChwcm9jZXNzSWQsIHByb2Nlc3NTZXEsIHN1YlByb2Nlc3NJZCwgc3ViUHJvY2Vzc1NlcSwgc3RlcElkLCBzdGVwU2VxLCBkYXRhLCBfV0ZJbnN0YW5jZSwgc3B1dWlkKSB7XG5cbiAgICAvLyBEZWZhdWx0IHN0ZXAgbW9kZWxcbiAgICB2YXIgbW9kZWwgPSB7XG4gICAgICAgIGtleTogZ2VuZXJhdGVVVUlEKCksXG4gICAgICAgIGlkOiAnJyxcbiAgICAgICAgc2VxOiAnJyxcbiAgICAgICAgc3RhdHVzOiAnJyxcbiAgICAgICAgbWVzc2FnZTogJycsXG4gICAgICAgIGFzc2lnbmVkVG86IHtcbiAgICAgICAgICAgIHVzZXJJZDogJycsXG4gICAgICAgICAgICBuYW1lOiAnJyxcbiAgICAgICAgICAgIGRhdGVUaW1lOiAnJyxcbiAgICAgICAgICAgIHR5cGU6ICcnLFxuICAgICAgICAgICAgZHVlRGF0ZVRpbWU6ICcnLFxuICAgICAgICAgICAgYnk6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIGFzc2lnbm1lbnRIaXN0b3J5OiBbXSxcbiAgICAgICAgZGF0ZVRpbWVDcmVhdGVkOiBtb21lbnQoKS5mb3JtYXQoKSxcbiAgICAgICAgZHVlRGF0ZVRpbWU6IG1vbWVudCgpLmZvcm1hdCgpLFxuICAgICAgICB0cmFuc2l0aW9uOiB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uSWQ6ICcnLFxuICAgICAgICAgICAgZGF0ZVRpbWU6ICcnLFxuICAgICAgICAgICAgdXNlcklkOiAnJ1xuICAgICAgICB9LFxuICAgICAgICBhc3NpZ25tZW50OiB7fSxcbiAgICAgICAgY29tbWVudDogJydcbiAgICB9O1xuXG4gICAgdmFyIHN1YlByb2Nlc3MgPSB7fTtcblxuICAgIHZhciB1dWlkID0gJyc7XG4gICAgdmFyIGluc3RTdWJQcm9jZXNzO1xuICAgIHZhciBzdGVwID0ge307XG5cbiAgICB2YXIgdHJhbnNpdGlvbklkID0gJyc7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy9HZXQgdGhlIGN1cnJlbnQgc3ViUHJvY2VzcyBpbnN0YW5jZSBkYXRhXG4gICAgICAgICAgICBfV0ZJbnN0YW5jZS5pbnN0YW5jZS5wcm9jZXNzZXMuZmlsdGVyKGZ1bmN0aW9uKG9ialByb2Nlc3MpIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqUHJvY2Vzcy5pZCA9PSBwcm9jZXNzSWQgJiYgb2JqUHJvY2Vzcy5zZXEgPT0gcHJvY2Vzc1NlcSkge1xuICAgICAgICAgICAgICAgICAgICBvYmpQcm9jZXNzLnN1YlByb2Nlc3Nlcy5maWx0ZXIoZnVuY3Rpb24ob2JqU3ViUHJvY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9ialN1YlByb2Nlc3MuaWQgPT0gc3ViUHJvY2Vzc0lkICYmIG9ialN1YlByb2Nlc3Muc2VxID09IHN1YlByb2Nlc3NTZXEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dWlkID0gb2JqU3ViUHJvY2Vzcy51dWlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgX1dGSW5zdGFuY2Uuc3VicHJvY2Vzc2VzLmZpbHRlcihmdW5jdGlvbihzdWJQcm9jZXNzSXRlbSkge1xuICAgICAgICAgICAgICAgIGlmIChzdWJQcm9jZXNzSXRlbS5faWQgPT0gdXVpZCkge1xuICAgICAgICAgICAgICAgICAgICBpbnN0U3ViUHJvY2VzcyA9IHN1YlByb2Nlc3NJdGVtO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF9XRkluc3RhbmNlLmNvbmZpZy5wcm9jZXNzZXMuZmlsdGVyKGZ1bmN0aW9uKG9ialByb2Nlc3MpIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqUHJvY2Vzcy5faWQgPT0gcHJvY2Vzc0lkKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ialByb2Nlc3Muc3ViUHJvY2Vzc2VzLmZpbHRlcihmdW5jdGlvbihvYmpTdWJQcm9jZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqU3ViUHJvY2Vzcy5faWQgPT0gc3ViUHJvY2Vzc0lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViUHJvY2VzcyA9IG9ialN1YlByb2Nlc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqU3ViUHJvY2Vzcy5zdGVwcy5maWx0ZXIoZnVuY3Rpb24ob2JqU3RlcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqU3RlcC5faWQgPT0gc3RlcElkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVwID0gb2JqU3RlcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHN1Yi1wcm9jZXNzIHN0ZXAgZGF0YVxuICAgICAgICAgICAgbW9kZWwuaWQgPSBzdGVwSWQ7XG4gICAgICAgICAgICBtb2RlbC5zZXEgPSBzdGVwU2VxO1xuXG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VTdGF0dXMgPSAnJztcbiAgICAgICAgICAgIGlmIChzdGVwLnNldEluc3RhbmNlU3RhdHVzVG8uTm90U3RhcnRlZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZVN0YXR1cyA9IFwiTm90U3RhcnRlZFwiO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGVwLnNldEluc3RhbmNlU3RhdHVzVG8uQ3JlYXRlZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZVN0YXR1cyA9IFwiQ3JlYXRlZFwiO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGVwLnNldEluc3RhbmNlU3RhdHVzVG8uSW5Qcm9ncmVzcyAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZVN0YXR1cyA9IFwiSW5Qcm9ncmVzc1wiO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGVwLnNldEluc3RhbmNlU3RhdHVzVG8uU3VibWl0dGVkICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlU3RhdHVzID0gXCJTdWJtaXR0ZWRcIjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RlcC5zZXRJbnN0YW5jZVN0YXR1c1RvLkNvbXBsZXRlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlU3RhdHVzID0gXCJDb21wbGV0ZVwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbGFuZ3VhZ2UgPSBzZXJ2aWNlLmdldExhbmd1YWdlKCk7XG5cbiAgICAgICAgICAgIG1vZGVsLnN0YXR1cyA9IGluc3RhbmNlU3RhdHVzO1xuICAgICAgICAgICAgbW9kZWwubWVzc2FnZSA9IGV2YWwoXCJzdGVwLnNldEluc3RhbmNlU3RhdHVzVG8uXCIgKyBpbnN0YW5jZVN0YXR1cyArIFwiLmxhYmVsLmkxOG4uXCIgKyBsYW5ndWFnZSk7XG4gICAgICAgICAgICBtb2RlbC5jb21tZW50ID0gZGF0YS5jb21tZW50ICE9PSB1bmRlZmluZWQgPyBkYXRhLmNvbW1lbnQgOiAnJztcbiAgICAgICAgICAgIHZhciBpbmRpY2F0b3JzID0gaW5zdFN1YlByb2Nlc3MgIT09IHVuZGVmaW5lZCA/IGluc3RTdWJQcm9jZXNzLmluZGljYXRvcnMgOiBbXTtcblxuICAgICAgICAgICAgdmFyIHVwZGF0ZVNQSW5kaWNhdG9yT2JqZWN0ID0gZnVuY3Rpb24oaW5kaWNhdG9ycywgX1dGSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5kaWNhdG9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5kaWNhdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGljYXRvck9iamVjdCA9IGluZGljYXRvcnNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXVpZCA9IGluZGljYXRvck9iamVjdC5pbnN0YW5jZXNbMF0udXVpZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVkU2VxID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXS9tb2RlbC9wZW5kaW5nL3NlcVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kaWNhdG9yT2JqZWN0Lmluc3RhbmNlc1swXS5zZXEgPSB1cGRhdGVkU2VxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBjbGVhclNQU3RhdHVzID0gZnVuY3Rpb24oc3B1dWlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBzcHV1aWQgKyBcIiddXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgb2JqLnNwU3RhdHVzID0gXCJcIjtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGluZGljYXRvckRvY3MocHJvY2Vzc0lkLCBpbmRpY2F0b3JzLCBtb2RlbCwgX1dGSW5zdGFuY2UpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgdXVpZCA9IHNwdXVpZDtcblxuICAgICAgICAgICAgICAgIGlmIChzdGVwLmZ1bmN0aW9uLmFjdGlvbnMgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbnMoc3RlcC5mdW5jdGlvbi5hY3Rpb25zLCBwcm9jZXNzSWQsIHByb2Nlc3NTZXEsIHN1YlByb2Nlc3NJZCwgc3ViUHJvY2Vzc1NlcSwgc3ViUHJvY2VzcywgbW9kZWwsIF9XRkluc3RhbmNlLCBkYXRhLCBzcHV1aWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXNzaWduZWUgPSBtb2RlbC5hc3NpZ25lZFRvO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWUubmFtZSA9IExPQ0FMX1NFVFRJTkdTLlNFU1NJT04uZmlyc3ROYW1lICsgXCIgXCIgKyBMT0NBTF9TRVRUSU5HUy5TRVNTSU9OLmxhc3ROYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVlLnVzZXJJZCA9IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcklkICsgXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZS5kYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVlLnR5cGUgPSBBU1NJR05NRU5UX1RZUEVfQVVUTztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZS5kdWVEYXRlVGltZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVlLmJ5ID0gTE9DQUxfU0VUVElOR1MuU1VCU0NSSVBUSU9OUy51c2VySWQgKyBcIlwiO1xuXG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVNQSW5kaWNhdG9yT2JqZWN0KGluZGljYXRvcnMsIF9XRkluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNpdGlvbklkID0gc3RlcC50cmFuc2l0aW9uWzBdLl9pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uKHByb2Nlc3NJZCwgcHJvY2Vzc1NlcSwgc3ViUHJvY2Vzc0lkLCBzdWJQcm9jZXNzU2VxLCBzdGVwSWQsIHRyYW5zaXRpb25JZCwgZGF0YSwgX1dGSW5zdGFuY2UsIHNwdXVpZCwgbW9kZWwpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdUcmFuc2l0aW9uIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuJywgcmVzdWx0LmRhdGEuc3RlcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2VyciBmcm9tIGFjdGlvbnMoKScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGVwLmZ1bmN0aW9uLnRhc2sgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1ha2UgYXNzaWdubWVudHNcbiAgICAgICAgICAgICAgICAgICAgdGFzayhwcm9jZXNzSWQsIHByb2Nlc3NTZXEsIHN0ZXAuZnVuY3Rpb24udGFzaywgc3B1dWlkLCBtb2RlbCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlU1BJbmRpY2F0b3JPYmplY3QoaW5kaWNhdG9ycywgX1dGSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ1Rhc2sgYXdhaXRpbmcgdXNlciBhY3Rpb24uJywgbW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0ZXAuZnVuY3Rpb24uc2VydmVyICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBNYWtlIGFzc2lnbm1lbnRzXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyU1BTdGF0dXMoc3B1dWlkKTtcbiAgICAgICAgICAgICAgICAgICAgc2VydmVyKHN0ZXAuZnVuY3Rpb24uc2VydmVyLCBwcm9jZXNzSWQsIHByb2Nlc3NTZXEsIHN1YlByb2Nlc3NJZCwgc3ViUHJvY2Vzc1NlcSwgc3ViUHJvY2VzcywgbW9kZWwsIF9XRkluc3RhbmNlLCBkYXRhLCBzcHV1aWQpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVNQSW5kaWNhdG9yT2JqZWN0KGluZGljYXRvcnMsIF9XRkluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdTZXJ2ZXIgYXdhaXRpbmcgc2VydmVyIHJlc3BvbnNlLicsIG1vZGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfVxuXG4gICAgfSk7XG59O1xuXG4vKipcbiAqIFByb2Nlc3MgaW5kaWNhdG9yIHVwZGF0ZXNcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gYWN0aW9ucyAtIHRoZSBhY3Rpb25zIGNvbmZpZyBkYXRhXG4gKiBAcGFyYW0ge29iamVjdH0gc3ViUHJvY2VzcyAtIHRoZSBjdXJyZW50IHN1Yi1wcm9jZXNzIGZvcm0gY29uZmlnIGRhdGFcbiAqIEBwYXJhbSB7b2JqZWN0fSBfV0ZJbnN0YW5jZSAtIHRoZSBjdXJyZW50IHdvcmtmbG93IGNvbnN0cnVjdG9yIGluc3RhbmNlXG4gKlxuICogQGV4YW1wbGUgJydcbiAqXG4gKiBAcmV0dXJuICcnXG4gKlxuICovXG5mdW5jdGlvbiBpbmRpY2F0b3JzKGluZGljYXRvcnMsIF9XRkluc3RhbmNlLCBzcHV1aWQpIHtcbiAgICB2YXIgbW9kZWwgPSBbXTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgYXJyYXkgPSBKU09OLnhwYXRoKFwiaW5kaWNhdG9yc1tmbjpjb3VudCguL3dvcmtmbG93cy9wcm9jZXNzZXNbc3ViUHJvY2Vzc1VVSUQgZXEgJ1wiICsgc3B1dWlkICsgXCInXSkgZ3QgMF1cIiwgX1dGSW5zdGFuY2UsIHt9KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaW5kaWNhdG9yIGZ1bmN0aW9uXCIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYXJyYXkpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGFycmF5Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZGljYXRvciA9IGFycmF5W2pdO1xuICAgICAgICAgICAgICAgIHZhciBpbmRpY2F0b3JNb2RlbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICcnLFxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZXM6IFtdXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlTW9kZWwgPSB7XG4gICAgICAgICAgICAgICAgICAgIHV1aWQ6ICcnLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJycsXG4gICAgICAgICAgICAgICAgICAgIGtleTogJycsXG4gICAgICAgICAgICAgICAgICAgIHNlcTogMSxcbiAgICAgICAgICAgICAgICAgICAgcmV2OiAnJ1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGluZGljYXRvck1vZGVsLmlkID0gaW5kaWNhdG9yLmNhdGVnb3J5LnRlcm07XG4gICAgICAgICAgICAgICAgaW5zdGFuY2VNb2RlbC51dWlkID0gaW5kaWNhdG9yLl9pZDtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZU1vZGVsLnJldiA9IGluZGljYXRvci5fcmV2O1xuICAgICAgICAgICAgICAgIGluc3RhbmNlTW9kZWwudGl0bGUgPSBpbmRpY2F0b3IudGl0bGU7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2VNb2RlbC5rZXkgPSAnJztcbiAgICAgICAgICAgICAgICBpbnN0YW5jZU1vZGVsLnNlcSA9IGluZGljYXRvci5tb2RlbC5wZW5kaW5nLnNlcTsgLy8gaW5kaWNhdG9yIHNlcSBudW1iZXIgaGVyZSB3aGljaCBpcyBnZXR0aW5nIHVwZGF0ZWQuXG4gICAgICAgICAgICAgICAgaW5kaWNhdG9yTW9kZWwuaW5zdGFuY2VzLnB1c2goaW5zdGFuY2VNb2RlbCk7XG4gICAgICAgICAgICAgICAgbW9kZWwucHVzaChpbmRpY2F0b3JNb2RlbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdQcm9jZXNzIGluZGljYXRvciBtb2RlbCB1cGRhdGVkLicsIG1vZGVsKTtcbiAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH1cblxuICAgIH0pXG59O1xuXG4vKipcbiAqIFByb2Nlc3MgYXNzaWduIHVzZXJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvY2Vzc0lkIC0gdGhlIFdvcmtmbG93IGNvbmZpZyAvIGRlZmluaXRpb24gcHJvY2VzcyBpZFxuICogQHBhcmFtIHtudW1iZXJ9IHByb2Nlc3NTZXEgLSB0aGUgV29ya2Zsb3cgaW5zdGFuY2UgcHJvY2VzcyBzZXFcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdWJQcm9jZXNzSWQgLSB0aGUgV29ya2Zsb3cgY29uZmlnIC8gZGVmaW5pdGlvbiBzdWItcHJvY2VzcyBpZFxuICogQHBhcmFtIHtudW1iZXJ9IHN1YlByb2Nlc3NTZXEgLSB0aGUgV29ya2Zsb3cgaW5zdGFuY2Ugc3ViLXByb2Nlc3Mgc2VxXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RlcElkIC0gdGhlIFdvcmtmbG93IGNvbmZpZyAvIGRlZmluaXRpb24gc3RlcCBpZFxuICogQHBhcmFtIHtzdHJpbmd9IHRyYW5zaXRpb25JZCAtIHRoZSBXb3JrZmxvdyBjb25maWcgLyBkZWZpbml0aW9uIHRyYW5zaXRpb24gaWRcbiAqIEBwYXJhbSB7b2JqZWN0fSB1c2VyIC0gdGhlIHVzZXIgdG8gYXNzaWduIHRvXG4gKiBAcGFyYW0ge29iamVjdH0gX1dGSW5zdGFuY2UgLSB0aGUgY3VycmVudCB3b3JrZmxvdyBjb25zdHJ1Y3RvciBpbnN0YW5jZVxuICpcbiAqIEBleGFtcGxlICcnXG4gKlxuICogQHJldHVybiAnJ1xuICpcbiAqL1xuZnVuY3Rpb24gYXNzaWduVXNlcihwcm9jZXNzSWQsIHByb2Nlc3NTZXEsIHN1YlByb2Nlc3NJZCwgc3ViUHJvY2Vzc1NlcSwgdXNlciwgdXVpZCwgX1dGSW5zdGFuY2UpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHRyeSB7XG5cbiAgICAgICAgICAgIC8vIEdldCB0aGUgY3VycmVudCBzdWJQcm9jZXNzIGluc3RhbmNlIGRhdGFcblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgIF9XRkluc3RhbmNlLmluc3RhbmNlLnByb2Nlc3Nlcy5maWx0ZXIoZnVuY3Rpb24gKG9ialByb2Nlc3MpIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqUHJvY2Vzcy5pZCA9PSBwcm9jZXNzSWQgJiYgb2JqUHJvY2Vzcy5zZXEgPT0gcHJvY2Vzc1NlcSkge1xuICAgICAgICAgICAgICAgICAgICBvYmpQcm9jZXNzLnN1YlByb2Nlc3Nlcy5maWx0ZXIoZnVuY3Rpb24gKG9ialN1YlByb2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmpTdWJQcm9jZXNzLmlkID09IHN1YlByb2Nlc3NJZCAmJiBvYmpTdWJQcm9jZXNzLnNlcSA9PSBzdWJQcm9jZXNzU2VxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXVpZCA9IG9ialN1YlByb2Nlc3MudXVpZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICBfV0ZJbnN0YW5jZS5zdWJwcm9jZXNzZXMuZmlsdGVyKGZ1bmN0aW9uKHN1YlByb2Nlc3NJdGVtKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1YlByb2Nlc3NJdGVtLl9pZCA9PSB1dWlkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vQWRkZWQgdG8gaHN0b3J5XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJQcm9jZXNzSXRlbS5zdGVwLmFzc2lnbm1lbnRIaXN0b3J5ID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViUHJvY2Vzc0l0ZW0uc3RlcC5hc3NpZ25tZW50SGlzdG9yeSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJQcm9jZXNzSXRlbS5zdGVwLmFzc2lnbmVkVG8udXNlcklkICE9IFwiXCIgJiYgc3ViUHJvY2Vzc0l0ZW0uc3RlcC5hc3NpZ25lZFRvLm5hbWUgIT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViUHJvY2Vzc0l0ZW0uc3RlcC5hc3NpZ25tZW50SGlzdG9yeS5wdXNoKEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3ViUHJvY2Vzc0l0ZW0uc3RlcC5hc3NpZ25lZFRvKSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHVzZXIgZGV0YWlsc1xuICAgICAgICAgICAgICAgICAgICBzdWJQcm9jZXNzSXRlbS5zdGVwLmFzc2lnbmVkVG8udXNlcklkID0gdXNlci5pZDtcbiAgICAgICAgICAgICAgICAgICAgc3ViUHJvY2Vzc0l0ZW0uc3RlcC5hc3NpZ25lZFRvLm5hbWUgPSB1c2VyLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHN1YlByb2Nlc3NJdGVtLnN0ZXAuYXNzaWduZWRUby5kYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgICAgICBzdWJQcm9jZXNzSXRlbS5zdGVwLmFzc2lnbmVkVG8udHlwZSA9IEFTU0lHTk1FTlRfVFlQRV9SRUFTU0lHTk1FTlQ7XG4gICAgICAgICAgICAgICAgICAgIHN1YlByb2Nlc3NJdGVtLnN0ZXAuYXNzaWduZWRUby5kdWVEYXRlVGltZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBzdWJQcm9jZXNzSXRlbS5zdGVwLmFzc2lnbmVkVG8uYnkgPSBMT0NBTF9TRVRUSU5HUy5TVUJTQ1JJUFRJT05TLnVzZXJJZCArIFwiXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBpbmRpY2F0b3JzIHVzZXIgZGV0YWlsc1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kaWNhdG9ycyA9IHN1YlByb2Nlc3NJdGVtLmluZGljYXRvcnM7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5kaWNhdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGljYXRvciA9IGluZGljYXRvcnNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGluZGljYXRvci5pbnN0YW5jZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBpbmRpY2F0b3IuaW5zdGFuY2VzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgX1dGSW5zdGFuY2UuaW5kaWNhdG9ycy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZG9jID0gX1dGSW5zdGFuY2UuaW5kaWNhdG9yc1trXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLnV1aWQgPT0gZG9jLl9pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jLndvcmtmbG93cy5maWx0ZXIoZnVuY3Rpb24od29ya2Zsb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod29ya2Zsb3cuaWQgPT0gX1dGSW5zdGFuY2UuY29uZmlnLl9pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JrZmxvdy5wcm9jZXNzZXMuZmlsdGVyKGZ1bmN0aW9uKHByb2Nlc3NJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc0l0ZW0uaWQgPT0gcHJvY2Vzc0lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSB1c2VyIGlkIGFuZCBuYW1lIGluIHRoZSBkb2N1bWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NJdGVtLnN0ZXAuYXNzaWduZWRUby51c2VySWQgPSB1c2VyLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NJdGVtLnN0ZXAuYXNzaWduZWRUby5uYW1lID0gdXNlci5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vU2VuZCBhc3NpZ24gdXNlciBub3RpZmljYXRpb24gZnJvbSBoZXJlXG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vdGlmaWNhdGlvbiA9IEpTT04ueHBhdGgoXCIvcHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBwcm9jZXNzSWQgKyBcIiddL25vdGlmaWNhdGlvbnNcIiwgX1dGSW5zdGFuY2UuY29uZmlnLCB7fSlbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGlmaWNhdGlvbiAhPSB1bmRlZmluZWQgJiYgbm90aWZpY2F0aW9uLnJlQXNzaWdubWVudCAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uc01vZHVsZS5ub3RpZmljYXRpb24ucmVBc3NpZ25tZW50Tm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgX1dGSW5zdGFuY2UsIHV1aWQsIHVzZXIpLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHV0aWwuc3VjY2VzcygnVXNlciBhc3NpZ25lZCBzdWNjZXNzZnVsbHkuIFVzZXJJZDogXCInICsgdXNlci5pZCArICdcIiwgTmFtZTogXCInICsgdXNlci5uYW1lICsgJ1wiJywgc3ViUHJvY2Vzc0l0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGZhaWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShmYWlsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdVc2VyIGFzc2lnbmVkIHN1Y2Nlc3NmdWxseS4gVXNlcklkOiBcIicgKyB1c2VyLmlkICsgJ1wiLCBOYW1lOiBcIicgKyB1c2VyLm5hbWUgKyAnXCInLCBzdWJQcm9jZXNzSXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuXG5cblxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9XG5cbiAgICB9KTtcbn07XG5cbi8qKlxuICogUHJvY2VzcyBpbmRpY2F0b3IgZG9jdW1lbnQgdXBkYXRlc1xuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBhY3Rpb25zIC0gdGhlIGFjdGlvbnMgY29uZmlnIGRhdGFcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdWJQcm9jZXNzIC0gdGhlIGN1cnJlbnQgc3ViLXByb2Nlc3MgZm9ybSBjb25maWcgZGF0YVxuICogQHBhcmFtIHtvYmplY3R9IF9XRkluc3RhbmNlIC0gdGhlIGN1cnJlbnQgd29ya2Zsb3cgY29uc3RydWN0b3IgaW5zdGFuY2VcbiAqXG4gKiBAZXhhbXBsZSAnJ1xuICpcbiAqIEByZXR1cm4gJydcbiAqXG4gKi9cbmZ1bmN0aW9uIGluZGljYXRvckRvY3MocHJvY2Vzc0lkLCBpbmRpY2F0b3JzLCBzdGVwLCBfV0ZJbnN0YW5jZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgaW5kaWNhdG9yIHNlY3Rpb25zIG9mIHRoZSBzdWJQcm9jZXNzXG4gICAgICAgICAgICBpZiAoaW5kaWNhdG9ycyA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSB1dGlsLmVycm9yKCdXRkluZGljYXRvcnNVcGRhdGUnLCAnSW5kaWNhdG9ycyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQuIC0gVmFsdWU6ICcgKyBpbmRpY2F0b3JzKVxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluZGljYXRvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGljYXRvciA9IGluZGljYXRvcnNbaV07XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaW5kaWNhdG9yLmluc3RhbmNlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gaW5kaWNhdG9yLmluc3RhbmNlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgX1dGSW5zdGFuY2UuaW5kaWNhdG9ycy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkb2MgPSBfV0ZJbnN0YW5jZS5pbmRpY2F0b3JzW2tdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZS51dWlkID09IGRvYy5faWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jLndvcmtmbG93cy5maWx0ZXIoZnVuY3Rpb24od29ya2Zsb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3b3JrZmxvdy5pZCA9PSBfV0ZJbnN0YW5jZS5jb25maWcuX2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29ya2Zsb3cucHJvY2Vzc2VzLmZpbHRlcihmdW5jdGlvbihwcm9jZXNzSXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc0l0ZW0uaWQgPT0gcHJvY2Vzc0lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzSXRlbS5zdGVwLmlkID0gc3RlcC5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NJdGVtLnN0ZXAuc2VxID0gc3RlcC5zZXE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzSXRlbS5zdGVwLnN0YXR1cyA9IHN0ZXAuc3RhdHVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0l0ZW0uc3RlcC5tZXNzYWdlID0gc3RlcC5tZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0l0ZW0uc3RlcC5hc3NpZ25lZFRvLnVzZXJJZCA9IHN0ZXAuYXNzaWduZWRUby51c2VySWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzSXRlbS5zdGVwLmFzc2lnbmVkVG8ubmFtZSA9IHN0ZXAuYXNzaWduZWRUby5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0l0ZW0uc3RlcC5jb21tZW50ID0gc3RlcC5jb21tZW50ICE9PSB1bmRlZmluZWQgPyBzdGVwLmNvbW1lbnQgOiAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdJbmRpY2F0b3IgZG9jdW1lbnRzIHdvcmtmbG93IHByb2Nlc3MgbW9kZWwgdXBkYXRlZC4nLCBfV0ZJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShzdWNjZXNzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9XG5cbiAgICB9KVxufTtcblxuLyoqXG4gKiBQcm9jZXNzIGFjdGlvbnNcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gYWN0aW9ucyAtIHRoZSBhY3Rpb25zIGNvbmZpZyBkYXRhXG4gKiBAcGFyYW0ge29iamVjdH0gc3ViUHJvY2VzcyAtIHRoZSBjdXJyZW50IHN1Yi1wcm9jZXNzIGZvcm0gY29uZmlnIGRhdGFcbiAqIEBwYXJhbSB7b2JqZWN0fSBfV0ZJbnN0YW5jZSAtIHRoZSBjdXJyZW50IHdvcmtmbG93IGNvbnN0cnVjdG9yIGluc3RhbmNlXG4gKlxuICogQGV4YW1wbGUgJydcbiAqXG4gKiBAcmV0dXJuICcnXG4gKlxuICovXG5cbmZ1bmN0aW9uIGFjdGlvbnMoYWN0aW9ucywgcHJvY2Vzc0lkLCBwcm9jZXNzU2VxLCBzdWJQcm9jZXNzSWQsIHN1YlByb2Nlc3NTZXEsIHN1YlByb2Nlc3MsIHN0ZXAsIF9XRkluc3RhbmNlLCBkYXRhLCB1dWlkKSB7XG4gICAgdmFyIGFyckFjdGlvbnMgPSBbXTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHV0aWwuc3luY0xvb3AoYWN0aW9ucy5sZW5ndGgsIGZ1bmN0aW9uKGxvb3ApIHtcbiAgICAgICAgICAgIHZhciBjb3VudGVyID0gbG9vcC5pdGVyYXRpb24oKTtcbiAgICAgICAgICAgIGFjdGlvbihhY3Rpb25zW2NvdW50ZXJdLCBwcm9jZXNzSWQsIHByb2Nlc3NTZXEsIHN1YlByb2Nlc3NJZCwgc3ViUHJvY2Vzc1NlcSwgc3ViUHJvY2Vzcywgc3RlcCwgX1dGSW5zdGFuY2UsIGRhdGEsIHV1aWQpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXRBY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogYWN0aW9uc1tjb3VudGVyXS5faWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXE6IGNvdW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBhcnJBY3Rpb25zLnB1c2gocmV0QWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgbG9vcC5uZXh0KCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvb3AuYnJlYWsoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ0FjdGlvbnMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseS4nLCBhcnJBY3Rpb25zKTtcbiAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcblxuLyoqXG4gKiBQcm9jZXNzIGFjdGlvblxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBhY3Rpb24gLSB0aGUgYWN0aW9uIGNvbmZpZyBkYXRhXG4gKiBAcGFyYW0ge29iamVjdH0gc3ViUHJvY2VzcyAtIHRoZSBjdXJyZW50IHN1Yi1wcm9jZXNzIGZvcm0gY29uZmlnIGRhdGFcbiAqIEBwYXJhbSB7b2JqZWN0fSBfV0ZJbnN0YW5jZSAtIHRoZSBjdXJyZW50IHdvcmtmbG93IGNvbnN0cnVjdG9yIGluc3RhbmNlXG4gKlxuICogQGV4YW1wbGUgJydcbiAqXG4gKiBAcmV0dXJuICcnXG4gKlxuICovXG5mdW5jdGlvbiBhY3Rpb24oYWN0aW9uLCBwcm9jZXNzSWQsIHByb2Nlc3NTZXEsIHN1YlByb2Nlc3NJZCwgc3ViUHJvY2Vzc1NlcSwgc3ViUHJvY2Vzcywgc3RlcCwgX1dGSW5zdGFuY2UsIGRhdGEsIHV1aWQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgaWYgKGFjdGlvbi5tZXRob2QgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgbWV0aG9kUG9zc2libGVJdGVtcyA9IFtcImZvcm1cIiwgXCJpbmRpY2F0b3JcIiwgXCJwcm9maWxlXCIsIFwic3ViUHJvY2Vzc0luc3RhbmNlXCIsIFwic3RlcFwiLCBcImNvbW11bml0eVwiLCBcImFwcGxpY2F0aW9uXCIsIFwidXNlclwiLCBcInNkb1wiLCBcInBlcmZvcm1hbmNlXCIsIFwidGF4b25vbXlcIiwgXCJ2YXJpYWJsZXNcIiwgXCJub3RpZmljYXRpb25cIiwgXCJyZXBvcnRcIiwgXCJ3b3JrZXJcIiwgXCJwYXJ0aWNpcGFudHNcIl07XG4gICAgICAgICAgICBzd2l0Y2ggKHByb3BlcnR5RXhpc3RzKGFjdGlvbi5tZXRob2QsIG1ldGhvZFBvc3NpYmxlSXRlbXMpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZm9ybSc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24ubWV0aG9kLmZvcm0uY3JlYXRlICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKHByb2Nlc3NJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goc3ViUHJvY2Vzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goc3RlcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goYWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChwcm9jZXNzU2VxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChzdWJQcm9jZXNzU2VxKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKF9XRkluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChkYXRhLmNyZWF0ZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKHV1aWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGRhdGEuYmFzZVVVSUQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmNyZWF0ZShhcmdzKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbi5tZXRob2QuZm9ybS5hdXRob3Jpc2UgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2gocHJvY2Vzc0lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChzdWJQcm9jZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChwcm9jZXNzU2VxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChzdWJQcm9jZXNzU2VxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChfV0ZJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goZGF0YS5jcmVhdGVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaCh1dWlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChkYXRhLmJhc2VVVUlEKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0uYXV0aG9yaXNlKGFyZ3MpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uLm1ldGhvZC5mb3JtLnVuZHJhZnQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKF9XRkluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChkYXRhLmNyZWF0ZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKHV1aWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGRhdGEuYmFzZVVVSUQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5zZXRVbkRyYWZ0KGFyZ3MpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uLm1ldGhvZC5mb3JtLmRyYWZ0ICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChfV0ZJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goZGF0YS5jcmVhdGVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaCh1dWlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChkYXRhLmJhc2VVVUlEKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0uc2V0RHJhZnQoYXJncykudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24ubWV0aG9kLmZvcm0uY2xvc2UgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goc3ViUHJvY2Vzcy5pbmRpY2F0b3JzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChfV0ZJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goZGF0YS5jcmVhdGVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaCh1dWlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChkYXRhLmJhc2VVVUlEKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0uY2xvc2UoYXJncykudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24ubWV0aG9kLmZvcm0uYXV0aG9yaXNlQW5kQ3JlYXRlTmV3U2VxICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKHByb2Nlc3NJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goc3ViUHJvY2Vzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2gocHJvY2Vzc1NlcSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goc3ViUHJvY2Vzc1NlcSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goX1dGSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGRhdGEuY3JlYXRlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2godXVpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goZGF0YS5iYXNlVVVJRCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmF1dGhvcmlzZShhcmdzKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIG5ldyBzZXF1ZW5jZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2gocHJvY2Vzc0lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goc3ViUHJvY2Vzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKHN0ZXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChwcm9jZXNzU2VxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goc3ViUHJvY2Vzc1NlcSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goX1dGSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChkYXRhLmNyZWF0ZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaCh1dWlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2godXVpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5jcmVhdGUoYXJncykudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vRWQgY3JlYXRpb24gb2YgbmV3IHNlcXVlbmNlXG5cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdpbmRpY2F0b3InOlxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLm1ldGhvZC5pbmRpY2F0b3IuY3JlYXRlICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKFwiTm90IGltcGxlbWVudGVkXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uLm1ldGhvZC5pbmRpY2F0b3IuaW5zdGFudGlhdGUgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoXCJOb3QgaW1wbGVtZW50ZWRcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24ubWV0aG9kLmluZGljYXRvci5zZXRWYWx1ZSAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhdGggPSBhY3Rpb24ubWV0aG9kLmluZGljYXRvci5zZXRWYWx1ZS5wYXRoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXIuZ2V0Tm9kZVZhbHVlKGFjdGlvbi5tZXRob2QuaW5kaWNhdG9yLnNldFZhbHVlLmRhdGEsIF9XRkluc3RhbmNlLCB1dWlkKS50aGVuKGZ1bmN0aW9uKGRhdGFWYWx1ZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goX1dGSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaCh1dWlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2gocGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGRhdGFWYWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLnVwZGF0ZUluZGljYXRvcihhcmdzKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbi5tZXRob2QuaW5kaWNhdG9yLnVwZGF0ZVN0YXR1cyAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGljYXRvclNldElkID0gYWN0aW9uLm1ldGhvZC5pbmRpY2F0b3IuaW5kaWNhdG9yU2V0SWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKF9XRkluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaCh1dWlkKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbi5tZXRob2QuaW5kaWNhdG9yLnVwZGF0ZVN0YXR1cyAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdHVzID0gYWN0aW9uLm1ldGhvZC5pbmRpY2F0b3IudXBkYXRlU3RhdHVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChzdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChpbmRpY2F0b3JTZXRJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gS2VlcCBpbmRpY2F0b3IgZnVuY3Rpb25zIGluIGluZGlhdG9yIGZpbGUgaXN0ZWFkIG9mIGZvcm0gZmlsZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLm1hcmtVcGRhdGVJbmRpY2F0b3IoYXJncykudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoXCJBY3Rpb24gaW5kaWNhdG9yIHN1YiB0eXBlIG5vdCBmb3VuZC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24ubWV0aG9kLmluZGljYXRvci5zZXRXcmFwcGVyRWxlbWVudCAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhdGggPSBhY3Rpb24ubWV0aG9kLmluZGljYXRvci5zZXRXcmFwcGVyRWxlbWVudC5wYXRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGljYXRvclNldElkID0gYWN0aW9uLm1ldGhvZC5pbmRpY2F0b3Iuc2V0V3JhcHBlckVsZW1lbnQuaW5kaWNhdG9yU2V0SWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlci5nZXROb2RlVmFsdWUoYWN0aW9uLm1ldGhvZC5pbmRpY2F0b3Iuc2V0V3JhcHBlckVsZW1lbnQuZGF0YSwgX1dGSW5zdGFuY2UsIHV1aWQpLnRoZW4oZnVuY3Rpb24oZGF0YVZhbHVlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChfV0ZJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKHV1aWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChwYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goZGF0YVZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goaW5kaWNhdG9yU2V0SWQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS51cGRhdGVJbmRpY2F0b3JXcmFwcGVyKGFyZ3MpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdwcm9maWxlJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbi5tZXRob2QucHJvZmlsZS5jcmVhdGUgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2gocHJvY2Vzc0lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChfV0ZJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goZGF0YS5jcmVhdGVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaCh1dWlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChkYXRhLmJhc2VVVUlEKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0uY3JlYXRlUHJvZmlsZShhcmdzKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbi5tZXRob2QucHJvZmlsZS5zZXRTdGF0dXNUbyAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0dXMgPSBhY3Rpb24ubWV0aG9kLnByb2ZpbGUuc2V0U3RhdHVzVG87XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChfV0ZJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2godXVpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goc3RhdHVzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5zZXRTdGF0dXMoYXJncykudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N1YlByb2Nlc3NJbnN0YW5jZSc6XG4gICAgICAgICAgICAgICAgICAgIHZhciBzcFBvc3NpYmxlSXRlbXMgPSBbXCJpbnN0YW50aWF0ZVwiLCBcImF1dGhvcmlzZVwiLCBcImNsb3NlXCIsIFwic2V0VmFyaWFibGVcIiwgXCJzZXRTdGF0dXNUb1wiLCBcInNldFN0YXR1c01zZ1RvXCIsIFwic2V0VGl0bGVcIiwgXCJzZXRWYWxpZERhdGVcIiwgXCJzZXRTUFN0YXR1c1wiXTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChwcm9wZXJ0eUV4aXN0cyhhY3Rpb24ubWV0aG9kLnN1YlByb2Nlc3NJbnN0YW5jZSwgc3BQb3NzaWJsZUl0ZW1zKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzZXRUaXRsZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyLmdldE5vZGVWYWx1ZShhY3Rpb24ubWV0aG9kLnN1YlByb2Nlc3NJbnN0YW5jZS5zZXRUaXRsZSwgX1dGSW5zdGFuY2UsIHV1aWQpLnRoZW4oZnVuY3Rpb24oZGF0YVZhbHVlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uc01vZHVsZS5zdWJQcm9jZXNzSW5zdGFuY2Uuc2V0VGl0bGUoYWN0aW9uLm1ldGhvZC5zdWJQcm9jZXNzSW5zdGFuY2Uuc2V0VGl0bGUsIHV1aWQsIGRhdGFWYWx1ZSwgX1dGSW5zdGFuY2UpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZSBzdWJwcm9jZXNzIGxhYmVsIGluIHdvcmtmbG93IGluc3RhbmNlIHByb2Nlc3Mgb2JqZWN0OiBUT0RPXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NldFZhbGlkRGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyLmdldE5vZGVWYWx1ZShhY3Rpb24ubWV0aG9kLnN1YlByb2Nlc3NJbnN0YW5jZS5zZXRWYWxpZERhdGUsIF9XRkluc3RhbmNlLCB1dWlkKS50aGVuKGZ1bmN0aW9uKGRhdGFWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25zTW9kdWxlLnN1YlByb2Nlc3NJbnN0YW5jZS5zZXRWYWxpZERhdGUoYWN0aW9uLm1ldGhvZC5zdWJQcm9jZXNzSW5zdGFuY2Uuc2V0VmFsaWREYXRlLCB1dWlkLCBkYXRhVmFsdWUsIF9XRkluc3RhbmNlKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdXBkYXRlIHN1YnByb2Nlc3MgbGFiZWwgaW4gd29ya2Zsb3cgaW5zdGFuY2UgcHJvY2VzcyBvYmplY3Q6IFRPRE9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzZXRTUFN0YXR1cyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyLmdldE5vZGVWYWx1ZShhY3Rpb24ubWV0aG9kLnN1YlByb2Nlc3NJbnN0YW5jZS5zZXRTUFN0YXR1cywgX1dGSW5zdGFuY2UsIHV1aWQpLnRoZW4oZnVuY3Rpb24oZGF0YVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbnNNb2R1bGUuc3ViUHJvY2Vzc0luc3RhbmNlLnNldFNQU3RhdHVzKGFjdGlvbi5tZXRob2Quc3ViUHJvY2Vzc0luc3RhbmNlLnNldFNQU3RhdHVzLCB1dWlkLCBkYXRhVmFsdWUsIF9XRkluc3RhbmNlKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdXBkYXRlIHN1YnByb2Nlc3MgbGFiZWwgaW4gd29ya2Zsb3cgaW5zdGFuY2UgcHJvY2VzcyBvYmplY3Q6IFRPRE9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwiTm8gbWV0aG9kIGZvdW5kIGZyb20gaW1wbGVtZW50ZWQgbGlzdCBpbiBzdWJwcm9jZXNzIGFjdGlvbi5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdzdGVwJzpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY29tbXVuaXR5JzpcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbW11bml0eVBvc3NpYmxlSXRlbXMgPSBbXCJjcmVhdGVDb21tdW5pdHlcIiwgXCJyZWxlYXNlQWRvcHRlZEFwcGxpY2F0aW9uXCIsIFwidXNlckpvaW5Db21tdW5pdHlcIl07XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocHJvcGVydHlFeGlzdHMoYWN0aW9uLm1ldGhvZC5jb21tdW5pdHksIGNvbW11bml0eVBvc3NpYmxlSXRlbXMpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NyZWF0ZUNvbW11bml0eSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbnNNb2R1bGUuY29tbXVuaXR5LmNyZWF0ZUNvbW11bml0eShhY3Rpb24ubWV0aG9kLmNvbW11bml0eS5jcmVhdGVDb21tdW5pdHksIHV1aWQsIF9XRkluc3RhbmNlKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JlbGVhc2VBZG9wdGVkQXBwbGljYXRpb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb25zTW9kdWxlLmNvbW11bml0eS5yZWxlYXNlQWRvcHRlZEFwcGxpY2F0aW9uKGFjdGlvbi5tZXRob2QuY29tbXVuaXR5LnJlbGVhc2VBZG9wdGVkQXBwbGljYXRpb24sIHV1aWQsIF9XRkluc3RhbmNlKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3VzZXJKb2luQ29tbXVuaXR5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uc01vZHVsZS5jb21tdW5pdHkudXNlckpvaW5Db21tdW5pdHkoYWN0aW9uLm1ldGhvZC5jb21tdW5pdHkudXNlckpvaW5Db21tdW5pdHksIHV1aWQsIF9XRkluc3RhbmNlKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwiTm8gbWV0aG9kIGZvdW5kIGZyb20gaW1wbGVtZW50ZWQgbGlzdC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdhcHBsaWNhdGlvbic6XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcHBsaWNhdGlvblBvc3NpYmxlSXRlbXMgPSBbXCJjcmVhdGVBcHBEZWZpbml0aW9uXCIsIFwiYnVpbGRBcHBsaWNhdGlvblwiLCBcImFwcGxpY2F0aW9uQWRvcHRpb25cIl07XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocHJvcGVydHlFeGlzdHMoYWN0aW9uLm1ldGhvZC5hcHBsaWNhdGlvbiwgYXBwbGljYXRpb25Qb3NzaWJsZUl0ZW1zKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjcmVhdGVBcHBEZWZpbml0aW9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uc01vZHVsZS5hcHBsaWNhdGlvbi5jcmVhdGVBcHBEZWZpbml0aW9uKGFjdGlvbi5tZXRob2QuYXBwbGljYXRpb24uY3JlYXRlQXBwRGVmaW5pdGlvbiwgdXVpZCwgX1dGSW5zdGFuY2UpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYnVpbGRBcHBsaWNhdGlvbic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbnNNb2R1bGUuYXBwbGljYXRpb24uYnVpbGRBcHBsaWNhdGlvbihhY3Rpb24ubWV0aG9kLmFwcGxpY2F0aW9uLmJ1aWxkQXBwbGljYXRpb24sIHV1aWQsIF9XRkluc3RhbmNlKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FwcGxpY2F0aW9uQWRvcHRpb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb25zTW9kdWxlLmFwcGxpY2F0aW9uLmFwcGxpY2F0aW9uQWRvcHRpb24oYWN0aW9uLm1ldGhvZC5hcHBsaWNhdGlvbi5hcHBsaWNhdGlvbkFkb3B0aW9uLCB1dWlkLCBfV0ZJbnN0YW5jZSkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChcIk5vIG1ldGhvZCBmb3VuZCBmcm9tIGltcGxlbWVudGVkIGxpc3QuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICd1c2VyJzpcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJQb3NzaWJsZUl0ZW1zID0gW1wiYWRkVG9Sb2xlXCJdO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHByb3BlcnR5RXhpc3RzKGFjdGlvbi5tZXRob2QudXNlciwgdXNlclBvc3NpYmxlSXRlbXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhZGRUb1JvbGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb25zTW9kdWxlLnVzZXIuYWRkVG9Sb2xlKGFjdGlvbi5tZXRob2QudXNlci5hZGRUb1JvbGUsIHV1aWQsIF9XRkluc3RhbmNlKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc2RvJzpcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNkb1Bvc3NpYmxlSXRlbXMgPSBbXCJjcmVhdGVcIiwgXCJlbnJvbGxDb3Vyc2VcIl07XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocHJvcGVydHlFeGlzdHMoYWN0aW9uLm1ldGhvZC5zZG8sIHNkb1Bvc3NpYmxlSXRlbXMpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NyZWF0ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbnNNb2R1bGUuc2RvLmNyZWF0ZShhY3Rpb24ubWV0aG9kLnNkby5jcmVhdGUsIHV1aWQsIF9XRkluc3RhbmNlKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdlbnJvbGxDb3Vyc2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb25zTW9kdWxlLnNkby5lbnJvbGxDb3Vyc2UoYWN0aW9uLm1ldGhvZC5zZG8uZW5yb2xsQ291cnNlLCB1dWlkLCBfV0ZJbnN0YW5jZSkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChcIk5vIG1ldGhvZCBmb3VuZCBmcm9tIGltcGxlbWVudGVkIGxpc3QuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdwZXJmb3JtYW5jZSc6XG4gICAgICAgICAgICAgICAgICAgIHZhciBwZXJmb3JtYW5jZVBvc3NpYmxlSXRlbXMgPSBbXCJ1bmxvY2tQZXJpb2RcIiwgXCJsb2NrUGVyZm9ybWFuY2VNb2RlbFwiLCBcInNldE1vZGVsU3RhdHVzXCJdO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHByb3BlcnR5RXhpc3RzKGFjdGlvbi5tZXRob2QucGVyZm9ybWFuY2UsIHBlcmZvcm1hbmNlUG9zc2libGVJdGVtcykpIHtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd1bmxvY2tQZXJpb2QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb25zTW9kdWxlLnBlcmZvcm1hbmNlLnVubG9ja1BlcmlvZChhY3Rpb24ubWV0aG9kLnBlcmZvcm1hbmNlLnVubG9ja1BlcmlvZCwgdXVpZCwgX1dGSW5zdGFuY2UpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NldE1vZGVsU3RhdHVzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uc01vZHVsZS5wZXJmb3JtYW5jZS5zZXRNb2RlbFN0YXR1cyhhY3Rpb24ubWV0aG9kLnBlcmZvcm1hbmNlLnNldE1vZGVsU3RhdHVzLCB1dWlkLCBfV0ZJbnN0YW5jZSkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbG9ja1BlcmZvcm1hbmNlTW9kZWwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb25zTW9kdWxlLnBlcmZvcm1hbmNlLmxvY2tQZXJmb3JtYW5jZU1vZGVsKGFjdGlvbi5tZXRob2QucGVyZm9ybWFuY2UubG9ja1BlcmZvcm1hbmNlTW9kZWwsIHV1aWQsIF9XRkluc3RhbmNlKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJObyBtZXRob2QgZm91bmQgZnJvbSBpbXBsZW1lbnRlZCBsaXN0LlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAndGF4b25vbXknOlxuICAgICAgICAgICAgICAgICAgICB2YXIgdGF4b25vbXlQb3NzaWJsZUl0ZW1zID0gW1wiY3JlYXRlXCJdO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHByb3BlcnR5RXhpc3RzKGFjdGlvbi5tZXRob2QudGF4b25vbXksIHRheG9ub215UG9zc2libGVJdGVtcykpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY3JlYXRlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uc01vZHVsZS50YXhvbm9teS5jcmVhdGUoYWN0aW9uLm1ldGhvZC50YXhvbm9teS5jcmVhdGUsIHV1aWQsIF9XRkluc3RhbmNlKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwiTm8gbWV0aG9kIGZvdW5kIGZyb20gaW1wbGVtZW50ZWQgbGlzdC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd2YXJpYWJsZXMnOlxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFyaWFibGVzUG9zc2libGVJdGVtcyA9IFtcInNldFZhcmlhYmxlXCJdO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHByb3BlcnR5RXhpc3RzKGFjdGlvbi5tZXRob2QudmFyaWFibGVzLCB2YXJpYWJsZXNQb3NzaWJsZUl0ZW1zKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzZXRWYXJpYWJsZSc6XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uc01vZHVsZS52YXJpYWJsZXMuc2V0VmFyaWFibGUoYWN0aW9uLm1ldGhvZC52YXJpYWJsZXMuc2V0VmFyaWFibGUsIF9XRkluc3RhbmNlLCB1dWlkKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwiTm8gbWV0aG9kIGZvdW5kIGZyb20gaW1wbGVtZW50ZWQgbGlzdC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdub3RpZmljYXRpb24nOlxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb25zTW9kdWxlLm5vdGlmaWNhdGlvbi5zZW5kTm90aWZpY2F0aW9uV29ya2VyKGFjdGlvbi5tZXRob2Qubm90aWZpY2F0aW9uLCBfV0ZJbnN0YW5jZSwgdXVpZCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdyZXBvcnQnOlxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVwb3J0UG9zc2libGVJdGVtcyA9IFtcImNyZWF0ZVBlcmZvcm1hbmNlUmVwb3J0XCIsIFwiY3JlYXRlUmVwb3J0XCIsIFwic2RvUmVwb3J0XCIsIFwiZXhlY3V0ZVJlcG9ydFwiLCBcInJlcXVlc3RSZXBvcnRcIiwgXCJnZW5lcmF0ZVZpZXdcIiwgXCJnZW5lcmF0ZUJhc2ljVmlld1wiLCBcImdlbmVyYXRlVW5pb25WaWV3XCIsIFwic2RvUmVwb3J0TXVsdGlwbGVcIiwgXCJzdWJwcm9maWxlUXVhcnRlcmx5UmVwb3J0XCJdO1xuXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocHJvcGVydHlFeGlzdHMoYWN0aW9uLm1ldGhvZC5yZXBvcnQsIHJlcG9ydFBvc3NpYmxlSXRlbXMpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NyZWF0ZVBlcmZvcm1hbmNlUmVwb3J0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uc01vZHVsZS5yZXBvcnQuY3JlYXRlUGVyZm9ybWFuY2VSZXBvcnQoYWN0aW9uLm1ldGhvZC5yZXBvcnQuY3JlYXRlUGVyZm9ybWFuY2VSZXBvcnQsIF9XRkluc3RhbmNlLCB1dWlkKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NyZWF0ZVJlcG9ydCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbnNNb2R1bGUucmVwb3J0LmNyZWF0ZVJlcG9ydChhY3Rpb24ubWV0aG9kLnJlcG9ydC5jcmVhdGVSZXBvcnQsIF9XRkluc3RhbmNlLCB1dWlkKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzZG9SZXBvcnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb25zTW9kdWxlLnJlcG9ydC5zZG9SZXBvcnQoYWN0aW9uLm1ldGhvZC5yZXBvcnQuc2RvUmVwb3J0LCBfV0ZJbnN0YW5jZSwgdXVpZCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZXhlY3V0ZVJlcG9ydCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbnNNb2R1bGUucmVwb3J0LmV4ZWN1dGVSZXBvcnQoYWN0aW9uLm1ldGhvZC5yZXBvcnQuZXhlY3V0ZVJlcG9ydCwgX1dGSW5zdGFuY2UsIHV1aWQpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2dlbmVyYXRlVmlldyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbnNNb2R1bGUucmVwb3J0LmdlbmVyYXRlVmlldyhhY3Rpb24ubWV0aG9kLnJlcG9ydC5nZW5lcmF0ZVZpZXcsIF9XRkluc3RhbmNlLCB1dWlkKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyZXF1ZXN0UmVwb3J0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uc01vZHVsZS5yZXBvcnQucmVxdWVzdFJlcG9ydChhY3Rpb24ubWV0aG9kLnJlcG9ydC5yZXF1ZXN0UmVwb3J0LCBfV0ZJbnN0YW5jZSwgdXVpZCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZ2VuZXJhdGVCYXNpY1ZpZXcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb25zTW9kdWxlLnJlcG9ydC5nZW5lcmF0ZUJhc2ljVmlldyhhY3Rpb24ubWV0aG9kLnJlcG9ydC5nZW5lcmF0ZUJhc2ljVmlldywgX1dGSW5zdGFuY2UsIHV1aWQpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2dlbmVyYXRlVW5pb25WaWV3JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uc01vZHVsZS5yZXBvcnQuZ2VuZXJhdGVVbmlvblZpZXcoYWN0aW9uLm1ldGhvZC5yZXBvcnQuZ2VuZXJhdGVVbmlvblZpZXcsIF9XRkluc3RhbmNlLCB1dWlkKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Nkb1JlcG9ydE11bHRpcGxlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uc01vZHVsZS5yZXBvcnQuc2RvUmVwb3J0TXVsdGlwbGUoYWN0aW9uLm1ldGhvZC5yZXBvcnQuc2RvUmVwb3J0TXVsdGlwbGUsIF9XRkluc3RhbmNlLCB1dWlkKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzdWJwcm9maWxlUXVhcnRlcmx5UmVwb3J0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uc01vZHVsZS5yZXBvcnQuc3VicHJvZmlsZVF1YXJ0ZXJseVJlcG9ydChhY3Rpb24ubWV0aG9kLnJlcG9ydC5zdWJwcm9maWxlUXVhcnRlcmx5UmVwb3J0LCBfV0ZJbnN0YW5jZSwgdXVpZCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwiTm8gbWV0aG9kIGZvdW5kIGZyb20gaW1wbGVtZW50ZWQgbGlzdC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3dvcmtlcic6XG4gICAgICAgICAgICAgICAgICAgIHZhciB3b3JrZXJQb3NzaWJsZUl0ZW1zID0gW1wic2VuZFdvcmtlclwiLCBcImV4ZWN1dGVMb2NhbFwiLCBcImNyZWF0ZVwiXTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChwcm9wZXJ0eUV4aXN0cyhhY3Rpb24ubWV0aG9kLndvcmtlciwgd29ya2VyUG9zc2libGVJdGVtcykpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2VuZFdvcmtlcic6XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uc01vZHVsZS53b3JrZXIuc2VuZFdvcmtlcihhY3Rpb24ubWV0aG9kLndvcmtlci5zZW5kV29ya2VyLCBfV0ZJbnN0YW5jZSwgdXVpZCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdleGVjdXRlTG9jYWwnOlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbnNNb2R1bGUud29ya2VyLmV4ZWN1dGVMb2NhbChhY3Rpb24ubWV0aG9kLndvcmtlci5leGVjdXRlTG9jYWwsIF9XRkluc3RhbmNlLCB1dWlkKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NyZWF0ZSc6XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uc01vZHVsZS53b3JrZXIuY3JlYXRlKGFjdGlvbi5tZXRob2Qud29ya2VyLmNyZWF0ZSwgX1dGSW5zdGFuY2UsIHV1aWQpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJObyBtZXRob2QgZm91bmQgZnJvbSBpbXBsZW1lbnRlZCBsaXN0LlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cblxuICAgICAgICAgICAgICAgIGNhc2UgJ3BhcnRpY2lwYW50cyc6XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0aWNpcGFudFBvc3NpYmxlSXRlbXMgPSBbXCJsaW5rUGFydGljaXBhbnRzXCIsIFwibW9udGhseUF0dGVuZGFuY2VcIiwgXCJtb250aGx5UHJvZ3Jlc3NTdW1tYXJ5XCIsIFwicGFydGljaXBhbnRDb250cmFjdHNcIl07XG5cbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChwcm9wZXJ0eUV4aXN0cyhhY3Rpb24ubWV0aG9kLnBhcnRpY2lwYW50cywgcGFydGljaXBhbnRQb3NzaWJsZUl0ZW1zKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdsaW5rUGFydGljaXBhbnRzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uc01vZHVsZS5wYXJ0aWNpcGFudHMubGlua1BhcnRpY2lwYW50cyhhY3Rpb24ubWV0aG9kLnBhcnRpY2lwYW50cy5saW5rUGFydGljaXBhbnRzLCBfV0ZJbnN0YW5jZSwgdXVpZCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtb250aGx5QXR0ZW5kYW5jZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbnNNb2R1bGUucGFydGljaXBhbnRzLm1vbnRobHlBdHRlbmRhbmNlKGFjdGlvbi5tZXRob2QucGFydGljaXBhbnRzLm1vbnRobHlBdHRlbmRhbmNlLCBfV0ZJbnN0YW5jZSwgdXVpZCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtb250aGx5UHJvZ3Jlc3NTdW1tYXJ5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uc01vZHVsZS5wYXJ0aWNpcGFudHMubW9udGhseVByb2dyZXNzU3VtbWFyeShhY3Rpb24ubWV0aG9kLnBhcnRpY2lwYW50cy5tb250aGx5UHJvZ3Jlc3NTdW1tYXJ5LCBfV0ZJbnN0YW5jZSwgdXVpZCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncGFydGljaXBhbnRDb250cmFjdHMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb25zTW9kdWxlLnBhcnRpY2lwYW50cy5wYXJ0aWNpcGFudENvbnRyYWN0cyhhY3Rpb24ubWV0aG9kLnBhcnRpY2lwYW50cy5wYXJ0aWNpcGFudENvbnRyYWN0cywgX1dGSW5zdGFuY2UsIHV1aWQpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChcIk5vIG1ldGhvZCBmb3VuZCBmcm9tIGltcGxlbWVudGVkIGxpc3QuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cblxuXG5cblxuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwibWV0aG9kIG5vdCBkZWZpbmVkIGluIGNvbmZpZ3VyYXRpb25cIik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoXCJObyBtZXRob2QgZm91bmQgZnJvbSBpbXBsZW1lbnRlZCBsaXN0LlwiKTtcblxuICAgICAgICB9XG5cbiAgICB9KTtcbn07XG5cbi8qKlxuICogUHJvY2VzcyB0YXNrc1xuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSB0YXNrIC0gdGhlIHRhc2sgY29uZmlnIGRhdGFcbiAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dERhdGEgLSB0aGUgdXNlciBpbnB1dCBkYXRhXG4gKlxuICogQGV4YW1wbGUgJydcbiAqXG4gKiBAcmV0dXJuICcnXG4gKlxuICovXG5mdW5jdGlvbiB0YXNrKHN1YnByb2Nlc3NJRCwgc3VicHJvY2Vzc1NFUSwgdGFzaywgc3B1dWlkLCBtb2RlbCkge1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgIHZhciBfV0ZJbnN0YW5jZSA9IGFwcC5TQ09QRS53b3JrZmxvdztcbiAgICAgICAgdmFyIHByZUFjdGlvbnNDb25mID0gdGFzay5wcmVBY3Rpb25zO1xuICAgICAgICBwcmVBY3Rpb25zKHByZUFjdGlvbnNDb25mLCBfV0ZJbnN0YW5jZSwgc3B1dWlkKS50aGVuKGZ1bmN0aW9uKHByZUFjdGlvblJlc3VsdCkge1xuXG4gICAgICAgICAgICB2YXIgbGlzdCA9IFtdO1xuXG5cbiAgICAgICAgICAgIGlmICh0YXNrLmFzc2lnbi5yb2xlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciBhc3NpZ25UeXBlID0gJ3Byb2ZpbGVSb2xlJztcbiAgICAgICAgICAgICAgICB2YXIgcHJvZmlsZUlkID0gX1dGSW5zdGFuY2UucHJvZmlsZTtcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSAnJztcbiAgICAgICAgICAgICAgICBpZiAodGFzay5hc3NpZ24ucm9sZS5wcm9maWxlID09ICdjdXJyZW50Jykge1xuICAgICAgICAgICAgICAgICAgICBpZCA9IF9XRkluc3RhbmNlLnByb2ZpbGU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YXNrLmFzc2lnbi5yb2xlLnByb2ZpbGUgPT0gJ2NvbW11bml0eScpIHtcbiAgICAgICAgICAgICAgICAgICAgaWQgPSBhcHAuU0NPUEUuZ2V0Q29tbXVuaXR5SWQoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcm9sZSA9IHRhc2suYXNzaWduLnJvbGUucm9sZUlkO1xuXG4gICAgICAgICAgICAgICAgbGlicmFyeS5nZXRVc2Vyc0xpc3RCeVJvbGUoaWQsIHJvbGUpLnRoZW4oZnVuY3Rpb24obGlzdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobGlzdCAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3QubGVuZ3RoID4gMSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmV3IHJlcXVpcmVtZW50IGhlcmUgd2lsbCBhdXRvbWF0aWNhbGx5IGFzc2lnbiB0aGUgc3RlcCB0byBjdXJyZW50IHVzZXIgaWYgdGhpcyB1c2VyIGZhbGxzIHVuZGVyIHRoZSBwcm92aWRlZCBncm91cC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSVUxFIElOVFJPRFVDRUQgT04gMTYtTUFSQ0gtMjAxN1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGN1cnJlbnQgdXNlciBsaWVzIHdpdGhpbiB0aGUgc3BlY2lmaWVkIHJvbGUsIGl0IHdpbGwgYmUgYXV0b21hdGljYWxseSBhc3NpZ25lZCB0byB0aGF0IHVzZXIuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNDdXJyZW50VXNlckV4aXN0SW5HaXZlblJvbGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm9sZXNPYmplY3QgPSBsaWJyYXJ5LmdldEN1cnJlbnRVc2VyUm9sZXMoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc0N1cnJlbnRVc2VyUm9sZTEgPSByb2xlc09iamVjdC5wcm9maWxlLmluZGV4T2Yocm9sZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzQ3VycmVudFVzZXJSb2xlMiA9IHJvbGVzT2JqZWN0LmNvbW11bml0eS5pbmRleE9mKHJvbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc0N1cnJlbnRVc2VyUm9sZTMgPSByb2xlc09iamVjdC5pbXBsaWNpdC5pbmRleE9mKHJvbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc0N1cnJlbnRVc2VyUm9sZTQgPSByb2xlc09iamVjdC5hZG9wdGlvbi5pbmRleE9mKHJvbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc0N1cnJlbnRVc2VyUm9sZTUgPSByb2xlc09iamVjdC5zdWJwcm9maWxlLmluZGV4T2Yocm9sZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNDdXJyZW50VXNlclJvbGUxID4gLTEgfHwgaXNDdXJyZW50VXNlclJvbGUyID4gLTEgfHwgaXNDdXJyZW50VXNlclJvbGUzID4gLTEgfHwgaXNDdXJyZW50VXNlclJvbGU0ID4gLTEgfHwgaXNDdXJyZW50VXNlclJvbGU1ID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNDdXJyZW50VXNlckV4aXN0SW5HaXZlblJvbGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQ3VycmVudFVzZXJFeGlzdEluR2l2ZW5Sb2xlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ3VycmVudFVzZXJFeGlzdEluR2l2ZW5Sb2xlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb2RlbC5hc3NpZ25tZW50SGlzdG9yeSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLmFzc2lnbm1lbnRIaXN0b3J5ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFzc2lnbmVlID0gbW9kZWwuYXNzaWduZWRUbztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFzc2lnbmVlLnVzZXJJZCAhPSBcIlwiICYmIGFzc2lnbmVlLm5hbWUgIT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld09iaiA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYXNzaWduZWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLmFzc2lnbm1lbnRIaXN0b3J5LnB1c2gobmV3T2JqKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWUubmFtZSA9IExPQ0FMX1NFVFRJTkdTLlNFU1NJT04uZmlyc3ROYW1lICsgXCIgXCIgKyBMT0NBTF9TRVRUSU5HUy5TRVNTSU9OLmxhc3ROYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZS51c2VySWQgPSBMT0NBTF9TRVRUSU5HUy5TVUJTQ1JJUFRJT05TLnVzZXJJZCArIFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVlLmRhdGVUaW1lID0gbW9tZW50KCkuZm9ybWF0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVlLnR5cGUgPSBBU1NJR05NRU5UX1RZUEVfQVVUTztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWUuZHVlRGF0ZVRpbWUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWUuYnkgPSBMT0NBTF9TRVRUSU5HUy5TVUJTQ1JJUFRJT05TLnVzZXJJZCArIFwiXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90aWZpY2F0aW9uIHRoYXQgaXRzIGJlZW4gYXV0b21hdGljYWxseSBhc3NpZ25lZCB0byB5b3VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9TZW5kIGFzc2lnbiB1c2VyIG5vdGlmaWNhdGlvbiBmcm9tIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vdGlmaWNhdGlvbiA9IEpTT04ueHBhdGgoXCIvcHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBzdWJwcm9jZXNzSUQgKyBcIiddL25vdGlmaWNhdGlvbnNcIiwgX1dGSW5zdGFuY2UuY29uZmlnLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb24gIT0gdW5kZWZpbmVkICYmIG5vdGlmaWNhdGlvbi5hc3NpZ25tZW50ICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXIgPSB7ICdpZCc6IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcklkLCAnbmFtZSc6IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcm5hbWUgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbnNNb2R1bGUubm90aWZpY2F0aW9uLmFzc2lnbm1lbnROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBfV0ZJbnN0YW5jZSwgc3B1dWlkLCB1c2VyKS50aGVuKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1VzZXIgYXNzaWduZWQgc3VjY2Vzc2Z1bGx5LiBVc2VySWQ6IFwiJyArIHVzZXIuaWQgKyAnXCIsIE5hbWU6IFwiJyArIHVzZXIubmFtZSArICdcIicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkuY2F0Y2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZmFpbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnVXNlciBhc3NpZ25tZW50IG5vdGlmaWNhdGlvbiBmYWlsZWQgdG8gdXNlciBVc2VySWQ6IFwiJyArIHVzZXIuaWQgKyAnXCIsIE5hbWU6IFwiJyArIHVzZXIubmFtZSArICdcIicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXNzaWdubWVudCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXNrLmFzc2lnbi5hc3NpZ25tZW50ICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhc3NpZ25tZW50ID0gbW9kZWwuYXNzaWdubWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjY2VwdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2hvd1wiOiB0YXNrLmFzc2lnbi5hc3NpZ25tZW50LmFjY2VwdC5zaG93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBfZ2V0TmFtZUJ5TGFuZyh0YXNrLmFzc2lnbi5hc3NpZ25tZW50LmFjY2VwdC5sYWJlbC5pMThuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbm1lbnQuYWNjZXB0ID0gYWNjZXB0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25tZW50Lm1lc3NhZ2UgPSBfZ2V0TmFtZUJ5TGFuZyh0YXNrLmFzc2lnbi5hc3NpZ25tZW50Lm1lc3NhZ2UuaTE4bik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWplY3QgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNob3dcIjogdGFzay5hc3NpZ24uYXNzaWdubWVudC5yZWplY3Quc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogX2dldE5hbWVCeUxhbmcodGFzay5hc3NpZ24uYXNzaWdubWVudC5yZWplY3QubGFiZWwuaTE4bilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25tZW50LnJlamVjdCA9IHJlamVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwcm9maWxlSWRcIjogcHJvZmlsZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyb2xlSWRcIjogcm9sZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJvbGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbm1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWdubWVudC5wcm9maWxlUm9sZUlkID0gaWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ3VycmVudFVzZXJFeGlzdEluR2l2ZW5Sb2xlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vRmlyZSBQcmUtd29ya0FjdGlvbnMgaGVyZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9jZXNzSWQgPSBKU09OLnhwYXRoKFwiL2luc3RhbmNlL3Byb2Nlc3Nlc1tzdWJQcm9jZXNzZXMvdXVpZCBlcSAnXCIgKyBzcHV1aWQgKyBcIiddL2lkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJQcm9jZXNzSWQgPSBKU09OLnhwYXRoKFwiL2luc3RhbmNlL3Byb2Nlc3Nlcy9zdWJQcm9jZXNzZXNbdXVpZCBlcSAnXCIgKyBzcHV1aWQgKyBcIiddL2lkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGVwSWQgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgc3B1dWlkICsgXCInXS9zdGVwL2lkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGVwT2JqZWN0ID0gSlNPTi54cGF0aChcIi9wcm9jZXNzZXNbX2lkIGVxICdcIiArIHByb2Nlc3NJZCArIFwiJ10vc3ViUHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBzdWJQcm9jZXNzSWQgKyBcIiddL3N0ZXBzW19pZCBlcSAnXCIgKyBzdGVwSWQgKyBcIiddXCIsIF9XRkluc3RhbmNlLmNvbmZpZywge30pWzBdO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhc2sucHJlV29ya0FjdGlvbnMgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmVXb3JrQWN0aW9uc09iaiA9IHRhc2sucHJlV29ya0FjdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVXb3JrQWN0aW9ucyhwcmVXb3JrQWN0aW9uc09iaiwgX1dGSW5zdGFuY2UpLnRoZW4oZnVuY3Rpb24oc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoJ0Fzc2lnbm1lbnQgaXMgbWFkZS4gUHJlIHdvcmsgYWN0aW9ucyBmb3VuZCBhbmQgZXhlY3V0ZWQgJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCdBc3NpZ25tZW50IGlzIG1hZGUuIE5vIHByZSB3b3JrIGFjdGlvbnMgZm91bmQuICcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGlmaWNhdGlvbiB0aGF0IGl0cyBiZWVuIHJlbGVhc2VkIGZvciBhY2NlcHRhbmNlXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vdGlmaWNhdGlvbiA9IEpTT04ueHBhdGgoXCIvcHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBzdWJwcm9jZXNzSUQgKyBcIiddL25vdGlmaWNhdGlvbnNcIiwgX1dGSW5zdGFuY2UuY29uZmlnLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaXNzdWUgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm90aWZpY2F0aW9uICE9IHVuZGVmaW5lZCAmJiBub3RpZmljYXRpb24uYXNzaWdubWVudEFjY2VwdGFuY2UgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXNlciA9IHsgJ2lkJzogTE9DQUxfU0VUVElOR1MuU1VCU0NSSVBUSU9OUy51c2VySWQsICduYW1lJzogTE9DQUxfU0VUVElOR1MuU1VCU0NSSVBUSU9OUy51c2VybmFtZSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uc01vZHVsZS5ub3RpZmljYXRpb24uYWNjZXB0YW5jZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIF9XRkluc3RhbmNlLCBzcHV1aWQsIHJvbGUpLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnVXNlciBhc3NpZ25lZCBzdWNjZXNzZnVsbHkuIFVzZXJJZDogXCInICsgdXNlci5pZCArICdcIiwgTmFtZTogXCInICsgdXNlci5uYW1lICsgJ1wiJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoJ05vdGlmaWNhdGlvbnMgcmVxdWVzdCBzdWJtaXR0ZWQgZm9yIGFjY2VwdGFuY2UuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKS5jYXRjaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihmYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoJ05vdGlmaWNhdGlvbnMgZmFpbGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVc2VyIGFzc2lnbm1lbnQgbm90aWZpY2F0aW9uIGZhaWxlZCB0byB1c2VyIFVzZXJJZDogXCInICsgdXNlci5pZCArICdcIiwgTmFtZTogXCInICsgdXNlci5uYW1lICsgJ1wiJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoJ05vdGlmaWNhdGlvbnMgbm90IGZvdW5kJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0Lmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW1wbGVtZW50IGhlcmUgcHJlV29ya0FjdGlvbiBhcyB0aGlzIGlzIGF1dG9tYXRpY2FsbHkgYXNzaWduZWQgaW4gY2FzZSBvZiAxIHVzZXIgYW5kIHdpbGwgbm90IGdvIHRyb3VnaCBhY2NlcHRhbmNlIGZ1bmN0aW9uLlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJJZCA9IGxpc3RbMF0uaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJuYW1lID0gbGlzdFswXS5uYW1lO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGVsLmFzc2lnbm1lbnRIaXN0b3J5ID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5hc3NpZ25tZW50SGlzdG9yeSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhc3NpZ25lZSA9IG1vZGVsLmFzc2lnbmVkVG87XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFzc2lnbmVlLnVzZXJJZCAhPSBcIlwiICYmIGFzc2lnbmVlLm5hbWUgIT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3T2JqID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShhc3NpZ25lZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5hc3NpZ25tZW50SGlzdG9yeS5wdXNoKG5ld09iaik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVlLm5hbWUgPSB1c2VybmFtZSArIFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWUudXNlcklkID0gdXNlcklkICsgXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZS5kYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVlLnR5cGUgPSBBU1NJR05NRU5UX1RZUEVfQVVUTztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZS5kdWVEYXRlVGltZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVlLmJ5ID0gTE9DQUxfU0VUVElOR1MuU1VCU0NSSVBUSU9OUy51c2VySWQgKyBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFzc2lnbm1lbnQgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFzay5hc3NpZ24uYXNzaWdubWVudCAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXNzaWdubWVudCA9IG1vZGVsLmFzc2lnbm1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY2NlcHQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNob3dcIjogdGFzay5hc3NpZ24uYXNzaWdubWVudC5hY2NlcHQuc2hvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogX2dldE5hbWVCeUxhbmcodGFzay5hc3NpZ24uYXNzaWdubWVudC5hY2NlcHQubGFiZWwuaTE4bilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25tZW50LmFjY2VwdCA9IGFjY2VwdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWdubWVudC5tZXNzYWdlID0gX2dldE5hbWVCeUxhbmcodGFzay5hc3NpZ24uYXNzaWdubWVudC5tZXNzYWdlLmkxOG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVqZWN0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzaG93XCI6IHRhc2suYXNzaWduLmFzc2lnbm1lbnQucmVqZWN0LnNob3csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IF9nZXROYW1lQnlMYW5nKHRhc2suYXNzaWduLmFzc2lnbm1lbnQucmVqZWN0LmxhYmVsLmkxOG4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWdubWVudC5yZWplY3QgPSByZWplY3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicHJvZmlsZUlkXCI6IHByb2ZpbGVJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicm9sZUlkXCI6IHJvbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyb2xlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25tZW50LnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbm1lbnQucHJvZmlsZVJvbGVJZCA9IGlkO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90aWZpY2F0aW9uIHRoYXQgaXRzIGJlZW4gYXV0b21hdGljYWxseSBhc3NpZ25lZCB0byB5b3VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1NlbmQgYXNzaWduIHVzZXIgbm90aWZpY2F0aW9uIGZyb20gaGVyZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vdGlmaWNhdGlvbiA9IEpTT04ueHBhdGgoXCIvcHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBzdWJwcm9jZXNzSUQgKyBcIiddL25vdGlmaWNhdGlvbnNcIiwgX1dGSW5zdGFuY2UuY29uZmlnLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGlmaWNhdGlvbiAhPSB1bmRlZmluZWQgJiYgbm90aWZpY2F0aW9uLmFzc2lnbm1lbnQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1c2VyID0geyAnaWQnOiB1c2VySWQsICduYW1lJzogdXNlcm5hbWUgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uc01vZHVsZS5ub3RpZmljYXRpb24uYXNzaWdubWVudE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIF9XRkluc3RhbmNlLCBzcHV1aWQsIHVzZXIpLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1VzZXIgYXNzaWduZWQgc3VjY2Vzc2Z1bGx5LiBVc2VySWQ6IFwiJyArIHVzZXIuaWQgKyAnXCIsIE5hbWU6IFwiJyArIHVzZXIubmFtZSArICdcIicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLmNhdGNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZmFpbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVc2VyIGFzc2lnbm1lbnQgbm90aWZpY2F0aW9uIGZhaWxlZCB0byB1c2VyIFVzZXJJZDogXCInICsgdXNlci5pZCArICdcIiwgTmFtZTogXCInICsgdXNlci5uYW1lICsgJ1wiJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9GaXJlIFByZS13b3JrQWN0aW9ucyBoZXJlXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc0lkID0gSlNPTi54cGF0aChcIi9pbnN0YW5jZS9wcm9jZXNzZXNbc3ViUHJvY2Vzc2VzL3V1aWQgZXEgJ1wiICsgc3B1dWlkICsgXCInXS9pZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJQcm9jZXNzSWQgPSBKU09OLnhwYXRoKFwiL2luc3RhbmNlL3Byb2Nlc3Nlcy9zdWJQcm9jZXNzZXNbdXVpZCBlcSAnXCIgKyBzcHV1aWQgKyBcIiddL2lkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0ZXBJZCA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBzcHV1aWQgKyBcIiddL3N0ZXAvaWRcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RlcE9iamVjdCA9IEpTT04ueHBhdGgoXCIvcHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBwcm9jZXNzSWQgKyBcIiddL3N1YlByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgc3ViUHJvY2Vzc0lkICsgXCInXS9zdGVwc1tfaWQgZXEgJ1wiICsgc3RlcElkICsgXCInXVwiLCBfV0ZJbnN0YW5jZS5jb25maWcsIHt9KVswXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXNrLnByZVdvcmtBY3Rpb25zICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmVXb3JrQWN0aW9uc09iaiA9IHRhc2sucHJlV29ya0FjdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZVdvcmtBY3Rpb25zKHByZVdvcmtBY3Rpb25zT2JqLCBfV0ZJbnN0YW5jZSkudGhlbihmdW5jdGlvbihzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCdBc3NpZ25lZCB0byB0aGUgb25seSB1c2VyIGluIHJvbGUuIFByZSB3b3JrIGFjdGlvbnMgZXhlY3V0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCdBc3NpZ25lZCB0byB0aGUgb25seSB1c2VyIGluIHJvbGUuIE5vIHByZSB3b3JrIGFjdGlvbnMgZm91bmQuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vQ2FzZSB3aGVyZSB1c2VycyBsaXN0ID0gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhc3NpZ25lZSA9IG1vZGVsLmFzc2lnbmVkVG87XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWUubmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWUudXNlcklkID0gXCJcIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhc3NpZ25tZW50ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhc2suYXNzaWduLmFzc2lnbm1lbnQgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFzc2lnbm1lbnQgPSBtb2RlbC5hc3NpZ25tZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWNjZXB0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzaG93XCI6IHRhc2suYXNzaWduLmFzc2lnbm1lbnQuYWNjZXB0LnNob3csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IF9nZXROYW1lQnlMYW5nKHRhc2suYXNzaWduLmFzc2lnbm1lbnQuYWNjZXB0LmxhYmVsLmkxOG4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWdubWVudC5hY2NlcHQgPSBhY2NlcHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbm1lbnQubWVzc2FnZSA9IF9nZXROYW1lQnlMYW5nKHRhc2suYXNzaWduLmFzc2lnbm1lbnQubWVzc2FnZS5pMThuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlamVjdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2hvd1wiOiB0YXNrLmFzc2lnbi5hc3NpZ25tZW50LnJlamVjdC5zaG93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBfZ2V0TmFtZUJ5TGFuZyh0YXNrLmFzc2lnbi5hc3NpZ25tZW50LnJlamVjdC5sYWJlbC5pMThuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbm1lbnQucmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInByb2ZpbGVJZFwiOiBwcm9maWxlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJvbGVJZFwiOiByb2xlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicm9sZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWdubWVudC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25tZW50LnByb2ZpbGVSb2xlSWQgPSBpZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1dpbGwgYmUgZmlyZWQgZnJvbSBUYWtlQXNzaWdubWVudCBwYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShcIk5vIHVzZXJzIGZvdW5kIGluIGxpc3QuIEFzc2lnbmluZyBibGFuayBcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIGluIGdldFVzZXJzTGlzdEJ5Um9sZSB1bmRlZmluZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIGluIGdldFVzZXJzTGlzdEJ5Um9sZScpO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGFzay5hc3NpZ24udXNlciAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgIGhlbHBlci5nZXROb2RlVmFsdWUodGFzay5hc3NpZ24udXNlci51c2VyTmFtZSwgX1dGSW5zdGFuY2UsIHNwdXVpZCkudGhlbihmdW5jdGlvbih1c2VyTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBoZWxwZXIuZ2V0Tm9kZVZhbHVlKHRhc2suYXNzaWduLnVzZXIudXNlcklkLCBfV0ZJbnN0YW5jZSwgc3B1dWlkKS50aGVuKGZ1bmN0aW9uKHVzZXJJZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXNlcklkID0gdXNlcklkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJuYW1lID0gdXNlck5hbWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb2RlbC5hc3NpZ25tZW50SGlzdG9yeSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5hc3NpZ25tZW50SGlzdG9yeSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXNzaWduZWUgPSBtb2RlbC5hc3NpZ25lZFRvO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFzc2lnbmVlLnVzZXJJZCAhPSBcIlwiICYmIGFzc2lnbmVlLm5hbWUgIT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdPYmogPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGFzc2lnbmVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuYXNzaWdubWVudEhpc3RvcnkucHVzaChuZXdPYmopO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWUubmFtZSA9IHVzZXJuYW1lICsgXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVlLnVzZXJJZCA9IHVzZXJJZCArIFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZS5kYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWUudHlwZSA9IEFTU0lHTk1FTlRfVFlQRV9BVVRPO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWUuZHVlRGF0ZVRpbWUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVlLmJ5ID0gTE9DQUxfU0VUVElOR1MuU1VCU0NSSVBUSU9OUy51c2VySWQgKyBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXNzaWdubWVudCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhc2suYXNzaWduLmFzc2lnbm1lbnQgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXNzaWdubWVudCA9IG1vZGVsLmFzc2lnbm1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjY2VwdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzaG93XCI6IHRhc2suYXNzaWduLmFzc2lnbm1lbnQuYWNjZXB0LnNob3csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibGFiZWxcIjogX2dldE5hbWVCeUxhbmcodGFzay5hc3NpZ24uYXNzaWdubWVudC5hY2NlcHQubGFiZWwuaTE4bilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWdubWVudC5hY2NlcHQgPSBhY2NlcHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWdubWVudC5tZXNzYWdlID0gX2dldE5hbWVCeUxhbmcodGFzay5hc3NpZ24uYXNzaWdubWVudC5tZXNzYWdlLmkxOG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWplY3QgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2hvd1wiOiB0YXNrLmFzc2lnbi5hc3NpZ25tZW50LnJlamVjdC5zaG93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IF9nZXROYW1lQnlMYW5nKHRhc2suYXNzaWduLmFzc2lnbm1lbnQucmVqZWN0LmxhYmVsLmkxOG4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbm1lbnQucmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwcm9maWxlSWRcIjogcHJvZmlsZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJvbGVJZFwiOiByb2xlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyb2xlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWdubWVudC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbm1lbnQucHJvZmlsZVJvbGVJZCA9IGlkO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3RpZmljYXRpb24gdGhhdCBpdHMgYmVlbiBhdXRvbWF0aWNhbGx5IGFzc2lnbmVkIHRvIHlvdVxuICAgICAgICAgICAgICAgICAgICAgICAgLy9TZW5kIGFzc2lnbiB1c2VyIG5vdGlmaWNhdGlvbiBmcm9tIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub3RpZmljYXRpb24gPSBKU09OLnhwYXRoKFwiL3Byb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgc3VicHJvY2Vzc0lEICsgXCInXS9ub3RpZmljYXRpb25zXCIsIF9XRkluc3RhbmNlLmNvbmZpZywge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGlmaWNhdGlvbiAhPSB1bmRlZmluZWQgJiYgbm90aWZpY2F0aW9uLmFzc2lnbm1lbnQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXIgPSB7ICdpZCc6IHVzZXJJZCwgJ25hbWUnOiB1c2VybmFtZSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbnNNb2R1bGUubm90aWZpY2F0aW9uLmFzc2lnbm1lbnROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBfV0ZJbnN0YW5jZSwgc3B1dWlkLCB1c2VyKS50aGVuKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnVXNlciBhc3NpZ25lZCBzdWNjZXNzZnVsbHkuIFVzZXJJZDogXCInICsgdXNlci5pZCArICdcIiwgTmFtZTogXCInICsgdXNlci5uYW1lICsgJ1wiJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLmNhdGNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihmYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnVXNlciBhc3NpZ25tZW50IG5vdGlmaWNhdGlvbiBmYWlsZWQgdG8gdXNlciBVc2VySWQ6IFwiJyArIHVzZXIuaWQgKyAnXCIsIE5hbWU6IFwiJyArIHVzZXIubmFtZSArICdcIicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vRmlyZSBQcmUtd29ya0FjdGlvbnMgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NJZCA9IEpTT04ueHBhdGgoXCIvaW5zdGFuY2UvcHJvY2Vzc2VzW3N1YlByb2Nlc3Nlcy91dWlkIGVxICdcIiArIHNwdXVpZCArIFwiJ10vaWRcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJQcm9jZXNzSWQgPSBKU09OLnhwYXRoKFwiL2luc3RhbmNlL3Byb2Nlc3Nlcy9zdWJQcm9jZXNzZXNbdXVpZCBlcSAnXCIgKyBzcHV1aWQgKyBcIiddL2lkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RlcElkID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHNwdXVpZCArIFwiJ10vc3RlcC9pZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0ZXBPYmplY3QgPSBKU09OLnhwYXRoKFwiL3Byb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgcHJvY2Vzc0lkICsgXCInXS9zdWJQcm9jZXNzZXNbX2lkIGVxICdcIiArIHN1YlByb2Nlc3NJZCArIFwiJ10vc3RlcHNbX2lkIGVxICdcIiArIHN0ZXBJZCArIFwiJ11cIiwgX1dGSW5zdGFuY2UuY29uZmlnLCB7fSlbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXNrLnByZVdvcmtBY3Rpb25zICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZVdvcmtBY3Rpb25zT2JqID0gdGFzay5wcmVXb3JrQWN0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVXb3JrQWN0aW9ucyhwcmVXb3JrQWN0aW9uc09iaiwgX1dGSW5zdGFuY2UpLnRoZW4oZnVuY3Rpb24oc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCdBc3NpZ25lZCB0byB0aGUgb25seSB1c2VyIGluIHJvbGUuIFByZSB3b3JrIGFjdGlvbnMgZXhlY3V0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgnQXNzaWduZWQgdG8gdGhlIG9ubHkgdXNlciBpbiByb2xlLiBObyBwcmUgd29yayBhY3Rpb25zIGZvdW5kLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmICh0YXNrLmFzc2lnbi5zd2ltbGFuZSAhPSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgIHZhciBzdGVwSWQgPSB0YXNrLmFzc2lnbi5zd2ltbGFuZS5zdGVwSWQ7XG4gICAgICAgICAgICAgICAgdmFyIHNlcXVlbmNlID0gdGFzay5hc3NpZ24uc3dpbWxhbmUuc2VxdWVuY2U7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3ViUHJvY2VzcyA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBzcHV1aWQgKyBcIiddXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgdmFyIGhpc3RvcnlMaXN0ID0gSlNPTi54cGF0aChcIi9oaXN0b3J5W2lkIGVxICdcIiArIHN0ZXBJZCArIFwiJ11cIiwgc3ViUHJvY2Vzcywge30pO1xuICAgICAgICAgICAgICAgIHZhciBkYXRlU2VhcmNoID0gJyc7XG4gICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlID09ICdsYXN0Jykge1xuICAgICAgICAgICAgICAgICAgICBkYXRlU2VhcmNoID0gSlNPTi54cGF0aChcIm1heChmb3IgJHMgaW4gLyogcmV0dXJuIHhzOmRhdGVUaW1lKCRzL2RhdGVUaW1lQ3JlYXRlZCkpXCIsIGhpc3RvcnlMaXN0LCB7fSlbMF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZVNlYXJjaCA9IEpTT04ueHBhdGgoXCJtaW4oZm9yICRzIGluIC8qIHJldHVybiB4czpkYXRlVGltZSgkcy9kYXRlVGltZUNyZWF0ZWQpKVwiLCBoaXN0b3J5TGlzdCwge30pWzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgaGlzdG9yeU9iamVjdCA9IEpTT04ueHBhdGgoXCIvKltkYXRlVGltZUNyZWF0ZWQgZXEgJ1wiICsgZGF0ZVNlYXJjaCArIFwiJ11cIiwgaGlzdG9yeUxpc3QsIHt9KVswXTtcbiAgICAgICAgICAgICAgICB2YXIgYXNzaWdubWVudE9iamVjdCA9IEpTT04ueHBhdGgoXCIvYXNzaWdubWVudEhpc3RvcnlbbGFzdCgpXVwiLCBoaXN0b3J5T2JqZWN0LCB7fSlbMF07XG5cbiAgICAgICAgICAgICAgICB2YXIgdXNlcklkID0gYXNzaWdubWVudE9iamVjdC51c2VySWQ7XG4gICAgICAgICAgICAgICAgdmFyIHVzZXJuYW1lID0gYXNzaWdubWVudE9iamVjdC5uYW1lO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1vZGVsLmFzc2lnbm1lbnRIaXN0b3J5ID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBtb2RlbC5hc3NpZ25tZW50SGlzdG9yeSA9IFtdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBhc3NpZ25lZSA9IG1vZGVsLmFzc2lnbmVkVG87XG4gICAgICAgICAgICAgICAgaWYgKGFzc2lnbmVlLnVzZXJJZCAhPSBcIlwiICYmIGFzc2lnbmVlLm5hbWUgIT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3T2JqID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShhc3NpZ25lZSkpO1xuICAgICAgICAgICAgICAgICAgICBtb2RlbC5hc3NpZ25tZW50SGlzdG9yeS5wdXNoKG5ld09iaik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFzc2lnbmVlLm5hbWUgPSB1c2VybmFtZSArIFwiXCI7XG4gICAgICAgICAgICAgICAgYXNzaWduZWUudXNlcklkID0gdXNlcklkICsgXCJcIjtcbiAgICAgICAgICAgICAgICBhc3NpZ25lZS5kYXRlVGltZSA9IG1vbWVudCgpLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgIGFzc2lnbmVlLnR5cGUgPSBBU1NJR05NRU5UX1RZUEVfU1dJTUxBTkU7XG4gICAgICAgICAgICAgICAgYXNzaWduZWUuZHVlRGF0ZVRpbWUgPSAnJztcbiAgICAgICAgICAgICAgICBhc3NpZ25lZS5ieSA9IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcklkICsgXCJcIjtcblxuICAgICAgICAgICAgICAgIHZhciBhc3NpZ25tZW50ID0gJyc7XG4gICAgICAgICAgICAgICAgaWYgKHRhc2suYXNzaWduLmFzc2lnbm1lbnQgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGFzc2lnbm1lbnQgPSBtb2RlbC5hc3NpZ25tZW50O1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWNjZXB0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJzaG93XCI6IHRhc2suYXNzaWduLmFzc2lnbm1lbnQuYWNjZXB0LnNob3csXG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCI6IF9nZXROYW1lQnlMYW5nKHRhc2suYXNzaWduLmFzc2lnbm1lbnQuYWNjZXB0LmxhYmVsLmkxOG4pXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgYXNzaWdubWVudC5hY2NlcHQgPSBhY2NlcHQ7XG4gICAgICAgICAgICAgICAgICAgIGFzc2lnbm1lbnQubWVzc2FnZSA9IF9nZXROYW1lQnlMYW5nKHRhc2suYXNzaWduLmFzc2lnbm1lbnQubWVzc2FnZS5pMThuKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlamVjdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2hvd1wiOiB0YXNrLmFzc2lnbi5hc3NpZ25tZW50LnJlamVjdC5zaG93LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiOiBfZ2V0TmFtZUJ5TGFuZyh0YXNrLmFzc2lnbi5hc3NpZ25tZW50LnJlamVjdC5sYWJlbC5pMThuKVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGFzc2lnbm1lbnQucmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInByb2ZpbGVJZFwiOiBwcm9maWxlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInJvbGVJZFwiOiByb2xlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwicm9sZVwiXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgYXNzaWdubWVudC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhc3NpZ25tZW50LnByb2ZpbGVSb2xlSWQgPSBpZDtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBOb3RpZmljYXRpb24gdGhhdCBpdHMgYmVlbiBhdXRvbWF0aWNhbGx5IGFzc2lnbmVkIHRvIHlvdVxuICAgICAgICAgICAgICAgIC8vU2VuZCBhc3NpZ24gdXNlciBub3RpZmljYXRpb24gZnJvbSBoZXJlXG4gICAgICAgICAgICAgICAgdmFyIG5vdGlmaWNhdGlvbiA9IEpTT04ueHBhdGgoXCIvcHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBzdWJwcm9jZXNzSUQgKyBcIiddL25vdGlmaWNhdGlvbnNcIiwgX1dGSW5zdGFuY2UuY29uZmlnLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgaWYgKG5vdGlmaWNhdGlvbiAhPSB1bmRlZmluZWQgJiYgbm90aWZpY2F0aW9uLmFzc2lnbm1lbnQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1c2VyID0geyAnaWQnOiB1c2VySWQsICduYW1lJzogdXNlcm5hbWUgfTtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uc01vZHVsZS5ub3RpZmljYXRpb24uYXNzaWdubWVudE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIF9XRkluc3RhbmNlLCBzcHV1aWQsIHVzZXIpLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1VzZXIgYXNzaWduZWQgc3VjY2Vzc2Z1bGx5LiBVc2VySWQ6IFwiJyArIHVzZXIuaWQgKyAnXCIsIE5hbWU6IFwiJyArIHVzZXIubmFtZSArICdcIicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApLmNhdGNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZmFpbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVc2VyIGFzc2lnbm1lbnQgbm90aWZpY2F0aW9uIGZhaWxlZCB0byB1c2VyIFVzZXJJZDogXCInICsgdXNlci5pZCArICdcIiwgTmFtZTogXCInICsgdXNlci5uYW1lICsgJ1wiJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vRmlyZSBQcmUtd29ya0FjdGlvbnMgaGVyZVxuICAgICAgICAgICAgICAgIHZhciBwcm9jZXNzSWQgPSBKU09OLnhwYXRoKFwiL2luc3RhbmNlL3Byb2Nlc3Nlc1tzdWJQcm9jZXNzZXMvdXVpZCBlcSAnXCIgKyBzcHV1aWQgKyBcIiddL2lkXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgdmFyIHN1YlByb2Nlc3NJZCA9IEpTT04ueHBhdGgoXCIvaW5zdGFuY2UvcHJvY2Vzc2VzL3N1YlByb2Nlc3Nlc1t1dWlkIGVxICdcIiArIHNwdXVpZCArIFwiJ10vaWRcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICB2YXIgc3RlcElkID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHNwdXVpZCArIFwiJ10vc3RlcC9pZFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgIHZhciBzdGVwT2JqZWN0ID0gSlNPTi54cGF0aChcIi9wcm9jZXNzZXNbX2lkIGVxICdcIiArIHByb2Nlc3NJZCArIFwiJ10vc3ViUHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBzdWJQcm9jZXNzSWQgKyBcIiddL3N0ZXBzW19pZCBlcSAnXCIgKyBzdGVwSWQgKyBcIiddXCIsIF9XRkluc3RhbmNlLmNvbmZpZywge30pWzBdO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRhc2sucHJlV29ya0FjdGlvbnMgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZVdvcmtBY3Rpb25zT2JqID0gdGFzay5wcmVXb3JrQWN0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgcHJlV29ya0FjdGlvbnMocHJlV29ya0FjdGlvbnNPYmosIF9XRkluc3RhbmNlKS50aGVuKGZ1bmN0aW9uKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoJ0Fzc2lnbmVkIHRvIHRoZSBvbmx5IHVzZXIgaW4gcm9sZS4gUHJlIHdvcmsgYWN0aW9ucyBleGVjdXRlZCcpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoJ0Fzc2lnbmVkIHRvIHRoZSBvbmx5IHVzZXIgaW4gcm9sZS4gTm8gcHJlIHdvcmsgYWN0aW9ucyBmb3VuZC4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcblxuXG5cbi8qKlxuICogUHJvY2VzcyB0YXNrc1xuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSB0YXNrIC0gdGhlIHRhc2sgY29uZmlnIGRhdGFcbiAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dERhdGEgLSB0aGUgdXNlciBpbnB1dCBkYXRhXG4gKlxuICogQGV4YW1wbGUgJydcbiAqXG4gKiBAcmV0dXJuICcnXG4gKlxuICovXG5mdW5jdGlvbiBzZXJ2ZXIoc2VydmVyLCBwcm9jZXNzSWQsIHByb2Nlc3NTZXEsIHN1YlByb2Nlc3NJZCwgc3ViUHJvY2Vzc1NlcSwgc3ViUHJvY2VzcywgbW9kZWwsIF9XRkluc3RhbmNlLCBkYXRhLCB1dWlkKSB7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgLy92YXIgX1dGSW5zdGFuY2UgPSBhcHAuU0NPUEUud29ya2Zsb3c7XG4gICAgICAgIHZhciBwcm9maWxlSWQgPSBfV0ZJbnN0YW5jZS5wcm9maWxlO1xuICAgICAgICB2YXIgYWN0aW9uQmxvY2sgPSBzZXJ2ZXIuc2VydmVyQWN0aW9uWzBdO1xuICAgICAgICBpZiAobW9kZWwuYXNzaWdubWVudEhpc3RvcnkgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBtb2RlbC5hc3NpZ25tZW50SGlzdG9yeSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFzc2lnbmVlID0gbW9kZWwuYXNzaWduZWRUbztcbiAgICAgICAgaWYgKGFzc2lnbmVlLnVzZXJJZCAhPSBcIlwiICYmIGFzc2lnbmVlLm5hbWUgIT0gXCJcIikge1xuICAgICAgICAgICAgdmFyIG5ld09iaiA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYXNzaWduZWUpKTtcbiAgICAgICAgICAgIG1vZGVsLmFzc2lnbm1lbnRIaXN0b3J5LnB1c2gobmV3T2JqKTtcbiAgICAgICAgfVxuICAgICAgICBhc3NpZ25lZS5uYW1lID0gTE9DQUxfU0VUVElOR1MuU0VTU0lPTi5maXJzdE5hbWUgKyBcIiBcIiArIExPQ0FMX1NFVFRJTkdTLlNFU1NJT04ubGFzdE5hbWU7XG4gICAgICAgIGFzc2lnbmVlLnVzZXJJZCA9IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcklkICsgXCJcIjtcbiAgICAgICAgYXNzaWduZWUuZGF0ZVRpbWUgPSBtb21lbnQoKS5mb3JtYXQoKTtcbiAgICAgICAgYXNzaWduZWUudHlwZSA9IEFTU0lHTk1FTlRfVFlQRV9BVVRPO1xuICAgICAgICBhc3NpZ25lZS5kdWVEYXRlVGltZSA9ICcnO1xuICAgICAgICBhc3NpZ25lZS5ieSA9IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcklkICsgXCJcIjtcblxuICAgICAgICBhY3Rpb24oYWN0aW9uQmxvY2ssIHByb2Nlc3NJZCwgcHJvY2Vzc1NlcSwgc3ViUHJvY2Vzc0lkLCBzdWJQcm9jZXNzU2VxLCBzdWJQcm9jZXNzLCBtb2RlbCwgX1dGSW5zdGFuY2UsIGRhdGEsIHV1aWQpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKFwiTm8gdXNlcnMgZm91bmQgaW4gbGlzdC4gQXNzaWduaW5nIGJsYW5rIFwiKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgIHJlamVjdChcIlNlcnZlciBhY3Rpb24gZXJyb3IgZm91bmQgcmVqZWN0ZWRcIilcbiAgICAgICAgICAgIH0pO1xuICAgIH0pO1xuXG59O1xuXG4vKipcbiAqIFByb2Nlc3MgdHJhbnNpdGlvblxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9jZXNzSWQgLSB0aGUgV29ya2Zsb3cgY29uZmlnIC8gZGVmaW5pdGlvbiBwcm9jZXNzIGlkXG4gKiBAcGFyYW0ge251bWJlcn0gcHJvY2Vzc1NlcSAtIHRoZSBXb3JrZmxvdyBpbnN0YW5jZSBwcm9jZXNzIHNlcVxuICogQHBhcmFtIHtzdHJpbmd9IHN1YlByb2Nlc3NJZCAtIHRoZSBXb3JrZmxvdyBjb25maWcgLyBkZWZpbml0aW9uIHN1Yi1wcm9jZXNzIGlkXG4gKiBAcGFyYW0ge251bWJlcn0gc3ViUHJvY2Vzc1NlcSAtIHRoZSBXb3JrZmxvdyBpbnN0YW5jZSBzdWItcHJvY2VzcyBzZXFcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdGVwSWQgLSB0aGUgV29ya2Zsb3cgY29uZmlnIC8gZGVmaW5pdGlvbiBzdGVwIGlkXG4gKiBAcGFyYW0ge3N0cmluZ30gdHJhbnNpdGlvbklkIC0gdGhlIFdvcmtmbG93IGNvbmZpZyAvIGRlZmluaXRpb24gdHJhbnNpdGlvbiBpZFxuICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBhbnkgYWRkaXRpb25hbCBkYXRhIHBhc3NlZCBpbiBhcyBrZXkgdmFsdWUgcGFpcnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBfV0ZJbnN0YW5jZSAtIHRoZSBjdXJyZW50IHdvcmtmbG93IGNvbnN0cnVjdG9yIGluc3RhbmNlXG4gKlxuICogQGV4YW1wbGUgJydcbiAqXG4gKiBAcmV0dXJuICcnXG4gKlxuICovXG5mdW5jdGlvbiB0cmFuc2l0aW9uKHByb2Nlc3NJZCwgcHJvY2Vzc1NlcSwgc3ViUHJvY2Vzc0lkLCBzdWJQcm9jZXNzU2VxLCBzdGVwSWQsIHRyYW5zaXRpb25JZCwgZGF0YSwgX1dGSW5zdGFuY2UsIHNwdXVpZCwgbW9kZWwpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgc3RlcFNlcSA9IDA7XG4gICAgICAgICAgICB2YXIgbmV4dFN0ZXBJZCA9ICcnO1xuICAgICAgICAgICAgdmFyIG5leHRTdGVwU2VxID0gMDtcbiAgICAgICAgICAgIHZhciBzdWJQcm9jZXNzID0gW107XG4gICAgICAgICAgICB2YXIgY3VycmVudFByb2Nlc3MgPSBfV0ZJbnN0YW5jZS5jb25maWcucHJvY2Vzc2VzLmZpbHRlcihmdW5jdGlvbihvYmpQcm9jZXNzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9ialByb2Nlc3MuX2lkID09IHByb2Nlc3NJZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqUHJvY2VzcztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRTdWJQcm9jZXNzID0gY3VycmVudFByb2Nlc3NbMF0uc3ViUHJvY2Vzc2VzLmZpbHRlcihmdW5jdGlvbihvYmpTdWJQcm9jZXNzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9ialN1YlByb2Nlc3MuX2lkID09IHN1YlByb2Nlc3NJZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqU3ViUHJvY2VzcztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRTdGVwID0gY3VycmVudFN1YlByb2Nlc3NbMF0uc3RlcHMuZmlsdGVyKGZ1bmN0aW9uKG9ialN0ZXApIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqU3RlcC5faWQgPT0gc3RlcElkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmpTdGVwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgdHJhbnNpdGlvbiA9IGN1cnJlbnRTdGVwWzBdLnRyYW5zaXRpb24uZmlsdGVyKGZ1bmN0aW9uKG9ialRyYW5zaXRpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqVHJhbnNpdGlvbi5faWQgPT0gdHJhbnNpdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmpUcmFuc2l0aW9uO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN1cnJlbnRTdWJQcm9jZXNzWzBdLnN0ZXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTdWJQcm9jZXNzWzBdLnN0ZXBzW2ldLl9pZCA9PSBzdGVwSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RlcFNlcSA9IHBhcnNlSW50KGN1cnJlbnRTdWJQcm9jZXNzWzBdLnN0ZXBzW2ldLl9zZXEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjdXJyZW50U3ViUHJvY2Vzc1swXS5zdGVwcy5maWx0ZXIoZnVuY3Rpb24oc3RlcEl0ZW0pIHtcbiAgICAgICAgICAgICAgICBuZXh0U3RlcFNlcSA9IHN0ZXBTZXEgKyAxO1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChzdGVwSXRlbS5fc2VxKSA9PSBuZXh0U3RlcFNlcSkge1xuICAgICAgICAgICAgICAgICAgICBuZXh0U3RlcElkID0gc3RlcEl0ZW0uX2lkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSlcblxuXG5cblxuICAgICAgICAgICAgdmFyIG1heFN0ZXBzID0gY3VycmVudFN1YlByb2Nlc3NbMF0uc3RlcHMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIHNwaW5zdGFuY2VPYmplY3QgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgc3B1dWlkICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgdmFyIHNwSW5zdGFuY2VTdGVwT2JqZWN0ID0gSlNPTi54cGF0aChcIi9zdWJwcm9jZXNzZXNbX2lkIGVxICdcIiArIHNwdXVpZCArIFwiJ10vc3RlcFwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuXG4gICAgICAgICAgICAvLyBBZGRpbmcgc3RlcCBPYmplY3QgaW4gc3VicHJvY2VzcyBoaXN0b3J5IEZyb20gc2Vjb25kIHN0ZXAuIEFzIGZpcnN0IHN0ZXAgaXMgYWRkZWQgYXQgc3ViUHJvY2VzcygpIGZ1bmN0aW9uIFxuICAgICAgICAgICAgaWYgKHNwaW5zdGFuY2VPYmplY3QuaGlzdG9yeSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzcGluc3RhbmNlT2JqZWN0Lmhpc3RvcnkgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwdXNoSW5kaWNhdG9yVG9Nb2RlbCA9IGZ1bmN0aW9uKG1vZGVsKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBJbiBib3RoICB0aGUgY2FzZXMgdGhlIGxpc3QgaXMgZGlmZmVybmV0IHRoYXQgbmVlZHMgdG8gYmUgbWFkZSBzYW1lLlxuXG4gICAgICAgICAgICAgICAgdmFyIGluZGljYXRvckxpc3QgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgc3B1dWlkICsgXCInXS9pbmRpY2F0b3JzXCIsIF9XRkluc3RhbmNlLCB7fSk7XG4gICAgICAgICAgICAgICAgdmFyIGlzRmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kaWNhdG9yTGlzdCA9PSB1bmRlZmluZWQgfHwgaW5kaWNhdG9yTGlzdC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBpc0ZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaW5kaWNhdG9yTGlzdCA9IEpTT04ueHBhdGgoXCIvaW5kaWNhdG9yc1t3b3JrZmxvd3MvcHJvY2Vzc2VzW3N1YlByb2Nlc3NVVUlEIGVxICdcIiArIHNwdXVpZCArIFwiJ11dXCIsIF9XRkluc3RhbmNlLCB7fSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtb2RlbC5pbmRpY2F0b3JzID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBtb2RlbC5pbmRpY2F0b3JzID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaW5kaWNhdG9yTGlzdC5sZW5ndGg7IGorKykge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0ZpcnN0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1dWlkID0gaW5kaWNhdG9yTGlzdFtqXS5faWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmV2ID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXS9fcmV2XCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VxID0gaW5kaWNhdG9yTGlzdFtqXS5tb2RlbC5wZW5kaW5nLnNlcTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0dXMgPSBpbmRpY2F0b3JMaXN0W2pdLm1vZGVsLnBlbmRpbmcuc3RhdHVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZE9iamVjdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dWlkOiB1dWlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldjogcmV2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcTogc2VxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogc3RhdHVzXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5pbmRpY2F0b3JzLnB1c2goaW5kT2JqZWN0KTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXVpZCA9IGluZGljYXRvckxpc3Rbal0uaW5zdGFuY2VzWzBdLnV1aWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmV2ID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXS9fcmV2XCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VxID0gSlNPTi54cGF0aChcIi9pbmRpY2F0b3JzW19pZCBlcSAnXCIgKyB1dWlkICsgXCInXS9tb2RlbC9wZW5kaW5nL3NlcVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXR1cyA9IEpTT04ueHBhdGgoXCIvaW5kaWNhdG9yc1tfaWQgZXEgJ1wiICsgdXVpZCArIFwiJ10vbW9kZWwvcGVuZGluZy9zdGF0dXNcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRPYmplY3QgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXVpZDogdXVpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXY6IHJldixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXE6IHNlcSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHN0YXR1c1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuaW5kaWNhdG9ycy5wdXNoKGluZE9iamVjdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWxldGUgbW9kZWwuYXNzaWduZWRUbztcbiAgICAgICAgICAgICAgICBkZWxldGUgbW9kZWwuYXNzaWdubWVudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kZWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGFkZCBpbmZvcm1hdGlvbiB0byB0cmFuc3Rpb24gb2JqZWN0LlxuICAgICAgICAgICAgdmFyIHRybk9iamVjdCA9IHtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uSWQ6IHRyYW5zaXRpb25bMF0uX2lkLFxuICAgICAgICAgICAgICAgIGRhdGVUaW1lOiBtb21lbnQoKS5mb3JtYXQoKSxcbiAgICAgICAgICAgICAgICB1c2VySWQ6IExPQ0FMX1NFVFRJTkdTLlNVQlNDUklQVElPTlMudXNlcklkICsgXCJcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1vZGVsICE9IHVuZGVmaW5lZCAmJiBPYmplY3Qua2V5cyhtb2RlbCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIG1vZGVsLnRyYW5zaXRpb24gPSB0cm5PYmplY3Q7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNwSW5zdGFuY2VTdGVwT2JqZWN0LnRyYW5zaXRpb24gPSB0cm5PYmplY3Q7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNvcHkgY3VycmVudCBhc3NpZ25lZFRvIHRvIHJlQXNzaWdubWVudCBvYmplY3RcblxuICAgICAgICAgICAgaWYgKG1vZGVsICE9IHVuZGVmaW5lZCAmJiBPYmplY3Qua2V5cyhtb2RlbCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGlmIChtb2RlbC5hc3NpZ25tZW50SGlzdG9yeSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuYXNzaWdubWVudEhpc3RvcnkgPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGFzc2lnbmVlT2JqID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShtb2RlbC5hc3NpZ25lZFRvKSk7XG4gICAgICAgICAgICAgICAgaWYgKGFzc2lnbmVlT2JqLnVzZXJJZCAhPSBcIlwiICYmIGFzc2lnbmVlT2JqLm5hbWUgIT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBtb2RlbC5hc3NpZ25tZW50SGlzdG9yeS5wdXNoKGFzc2lnbmVlT2JqKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHNwSW5zdGFuY2VTdGVwT2JqZWN0LmFzc2lnbm1lbnRIaXN0b3J5ID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBzcEluc3RhbmNlU3RlcE9iamVjdC5hc3NpZ25tZW50SGlzdG9yeSA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgYXNzaWduZWVPYmogPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHNwSW5zdGFuY2VTdGVwT2JqZWN0LmFzc2lnbmVkVG8pKTtcbiAgICAgICAgICAgICAgICBpZiAoYXNzaWduZWVPYmoudXNlcklkICE9IFwiXCIgJiYgYXNzaWduZWVPYmoubmFtZSAhPSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwSW5zdGFuY2VTdGVwT2JqZWN0LmFzc2lnbm1lbnRIaXN0b3J5LnB1c2goYXNzaWduZWVPYmopO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhpc3RvcnlNb2RlbDtcbiAgICAgICAgICAgIGlmIChtb2RlbCAhPSB1bmRlZmluZWQgJiYgT2JqZWN0LmtleXMobW9kZWwpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBoaXN0b3J5TW9kZWwgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG1vZGVsKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGhpc3RvcnlNb2RlbCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3BJbnN0YW5jZVN0ZXBPYmplY3QpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbmRNb2RlbEluU3RlcCA9IHB1c2hJbmRpY2F0b3JUb01vZGVsKGhpc3RvcnlNb2RlbCk7XG4gICAgICAgICAgICBzcGluc3RhbmNlT2JqZWN0Lmhpc3RvcnkucHVzaChpbmRNb2RlbEluU3RlcCk7XG5cbiAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uWzBdLnRyYW5zaXRpb25BY3Rpb24uZ29Ub1N0ZXAgIT0gdW5kZWZpbmVkKSB7XG5cblxuXG4gICAgICAgICAgICAgICAgdmFyIG5leHRTZXEgPSBwYXJzZUludChjdXJyZW50U3RlcFswXS5fc2VxKSArIHBhcnNlSW50KHRyYW5zaXRpb25bMF0udHJhbnNpdGlvbkFjdGlvbi5nb1RvU3RlcC5kZWZhdWx0KTtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dElkID0gJyc7XG4gICAgICAgICAgICAgICAgY3VycmVudFN1YlByb2Nlc3NbMF0uc3RlcHMuZmlsdGVyKGZ1bmN0aW9uKHN0ZXBJdGVtKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KHN0ZXBJdGVtLl9zZXEpID09IG5leHRTdGVwU2VxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0SWQgPSBzdGVwSXRlbS5faWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgc3RlcChwcm9jZXNzSWQsIHByb2Nlc3NTZXEsIHN1YlByb2Nlc3NJZCwgc3ViUHJvY2Vzc1NlcSwgbmV4dElkLCBuZXh0U2VxLCBkYXRhLCBfV0ZJbnN0YW5jZSwgc3B1dWlkKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFNlcSA9PSBtYXhTdGVwcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ0FsbCBTdGVwIHRyYW5zaXRpb25zIGhhdmUgY29tcGxldGVkIHN1Y2Nlc3NmdWxseS4nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViUHJvY2Vzc0NvbXBsZXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXA6IHJlc3VsdC5kYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdTdGVwIHRyYW5zaXRpb24gY29tcGxldGVkIHN1Y2Nlc3NmdWxseS4nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViUHJvY2Vzc0NvbXBsZXRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVwOiByZXN1bHQuZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmICh0cmFuc2l0aW9uWzBdLnRyYW5zaXRpb25BY3Rpb24uZ29Ub1N0ZXBJZCAhPSB1bmRlZmluZWQpIHtcblxuXG5cbiAgICAgICAgICAgICAgICB2YXIgZ29Ub1N0ZXBJZCA9IHRyYW5zaXRpb25bMF0udHJhbnNpdGlvbkFjdGlvbi5nb1RvU3RlcElkLnN0ZXBJZDtcbiAgICAgICAgICAgICAgICB2YXIgZ29Ub1N0ZXBTZXEgPSAxO1xuXG4gICAgICAgICAgICAgICAgY3VycmVudFN1YlByb2Nlc3NbMF0uc3RlcHMuZmlsdGVyKGZ1bmN0aW9uKHN0ZXBJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGVwSXRlbS5faWQgPT0gZ29Ub1N0ZXBJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ29Ub1N0ZXBTZXEgPSBwYXJzZUludChzdGVwSXRlbS5fc2VxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBzdGVwKHByb2Nlc3NJZCwgcHJvY2Vzc1NlcSwgc3ViUHJvY2Vzc0lkLCBzdWJQcm9jZXNzU2VxLCBnb1RvU3RlcElkLCBnb1RvU3RlcFNlcSwgZGF0YSwgX1dGSW5zdGFuY2UsIHNwdXVpZCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdvVG9TdGVwU2VxID09IG1heFN0ZXBzIHx8IHJlc3VsdC5kYXRhLnN0YXR1cyA9PSAnQ29tcGxldGUnKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdBbGwgU3RlcCB0cmFuc2l0aW9ucyBoYXZlIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YlByb2Nlc3NDb21wbGV0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVwOiByZXN1bHQuZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdTdGVwIHRyYW5zaXRpb24gY29tcGxldGVkIHN1Y2Nlc3NmdWxseS4nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViUHJvY2Vzc0NvbXBsZXRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVwOiByZXN1bHQuZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3MpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHJhbnNpdGlvblswXS50cmFuc2l0aW9uQWN0aW9uLnN0b3AgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBBcyB0aGlzIGlzIHRoZSBsYXN0IHN0ZXAgKHdoZXJlIHN0b3AgaXMgZGVmaWVkKSAsIHN1YlByb2Nlc3MgcG9zdEFjdGlvbnMgc2hvdWxkIGNvbWUgaGVyZS5cblxuICAgICAgICAgICAgICAgIHZhciBwb3N0QWN0aW9uc0NvbmYgPSBjdXJyZW50UHJvY2Vzc1swXS5wb3N0QWN0aW9ucztcbiAgICAgICAgICAgICAgICBwb3N0QWN0aW9ucyhwb3N0QWN0aW9uc0NvbmYsIF9XRkluc3RhbmNlLCBzcHV1aWQpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ1N0ZXAgdHJhbnNpdGlvbiBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LldvcmtmbG93IHN0b3BwZWQuJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViUHJvY2Vzc0NvbXBsZXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcDogbW9kZWxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG5cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9XG5cbiAgICB9KTtcbn07XG5cbi8qKlxuICogUHJvY2VzcyBwb3N0QWN0aW9uc1xuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwb3N0QWN0aW9ucyAtIHRoZSBwb3N0QWN0aW9ucyBjb25maWcgZGF0YVxuICpcbiAqIEBleGFtcGxlICcnXG4gKlxuICogQHJldHVybiAnJ1xuICpcbiAqL1xuZnVuY3Rpb24gcG9zdEFjdGlvbnMocG9zdEFjdGlvbnMsIF9XRkluc3RhbmNlLCBzcHV1aWQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciBjb21wbGV0ZWQgPSBbXTtcbiAgICAgICAgdHJ5IHtcblxuXG4gICAgICAgICAgICB2YXIgc3BPYmplY3QgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgc3B1dWlkICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgdmFyIHByb2Nlc3NJRCA9IHNwT2JqZWN0W1wibWV0YS1kYXRhXCJdLnByb2Nlc3NDb25maWdJZDtcbiAgICAgICAgICAgIHZhciBwcm9jZXNzSWQgPSBzcE9iamVjdFtcIm1ldGEtZGF0YVwiXS5zdWJQcm9jZXNzQ29uZmlnSWQ7XG4gICAgICAgICAgICB2YXIgcHJvY2Vzc1NFUSA9IHNwT2JqZWN0W1wibWV0YS1kYXRhXCJdLnN1YlByb2Nlc3NJbnNTZXE7XG4gICAgICAgICAgICB2YXIgcHJvY2Vzc1NlcSA9IHNwT2JqZWN0W1wibWV0YS1kYXRhXCJdLnN1YlByb2Nlc3NJbnNTZXE7XG5cbiAgICAgICAgICAgIHZhciBzdWJQcm9jZXNzQ29uZmlnT2JqZWN0ID0gSlNPTi54cGF0aChcIi9jb25maWcvcHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBwcm9jZXNzSUQgKyBcIiddL3N1YlByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgcHJvY2Vzc0lkICsgXCInXVwiLCBfV0ZJbnN0YW5jZSwge30pWzBdO1xuICAgICAgICAgICAgdmFyIHN0ZXBPYmplY3QgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgc3B1dWlkICsgXCInXS9zdGVwXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG5cblxuICAgICAgICAgICAgdXRpbC5zeW5jTG9vcChwb3N0QWN0aW9ucy5sZW5ndGgsIGZ1bmN0aW9uKGxvb3ApIHtcbiAgICAgICAgICAgICAgICB2YXIgY291bnRlciA9IGxvb3AuaXRlcmF0aW9uKCk7XG4gICAgICAgICAgICAgICAgYWN0aW9uKHBvc3RBY3Rpb25zW2NvdW50ZXJdLCBwcm9jZXNzSUQsIHByb2Nlc3NTRVEsIHByb2Nlc3NJZCwgcHJvY2Vzc1NlcSwgc3ViUHJvY2Vzc0NvbmZpZ09iamVjdCwgc3RlcE9iamVjdCwgX1dGSW5zdGFuY2UsIHt9LCBzcHV1aWQpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBhbGwgcHJlLXJlcXVpc2l0ZXMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseS5cbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkLnB1c2godHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGxvb3AubmV4dCgpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQucHVzaChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGxvb3AuYnJlYWsoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29tcGxldGVkLmV2ZXJ5KEJvb2xlYW4pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdQb3N0LWFjdGlvbnMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseS4nLCB7fSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gdXRpbC5lcnJvcignV0ZQcmVBY3Rpb25zRXJyb3InLCAnTm90IGFsbCBwb3N0LWFjdGlvbnMgcGFzc2VkLicpO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH1cblxuICAgIH0pO1xufTtcblxuLypcbmZ1bmN0aW9uIHNlbmROb3RpZmljYXRpb25zKHVzZXJzTGlzdCwgc3B1dWlkKXtcblxuICAvLyBnZXQgdXNlcnMgbGlzdCBcbiAgLy8gc2VuIG5vdGlmaWNhdGlvbnMgdG8gdXNlcnMgeSBhZGRpbmcgY2hhbm5lbHMgdG8gdGhlbVxuXG4gIHZhciBjaGFubmVsQXJyYXkgPSBbXTtcblxuICBmb3IoaT0wO2k8dXNlcnNMaXN0Lmxlbmd0aDsgaSsrKXtcbiAgICBjaGFubmVsQXJyYXkucHVzaChcInVzZXJfXCIrdXNlcnNMaXN0W2ldLmlkKTtcbiAgfVxuXG4gIGFzc2lnblRvVXNlcnMocHJvY2Vzc1dvcmtmbG93TWVzc2FnZShOT1RJRklDQVRJT05fVVNFUl9NU0dfQUNDRVBULCBzcHV1aWQpLCBjaGFubmVsQXJyYXkpO1xuXG59OyovXG5cbi8qZnVuY3Rpb24gYXNzaWduVG9Vc2VycyhtZXNzYWdlLCBjaGFubmVsQXJyYXkpe1xuXG4gICAgIHZhciBjaGFubmVscyA9IGNoYW5uZWxBcnJheTtcblxuICAgICB2YXIgbm90aWZpY2F0aW9uID0gIHsgXG4gICAgICAgICAgXCJfaWRcIjogZ2VuZXJhdGVVVUlEKCksXG4gICAgICAgICAgXCJjaGFubmVsc1wiOmNoYW5uZWxzLFxuICAgICAgICAgIFwibWVzc2FnZVwiOiBtZXNzYWdlLFxuICAgICAgICAgIFwibWVzc2FnZVR5cGVcIjogXCJpbmZvXCIsXG4gICAgICAgICAgXCJjcmVhdGVkRGF0ZVRpbWVcIjogbW9tZW50KCkuZm9ybWF0KCksXG4gICAgICAgICAgXCJyZWFkXCI6IGZhbHNlLFxuICAgICAgICAgIFwicmVhZERhdGVUaW1lXCI6IFwiXCIsXG4gICAgICAgICAgXCJ0eXBlXCI6IFwibm90aWZpY2F0aW9uXCIsXG4gICAgICAgICAgXCJzZW5kZXJVc2VySWRcIjogTE9DQUxfU0VUVElOR1MuU1VCU0NSSVBUSU9OUy51c2VySWRcbiAgICAgICB9O1xuXG4gICAgICAgY29uc29sZS5sb2cobm90aWZpY2F0aW9uKTtcbiAgICAgICBkYW8udXBzZXJ0KG5vdGlmaWNhdGlvbik7XG5cbiAgfTsqL1xuXG5mdW5jdGlvbiBwcm9jZXNzV29ya2Zsb3dNZXNzYWdlKG1lc3NhZ2UsIHNwdXVpZCkge1xuXG4gICAgdmFyIHJlcGxhY2VkTXNnID0gbWVzc2FnZTtcblxuICAgIGlmIChyZXBsYWNlZE1zZy5pbmRleE9mKCcjSU5TVEFOQ0VfTEFCRUwnKSAhPT0gLTEpIHtcbiAgICAgICAgdmFyIHZhbCA9IEpTT04ueHBhdGgoXCIvaW5zdGFuY2UvcHJvY2Vzc2VzL3N1YlByb2Nlc3Nlc1t1dWlkIGVxICdcIiArIHNwdXVpZCArIFwiJ10vbGFiZWxcIiwgYXBwLlNDT1BFLndvcmtmbG93LCB7fSlbMF07XG4gICAgICAgIHJlcGxhY2VkTXNnID0gcmVwbGFjZWRNc2cucmVwbGFjZSgnI0lOU1RBTkNFX0xBQkVMJywgdmFsKTtcblxuICAgIH1cblxuICAgIGlmIChyZXBsYWNlZE1zZy5pbmRleE9mKCcjVVNFUl9OQU1FJykgIT09IC0xKSB7XG4gICAgICAgIHZhciB2YWwgPSBKU09OLnhwYXRoKFwiL3N1YnByb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgc3B1dWlkICsgXCInXS9zdGVwL2Fzc2lnbmVkVG8vbmFtZVwiLCBhcHAuU0NPUEUud29ya2Zsb3csIHt9KVswXTtcbiAgICAgICAgcmVwbGFjZWRNc2cgPSByZXBsYWNlZE1zZy5yZXBsYWNlKCcjVVNFUl9OQU1FJywgdmFsKTtcblxuICAgIH1cblxuICAgIGlmIChyZXBsYWNlZE1zZy5pbmRleE9mKCcjUFJPRklMRV9USVRMRScpICE9PSAtMSkge1xuICAgICAgICB2YXIgdmFsID0gYXBwLnByb2ZpbGUudGl0bGU7XG4gICAgICAgIHJlcGxhY2VkTXNnID0gcmVwbGFjZWRNc2cucmVwbGFjZSgnI1BST0ZJTEVfVElUTEUnLCB2YWwpO1xuXG4gICAgfVxuXG4gICAgaWYgKHJlcGxhY2VkTXNnLmluZGV4T2YoJyNQUk9GSUxFX1RZUEUnKSAhPT0gLTEpIHtcbiAgICAgICAgdmFyIHZhbCA9IGFwcC5TQ09QRS5BUFBfQ09ORklHLm5hbWU7XG4gICAgICAgIHJlcGxhY2VkTXNnID0gcmVwbGFjZWRNc2cucmVwbGFjZSgnI1BST0ZJTEVfVFlQRScsIHZhbCk7XG5cbiAgICB9XG5cbiAgICBpZiAocmVwbGFjZWRNc2cuaW5kZXhPZignI1ZBUl9TUFVVSUQnKSAhPT0gLTEpIHtcbiAgICAgICAgdmFyIHZhbCA9IHNwdXVpZDtcbiAgICAgICAgcmVwbGFjZWRNc2cgPSByZXBsYWNlZE1zZy5yZXBsYWNlKCcjVkFSX1NQVVVJRCcsIHZhbCk7XG5cbiAgICB9XG5cbiAgICByZXR1cm4gcmVwbGFjZWRNc2c7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TmFtZShhcnIsIGxhbmcpIHtcbiAgICBpZiAoYXJyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChhcnJbaV0uX2xhbmcgPT09IGxhbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyW2ldLnZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH1cblxufTtcblxuZnVuY3Rpb24gX2dldE5hbWVCeUxhbmcob2JqKSB7XG4gICAgcmV0dXJuIGxpYnJhcnkuZ2V0TmFtZUJ5TGFuZyhvYmopO1xufTtcblxuXG5cblxuXG4vKipcbiAqIFByb2Nlc3MgcHJlV29ya0FjdGlvbnNcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcHJlV29ya0FjdGlvbnMgLSB0aGUgcHJlV29ya0FjdGlvbnMgY29uZmlnIGRhdGFcbiAqXG4gKiBAZXhhbXBsZSAnJ1xuICpcbiAqIEByZXR1cm4gJydcbiAqXG4gKi9cblxuZnVuY3Rpb24gcHJlV29ya0FjdGlvbnMocHJlV29ya0FjdGlvbnMsIF9XRkluc3RhbmNlKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgY29tcGxldGVkID0gW107XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgc3ViUHJvY2Vzc0NvbmZpZ09iamVjdCA9IEpTT04ueHBhdGgoXCIvY29uZmlnL3Byb2Nlc3Nlc1tfaWQgZXEgJ1wiICsgYXBwLlNDT1BFLnNwby5wT2JqZWN0LmlkICsgXCInXS9zdWJQcm9jZXNzZXNbX2lkIGVxICdcIiArIGFwcC5TQ09QRS5zcG8uc3BPYmplY3QuaWQgKyBcIiddXCIsIF9XRkluc3RhbmNlLCB7fSlbMF07XG4gICAgICAgICAgICB2YXIgc3RlcE9iamVjdCA9IEpTT04ueHBhdGgoXCIvc3VicHJvY2Vzc2VzW19pZCBlcSAnXCIgKyBhcHAuU0NPUEUucHJvY2Vzc1VVSUQgKyBcIiddL3N0ZXBcIiwgX1dGSW5zdGFuY2UsIHt9KVswXTtcbiAgICAgICAgICAgIHV0aWwuc3luY0xvb3AocHJlV29ya0FjdGlvbnMubGVuZ3RoLCBmdW5jdGlvbihsb29wKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvdW50ZXIgPSBsb29wLml0ZXJhdGlvbigpO1xuICAgICAgICAgICAgICAgIGFjdGlvbihwcmVXb3JrQWN0aW9uc1tjb3VudGVyXSwgYXBwLlNDT1BFLnNwby5wT2JqZWN0LmlkLCBhcHAuU0NPUEUuc3BvLnBPYmplY3Quc2VxLCBhcHAuU0NPUEUuc3BvLnNwT2JqZWN0LmlkLCBhcHAuU0NPUEUuc3BvLnNwT2JqZWN0LnNlcSwgc3ViUHJvY2Vzc0NvbmZpZ09iamVjdCwgc3RlcE9iamVjdCwgX1dGSW5zdGFuY2UsIHt9LCBhcHAuU0NPUEUucHJvY2Vzc1VVSUQpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBhbGwgcHJlLXJlcXVpc2l0ZXMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseS5cbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkLnB1c2godHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGxvb3AubmV4dCgpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQucHVzaChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGxvb3AuYnJlYWsoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29tcGxldGVkLmV2ZXJ5KEJvb2xlYW4pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdXRpbC5zdWNjZXNzKCdQcmVXb3JrLWFjdGlvbnMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseS4nLCB7fSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3VjY2Vzcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gdXRpbC5lcnJvcignV0ZQcmVBY3Rpb25zRXJyb3InLCAnTm90IGFsbCBwcmUtd29yay1hY3Rpb25zIHBhc3NlZC4nKTtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9XG5cbiAgICB9KTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICBwcmVSZXF1aXNpdGVzOiBwcmVSZXF1aXNpdGVzLFxuICAgIHByZUFjdGlvbnM6IHByZUFjdGlvbnMsXG4gICAgcG9zdEFjdGlvbnM6IHBvc3RBY3Rpb25zLFxuICAgIHByZVdvcmtBY3Rpb25zOiBwcmVXb3JrQWN0aW9ucyxcbiAgICBzdWJQcm9jZXNzOiBzdWJQcm9jZXNzLFxuICAgIGluZGljYXRvckRvY3M6IGluZGljYXRvckRvY3MsXG4gICAgdGFzazogdGFzayxcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLFxuICAgIGFzc2lnblVzZXI6IGFzc2lnblVzZXJcblxufSIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVdGlsaXR5IE1vZHVsZVxuICpcbiAqIEBtb2R1bGUgbGliL3V0aWxcbiAqXG4gKiBAYXV0aG9yIEJyZW50IEdvcmRvblxuICogQHZlcnNpb24gMC4xLjBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFdvcmtmbG93IHV0aWxpdHkgbW9kdWxlIHVzZWQgdG8gZm9ybWF0IHRoZSByZXR1cm4gYW5kIGVycm9yIG9iamVjdHMsIGFuZFxuICogY29udGFpbnMgc29tZSBvdGhlciB1dGlsaXR5IGZ1bmN0aW9ucyBzdWNoIGFzIGEgc3luYyBsb29wIGFuZCBjb21wYXJlLlxuICpcbiAqL1xuXG4vKipcbiAqIFN1Y2Nlc3MgYmxvY2sgcmV0dXJuIG9iamVjdCwgY29udGFpbnMgYSBtZXNzYWdlIGFuZCBvcHRpb25hbCBkYXRhIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIHRoZSBzdWNjZXNzIG1lc3NhZ2VcbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gW2RhdGFdIC0gdGhlIHN1Y2Nlc3MgcmV0dXJuZWQgZGF0YVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXR1cm4gc3VjY2VzcyB3aXRob3V0IGEgZGF0YSBibG9ja1xuICogdmFyIHN1Y2Nlc3MgPSB1dGlsLnN1Y2Nlc3MoJ1N1Y2Nlc3MgbWVzc2FnZSBnb2VzIGhlcmUuLi4nKTtcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IC0gd2l0aCBtZXNzYWdlIGFuZCBkYXRhIHByb3BlcnRpZXNcbiAqXG4gKi9cbmZ1bmN0aW9uIHN1Y2Nlc3MobWVzc2FnZSwgZGF0YSl7XG5cdHJldHVybiB7XG5cdFx0bWVzc2FnZTogbWVzc2FnZSxcblx0XHRkYXRhOiBkYXRhXG5cdH07XG59O1xuXG4vKipcbiAqIFdhcm5pbmcgYmxvY2sgcmV0dXJuIG9iamVjdCwgY29udGFpbnMgYSBtZXNzYWdlIGFuZCBvcHRpb25hbCBkYXRhIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIHRoZSB3YXJuaW5nIG1lc3NhZ2VcbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gW2RhdGFdIC0gdGhlIHJldHVybmVkIGRhdGFcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmV0dXJuIHN1Y2Nlc3Mgd2l0aG91dCBhIGRhdGEgYmxvY2tcbiAqIHZhciBzdWNjZXNzID0gdXRpbC53YXJuKCdXYXJuaW5nIG1lc3NhZ2UgZ29lcyBoZXJlLi4uJyk7XG4gKlxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIG1lc3NhZ2UgYW5kIGRhdGEgcHJvcGVydGllcywgYW5kIGxvZ3MgdGhlIHdhcm5pbmcgdG8gdGhlIGNvbnNvbGUuXG4gKlxuICovXG5mdW5jdGlvbiB3YXJuKG1lc3NhZ2UsIGRhdGEpe1xuXHRjb25zb2xlLndhcm4oZGF0YSk7XG5cdHJldHVybiB7XG5cdFx0d2FybmluZzogbWVzc2FnZSxcblx0XHRkYXRhOiBkYXRhXG5cdH07XG59O1xuXG4vKipcbiAqIEVycm9yIGJsb2NrIEpTIGVycm9yIG9iamVjdCwgY29udGFpbnMgYSBjb2RlIGFuZCBtZXNzYWdlIGZvciB0aGUgZXJyb3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvZGUgLSB0aGUgZXJyb3IgY29kZVxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSB0aGUgZXJyb3IgbWVzc2FnZVxuICpcbiAqIEBleGFtcGxlXG4gKiB2YXIgc3VjY2VzcyA9IHV0aWwuZXJyb3IoJ0Vycm9yMDAxJywnRXJyb3IgbWVzc2FnZSBnb2VzIGhlcmUuLi4nKTtcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggYSBjb2RlIGFuZCBtZXNzYWdlIHByb3BlcnRpZXMuXG4gKlxuICovXG5mdW5jdGlvbiBlcnJvcihjb2RlLCBtZXNzYWdlKXtcblx0dmFyIGVyciA9IG5ldyBFcnJvcignJyk7XG5cdGVyci5uYW1lID0gY29kZTtcblx0ZXJyLm1lc3NhZ2UgPSBtZXNzYWdlO1xuXHRyZXR1cm4gZXJyO1xufTtcblxuLyoqXG4gKiBBIGxvb3Agd2hpY2ggY2FuIGxvb3AgWCBhbW91bnQgb2YgdGltZXMsIHdoaWNoIGNhcnJpZXMgb3V0XG4gKiBhc3luY2hyb25vdXMgY29kZSwgYnV0IHdhaXRzIGZvciB0aGF0IGNvZGUgdG8gY29tcGxldGUgYmVmb3JlIGxvb3BpbmcuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGl0ZXJhdGlvbnMgLSB0aGUgbnVtYmVyIG9mIGl0ZXJhdGlvbnMgdG8gY2Fycnkgb3V0XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9jZXNzIC0gdGhlIGNvZGUvZnVuY3Rpb24gd2UncmUgcnVubmluZyBmb3IgZXZlcnlcbiAqIGl0ZXJhdGlvblxuICogQHBhcmFtIHtmdW5jdGlvbn0gZXhpdCAtIGFuIG9wdGlvbmFsIGNhbGxiYWNrIHRvIGNhcnJ5IG91dCBvbmNlIHRoZSBsb29wXG4gKiBoYXMgY29tcGxldGVkXG4gKlxuICogQGV4YW1wbGVcbiAqIHV0aWwuc3luY0xvb3AoNSwgZnVuY3Rpb24obG9vcCl7XG4gKiBcdHZhciBjb3VudGVyID0gbG9vcC5pdGVyYXRpb24oKTtcbiAqIFx0Ly8gQWRkIGFzeW5jIGNhbGxzIGhlcmUuLlxuICpcbiAqIH0sIGZ1bmN0aW9uKCl7XG4gKiBcdC8vIE9uIGNvbXBsZXRlIHBlcmZvcm0gYWN0aW9ucyBoZXJlLi4uXG4gKlxuICogfSk7XG4gKlxuICogQHJldHVybiB7T2JqZWN0fSB0aGUgbG9vcCBjb250cm9sIG9iamVjdC5cbiAqXG4gKi9cbmZ1bmN0aW9uIHN5bmNMb29wKGl0ZXJhdGlvbnMsIHByb2Nlc3MsIGV4aXQpe1xuICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgIGRvbmUgPSBmYWxzZSxcbiAgICAgICAgc2hvdWxkRXhpdCA9IGZhbHNlO1xuICAgIHZhciBsb29wID0ge1xuICAgICAgICBuZXh0OmZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZihkb25lKXtcbiAgICAgICAgICAgICAgICBpZihzaG91bGRFeGl0ICYmIGV4aXQpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhpdCgpOyAvLyBFeGl0IGlmIHdlJ3JlIGRvbmVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiB3ZSdyZSBub3QgZmluaXNoZWRcbiAgICAgICAgICAgIGlmKGluZGV4IDwgaXRlcmF0aW9ucyl7XG4gICAgICAgICAgICAgICAgaW5kZXgrKzsgLy8gSW5jcmVtZW50IG91ciBpbmRleFxuICAgICAgICAgICAgICAgIHByb2Nlc3MobG9vcCk7IC8vIFJ1biBvdXIgcHJvY2VzcywgcGFzcyBpbiB0aGUgbG9vcFxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIHdlJ3JlIGRvbmVcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7IC8vIE1ha2Ugc3VyZSB3ZSBzYXkgd2UncmUgZG9uZVxuICAgICAgICAgICAgICAgIGlmKGV4aXQpIGV4aXQoKTsgLy8gQ2FsbCB0aGUgY2FsbGJhY2sgb24gZXhpdFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBpdGVyYXRpb246ZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHJldHVybiBpbmRleCAtIDE7IC8vIFJldHVybiB0aGUgbG9vcCBudW1iZXIgd2UncmUgb25cbiAgICAgICAgfSxcbiAgICAgICAgYnJlYWs6ZnVuY3Rpb24oZW5kKXtcbiAgICAgICAgICAgIGRvbmUgPSB0cnVlOyAvLyBFbmQgdGhlIGxvb3BcbiAgICAgICAgICAgIHNob3VsZEV4aXQgPSBlbmQ7IC8vIFBhc3NpbmcgZW5kIGFzIHRydWUgbWVhbnMgd2Ugc3RpbGwgY2FsbCB0aGUgZXhpdCBjYWxsYmFja1xuICAgICAgICB9XG4gICAgfTtcbiAgICBsb29wLm5leHQoKTtcbiAgICByZXR1cm4gbG9vcDtcbn07XG5cbmZ1bmN0aW9uIGNvbXBhcmUoc3ViamVjdCwgb3BlcmF0b3IsIHZhbHVlKSB7XG4gIFx0c3dpdGNoIChvcGVyYXRvcikge1xuICBcdFx0Y2FzZSAnZ3JlYXRlclRoYW4nOlxuXHRcdFx0cmV0dXJuIHN1YmplY3QgPiB2YWx1ZTtcblx0XHRjYXNlICdsZXNzVGhhbic6XG5cdFx0XHRyZXR1cm4gc3ViamVjdCA8IHZhbHVlO1xuXHRcdGNhc2UgJ2dyZWF0ZXJUaGFuRXF1YWwnOlxuXHRcdFx0cmV0dXJuIHN1YmplY3QgPj0gdmFsdWU7XG5cdFx0Y2FzZSAnbGVzc1RoYW5FcXVhbCc6XG5cdFx0XHRyZXR1cm4gc3ViamVjdCA8PSB2YWx1ZTtcblx0XHRjYXNlICdlcXVhbFRvJzpcblx0XHRcdHJldHVybiBzdWJqZWN0ID09PSB2YWx1ZTtcblx0XHRjYXNlICdub3RFcXVhbFRvJzpcblx0XHRcdHJldHVybiBzdWJqZWN0ICE9PSB2YWx1ZTtcbiAgXHR9XG59O1xuXG5mdW5jdGlvbiBnZXROYW1lKGFyciwgbGFuZyl7XG5cdGlmIChhcnIgIT09IHVuZGVmaW5lZCkge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aCA7IGkrKykge1xuXHRcdFx0aWYgKGFycltpXS5pMThuLl9sYW5nID09PSBsYW5nKSB7XG5cdFx0XHRcdHJldHVybiBhcnJbaV0uaTE4bi52YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiBcdHN1Y2Nlc3M6IHN1Y2Nlc3MsXG4gXHR3YXJuOiB3YXJuLFxuIFx0ZXJyb3I6IGVycm9yLFxuIFx0c3luY0xvb3A6IHN5bmNMb29wLFxuIFx0Y29tcGFyZTogY29tcGFyZSxcblx0Z2V0TmFtZTogZ2V0TmFtZVxuXG4gfVxuIl19
