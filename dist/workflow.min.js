(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Workflow = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function Workflow(e,r,i,s){var o=this;if(""===e||void 0===e)throw new Error("A profile id is required.");if("string"!=typeof e)throw new Error("The profile id must be a javascript string.");if(o.profile=e||"",""===r||void 0===r)throw new Error("An app id is required.");if("string"!=typeof r)throw new Error("The app id must be a javascript string.");if(o.app=r||"",""===i||void 0===i)throw new Error("A workflow configuration is required.");"object"!=typeof i?o.config=JSON.parse(i):o.config=i,o.instance=s}var Process=require("./lib/process"),util=require("./lib/utility");Workflow.prototype.create=function(){var e=this;return new Promise(function(r,i){try{if(void 0!==e.instance){var s=util.warn("Instance already exists.",e.instance);r(s)}else{var o={_id:"",version:"",type:"workflowInstance",processes:[]};o._id=e.profile+":processes",o.version=e.config.version,e.instance=o;var t=util.success("Workflow processes instance created successfully.",e.instance);r(t)}}catch(n){i(n)}})},Workflow.prototype.initialise=function(e,r){var i=this;return new Promise(function(s,o){try{var t=[];if(""!==e&&void 0!==e){if(t=i.config.processes.filter(function(r){return r._id===e?r:void 0}),void 0===t[0]._id){var n=util.error("WFConfigError","No valid process definition found with process id: "+e);o(n)}}else t.push(i.config.processes[0]),e=i.config.processes[0]._id;var c=[];c=i.instance.processes.filter(function(r){return r.id===e?r:void 0});var f=c.length,u=f+1,a={id:"",seq:"",subProcesses:[]};a.id=e,a.seq=u,i.instance.processes.push(a),Process.preRequisites(t[0].prerequisites,i).then(function(n){Process.preActions(t[0].preActions,i).then(function(n){Process.subProcess(e,t[0].subProcesses[0],1,r,i).then(function(e){i.instance=e.res;var r=util.success("Process: "+i.config.processes[0]._id+" initialized successfully.");s(r)},function(e){o(e)})},function(e){o(e)})},function(e){o(e)})}catch(p){o(p)}})},Workflow.prototype.task=function(e,r){return new Promise(function(e,r){try{e("Success")}catch(i){r(i)}})},Workflow.prototype.transition=function(e,r,i,s,o){var t=this;return new Promise(function(n,c){try{Process.transition(e,r,i,s,o,t).then(function(e){var r=util.success("Workflow transitioned to the next step successfully.",{});n(r)},function(e){c(e)})}catch(f){c(f)}})},module.exports=Workflow;

},{"./lib/process":3,"./lib/utility":4}],2:[function(require,module,exports){
"use strict";function create(e,s){var t=[];return new Promise(function(r,u){util.syncLoop(e.indicators.length,function(r){var u=r.iteration(),c=e.indicators[u]._id,i=e.indicators[u].name.i18n.value,o=s.profile+":"+s.app+":"+c+":0",n={_id:o,category:{term:c,label:i},processes:[]};t.push(n),r.next()},function(){var e=util.success("Form created successfully.",t);r(e)})})}function save(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var r=util.success("Form indicator set saved successfully.",s);e(r)})}function submit(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var r=util.success("Form submitted successfully.",s);e(r)})}function authorise(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var r=util.success("Form authorised successfully.",s);e(r)})}function close(e){var s={complete:!0,data:[]};return new Promise(function(e,t){var r=util.success("Form closed successfully.",s);e(r)})}var util=require("./utility");module.exports={create:create,save:save,submit:submit,authorise:authorise,close:close};

},{"./utility":4}],3:[function(require,module,exports){
"use strict";function preRequisites(e){return new Promise(function(e,t){var s=util.success("Pre-requisites completed successfully.",{});e(s)})}function preRequisite(e,t,s){return new Promise(function(t,s){switch(e._type){case"count":var i={},n=util.success("Mock count successfull.",i);t(n);break;default:var r=util.error("WFPreRequisiteError","Pre-requisite type: "+e._type+" not defined.");s(r)}})}function preActions(e,t){return new Promise(function(e,t){var s=util.success("Pre-actions completed successfully.",{});e(s)})}function subProcess(e,t,s,i,n){return new Promise(function(r,o){var a={id:t._id,seq:s,initiated:!1,dates:{created:"",valid:"",due:"",closed:""},complete:!1,indicators:[],step:{}};try{initiate(t.initiate,i).then(function(s){a.initiated=!0,a.dates.created=s.data.createdDate,a.dates.valid=s.data.validDate,a.dates.due=s.data.dueDate;var c=n.instance.processes.length;n.instance.processes.filter(function(t){t.id===e&&t.seq===c&&t.subProcesses.push(a)});var u={id:t._id,name:t.name.i18n.value,indicators:t.indicators};step(e,t._id,t.steps[0]._id,0,u,i,n).then(function(e){var t=util.success("Sub-Process completed successfully.",n.instance);r(t)},function(e){o(e)})},function(e){o(e)})}catch(c){o(c)}})}function initiate(e,t){var s={complete:!1};return new Promise(function(i,n){switch(e._type){case"user":if(s.createdDate=t.createdDate,"userSelected"===e.dates.valid._type)if(void 0!==t.validDate)s.validDate=t.validDate;else{var r=util.error("WFInitiateError","No valid date passed in - {inputData.validDate}");n(r)}if("userSelected"===e.dates.due._type)if(void 0!==t.dueDate)s.dueDate=t.dueDate;else{var r=util.error("WFInitiateError","No due date passed in - {inputData.dueDate}");n(r)}s.complete=!0;var o=util.success("Sub-Process initiate completed successfully.",s);i(o);break;default:var r=util.error("WFInitiateError","Initiate type: "+e._type+" not defined.");n(r)}})}function step(e,t,s,i,n,r,o){return new Promise(function(a,c){var u={id:"",seq:"",status:"",message:"",assignedTo:{userId:"",name:""}};try{var d={};o.config.processes.filter(function(i){i._id===e&&i.subProcesses.filter(function(e){e._id===t&&e.steps.filter(function(e){e._id===s&&(d=e)})})}),u.id=s,u.seq=i,u.status=d._setInstanceStatusTo,u.message=d._setStatusMsgTo,u.assignedTo.userId=r.userId,u.assignedTo.name=r.name;var l=o.instance.processes.length;if(o.instance.processes.filter(function(s){s.id===e&&s.seq===l&&s.subProcesses.filter(function(e){e.id===t&&(e.step=u)})}),void 0!==d.actions[0])actions(d.actions,n,o).then(function(n){({id:s,seq:i,startDate:r.createdDate,status:d._setInstanceStatusTo,message:d._setStatusMsgTo,assignedTo:{userId:r.userId,name:r.name},comment:r.comment,complete:!1,endDate:""});util.syncLoop(n.res.data[0].form.indicators.length,function(e){var t=e.iteration();({id:n.res.data[0].form.indicators[t].category.term,instances:[{uuid:n.res.data[0].form.indicators[t]._id,key:"",seq:1}]});e.next()},function(){if(0!==d.actions[0].transitions.length)util.syncLoop(d.actions[0].transitions.length,function(i){var n=i.iteration();transition(e,t,s,d.actions[0].transitions[n]._id,r,o).then(function(e){var t=util.success("Transition step completed successfully.",{});a(t)},function(e){c(e),i["break"]()}),i.next()});else{var i=util.success("No transitions specified in this step.",{});a(i)}})},function(e){c(e)});else if(void 0!==d.task){var f=util.success("Task awaiting user action.",{});a(f)}}catch(p){c(p)}})}function actions(e,t,s){var i=[],n={completed:!0,data:[]};return new Promise(function(r,o){util.syncLoop(e.length,function(r){var a=r.iteration();action(e[a],t,s).then(function(e){i.push(e.complete),n.data.push(e.res),r.next()},function(e){o(e),r["break"]()})},function(){if(i.every(Boolean)){n.completed=!0;var e=util.success("Actions completed successfully.",n);r(e)}else{n.completed=!1;util.error("WFActionsError","Action/s for sub-process: "+t.id+" did not complete succeffully.");o(e)}})})}function action(e,t,s){return new Promise(function(i,n){switch(e._id){case"createForm":form.create(t,s).then(function(s){var n={transitions:[],form:{id:t.id,indicators:[]}};n.transitions=e.transitions,n.form.indicators=s.res;var r=util.success(s.message,n);i(r)},function(e){n(e)});break;case"authoriseForm":form.authorise(t,s).then(function(s){var n={transitions:[],form:{id:t.id,indicators:[]}};n.transitions=e.transitions;var r=util.success(s.message,n);i(r)},function(e){n(e)});break;case"closeForm":form.close(t,s).then(function(s){var n={transitions:[],form:{id:t.id,indicators:[]}};n.transitions=e.transitions;var r=util.success(s.message,n);i(r)},function(e){n(e)});break;default:var r=util.error("WFActionError","Action defined with id: "+e._id+" not found.");n(r)}})}function task(e){return"Implementation pending.."}function transition(e,t,s,i,n,r){return new Promise(function(o,a){try{var c=0,u="",d={},l=r.config.processes.filter(function(t){return t._id===e?t:void 0}),f=l[0].subProcesses.filter(function(e){return e._id===t?e:void 0}),p=f[0].steps.filter(function(e){return e._id===s?e:void 0});d=void 0!==p[0].actions[0]?p[0].actions[0].transitions.filter(function(e){return e._id===i?e:void 0}):p[0].task.transitions.filter(function(e){return e._id===i?e:void 0});for(var m=0;m<f[0].steps.length;m++)f[0].steps[m]._id===s&&(c=m);for(var m=0;m<f[0].steps.length;m++){var v=c+1;m===v&&(u=f[0].steps[m]._id)}switch(d[0]._type){case"auto":if("nextStep"===d[0].goTo._type)step(e,t,u,c,{},n,r).then(function(e){var t=util.success("Step transition completed successfully.",e.data);o(t)},function(e){a(e)});else if(d[0]._stop===!0){var h=util.success("All Step transitions have completed successfully.",{});o(h)}break;case"user":if("nextStep"===d[0].goTo._type)step(e,t,u,c,{},n,r).then(function(e){var t=util.success("Step transition completed successfully.",e.data);o(t)},function(e){a(e)});else if("stepId"===d[0].goTo._type){for(var _=d[0].goTo._stepId,y=1,m=0;m<f[0].steps.length;m++)f[0].steps[m]._id===_&&(y=m+1);step(e,t,_,y,{},n,r).then(function(e){var t=util.success("Step transition completed successfully.",e.data);o(t)},function(e){a(e)})}else if(d[0]._stop===!0){var h=util.success("All Step transitions have completed successfully.",{});o(h)}break;default:if(d[0]._stop===!0){var h=util.success("All Step transitions have completed successfully.",{});o(h)}else{var g=util.error("WF005","");a(g)}}}catch(P){a(P)}})}function postActions(e){return"Implementation pending.."}var util=require("./utility"),form=require("./form");module.exports={preRequisites:preRequisites,preActions:preActions,subProcess:subProcess,task:task,transition:transition};

},{"./form":2,"./utility":4}],4:[function(require,module,exports){
"use strict";module.exports={success:function(r,n){var e={message:r,data:n};return e},warn:function(r,n){var e={warning:r,data:n};return console.warn(n),e},error:function(r,n){var e=new Error("");return e.name=r,e.message=n,e},syncLoop:function(r,n,e){var a=0,t=!1,u=!1,s={next:function(){return t&&u&&e?e():void(r>a?(a++,n(s)):(t=!0,e&&e()))},iteration:function(){return a-1},"break":function(r){t=!0,u=r}};return s.next(),s},compare:function(r,n,e){switch(n){case"greaterThan":return r>e;case"lessThan":return e>r;case"greaterThanEqual":return r>=e;case"lessThanEqual":return e>=r;case"equalTo":return r===e;case"notEqualTo":return r!==e}}};

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
