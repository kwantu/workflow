(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Workflow = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function Workflow(e,r,i,s){var o=this;if(""===e||void 0===e)throw new Error("A profile id is required.");if("string"!=typeof e)throw new Error("The profile id must be a javascript string.");if(o.profile=e||"",""===r||void 0===r)throw new Error("An app id is required.");if("string"!=typeof r)throw new Error("The app id must be a javascript string.");if(o.app=r||"",""===i||void 0===i)throw new Error("A workflow configuration is required.");"object"!=typeof i?o.config=JSON.parse(i):o.config=i,o.instance=s}var Promise=require("es6-promise").Promise,util=require("./lib/utility"),Process=require("./lib/process"),models=require("./lib/models");Workflow.prototype.create=function(){var e=this;return new Promise(function(r,i){if(void 0!==e.instance){var s=util.warn("Instance already exists.",e.instance);r(s)}else{var o=models.instance();o._id=e.profile+":processes",o.version=e.config.version,e.instance=o;var t=util.success("Workflow processes instance created successfully.",e.instance);r(t)}})},Workflow.prototype.initialize=function(e,r){var i=this;return new Promise(function(s,o){var t=[];if(""!==e&&void 0!==e){if(t=i.config.processes.filter(function(r){return r._id===e?r:void 0}),void 0===t[0]._id){var n=util.error("WF001",err);o(n)}}else t.push(i.config.processes[0]),e=i.config.processes[0]._id;var c=1,u=[];u=i.instance.processes.filter(function(r){return r.id===e?r:void 0});var f=u.length,a=f+1,l={id:"",seq:a,subProcesses:[]};l.id=e,l.seq=c,i.instance.processes.push(l),Process.preRequisites(t[0].prerequisites,i).then(function(n){if(n.complete===!0)Process.preActions(t[0].preActions,i).then(function(n){if(n.complete)Process.subProcess(e,t[0].subProcesses[0],1,r,i).then(function(r){if(r.complete){var t=r.res;i.instance.processes.filter(function(r){r.id===e&&r.subProcesses.push(t)});var n=util.success("Process: "+i.config.processes[0]._id+" initialized successfully.");s(n)}else{var c=util.error("WF008");o(c)}}).fail(function(e){o(e)});else{var c=util.error("WF006");o(c)}}).fail(function(e){o(e)});else{var c=util.error("WF004");o(c)}}).fail(function(e){o(e)})})},Workflow.prototype.task=function(e,r){return new Promise(function(r,i){"indicator.markComplete"===e?r("Success"):i("Error")})},Workflow.prototype.transition=function(e,r,i,s,o,t){return new Promise(function(n,c){Process.transition(e,r,i,s,o,t).then(function(e){var r=util.success("Workflow transitioned to the next step successfully.",o);n(r)}).fail(function(e){c(e)})})},module.exports=Workflow;

},{"./lib/models":3,"./lib/process":4,"./lib/utility":5,"es6-promise":6}],2:[function(require,module,exports){
"use strict";function create(e,s){var r=Q.defer(),t=[];return util.syncLoop(e.indicators.length,function(r){var u=r.iteration(),o=e.indicators[u]._id,c=e.indicators[u].name.i18n.value,i=s.profile+":"+s.app+":"+o+":0",a={_id:i,category:{term:o,label:c},processes:[]};t.push(a),r.next()},function(){var e=util.success("Form created successfully.",t);r.resolve(e)}),r.promise}function save(e){var s=Q.defer(),r={complete:!0,data:[]},t=util.success("Form indicator set saved successfully.",r);return s.resolve(t),s.promise}function submit(e){var s=Q.defer(),r={complete:!0,data:[]},t=util.success("Form submitted successfully.",r);return s.resolve(t),s.promise}function authorise(e){var s=Q.defer(),r={complete:!0,data:[]},t=util.success("Form authorised successfully.",r);return s.resolve(t),s.promise}function close(e){var s=Q.defer(),r={complete:!0,data:[]},t=util.success("Form closed successfully.",r);return s.resolve(t),s.promise}var Q=require("q"),moment=require("moment"),util=require("./utility");module.exports={create:create,save:save,submit:submit,authorise:authorise,close:close};

},{"./utility":5,"moment":7,"q":8}],3:[function(require,module,exports){
"use strict";function instance(){var e={_id:"",version:"",type:"workflowInstance",processes:[]};return e}function configuration(){var e={_id:"1234:mangaungProject",_version:"1.0",type:"workflowConfig",title:{name:{i18n:{_lang:"en",value:"Mangagung project workflow"}},description:{i18n:{_lang:"en",value:"Mangagung project workflow used to manage housing development."}}},identification:{documentation:{i18n:{_lang:"",value:""}},upgradeInformation:{i18n:{_lang:"",value:""}}},variables:{variable:[{_id:"",_dataType:"",_sessionVar:"",_default:"",_value:""}]},roles:{role:[{_id:"",_level:"",name:{i18n:{_lang:"",value:""}},roleMappings:{roleMapping:{_applicationId:"",_roleId:""}},requiredRoles:{requiredRole:{_applicationId:"",_roleId:""}}}]},processes:[{_id:"registration",_seq:"1",name:{i18n:{_lang:"en",value:"Register a project"}},help:{i18n:{_lang:"en",value:"Register a new project"}},variables:[{_id:"",_dataType:"",_sessionVar:"",_default:"",_value:""}],prerequisites:[{_seq:"1",_type:"count",_subject:"monthlyProgress.instance",_operator:"equalTo",_value:"0",message:{i18n:{_lang:"en",value:"The project registration form can't be edited once the monthly progress process has been initiated."}}}],preActions:[{_seq:"",_type:"",funct:{module:"",method:"",params:{param:[]}},rest:{hostId:"",service:"",APIKey:"",format:"",collection:"",endpoint:"",params:{param:[]}}}],subProcesses:[{_id:"spRegistration",_seq:"1",name:{i18n:{_lang:"en",value:"Project Registration Form"}},help:{i18n:{_lang:"en",value:"Register a new project"}},initiate:{_type:"user",maxInstances:"-1",action:{_type:"button",label:"Create"},dates:{valid:{_type:"userSelected",message:{i18n:{_lang:"en",value:"Please select a valid date i.e. the monthly date that the data captured is valid for."}}},due:{_type:"userSelected",message:{i18n:{_lang:"en",value:"Please select a due date i.e. the actual date that the data needs to be captured and authorised by."}}}}},indicators:[{_id:"projectDetail",maxInstances:"1",name:{i18n:{_lang:"en",value:"Project Details"}}},{_id:"projectLocation",maxInstances:"-1",name:{i18n:{_lang:"en",value:"Project Locations"}}},{_id:"developerDetail",maxInstances:"1",name:{i18n:{_lang:"en",value:"Developer Details"}}}],steps:[{_id:"createForm",_seq:"1",_setInstanceStatusTo:"Created",_setStatusMsgTo:"Form created",name:{i18n:{_lang:"en",value:"Create the registration form."}},prerequisites:[{_seq:"",_type:"",_operator:"",_subject:"",_value:"",message:{i18n:{_lang:"en",value:""}}}],actions:[{_seq:"1",_type:"internal",funct:{module:"form",method:"create",type:"newSequence"},transitions:[{_type:"auto",name:{i18n:{_lang:"en",value:""}},goTo:{_type:"nextStep",_stepId:""},_stop:!1}]}]},{_id:"captureForm",_seq:"2",_setStatusTo:"InProgress",_setStatusMsgTo:"User assigned and data capture in progress",name:{i18n:{_lang:"en",value:"Capture"}},prerequisites:[{_seq:"1",_type:"readyToSubmit",_subject:"indicators.complete",_operator:"equalTo",_value:"true",message:{i18n:{_lang:"en",value:"All form indicators have to be marked as complete before submission."}}}],actions:[],task:{assign:{profileRole:{profile:"current",role:"capturer"},"default":""},work:{action:"editForm"},transitions:[{_id:"submitForm",_type:"user",name:{i18n:{_lang:"en",value:"Submit"}},goTo:{_type:"nextStep",_stepId:""},_stop:!1}]}},{_id:"authoriseForm",_seq:"3",_setInstanceStatusTo:"awaitingAuthorisation",_setStatusMsgTo:"Form data submitted, user assigned and form data under review",name:{i18n:{_lang:"en",value:"Review the registration form data."}},prerequisites:[{_seq:"1",_type:"checkRole",_subject:"profileRole",_operator:"equalTo",_value:"authoriser",message:{i18n:{_lang:"en",value:"You have to be an authoriser on the project to approve the form data that has been captured or refer back for further editing."}}}],actions:[],task:{assign:{profileRole:{profile:"current",role:"authoriser"},"default":""},work:{action:"editForm"},transitions:[{_id:"authoriseForm",_type:"user",name:{i18n:{_lang:"en",value:"Authorise"}},goTo:{_type:"nextStep",_stepId:""},_stop:!1},{_id:"revertForm",_type:"user",name:{i18n:{_lang:"en",value:"Refer Back"}},goTo:{_type:"stepId",_stepId:"captureForm"},_stop:!1}]}},{_id:"closeForm",_seq:"5",_setInstanceStatusTo:"Complete",_setStatusMsgTo:"Form locked",name:{i18n:{_lang:"en",value:"Close the registration form."}},actions:[{_seq:"1",_type:"internal",funct:{module:"form",method:"authorise"},transition:[{_type:"auto",name:{i18n:{_lang:"en",value:""}},goTo:{_type:"",_stepId:""},_stop:!0}]}]}]}],postActions:{}}]};return e}function process(){var e={configId:"",instanceId:"",processId:"",subProcessId:"",stepId:"",assignedTo:{userId:"",name:""},token:"",status:"",statusMsg:"",lastUpdated:"",dueDate:""};return e}var Q=require("q"),util=require("./utility");module.exports={configuration:configuration,instance:instance,process:process};

},{"./utility":5,"q":8}],4:[function(require,module,exports){
"use strict";function state(e,t,s){var i,r,n,o,c,a;if(void 0!==u){var u=e.instance.processes.filter(function(e){return e._id===t?e:void 0});i=u.length-1,n=e.instance.processes[i].id,c=e.instance.processes[i].seq}else u=[],i=0,n=t,c=1;if(void 0!==u.subProcesses){var l=u.subProcesses.filter(function(e){return e._id===s?e:void 0});r=l.length-1,o=e.instance.processes[i].subProcesses[r].id,a=e.instance.processes[i].subProcesses[r].seq}else l=[],r=0,o=s,a=1;var d={profileId:e.profile,configId:e.config._id,processId:n,processIndex:i,processSeq:c,subProcessId:o,subProcessIndex:r,subProcessSeq:a};return d}function preRequisites(e){var t=Q.defer(),s={complete:!1,data:[]},i=util.success("Pre-requisites completed successfully.",s);return t.resolve(i),t.promise}function preRequisite(e,t,s){var i=Q.defer();switch(e._type){case"mock":if(util.compare(e._subject,e._operator,e._value)){var r={},n=util.success("Mock successfull.",r);i.resolve(n)}else{var o=util.error("WF006");i.reject(o)}break;case"count":var r={},n=util.success("Mock count successfull.",r);i.resolve(n);break;default:var o=util.error("WF005");i.reject(o)}return i.promise}function preActions(e,t){var s=Q.defer(),i={complete:!1,data:[]},r=util.success("Pre-actions completed successfully.",i);return s.resolve(r),s.promise}function subProcess(e,t,s,i,r){var n=Q.defer(),o={id:t._id,seq:s,initiated:!1,dates:{created:"",valid:"",due:"",closed:""},complete:!1,indicators:[],step:{id:"",seq:"",status:"",message:""}};return initiate(t.initiate,i).then(function(s){if(s.complete){o.initiated=!0,o.dates.created=s.res.createdDate,o.dates.valid=s.res.validDate,o.dates.due=s.res.dueDate;var c={id:t._id,name:t.name.i18n.value,indicators:t.indicators};step(e,t._id,o,t.steps[0],0,c,i,r).then(function(e){if(e.complete){var t=util.success("Sub-Process completed successfully.",e.res);n.resolve(t)}else{var s=util.error("WF019");n.reject(s)}}).fail(function(e){n.reject(e)})}else{var a=util.error("WF011");n.reject(a)}}).fail(function(e){n.reject(e)}),n.promise}function initiate(e,t){var s=Q.defer(),i={complete:!1};switch(e._type){case"user":if(i.createdDate=t.createdDate,"userSelected"===e.dates.valid._type)if(void 0!==t.validDate)i.validDate=t.validDate;else{var r=util.error("WF0013");s.reject(r)}if("userSelected"===e.dates.due._type)if(void 0!==t.dueDate)i.dueDate=t.dueDate;else{var r=util.error("WF0020");s.reject(r)}i.complete=!0;var n=util.success("Sub-Process initiate completed successfully.",i);s.resolve(n);break;default:var r=util.error("WF016");s.reject(r)}return s.promise}function step(e,t,s,i,r,n,o,c){var a=Q.defer();if(s.step.id=i._id,s.step.seq=r,s.step.status=i._setInstanceStatusTo,s.step.message=i._setStatusMsgTo,void 0!==i.actions[0])actions(i.actions,n,c).then(function(n){({id:i._id,seq:r,startDate:o.createdDate,status:i._setInstanceStatusTo,message:i._setStatusMsgTo,assignedTo:{userId:o.userId,name:o.name},comment:o.comment,complete:!1,endDate:""});util.syncLoop(n.res.data[0].form.indicators.length,function(e){var t=e.iteration();({id:n.res.data[0].form.indicators[t].category.term,instances:[{uuid:n.res.data[0].form.indicators[t]._id,key:"",seq:1}]});e.next()},function(){if(0!==i.actions[0].transitions.length)util.syncLoop(i.actions[0].transitions.length,function(r){var n=r.iteration();transition(e,t,i._id,i.actions[0].transitions[n]._id,s,c).then(function(e){var t=util.success("Transition step completed successfully.",s);a.resolve(t)}).fail(function(e){a.reject(e),r["break"]()}),r.next()});else{var r=util.success("No transitions specified in this step.",s);a.resolve(r)}})}).fail(function(e){a.reject(e)});else if(void 0!==i.task){var u=util.success("Task awaiting user action.",s);a.resolve(u)}else{var l=util.error("WF013");a.reject(l)}return a.promise}function actions(e,t,s){var i=Q.defer(),r=[],n={completed:!0,data:[]};return util.syncLoop(e.length,function(o){var c=o.iteration();action(e[c],c,t,s).then(function(e){r.push(e.complete),n.data.push(e.res),o.next()}).fail(function(e){i.reject(e),o["break"]()})},function(){if(r.every(Boolean)){n.completed=!0;var e=util.success("Actions completed successfully.",n);i.resolve(e)}else{n.completed=!1;util.error("Actions failed.",n);i.reject(e)}}),i.promise}function action(e,t,s,i){var r=Q.defer();switch(e._id){case"createForm":form.create(s,i).then(function(t){var i={transitions:[],form:{id:s.id,indicators:[]}};i.transitions=e.transitions,i.form.indicators=t.res;var n=util.success(t.message,i);r.resolve(n)}).fail(function(e){r.reject(e)});break;case"authoriseForm":form.authorise(s,i).then(function(t){var i={transitions:[],form:{id:s.id,indicators:[]}};i.transitions=e.transitions;var n=util.success(t.message,i);r.resolve(n)}).fail(function(e){r.reject(e)});break;case"closeForm":form.close(s,i).then(function(t){var i={transitions:[],form:{id:s.id,indicators:[]}};i.transitions=e.transitions;var n=util.success(t.message,i);r.resolve(n)}).fail(function(e){r.reject(e)});break;default:var n=util.error("WF020");r.reject(n)}return r.promise}function task(e){return"Implementation pending.."}function transition(e,t,s,i,r,n){var o=Q.defer(),c={complete:!1,data:[]},a=n.config.processes.filter(function(t){return t._id===e?t:void 0}),u=a[0].subProcesses.filter(function(e){return e._id===t?e:void 0}),l=u[0].steps.filter(function(e){return e._id===s?e:void 0}),d={};d=void 0!==l[0].actions[0]?l[0].actions[0].transitions.filter(function(e){return e._id===i?e:void 0}):l[0].task.transitions.filter(function(e){return e._id===i?e:void 0});for(var f=0,p=0;p<u[0].steps.length;p++)u[0].steps[p]._id===s&&(f=p);for(var v={},p=0;p<u[0].steps.length;p++){var m=f+1;p===m&&(v=u[0].steps[p])}switch(d[0]._type){case"auto":if("nextStep"===d[0].goTo._type)step(e,t,r,v,f,{},{},n).then(function(e){var t=util.success("Step transition completed successfully.",e.res);o.resolve(t)}).fail(function(e){o.reject(e.stack)});else if(d[0]._stop===!0){var _=util.success("All Step transitions have completed successfully.",c.res);o.resolve(_)}break;case"user":if("nextStep"===d[0].goTo._type)step(e,t,r,v,f,{},{},n).then(function(e){var t=util.success("Step transition completed successfully.",e.res);o.resolve(t)}).fail(function(e){o.reject(e.stack)});else if("stepId"===d[0].goTo._type){for(var h=d[0].goTo._stepId,g=u[0].steps.filter(function(e){return e._id===h?e:void 0}),y=1,p=0;p<u[0].steps.length;p++)u[0].steps[p]._id===h&&(y=p+1);step(e,t,r,g[0],y,{},{},n).then(function(e){var t=util.success("Step transition completed successfully.",e.res);o.resolve(t)}).fail(function(e){o.reject(e.stack)})}else if(d[0]._stop===!0){var _=util.success("All Step transitions have completed successfully.",c.res);o.resolve(_)}break;default:if(d[0]._stop===!0){var _=util.success("All Step transitions have completed successfully.",c.res);o.resolve(_)}else{var b=util.error("WF005");o.reject(b)}}return o.promise}function postActions(){return"Implementation pending.."}function func(){return"Implementation pending.."}var Q=require("q"),moment=require("moment"),util=require("./utility"),form=require("./form");module.exports={state:state,preRequisites:preRequisites,preActions:preActions,subProcess:subProcess,transition:transition};

},{"./form":2,"./utility":5,"moment":7,"q":8}],5:[function(require,module,exports){
"use strict";module.exports={success:function(e,r){var s={complete:!0,message:e,res:r};return s},warn:function(e,r){var s={complete:!0,warning:e,res:r};return console.warn(s),s},error:function(e,r){var s=new Error("");switch(s.name=e,e){case"WF001":return s.message="",s;case"WF002":return s.message="",s;case"WF003":return s.message="",s;case"WF004":return s.message="",s;case"WF005":return s.message="",s;case"WF006":return s.message="",s;case"WF007":return s.message="",s;case"WF008":return s.message="",s;case"WF009":return s.message="",s;case"WF010":return s.message="",s;case"WF011":return s.message="",s;case"WF012":return s.message="",s;case"WF013":return s.message="",s;case"WF014":return s.message="",s;case"WF015":return s.message="",s;case"WF016":return s.message="",s;case"WF017":return s.message="",s;case"WF018":return s.message="",s;case"WF019":return s.message="",s;case"WF020":return s.message="",s;default:return s.name="ERR001",s.message="Default error message, please add a more specific error code and message. See stacktrace for more information.",s}},syncLoop:function(e,r,s){var a=0,n=!1,t=!1,c={next:function(){return n&&t&&s?s():void(e>a?(a++,r(c)):(n=!0,s&&s()))},iteration:function(){return a-1},"break":function(e){n=!0,t=e}};return c.next(),c},compare:function(e,r,s){switch(r){case"greaterThan":return e>s;case"lessThan":return s>e;case"greaterThanEqual":return e>=s;case"lessThanEqual":return s>=e;case"equalTo":return e===s;case"notEqualTo":return e!==s}}};

},{}],6:[function(require,module,exports){
(function (process,global){
(function(){"use strict";function t(t){return"function"==typeof t||"object"==typeof t&&null!==t}function e(t){return"function"==typeof t}function n(t){G=t}function r(t){Q=t}function o(){return function(){process.nextTick(a)}}function i(){return function(){B(a)}}function s(){var t=0,e=new X(a),n=document.createTextNode("");return e.observe(n,{characterData:!0}),function(){n.data=t=++t%2}}function u(){var t=new MessageChannel;return t.port1.onmessage=a,function(){t.port2.postMessage(0)}}function c(){return function(){setTimeout(a,1)}}function a(){for(var t=0;J>t;t+=2){var e=tt[t],n=tt[t+1];e(n),tt[t]=void 0,tt[t+1]=void 0}J=0}function f(){try{var t=require,e=t("vertx");return B=e.runOnLoop||e.runOnContext,i()}catch(n){return c()}}function l(t,e){var n=this,r=new this.constructor(p);void 0===r[rt]&&k(r);var o=n._state;if(o){var i=arguments[o-1];Q(function(){x(o,r,i,n._result)})}else E(n,r,t,e);return r}function h(t){var e=this;if(t&&"object"==typeof t&&t.constructor===e)return t;var n=new e(p);return g(n,t),n}function p(){}function _(){return new TypeError("You cannot resolve a promise with itself")}function d(){return new TypeError("A promises callback cannot return that same promise.")}function v(t){try{return t.then}catch(e){return ut.error=e,ut}}function y(t,e,n,r){try{t.call(e,n,r)}catch(o){return o}}function m(t,e,n){Q(function(t){var r=!1,o=y(n,e,function(n){r||(r=!0,e!==n?g(t,n):S(t,n))},function(e){r||(r=!0,j(t,e))},"Settle: "+(t._label||" unknown promise"));!r&&o&&(r=!0,j(t,o))},t)}function b(t,e){e._state===it?S(t,e._result):e._state===st?j(t,e._result):E(e,void 0,function(e){g(t,e)},function(e){j(t,e)})}function w(t,n,r){n.constructor===t.constructor&&r===et&&constructor.resolve===nt?b(t,n):r===ut?j(t,ut.error):void 0===r?S(t,n):e(r)?m(t,n,r):S(t,n)}function g(e,n){e===n?j(e,_()):t(n)?w(e,n,v(n)):S(e,n)}function A(t){t._onerror&&t._onerror(t._result),T(t)}function S(t,e){t._state===ot&&(t._result=e,t._state=it,0!==t._subscribers.length&&Q(T,t))}function j(t,e){t._state===ot&&(t._state=st,t._result=e,Q(A,t))}function E(t,e,n,r){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+it]=n,o[i+st]=r,0===i&&t._state&&Q(T,t)}function T(t){var e=t._subscribers,n=t._state;if(0!==e.length){for(var r,o,i=t._result,s=0;s<e.length;s+=3)r=e[s],o=e[s+n],r?x(n,r,o,i):o(i);t._subscribers.length=0}}function M(){this.error=null}function P(t,e){try{return t(e)}catch(n){return ct.error=n,ct}}function x(t,n,r,o){var i,s,u,c,a=e(r);if(a){if(i=P(r,o),i===ct?(c=!0,s=i.error,i=null):u=!0,n===i)return void j(n,d())}else i=o,u=!0;n._state!==ot||(a&&u?g(n,i):c?j(n,s):t===it?S(n,i):t===st&&j(n,i))}function C(t,e){try{e(function(e){g(t,e)},function(e){j(t,e)})}catch(n){j(t,n)}}function O(){return at++}function k(t){t[rt]=at++,t._state=void 0,t._result=void 0,t._subscribers=[]}function Y(t){return new _t(this,t).promise}function q(t){var e=this;return new e(I(t)?function(n,r){for(var o=t.length,i=0;o>i;i++)e.resolve(t[i]).then(n,r)}:function(t,e){e(new TypeError("You must pass an array to race."))})}function F(t){var e=this,n=new e(p);return j(n,t),n}function D(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function K(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function L(t){this[rt]=O(),this._result=this._state=void 0,this._subscribers=[],p!==t&&("function"!=typeof t&&D(),this instanceof L?C(this,t):K())}function N(t,e){this._instanceConstructor=t,this.promise=new t(p),this.promise[rt]||k(this.promise),I(e)?(this._input=e,this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?S(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&S(this.promise,this._result))):j(this.promise,U())}function U(){return new Error("Array Methods must be provided an Array")}function W(){var t;if("undefined"!=typeof global)t=global;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var n=t.Promise;n&&"[object Promise]"===Object.prototype.toString.call(n.resolve())&&!n.cast||(t.Promise=pt)}var z;z=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)};var B,G,H,I=z,J=0,Q=function(t,e){tt[J]=t,tt[J+1]=e,J+=2,2===J&&(G?G(a):H())},R="undefined"!=typeof window?window:void 0,V=R||{},X=V.MutationObserver||V.WebKitMutationObserver,Z="undefined"==typeof self&&"undefined"!=typeof process&&"[object process]"==={}.toString.call(process),$="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,tt=new Array(1e3);H=Z?o():X?s():$?u():void 0===R&&"function"==typeof require?f():c();var et=l,nt=h,rt=Math.random().toString(36).substring(16),ot=void 0,it=1,st=2,ut=new M,ct=new M,at=0,ft=Y,lt=q,ht=F,pt=L;L.all=ft,L.race=lt,L.resolve=nt,L.reject=ht,L._setScheduler=n,L._setAsap=r,L._asap=Q,L.prototype={constructor:L,then:et,"catch":function(t){return this.then(null,t)}};var _t=N;N.prototype._enumerate=function(){for(var t=this.length,e=this._input,n=0;this._state===ot&&t>n;n++)this._eachEntry(e[n],n)},N.prototype._eachEntry=function(t,e){var n=this._instanceConstructor,r=n.resolve;if(r===nt){var o=v(t);if(o===et&&t._state!==ot)this._settledAt(t._state,e,t._result);else if("function"!=typeof o)this._remaining--,this._result[e]=t;else if(n===pt){var i=new n(p);w(i,t,o),this._willSettleAt(i,e)}else this._willSettleAt(new n(function(e){e(t)}),e)}else this._willSettleAt(r(t),e)},N.prototype._settledAt=function(t,e,n){var r=this.promise;r._state===ot&&(this._remaining--,t===st?j(r,n):this._result[e]=n),0===this._remaining&&S(r,this._result)},N.prototype._willSettleAt=function(t,e){var n=this;E(t,void 0,function(t){n._settledAt(it,e,t)},function(t){n._settledAt(st,e,t)})};var dt=W,vt={Promise:pt,polyfill:dt};"function"==typeof define&&define.amd?define(function(){return vt}):"undefined"!=typeof module&&module.exports?module.exports=vt:"undefined"!=typeof this&&(this.ES6Promise=vt),dt()}).call(this);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":9}],7:[function(require,module,exports){
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.moment=t()}(this,function(){"use strict";function e(){return as.apply(null,arguments)}function t(e){as=e}function n(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function s(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function i(e,t){var n,s=[];for(n=0;n<e.length;++n)s.push(t(e[n],n));return s}function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function a(e,t){for(var n in t)r(t,n)&&(e[n]=t[n]);return r(t,"toString")&&(e.toString=t.toString),r(t,"valueOf")&&(e.valueOf=t.valueOf),e}function o(e,t,n,s){return He(e,t,n,s,!0).utc()}function u(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null}}function l(e){return null==e._pf&&(e._pf=u()),e._pf}function d(e){if(null==e._isValid){var t=l(e),n=os.call(t.parsedDateParts,function(e){return null!=e});e._isValid=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n),e._strict&&(e._isValid=e._isValid&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour)}return e._isValid}function h(e){var t=o(NaN);return null!=e?a(l(t),e):l(t).userInvalidated=!0,t}function c(e){return void 0===e}function f(e,t){var n,s,i;if(c(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),c(t._i)||(e._i=t._i),c(t._f)||(e._f=t._f),c(t._l)||(e._l=t._l),c(t._strict)||(e._strict=t._strict),c(t._tzm)||(e._tzm=t._tzm),c(t._isUTC)||(e._isUTC=t._isUTC),c(t._offset)||(e._offset=t._offset),c(t._pf)||(e._pf=l(t)),c(t._locale)||(e._locale=t._locale),us.length>0)for(n in us)s=us[n],i=t[s],c(i)||(e[s]=i);return e}function m(t){f(this,t),this._d=new Date(null!=t._d?t._d.getTime():NaN),ls===!1&&(ls=!0,e.updateOffset(this),ls=!1)}function _(e){return e instanceof m||null!=e&&null!=e._isAMomentObject}function y(e){return 0>e?Math.ceil(e):Math.floor(e)}function g(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=y(t)),n}function p(e,t,n){var s,i=Math.min(e.length,t.length),r=Math.abs(e.length-t.length),a=0;for(s=0;i>s;s++)(n&&e[s]!==t[s]||!n&&g(e[s])!==g(t[s]))&&a++;return a+r}function w(t){e.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function v(t,n){var s=!0;return a(function(){return null!=e.deprecationHandler&&e.deprecationHandler(null,t),s&&(w(t+"\nArguments: "+Array.prototype.slice.call(arguments).join(", ")+"\n"+(new Error).stack),s=!1),n.apply(this,arguments)},n)}function M(t,n){null!=e.deprecationHandler&&e.deprecationHandler(t,n),ds[t]||(w(n),ds[t]=!0)}function S(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function D(e){return"[object Object]"===Object.prototype.toString.call(e)}function k(e){var t,n;for(n in e)t=e[n],S(t)?this[n]=t:this["_"+n]=t;this._config=e,this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function Y(e,t){var n,s=a({},e);for(n in t)r(t,n)&&(D(e[n])&&D(t[n])?(s[n]={},a(s[n],e[n]),a(s[n],t[n])):null!=t[n]?s[n]=t[n]:delete s[n]);return s}function O(e){null!=e&&this.set(e)}function x(e){return e?e.toLowerCase().replace("_","-"):e}function b(e){for(var t,n,s,i,r=0;r<e.length;){for(i=x(e[r]).split("-"),t=i.length,n=x(e[r+1]),n=n?n.split("-"):null;t>0;){if(s=T(i.slice(0,t).join("-")))return s;if(n&&n.length>=t&&p(i,n,!0)>=t-1)break;t--}r++}return null}function T(e){var t=null;if(!ms[e]&&"undefined"!=typeof module&&module&&module.exports)try{t=cs._abbr,require("./locale/"+e),P(t)}catch(n){}return ms[e]}function P(e,t){var n;return e&&(n=c(t)?U(e):W(e,t),n&&(cs=n)),cs._abbr}function W(e,t){return null!==t?(t.abbr=e,null!=ms[e]?(M("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale"),t=Y(ms[e]._config,t)):null!=t.parentLocale&&(null!=ms[t.parentLocale]?t=Y(ms[t.parentLocale]._config,t):M("parentLocaleUndefined","specified parentLocale is not defined yet")),ms[e]=new O(t),P(e),ms[e]):(delete ms[e],null)}function R(e,t){if(null!=t){var n;null!=ms[e]&&(t=Y(ms[e]._config,t)),n=new O(t),n.parentLocale=ms[e],ms[e]=n,P(e)}else null!=ms[e]&&(null!=ms[e].parentLocale?ms[e]=ms[e].parentLocale:null!=ms[e]&&delete ms[e]);return ms[e]}function U(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return cs;if(!n(e)){if(t=T(e))return t;e=[e]}return b(e)}function C(){return hs(ms)}function H(e,t){var n=e.toLowerCase();_s[n]=_s[n+"s"]=_s[t]=e}function L(e){return"string"==typeof e?_s[e]||_s[e.toLowerCase()]:void 0}function G(e){var t,n,s={};for(n in e)r(e,n)&&(t=L(n),t&&(s[t]=e[n]));return s}function F(t,n){return function(s){return null!=s?(A(this,t,s),e.updateOffset(this,n),this):V(this,t)}}function V(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function A(e,t,n){e.isValid()&&e._d["set"+(e._isUTC?"UTC":"")+t](n)}function E(e,t){var n;if("object"==typeof e)for(n in e)this.set(n,e[n]);else if(e=L(e),S(this[e]))return this[e](t);return this}function N(e,t,n){var s=""+Math.abs(e),i=t-s.length,r=e>=0;return(r?n?"+":"":"-")+Math.pow(10,Math.max(0,i)).toString().substr(1)+s}function I(e,t,n,s){var i=s;"string"==typeof s&&(i=function(){return this[s]()}),e&&(ws[e]=i),t&&(ws[t[0]]=function(){return N(i.apply(this,arguments),t[1],t[2])}),n&&(ws[n]=function(){return this.localeData().ordinal(i.apply(this,arguments),e)})}function j(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function Z(e){var t,n,s=e.match(ys);for(t=0,n=s.length;n>t;t++)ws[s[t]]?s[t]=ws[s[t]]:s[t]=j(s[t]);return function(t){var i,r="";for(i=0;n>i;i++)r+=s[i]instanceof Function?s[i].call(t,e):s[i];return r}}function z(e,t){return e.isValid()?(t=$(t,e.localeData()),ps[t]=ps[t]||Z(t),ps[t](e)):e.localeData().invalidDate()}function $(e,t){function n(e){return t.longDateFormat(e)||e}var s=5;for(gs.lastIndex=0;s>=0&&gs.test(e);)e=e.replace(gs,n),gs.lastIndex=0,s-=1;return e}function q(e,t,n){Gs[e]=S(t)?t:function(e,s){return e&&n?n:t}}function B(e,t){return r(Gs,e)?Gs[e](t._strict,t._locale):new RegExp(J(e))}function J(e){return Q(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,s,i){return t||n||s||i}))}function Q(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function X(e,t){var n,s=t;for("string"==typeof e&&(e=[e]),"number"==typeof t&&(s=function(e,n){n[t]=g(e)}),n=0;n<e.length;n++)Fs[e[n]]=s}function K(e,t){X(e,function(e,n,s,i){s._w=s._w||{},t(e,s._w,s,i)})}function ee(e,t,n){null!=t&&r(Fs,e)&&Fs[e](t,n._a,n,e)}function te(e,t){return new Date(Date.UTC(e,t+1,0)).getUTCDate()}function ne(e,t){return n(this._months)?this._months[e.month()]:this._months[qs.test(t)?"format":"standalone"][e.month()]}function se(e,t){return n(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[qs.test(t)?"format":"standalone"][e.month()]}function ie(e,t,n){var s,i,r,a=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],s=0;12>s;++s)r=o([2e3,s]),this._shortMonthsParse[s]=this.monthsShort(r,"").toLocaleLowerCase(),this._longMonthsParse[s]=this.months(r,"").toLocaleLowerCase();return n?"MMM"===t?(i=fs.call(this._shortMonthsParse,a),-1!==i?i:null):(i=fs.call(this._longMonthsParse,a),-1!==i?i:null):"MMM"===t?(i=fs.call(this._shortMonthsParse,a),-1!==i?i:(i=fs.call(this._longMonthsParse,a),-1!==i?i:null)):(i=fs.call(this._longMonthsParse,a),-1!==i?i:(i=fs.call(this._shortMonthsParse,a),-1!==i?i:null))}function re(e,t,n){var s,i,r;if(this._monthsParseExact)return ie.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),s=0;12>s;s++){if(i=o([2e3,s]),n&&!this._longMonthsParse[s]&&(this._longMonthsParse[s]=new RegExp("^"+this.months(i,"").replace(".","")+"$","i"),this._shortMonthsParse[s]=new RegExp("^"+this.monthsShort(i,"").replace(".","")+"$","i")),n||this._monthsParse[s]||(r="^"+this.months(i,"")+"|^"+this.monthsShort(i,""),this._monthsParse[s]=new RegExp(r.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[s].test(e))return s;if(n&&"MMM"===t&&this._shortMonthsParse[s].test(e))return s;if(!n&&this._monthsParse[s].test(e))return s}}function ae(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=g(t);else if(t=e.localeData().monthsParse(t),"number"!=typeof t)return e;return n=Math.min(e.date(),te(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function oe(t){return null!=t?(ae(this,t),e.updateOffset(this,!0),this):V(this,"Month")}function ue(){return te(this.year(),this.month())}function le(e){return this._monthsParseExact?(r(this,"_monthsRegex")||he.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex}function de(e){return this._monthsParseExact?(r(this,"_monthsRegex")||he.call(this),e?this._monthsStrictRegex:this._monthsRegex):this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex}function he(){function e(e,t){return t.length-e.length}var t,n,s=[],i=[],r=[];for(t=0;12>t;t++)n=o([2e3,t]),s.push(this.monthsShort(n,"")),i.push(this.months(n,"")),r.push(this.months(n,"")),r.push(this.monthsShort(n,""));for(s.sort(e),i.sort(e),r.sort(e),t=0;12>t;t++)s[t]=Q(s[t]),i[t]=Q(i[t]),r[t]=Q(r[t]);this._monthsRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+s.join("|")+")","i")}function ce(e){var t,n=e._a;return n&&-2===l(e).overflow&&(t=n[As]<0||n[As]>11?As:n[Es]<1||n[Es]>te(n[Vs],n[As])?Es:n[Ns]<0||n[Ns]>24||24===n[Ns]&&(0!==n[Is]||0!==n[js]||0!==n[Zs])?Ns:n[Is]<0||n[Is]>59?Is:n[js]<0||n[js]>59?js:n[Zs]<0||n[Zs]>999?Zs:-1,l(e)._overflowDayOfYear&&(Vs>t||t>Es)&&(t=Es),l(e)._overflowWeeks&&-1===t&&(t=zs),l(e)._overflowWeekday&&-1===t&&(t=$s),l(e).overflow=t),e}function fe(e){var t,n,s,i,r,a,o=e._i,u=Ks.exec(o)||ei.exec(o);if(u){for(l(e).iso=!0,t=0,n=ni.length;n>t;t++)if(ni[t][1].exec(u[1])){i=ni[t][0],s=ni[t][2]!==!1;break}if(null==i)return void(e._isValid=!1);if(u[3]){for(t=0,n=si.length;n>t;t++)if(si[t][1].exec(u[3])){r=(u[2]||" ")+si[t][0];break}if(null==r)return void(e._isValid=!1)}if(!s&&null!=r)return void(e._isValid=!1);if(u[4]){if(!ti.exec(u[4]))return void(e._isValid=!1);a="Z"}e._f=i+(r||"")+(a||""),be(e)}else e._isValid=!1}function me(t){var n=ii.exec(t._i);return null!==n?void(t._d=new Date(+n[1])):(fe(t),void(t._isValid===!1&&(delete t._isValid,e.createFromInputFallback(t))))}function _e(e,t,n,s,i,r,a){var o=new Date(e,t,n,s,i,r,a);return 100>e&&e>=0&&isFinite(o.getFullYear())&&o.setFullYear(e),o}function ye(e){var t=new Date(Date.UTC.apply(null,arguments));return 100>e&&e>=0&&isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e),t}function ge(e){return pe(e)?366:365}function pe(e){return e%4===0&&e%100!==0||e%400===0}function we(){return pe(this.year())}function ve(e,t,n){var s=7+t-n,i=(7+ye(e,0,s).getUTCDay()-t)%7;return-i+s-1}function Me(e,t,n,s,i){var r,a,o=(7+n-s)%7,u=ve(e,s,i),l=1+7*(t-1)+o+u;return 0>=l?(r=e-1,a=ge(r)+l):l>ge(e)?(r=e+1,a=l-ge(e)):(r=e,a=l),{year:r,dayOfYear:a}}function Se(e,t,n){var s,i,r=ve(e.year(),t,n),a=Math.floor((e.dayOfYear()-r-1)/7)+1;return 1>a?(i=e.year()-1,s=a+De(i,t,n)):a>De(e.year(),t,n)?(s=a-De(e.year(),t,n),i=e.year()+1):(i=e.year(),s=a),{week:s,year:i}}function De(e,t,n){var s=ve(e,t,n),i=ve(e+1,t,n);return(ge(e)-s+i)/7}function ke(e,t,n){return null!=e?e:null!=t?t:n}function Ye(t){var n=new Date(e.now());return t._useUTC?[n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate()]:[n.getFullYear(),n.getMonth(),n.getDate()]}function Oe(e){var t,n,s,i,r=[];if(!e._d){for(s=Ye(e),e._w&&null==e._a[Es]&&null==e._a[As]&&xe(e),e._dayOfYear&&(i=ke(e._a[Vs],s[Vs]),e._dayOfYear>ge(i)&&(l(e)._overflowDayOfYear=!0),n=ye(i,0,e._dayOfYear),e._a[As]=n.getUTCMonth(),e._a[Es]=n.getUTCDate()),t=0;3>t&&null==e._a[t];++t)e._a[t]=r[t]=s[t];for(;7>t;t++)e._a[t]=r[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[Ns]&&0===e._a[Is]&&0===e._a[js]&&0===e._a[Zs]&&(e._nextDay=!0,e._a[Ns]=0),e._d=(e._useUTC?ye:_e).apply(null,r),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[Ns]=24)}}function xe(e){var t,n,s,i,r,a,o,u;t=e._w,null!=t.GG||null!=t.W||null!=t.E?(r=1,a=4,n=ke(t.GG,e._a[Vs],Se(Le(),1,4).year),s=ke(t.W,1),i=ke(t.E,1),(1>i||i>7)&&(u=!0)):(r=e._locale._week.dow,a=e._locale._week.doy,n=ke(t.gg,e._a[Vs],Se(Le(),r,a).year),s=ke(t.w,1),null!=t.d?(i=t.d,(0>i||i>6)&&(u=!0)):null!=t.e?(i=t.e+r,(t.e<0||t.e>6)&&(u=!0)):i=r),1>s||s>De(n,r,a)?l(e)._overflowWeeks=!0:null!=u?l(e)._overflowWeekday=!0:(o=Me(n,s,i,r,a),e._a[Vs]=o.year,e._dayOfYear=o.dayOfYear)}function be(t){if(t._f===e.ISO_8601)return void fe(t);t._a=[],l(t).empty=!0;var n,s,i,r,a,o=""+t._i,u=o.length,d=0;for(i=$(t._f,t._locale).match(ys)||[],n=0;n<i.length;n++)r=i[n],s=(o.match(B(r,t))||[])[0],s&&(a=o.substr(0,o.indexOf(s)),a.length>0&&l(t).unusedInput.push(a),o=o.slice(o.indexOf(s)+s.length),d+=s.length),ws[r]?(s?l(t).empty=!1:l(t).unusedTokens.push(r),ee(r,s,t)):t._strict&&!s&&l(t).unusedTokens.push(r);l(t).charsLeftOver=u-d,o.length>0&&l(t).unusedInput.push(o),l(t).bigHour===!0&&t._a[Ns]<=12&&t._a[Ns]>0&&(l(t).bigHour=void 0),l(t).parsedDateParts=t._a.slice(0),l(t).meridiem=t._meridiem,t._a[Ns]=Te(t._locale,t._a[Ns],t._meridiem),Oe(t),ce(t)}function Te(e,t,n){var s;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?(s=e.isPM(n),s&&12>t&&(t+=12),s||12!==t||(t=0),t):t}function Pe(e){var t,n,s,i,r;if(0===e._f.length)return l(e).invalidFormat=!0,void(e._d=new Date(NaN));for(i=0;i<e._f.length;i++)r=0,t=f({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[i],be(t),d(t)&&(r+=l(t).charsLeftOver,r+=10*l(t).unusedTokens.length,l(t).score=r,(null==s||s>r)&&(s=r,n=t));a(e,n||t)}function We(e){if(!e._d){var t=G(e._i);e._a=i([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),Oe(e)}}function Re(e){var t=new m(ce(Ue(e)));return t._nextDay&&(t.add(1,"d"),t._nextDay=void 0),t}function Ue(e){var t=e._i,i=e._f;return e._locale=e._locale||U(e._l),null===t||void 0===i&&""===t?h({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),_(t)?new m(ce(t)):(n(i)?Pe(e):i?be(e):s(t)?e._d=t:Ce(e),d(e)||(e._d=null),e))}function Ce(t){var r=t._i;void 0===r?t._d=new Date(e.now()):s(r)?t._d=new Date(r.valueOf()):"string"==typeof r?me(t):n(r)?(t._a=i(r.slice(0),function(e){return parseInt(e,10)}),Oe(t)):"object"==typeof r?We(t):"number"==typeof r?t._d=new Date(r):e.createFromInputFallback(t)}function He(e,t,n,s,i){var r={};return"boolean"==typeof n&&(s=n,n=void 0),r._isAMomentObject=!0,r._useUTC=r._isUTC=i,r._l=n,r._i=e,r._f=t,r._strict=s,Re(r)}function Le(e,t,n,s){return He(e,t,n,s,!1)}function Ge(e,t){var s,i;if(1===t.length&&n(t[0])&&(t=t[0]),!t.length)return Le();for(s=t[0],i=1;i<t.length;++i)t[i].isValid()&&!t[i][e](s)||(s=t[i]);return s}function Fe(){var e=[].slice.call(arguments,0);return Ge("isBefore",e)}function Ve(){var e=[].slice.call(arguments,0);return Ge("isAfter",e)}function Ae(e){var t=G(e),n=t.year||0,s=t.quarter||0,i=t.month||0,r=t.week||0,a=t.day||0,o=t.hour||0,u=t.minute||0,l=t.second||0,d=t.millisecond||0;this._milliseconds=+d+1e3*l+6e4*u+1e3*o*60*60,this._days=+a+7*r,this._months=+i+3*s+12*n,this._data={},this._locale=U(),this._bubble()}function Ee(e){return e instanceof Ae}function Ne(e,t){I(e,0,0,function(){var e=this.utcOffset(),n="+";return 0>e&&(e=-e,n="-"),n+N(~~(e/60),2)+t+N(~~e%60,2)})}function Ie(e,t){var n=(t||"").match(e)||[],s=n[n.length-1]||[],i=(s+"").match(li)||["-",0,0],r=+(60*i[1])+g(i[2]);return"+"===i[0]?r:-r}function je(t,n){var i,r;return n._isUTC?(i=n.clone(),r=(_(t)||s(t)?t.valueOf():Le(t).valueOf())-i.valueOf(),i._d.setTime(i._d.valueOf()+r),e.updateOffset(i,!1),i):Le(t).local()}function Ze(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function ze(t,n){var s,i=this._offset||0;return this.isValid()?null!=t?("string"==typeof t?t=Ie(Cs,t):Math.abs(t)<16&&(t=60*t),!this._isUTC&&n&&(s=Ze(this)),this._offset=t,this._isUTC=!0,null!=s&&this.add(s,"m"),i!==t&&(!n||this._changeInProgress?lt(this,st(t-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,e.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?i:Ze(this):null!=t?this:NaN}function $e(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}function qe(e){return this.utcOffset(0,e)}function Be(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Ze(this),"m")),this}function Je(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(Ie(Us,this._i)),this}function Qe(e){return this.isValid()?(e=e?Le(e).utcOffset():0,(this.utcOffset()-e)%60===0):!1}function Xe(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Ke(){if(!c(this._isDSTShifted))return this._isDSTShifted;var e={};if(f(e,this),e=Ue(e),e._a){var t=e._isUTC?o(e._a):Le(e._a);this._isDSTShifted=this.isValid()&&p(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function et(){return this.isValid()?!this._isUTC:!1}function tt(){return this.isValid()?this._isUTC:!1}function nt(){return this.isValid()?this._isUTC&&0===this._offset:!1}function st(e,t){var n,s,i,a=e,o=null;return Ee(e)?a={ms:e._milliseconds,d:e._days,M:e._months}:"number"==typeof e?(a={},t?a[t]=e:a.milliseconds=e):(o=di.exec(e))?(n="-"===o[1]?-1:1,a={y:0,d:g(o[Es])*n,h:g(o[Ns])*n,m:g(o[Is])*n,s:g(o[js])*n,ms:g(o[Zs])*n}):(o=hi.exec(e))?(n="-"===o[1]?-1:1,a={y:it(o[2],n),M:it(o[3],n),w:it(o[4],n),d:it(o[5],n),h:it(o[6],n),m:it(o[7],n),s:it(o[8],n)}):null==a?a={}:"object"==typeof a&&("from"in a||"to"in a)&&(i=at(Le(a.from),Le(a.to)),a={},a.ms=i.milliseconds,a.M=i.months),s=new Ae(a),Ee(e)&&r(e,"_locale")&&(s._locale=e._locale),s}function it(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function rt(e,t){var n={milliseconds:0,months:0};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function at(e,t){var n;return e.isValid()&&t.isValid()?(t=je(t,e),e.isBefore(t)?n=rt(e,t):(n=rt(t,e),n.milliseconds=-n.milliseconds,n.months=-n.months),n):{milliseconds:0,months:0}}function ot(e){return 0>e?-1*Math.round(-1*e):Math.round(e)}function ut(e,t){return function(n,s){var i,r;return null===s||isNaN(+s)||(M(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period)."),r=n,n=s,s=r),n="string"==typeof n?+n:n,i=st(n,s),lt(this,i,e),this}}function lt(t,n,s,i){var r=n._milliseconds,a=ot(n._days),o=ot(n._months);t.isValid()&&(i=null==i?!0:i,r&&t._d.setTime(t._d.valueOf()+r*s),a&&A(t,"Date",V(t,"Date")+a*s),o&&ae(t,V(t,"Month")+o*s),i&&e.updateOffset(t,a||o))}function dt(e,t){var n=e||Le(),s=je(n,this).startOf("day"),i=this.diff(s,"days",!0),r=-6>i?"sameElse":-1>i?"lastWeek":0>i?"lastDay":1>i?"sameDay":2>i?"nextDay":7>i?"nextWeek":"sameElse",a=t&&(S(t[r])?t[r]():t[r]);return this.format(a||this.localeData().calendar(r,this,Le(n)))}function ht(){return new m(this)}function ct(e,t){var n=_(e)?e:Le(e);return this.isValid()&&n.isValid()?(t=L(c(t)?"millisecond":t),"millisecond"===t?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf()):!1}function ft(e,t){var n=_(e)?e:Le(e);return this.isValid()&&n.isValid()?(t=L(c(t)?"millisecond":t),"millisecond"===t?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf()):!1}function mt(e,t,n,s){return s=s||"()",("("===s[0]?this.isAfter(e,n):!this.isBefore(e,n))&&(")"===s[1]?this.isBefore(t,n):!this.isAfter(t,n))}function _t(e,t){var n,s=_(e)?e:Le(e);return this.isValid()&&s.isValid()?(t=L(t||"millisecond"),"millisecond"===t?this.valueOf()===s.valueOf():(n=s.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf())):!1}function yt(e,t){return this.isSame(e,t)||this.isAfter(e,t)}function gt(e,t){return this.isSame(e,t)||this.isBefore(e,t)}function pt(e,t,n){var s,i,r,a;return this.isValid()?(s=je(e,this),s.isValid()?(i=6e4*(s.utcOffset()-this.utcOffset()),t=L(t),"year"===t||"month"===t||"quarter"===t?(a=wt(this,s),"quarter"===t?a/=3:"year"===t&&(a/=12)):(r=this-s,a="second"===t?r/1e3:"minute"===t?r/6e4:"hour"===t?r/36e5:"day"===t?(r-i)/864e5:"week"===t?(r-i)/6048e5:r),n?a:y(a)):NaN):NaN}function wt(e,t){var n,s,i=12*(t.year()-e.year())+(t.month()-e.month()),r=e.clone().add(i,"months");return 0>t-r?(n=e.clone().add(i-1,"months"),s=(t-r)/(r-n)):(n=e.clone().add(i+1,"months"),s=(t-r)/(n-r)),-(i+s)||0}function vt(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function Mt(){var e=this.clone().utc();return 0<e.year()&&e.year()<=9999?S(Date.prototype.toISOString)?this.toDate().toISOString():z(e,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):z(e,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function St(t){t||(t=this.isUtc()?e.defaultFormatUtc:e.defaultFormat);var n=z(this,t);return this.localeData().postformat(n)}function Dt(e,t){return this.isValid()&&(_(e)&&e.isValid()||Le(e).isValid())?st({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function kt(e){return this.from(Le(),e)}function Yt(e,t){return this.isValid()&&(_(e)&&e.isValid()||Le(e).isValid())?st({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function Ot(e){return this.to(Le(),e)}function xt(e){var t;return void 0===e?this._locale._abbr:(t=U(e),null!=t&&(this._locale=t),this)}function bt(){return this._locale}function Tt(e){switch(e=L(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this}function Pt(e){return e=L(e),void 0===e||"millisecond"===e?this:("date"===e&&(e="day"),this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms"))}function Wt(){return this._d.valueOf()-6e4*(this._offset||0)}function Rt(){return Math.floor(this.valueOf()/1e3)}function Ut(){return this._offset?new Date(this.valueOf()):this._d}function Ct(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function Ht(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function Lt(){return this.isValid()?this.toISOString():null}function Gt(){return d(this)}function Ft(){return a({},l(this))}function Vt(){return l(this).overflow}function At(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function Et(e,t){I(0,[e,e.length],0,t)}function Nt(e){return zt.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function It(e){return zt.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function jt(){return De(this.year(),1,4)}function Zt(){var e=this.localeData()._week;return De(this.year(),e.dow,e.doy)}function zt(e,t,n,s,i){var r;return null==e?Se(this,s,i).year:(r=De(e,s,i),t>r&&(t=r),$t.call(this,e,t,n,s,i))}function $t(e,t,n,s,i){var r=Me(e,t,n,s,i),a=ye(r.year,0,r.dayOfYear);return this.year(a.getUTCFullYear()),this.month(a.getUTCMonth()),this.date(a.getUTCDate()),this}function qt(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)}function Bt(e){return Se(e,this._week.dow,this._week.doy).week}function Jt(){return this._week.dow}function Qt(){return this._week.doy}function Xt(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")}function Kt(e){var t=Se(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")}function en(e,t){return"string"!=typeof e?e:isNaN(e)?(e=t.weekdaysParse(e),"number"==typeof e?e:null):parseInt(e,10)}function tn(e,t){return n(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(t)?"format":"standalone"][e.day()]}function nn(e){return this._weekdaysShort[e.day()]}function sn(e){return this._weekdaysMin[e.day()]}function rn(e,t,n){var s,i,r,a=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],s=0;7>s;++s)r=o([2e3,1]).day(s),this._minWeekdaysParse[s]=this.weekdaysMin(r,"").toLocaleLowerCase(),this._shortWeekdaysParse[s]=this.weekdaysShort(r,"").toLocaleLowerCase(),this._weekdaysParse[s]=this.weekdays(r,"").toLocaleLowerCase();return n?"dddd"===t?(i=fs.call(this._weekdaysParse,a),-1!==i?i:null):"ddd"===t?(i=fs.call(this._shortWeekdaysParse,a),-1!==i?i:null):(i=fs.call(this._minWeekdaysParse,a),-1!==i?i:null):"dddd"===t?(i=fs.call(this._weekdaysParse,a),-1!==i?i:(i=fs.call(this._shortWeekdaysParse,a),-1!==i?i:(i=fs.call(this._minWeekdaysParse,a),-1!==i?i:null))):"ddd"===t?(i=fs.call(this._shortWeekdaysParse,a),-1!==i?i:(i=fs.call(this._weekdaysParse,a),-1!==i?i:(i=fs.call(this._minWeekdaysParse,a),-1!==i?i:null))):(i=fs.call(this._minWeekdaysParse,a),-1!==i?i:(i=fs.call(this._weekdaysParse,a),-1!==i?i:(i=fs.call(this._shortWeekdaysParse,a),-1!==i?i:null)))}function an(e,t,n){var s,i,r;if(this._weekdaysParseExact)return rn.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),s=0;7>s;s++){if(i=o([2e3,1]).day(s),n&&!this._fullWeekdaysParse[s]&&(this._fullWeekdaysParse[s]=new RegExp("^"+this.weekdays(i,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[s]=new RegExp("^"+this.weekdaysShort(i,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[s]=new RegExp("^"+this.weekdaysMin(i,"").replace(".",".?")+"$","i")),this._weekdaysParse[s]||(r="^"+this.weekdays(i,"")+"|^"+this.weekdaysShort(i,"")+"|^"+this.weekdaysMin(i,""),this._weekdaysParse[s]=new RegExp(r.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[s].test(e))return s;if(n&&"ddd"===t&&this._shortWeekdaysParse[s].test(e))return s;if(n&&"dd"===t&&this._minWeekdaysParse[s].test(e))return s;if(!n&&this._weekdaysParse[s].test(e))return s}}function on(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=en(e,this.localeData()),this.add(e-t,"d")):t}function un(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")}function ln(e){return this.isValid()?null==e?this.day()||7:this.day(this.day()%7?e:e-7):null!=e?this:NaN}function dn(e){return this._weekdaysParseExact?(r(this,"_weekdaysRegex")||fn.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex}function hn(e){return this._weekdaysParseExact?(r(this,"_weekdaysRegex")||fn.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex}function cn(e){return this._weekdaysParseExact?(r(this,"_weekdaysRegex")||fn.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex}function fn(){function e(e,t){return t.length-e.length}var t,n,s,i,r,a=[],u=[],l=[],d=[];for(t=0;7>t;t++)n=o([2e3,1]).day(t),s=this.weekdaysMin(n,""),i=this.weekdaysShort(n,""),r=this.weekdays(n,""),a.push(s),u.push(i),l.push(r),d.push(s),d.push(i),d.push(r);for(a.sort(e),u.sort(e),l.sort(e),d.sort(e),t=0;7>t;t++)u[t]=Q(u[t]),l[t]=Q(l[t]),d[t]=Q(d[t]);this._weekdaysRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+a.join("|")+")","i")}function mn(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")}function _n(){return this.hours()%12||12}function yn(){return this.hours()||24}function gn(e,t){I(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function pn(e,t){return t._meridiemParse}function wn(e){return"p"===(e+"").toLowerCase().charAt(0)}function vn(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"}function Mn(e,t){t[Zs]=g(1e3*("0."+e))}function Sn(){return this._isUTC?"UTC":""}function Dn(){return this._isUTC?"Coordinated Universal Time":""}function kn(e){return Le(1e3*e)}function Yn(){return Le.apply(null,arguments).parseZone()}function On(e,t,n){var s=this._calendar[e];return S(s)?s.call(t,n):s}function xn(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])}function bn(){return this._invalidDate}function Tn(e){return this._ordinal.replace("%d",e)}function Pn(e){return e}function Wn(e,t,n,s){var i=this._relativeTime[n];return S(i)?i(e,t,n,s):i.replace(/%d/i,e)}function Rn(e,t){var n=this._relativeTime[e>0?"future":"past"];return S(n)?n(t):n.replace(/%s/i,t)}function Un(e,t,n,s){var i=U(),r=o().set(s,t);return i[n](r,e)}function Cn(e,t,n){if("number"==typeof e&&(t=e,e=void 0),e=e||"",null!=t)return Un(e,t,n,"month");var s,i=[];for(s=0;12>s;s++)i[s]=Un(e,s,n,"month");return i}function Hn(e,t,n,s){"boolean"==typeof e?("number"==typeof t&&(n=t,t=void 0),t=t||""):(t=e,n=t,e=!1,"number"==typeof t&&(n=t,t=void 0),t=t||"");var i=U(),r=e?i._week.dow:0;if(null!=n)return Un(t,(n+r)%7,s,"day");var a,o=[];for(a=0;7>a;a++)o[a]=Un(t,(a+r)%7,s,"day");return o}function Ln(e,t){return Cn(e,t,"months")}function Gn(e,t){return Cn(e,t,"monthsShort")}function Fn(e,t,n){return Hn(e,t,n,"weekdays")}function Vn(e,t,n){return Hn(e,t,n,"weekdaysShort")}function An(e,t,n){return Hn(e,t,n,"weekdaysMin")}function En(){var e=this._data;return this._milliseconds=Fi(this._milliseconds),this._days=Fi(this._days),this._months=Fi(this._months),e.milliseconds=Fi(e.milliseconds),e.seconds=Fi(e.seconds),e.minutes=Fi(e.minutes),e.hours=Fi(e.hours),e.months=Fi(e.months),e.years=Fi(e.years),this}function Nn(e,t,n,s){var i=st(t,n);return e._milliseconds+=s*i._milliseconds,e._days+=s*i._days,e._months+=s*i._months,e._bubble()}function In(e,t){return Nn(this,e,t,1)}function jn(e,t){return Nn(this,e,t,-1)}function Zn(e){return 0>e?Math.floor(e):Math.ceil(e)}function zn(){var e,t,n,s,i,r=this._milliseconds,a=this._days,o=this._months,u=this._data;return r>=0&&a>=0&&o>=0||0>=r&&0>=a&&0>=o||(r+=864e5*Zn(qn(o)+a),a=0,o=0),u.milliseconds=r%1e3,e=y(r/1e3),u.seconds=e%60,t=y(e/60),u.minutes=t%60,n=y(t/60),u.hours=n%24,a+=y(n/24),i=y($n(a)),o+=i,a-=Zn(qn(i)),s=y(o/12),o%=12,u.days=a,u.months=o,u.years=s,this}function $n(e){return 4800*e/146097}function qn(e){return 146097*e/4800}function Bn(e){var t,n,s=this._milliseconds;if(e=L(e),"month"===e||"year"===e)return t=this._days+s/864e5,n=this._months+$n(t),"month"===e?n:n/12;switch(t=this._days+Math.round(qn(this._months)),e){case"week":return t/7+s/6048e5;case"day":return t+s/864e5;case"hour":return 24*t+s/36e5;case"minute":return 1440*t+s/6e4;case"second":return 86400*t+s/1e3;case"millisecond":return Math.floor(864e5*t)+s;default:throw new Error("Unknown unit "+e)}}function Jn(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*g(this._months/12)}function Qn(e){return function(){return this.as(e)}}function Xn(e){
return e=L(e),this[e+"s"]()}function Kn(e){return function(){return this._data[e]}}function es(){return y(this.days()/7)}function ts(e,t,n,s,i){return i.relativeTime(t||1,!!n,e,s)}function ns(e,t,n){var s=st(e).abs(),i=er(s.as("s")),r=er(s.as("m")),a=er(s.as("h")),o=er(s.as("d")),u=er(s.as("M")),l=er(s.as("y")),d=i<tr.s&&["s",i]||1>=r&&["m"]||r<tr.m&&["mm",r]||1>=a&&["h"]||a<tr.h&&["hh",a]||1>=o&&["d"]||o<tr.d&&["dd",o]||1>=u&&["M"]||u<tr.M&&["MM",u]||1>=l&&["y"]||["yy",l];return d[2]=t,d[3]=+e>0,d[4]=n,ts.apply(null,d)}function ss(e,t){return void 0===tr[e]?!1:void 0===t?tr[e]:(tr[e]=t,!0)}function is(e){var t=this.localeData(),n=ns(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)}function rs(){var e,t,n,s=nr(this._milliseconds)/1e3,i=nr(this._days),r=nr(this._months);e=y(s/60),t=y(e/60),s%=60,e%=60,n=y(r/12),r%=12;var a=n,o=r,u=i,l=t,d=e,h=s,c=this.asSeconds();return c?(0>c?"-":"")+"P"+(a?a+"Y":"")+(o?o+"M":"")+(u?u+"D":"")+(l||d||h?"T":"")+(l?l+"H":"")+(d?d+"M":"")+(h?h+"S":""):"P0D"}var as,os;os=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,s=0;n>s;s++)if(s in t&&e.call(this,t[s],s,t))return!0;return!1};var us=e.momentProperties=[],ls=!1,ds={};e.suppressDeprecationWarnings=!1,e.deprecationHandler=null;var hs;hs=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)r(e,t)&&n.push(t);return n};var cs,fs,ms={},_s={},ys=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,gs=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,ps={},ws={},vs=/\d/,Ms=/\d\d/,Ss=/\d{3}/,Ds=/\d{4}/,ks=/[+-]?\d{6}/,Ys=/\d\d?/,Os=/\d\d\d\d?/,xs=/\d\d\d\d\d\d?/,bs=/\d{1,3}/,Ts=/\d{1,4}/,Ps=/[+-]?\d{1,6}/,Ws=/\d+/,Rs=/[+-]?\d+/,Us=/Z|[+-]\d\d:?\d\d/gi,Cs=/Z|[+-]\d\d(?::?\d\d)?/gi,Hs=/[+-]?\d+(\.\d{1,3})?/,Ls=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Gs={},Fs={},Vs=0,As=1,Es=2,Ns=3,Is=4,js=5,Zs=6,zs=7,$s=8;fs=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},I("M",["MM",2],"Mo",function(){return this.month()+1}),I("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),I("MMMM",0,0,function(e){return this.localeData().months(this,e)}),H("month","M"),q("M",Ys),q("MM",Ys,Ms),q("MMM",function(e,t){return t.monthsShortRegex(e)}),q("MMMM",function(e,t){return t.monthsRegex(e)}),X(["M","MM"],function(e,t){t[As]=g(e)-1}),X(["MMM","MMMM"],function(e,t,n,s){var i=n._locale.monthsParse(e,s,n._strict);null!=i?t[As]=i:l(n).invalidMonth=e});var qs=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/,Bs="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Js="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),Qs=Ls,Xs=Ls,Ks=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,ei=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,ti=/Z|[+-]\d\d(?::?\d\d)?/,ni=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],si=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],ii=/^\/?Date\((\-?\d+)/i;e.createFromInputFallback=v("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),I("Y",0,0,function(){var e=this.year();return 9999>=e?""+e:"+"+e}),I(0,["YY",2],0,function(){return this.year()%100}),I(0,["YYYY",4],0,"year"),I(0,["YYYYY",5],0,"year"),I(0,["YYYYYY",6,!0],0,"year"),H("year","y"),q("Y",Rs),q("YY",Ys,Ms),q("YYYY",Ts,Ds),q("YYYYY",Ps,ks),q("YYYYYY",Ps,ks),X(["YYYYY","YYYYYY"],Vs),X("YYYY",function(t,n){n[Vs]=2===t.length?e.parseTwoDigitYear(t):g(t)}),X("YY",function(t,n){n[Vs]=e.parseTwoDigitYear(t)}),X("Y",function(e,t){t[Vs]=parseInt(e,10)}),e.parseTwoDigitYear=function(e){return g(e)+(g(e)>68?1900:2e3)};var ri=F("FullYear",!0);e.ISO_8601=function(){};var ai=v("moment().min is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var e=Le.apply(null,arguments);return this.isValid()&&e.isValid()?this>e?this:e:h()}),oi=v("moment().max is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var e=Le.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:h()}),ui=function(){return Date.now?Date.now():+new Date};Ne("Z",":"),Ne("ZZ",""),q("Z",Cs),q("ZZ",Cs),X(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Ie(Cs,e)});var li=/([\+\-]|\d\d)/gi;e.updateOffset=function(){};var di=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?\d*)?$/,hi=/^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;st.fn=Ae.prototype;var ci=ut(1,"add"),fi=ut(-1,"subtract");e.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",e.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var mi=v("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});I(0,["gg",2],0,function(){return this.weekYear()%100}),I(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Et("gggg","weekYear"),Et("ggggg","weekYear"),Et("GGGG","isoWeekYear"),Et("GGGGG","isoWeekYear"),H("weekYear","gg"),H("isoWeekYear","GG"),q("G",Rs),q("g",Rs),q("GG",Ys,Ms),q("gg",Ys,Ms),q("GGGG",Ts,Ds),q("gggg",Ts,Ds),q("GGGGG",Ps,ks),q("ggggg",Ps,ks),K(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,s){t[s.substr(0,2)]=g(e)}),K(["gg","GG"],function(t,n,s,i){n[i]=e.parseTwoDigitYear(t)}),I("Q",0,"Qo","quarter"),H("quarter","Q"),q("Q",vs),X("Q",function(e,t){t[As]=3*(g(e)-1)}),I("w",["ww",2],"wo","week"),I("W",["WW",2],"Wo","isoWeek"),H("week","w"),H("isoWeek","W"),q("w",Ys),q("ww",Ys,Ms),q("W",Ys),q("WW",Ys,Ms),K(["w","ww","W","WW"],function(e,t,n,s){t[s.substr(0,1)]=g(e)});var _i={dow:0,doy:6};I("D",["DD",2],"Do","date"),H("date","D"),q("D",Ys),q("DD",Ys,Ms),q("Do",function(e,t){return e?t._ordinalParse:t._ordinalParseLenient}),X(["D","DD"],Es),X("Do",function(e,t){t[Es]=g(e.match(Ys)[0],10)});var yi=F("Date",!0);I("d",0,"do","day"),I("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),I("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),I("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),I("e",0,0,"weekday"),I("E",0,0,"isoWeekday"),H("day","d"),H("weekday","e"),H("isoWeekday","E"),q("d",Ys),q("e",Ys),q("E",Ys),q("dd",function(e,t){return t.weekdaysMinRegex(e)}),q("ddd",function(e,t){return t.weekdaysShortRegex(e)}),q("dddd",function(e,t){return t.weekdaysRegex(e)}),K(["dd","ddd","dddd"],function(e,t,n,s){var i=n._locale.weekdaysParse(e,s,n._strict);null!=i?t.d=i:l(n).invalidWeekday=e}),K(["d","e","E"],function(e,t,n,s){t[s]=g(e)});var gi="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),pi="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),wi="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),vi=Ls,Mi=Ls,Si=Ls;I("DDD",["DDDD",3],"DDDo","dayOfYear"),H("dayOfYear","DDD"),q("DDD",bs),q("DDDD",Ss),X(["DDD","DDDD"],function(e,t,n){n._dayOfYear=g(e)}),I("H",["HH",2],0,"hour"),I("h",["hh",2],0,_n),I("k",["kk",2],0,yn),I("hmm",0,0,function(){return""+_n.apply(this)+N(this.minutes(),2)}),I("hmmss",0,0,function(){return""+_n.apply(this)+N(this.minutes(),2)+N(this.seconds(),2)}),I("Hmm",0,0,function(){return""+this.hours()+N(this.minutes(),2)}),I("Hmmss",0,0,function(){return""+this.hours()+N(this.minutes(),2)+N(this.seconds(),2)}),gn("a",!0),gn("A",!1),H("hour","h"),q("a",pn),q("A",pn),q("H",Ys),q("h",Ys),q("HH",Ys,Ms),q("hh",Ys,Ms),q("hmm",Os),q("hmmss",xs),q("Hmm",Os),q("Hmmss",xs),X(["H","HH"],Ns),X(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),X(["h","hh"],function(e,t,n){t[Ns]=g(e),l(n).bigHour=!0}),X("hmm",function(e,t,n){var s=e.length-2;t[Ns]=g(e.substr(0,s)),t[Is]=g(e.substr(s)),l(n).bigHour=!0}),X("hmmss",function(e,t,n){var s=e.length-4,i=e.length-2;t[Ns]=g(e.substr(0,s)),t[Is]=g(e.substr(s,2)),t[js]=g(e.substr(i)),l(n).bigHour=!0}),X("Hmm",function(e,t,n){var s=e.length-2;t[Ns]=g(e.substr(0,s)),t[Is]=g(e.substr(s))}),X("Hmmss",function(e,t,n){var s=e.length-4,i=e.length-2;t[Ns]=g(e.substr(0,s)),t[Is]=g(e.substr(s,2)),t[js]=g(e.substr(i))});var Di=/[ap]\.?m?\.?/i,ki=F("Hours",!0);I("m",["mm",2],0,"minute"),H("minute","m"),q("m",Ys),q("mm",Ys,Ms),X(["m","mm"],Is);var Yi=F("Minutes",!1);I("s",["ss",2],0,"second"),H("second","s"),q("s",Ys),q("ss",Ys,Ms),X(["s","ss"],js);var Oi=F("Seconds",!1);I("S",0,0,function(){return~~(this.millisecond()/100)}),I(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),I(0,["SSS",3],0,"millisecond"),I(0,["SSSS",4],0,function(){return 10*this.millisecond()}),I(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),I(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),I(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),I(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),I(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),H("millisecond","ms"),q("S",bs,vs),q("SS",bs,Ms),q("SSS",bs,Ss);var xi;for(xi="SSSS";xi.length<=9;xi+="S")q(xi,Ws);for(xi="S";xi.length<=9;xi+="S")X(xi,Mn);var bi=F("Milliseconds",!1);I("z",0,0,"zoneAbbr"),I("zz",0,0,"zoneName");var Ti=m.prototype;Ti.add=ci,Ti.calendar=dt,Ti.clone=ht,Ti.diff=pt,Ti.endOf=Pt,Ti.format=St,Ti.from=Dt,Ti.fromNow=kt,Ti.to=Yt,Ti.toNow=Ot,Ti.get=E,Ti.invalidAt=Vt,Ti.isAfter=ct,Ti.isBefore=ft,Ti.isBetween=mt,Ti.isSame=_t,Ti.isSameOrAfter=yt,Ti.isSameOrBefore=gt,Ti.isValid=Gt,Ti.lang=mi,Ti.locale=xt,Ti.localeData=bt,Ti.max=oi,Ti.min=ai,Ti.parsingFlags=Ft,Ti.set=E,Ti.startOf=Tt,Ti.subtract=fi,Ti.toArray=Ct,Ti.toObject=Ht,Ti.toDate=Ut,Ti.toISOString=Mt,Ti.toJSON=Lt,Ti.toString=vt,Ti.unix=Rt,Ti.valueOf=Wt,Ti.creationData=At,Ti.year=ri,Ti.isLeapYear=we,Ti.weekYear=Nt,Ti.isoWeekYear=It,Ti.quarter=Ti.quarters=qt,Ti.month=oe,Ti.daysInMonth=ue,Ti.week=Ti.weeks=Xt,Ti.isoWeek=Ti.isoWeeks=Kt,Ti.weeksInYear=Zt,Ti.isoWeeksInYear=jt,Ti.date=yi,Ti.day=Ti.days=on,Ti.weekday=un,Ti.isoWeekday=ln,Ti.dayOfYear=mn,Ti.hour=Ti.hours=ki,Ti.minute=Ti.minutes=Yi,Ti.second=Ti.seconds=Oi,Ti.millisecond=Ti.milliseconds=bi,Ti.utcOffset=ze,Ti.utc=qe,Ti.local=Be,Ti.parseZone=Je,Ti.hasAlignedHourOffset=Qe,Ti.isDST=Xe,Ti.isDSTShifted=Ke,Ti.isLocal=et,Ti.isUtcOffset=tt,Ti.isUtc=nt,Ti.isUTC=nt,Ti.zoneAbbr=Sn,Ti.zoneName=Dn,Ti.dates=v("dates accessor is deprecated. Use date instead.",yi),Ti.months=v("months accessor is deprecated. Use month instead",oe),Ti.years=v("years accessor is deprecated. Use year instead",ri),Ti.zone=v("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",$e);var Pi=Ti,Wi={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},Ri={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},Ui="Invalid date",Ci="%d",Hi=/\d{1,2}/,Li={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Gi=O.prototype;Gi._calendar=Wi,Gi.calendar=On,Gi._longDateFormat=Ri,Gi.longDateFormat=xn,Gi._invalidDate=Ui,Gi.invalidDate=bn,Gi._ordinal=Ci,Gi.ordinal=Tn,Gi._ordinalParse=Hi,Gi.preparse=Pn,Gi.postformat=Pn,Gi._relativeTime=Li,Gi.relativeTime=Wn,Gi.pastFuture=Rn,Gi.set=k,Gi.months=ne,Gi._months=Bs,Gi.monthsShort=se,Gi._monthsShort=Js,Gi.monthsParse=re,Gi._monthsRegex=Xs,Gi.monthsRegex=de,Gi._monthsShortRegex=Qs,Gi.monthsShortRegex=le,Gi.week=Bt,Gi._week=_i,Gi.firstDayOfYear=Qt,Gi.firstDayOfWeek=Jt,Gi.weekdays=tn,Gi._weekdays=gi,Gi.weekdaysMin=sn,Gi._weekdaysMin=wi,Gi.weekdaysShort=nn,Gi._weekdaysShort=pi,Gi.weekdaysParse=an,Gi._weekdaysRegex=vi,Gi.weekdaysRegex=dn,Gi._weekdaysShortRegex=Mi,Gi.weekdaysShortRegex=hn,Gi._weekdaysMinRegex=Si,Gi.weekdaysMinRegex=cn,Gi.isPM=wn,Gi._meridiemParse=Di,Gi.meridiem=vn,P("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1===g(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}}),e.lang=v("moment.lang is deprecated. Use moment.locale instead.",P),e.langData=v("moment.langData is deprecated. Use moment.localeData instead.",U);var Fi=Math.abs,Vi=Qn("ms"),Ai=Qn("s"),Ei=Qn("m"),Ni=Qn("h"),Ii=Qn("d"),ji=Qn("w"),Zi=Qn("M"),zi=Qn("y"),$i=Kn("milliseconds"),qi=Kn("seconds"),Bi=Kn("minutes"),Ji=Kn("hours"),Qi=Kn("days"),Xi=Kn("months"),Ki=Kn("years"),er=Math.round,tr={s:45,m:45,h:22,d:26,M:11},nr=Math.abs,sr=Ae.prototype;sr.abs=En,sr.add=In,sr.subtract=jn,sr.as=Bn,sr.asMilliseconds=Vi,sr.asSeconds=Ai,sr.asMinutes=Ei,sr.asHours=Ni,sr.asDays=Ii,sr.asWeeks=ji,sr.asMonths=Zi,sr.asYears=zi,sr.valueOf=Jn,sr._bubble=zn,sr.get=Xn,sr.milliseconds=$i,sr.seconds=qi,sr.minutes=Bi,sr.hours=Ji,sr.days=Qi,sr.weeks=es,sr.months=Xi,sr.years=Ki,sr.humanize=is,sr.toISOString=rs,sr.toString=rs,sr.toJSON=rs,sr.locale=xt,sr.localeData=bt,sr.toIsoString=v("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",rs),sr.lang=mi,I("X",0,0,"unix"),I("x",0,0,"valueOf"),q("x",Rs),q("X",Hs),X("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),X("x",function(e,t,n){n._d=new Date(g(e))}),e.version="2.13.0",t(Le),e.fn=Pi,e.min=Fe,e.max=Ve,e.now=ui,e.utc=o,e.unix=kn,e.months=Ln,e.isDate=s,e.locale=P,e.invalid=h,e.duration=st,e.isMoment=_,e.weekdays=Fn,e.parseZone=Yn,e.localeData=U,e.isDuration=Ee,e.monthsShort=Gn,e.weekdaysMin=An,e.defineLocale=W,e.updateLocale=R,e.locales=C,e.weekdaysShort=Vn,e.normalizeUnits=L,e.relativeTimeThreshold=ss,e.prototype=Pi;var ir=e;return ir});

},{}],8:[function(require,module,exports){
(function (process){
!function(t){"use strict";if("function"==typeof bootstrap)bootstrap("promise",t);else if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define(t);else if("undefined"!=typeof ses){if(!ses.ok())return;ses.makeQ=t}else{if("undefined"==typeof window&&"undefined"==typeof self)throw new Error("This environment was not anticipated by Q. Please file a bug.");var n="undefined"!=typeof window?window:self,e=n.Q;n.Q=t(),n.Q.noConflict=function(){return n.Q=e,this}}}(function(){"use strict";function t(t){return function(){return K.apply(t,arguments)}}function n(t){return t===Object(t)}function e(t){return"[object StopIteration]"===et(t)||t instanceof _}function r(t,n){if(V&&n.stack&&"object"==typeof t&&null!==t&&t.stack&&-1===t.stack.indexOf(rt)){for(var e=[],r=n;r;r=r.source)r.stack&&e.unshift(r.stack);e.unshift(t.stack);var i=e.join("\n"+rt+"\n");t.stack=o(i)}}function o(t){for(var n=t.split("\n"),e=[],r=0;r<n.length;++r){var o=n[r];c(o)||i(o)||!o||e.push(o)}return e.join("\n")}function i(t){return-1!==t.indexOf("(module.js:")||-1!==t.indexOf("(node.js:")}function u(t){var n=/at .+ \((.+):(\d+):(?:\d+)\)$/.exec(t);if(n)return[n[1],Number(n[2])];var e=/at ([^ ]+):(\d+):(?:\d+)$/.exec(t);if(e)return[e[1],Number(e[2])];var r=/.*@(.+):(\d+)$/.exec(t);return r?[r[1],Number(r[2])]:void 0}function c(t){var n=u(t);if(!n)return!1;var e=n[0],r=n[1];return e===H&&r>=q&&ft>=r}function f(){if(V)try{throw new Error}catch(t){var n=t.stack.split("\n"),e=n[0].indexOf("@")>0?n[1]:n[2],r=u(e);if(!r)return;return H=r[0],r[1]}}function s(t,n,e){return function(){return"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(n+" is deprecated, use "+e+" instead.",new Error("").stack),t.apply(t,arguments)}}function p(t){return t instanceof h?t:k(t)?O(t):E(t)}function a(){function t(t){n=t,i.source=t,W(e,function(n,e){p.nextTick(function(){t.promiseDispatch.apply(t,e)})},void 0),e=void 0,r=void 0}var n,e=[],r=[],o=Z(a.prototype),i=Z(h.prototype);if(i.promiseDispatch=function(t,o,i){var u=L(arguments);e?(e.push(u),"when"===o&&i[1]&&r.push(i[1])):p.nextTick(function(){n.promiseDispatch.apply(n,u)})},i.valueOf=function(){if(e)return i;var t=v(n);return m(t)&&(n=t),t},i.inspect=function(){return n?n.inspect():{state:"pending"}},p.longStackSupport&&V)try{throw new Error}catch(u){i.stack=u.stack.substring(u.stack.indexOf("\n")+1)}return o.promise=i,o.resolve=function(e){n||t(p(e))},o.fulfill=function(e){n||t(E(e))},o.reject=function(e){n||t(R(e))},o.notify=function(t){n||W(r,function(n,e){p.nextTick(function(){e(t)})},void 0)},o}function l(t){if("function"!=typeof t)throw new TypeError("resolver must be a function.");var n=a();try{t(n.resolve,n.reject,n.notify)}catch(e){n.reject(e)}return n.promise}function d(t){return l(function(n,e){for(var r=0,o=t.length;o>r;r++)p(t[r]).then(n,e)})}function h(t,n,e){void 0===n&&(n=function(t){return R(new Error("Promise does not support operation: "+t))}),void 0===e&&(e=function(){return{state:"unknown"}});var r=Z(h.prototype);if(r.promiseDispatch=function(e,o,i){var u;try{u=t[o]?t[o].apply(r,i):n.call(r,o,i)}catch(c){u=R(c)}e&&e(u)},r.inspect=e,e){var o=e();"rejected"===o.state&&(r.exception=o.reason),r.valueOf=function(){var t=e();return"pending"===t.state||"rejected"===t.state?r:t.value}}return r}function y(t,n,e,r){return p(t).then(n,e,r)}function v(t){if(m(t)){var n=t.inspect();if("fulfilled"===n.state)return n.value}return t}function m(t){return t instanceof h}function k(t){return n(t)&&"function"==typeof t.then}function j(t){return m(t)&&"pending"===t.inspect().state}function w(t){return!m(t)||"fulfilled"===t.inspect().state}function g(t){return m(t)&&"rejected"===t.inspect().state}function b(){ot.length=0,it.length=0,ct||(ct=!0)}function x(t,n){ct&&("object"==typeof process&&"function"==typeof process.emit&&p.nextTick.runAfter(function(){-1!==X(it,t)&&(process.emit("unhandledRejection",n,t),ut.push(t))}),it.push(t),n&&"undefined"!=typeof n.stack?ot.push(n.stack):ot.push("(no stack) "+n))}function T(t){if(ct){var n=X(it,t);-1!==n&&("object"==typeof process&&"function"==typeof process.emit&&p.nextTick.runAfter(function(){var e=X(ut,t);-1!==e&&(process.emit("rejectionHandled",ot[n],t),ut.splice(e,1))}),it.splice(n,1),ot.splice(n,1))}}function R(t){var n=h({when:function(n){return n&&T(this),n?n(t):this}},function(){return this},function(){return{state:"rejected",reason:t}});return x(n,t),n}function E(t){return h({when:function(){return t},get:function(n){return t[n]},set:function(n,e){t[n]=e},"delete":function(n){delete t[n]},post:function(n,e){return null===n||void 0===n?t.apply(void 0,e):t[n].apply(t,e)},apply:function(n,e){return t.apply(n,e)},keys:function(){return nt(t)}},void 0,function(){return{state:"fulfilled",value:t}})}function O(t){var n=a();return p.nextTick(function(){try{t.then(n.resolve,n.reject,n.notify)}catch(e){n.reject(e)}}),n.promise}function S(t){return h({isDef:function(){}},function(n,e){return A(t,n,e)},function(){return p(t).inspect()})}function N(t,n,e){return p(t).spread(n,e)}function D(t){return function(){function n(t,n){var u;if("undefined"==typeof StopIteration){try{u=r[t](n)}catch(c){return R(c)}return u.done?p(u.value):y(u.value,o,i)}try{u=r[t](n)}catch(c){return e(c)?p(c.value):R(c)}return y(u,o,i)}var r=t.apply(this,arguments),o=n.bind(n,"next"),i=n.bind(n,"throw");return o()}}function P(t){p.done(p.async(t)())}function C(t){throw new _(t)}function Q(t){return function(){return N([this,I(arguments)],function(n,e){return t.apply(n,e)})}}function A(t,n,e){return p(t).dispatch(n,e)}function I(t){return y(t,function(t){var n=0,e=a();return W(t,function(r,o,i){var u;m(o)&&"fulfilled"===(u=o.inspect()).state?t[i]=u.value:(++n,y(o,function(r){t[i]=r,0===--n&&e.resolve(t)},e.reject,function(t){e.notify({index:i,value:t})}))},void 0),0===n&&e.resolve(t),e.promise})}function U(t){if(0===t.length)return p.resolve();var n=p.defer(),e=0;return W(t,function(r,o,i){function u(t){n.resolve(t)}function c(){e--,0===e&&n.reject(new Error("Can't get fulfillment value from any promise, all promises were rejected."))}function f(t){n.notify({index:i,value:t})}var s=t[i];e++,y(s,u,c,f)},void 0),n.promise}function F(t){return y(t,function(t){return t=Y(t,p),y(I(Y(t,function(t){return y(t,z,z)})),function(){return t})})}function M(t){return p(t).allSettled()}function B(t,n){return p(t).then(void 0,void 0,n)}function $(t,n){return p(t).nodeify(n)}var V=!1;try{throw new Error}catch(G){V=!!G.stack}var H,_,q=f(),z=function(){},J=function(){function t(){for(var t,r;e.next;)e=e.next,t=e.task,e.task=void 0,r=e.domain,r&&(e.domain=void 0,r.enter()),n(t,r);for(;c.length;)t=c.pop(),n(t);o=!1}function n(n,e){try{n()}catch(r){if(u)throw e&&e.exit(),setTimeout(t,0),e&&e.enter(),r;setTimeout(function(){throw r},0)}e&&e.exit()}var e={task:void 0,next:null},r=e,o=!1,i=void 0,u=!1,c=[];if(J=function(t){r=r.next={task:t,domain:u&&process.domain,next:null},o||(o=!0,i())},"object"==typeof process&&"[object process]"===process.toString()&&process.nextTick)u=!0,i=function(){process.nextTick(t)};else if("function"==typeof setImmediate)i="undefined"!=typeof window?setImmediate.bind(window,t):function(){setImmediate(t)};else if("undefined"!=typeof MessageChannel){var f=new MessageChannel;f.port1.onmessage=function(){i=s,f.port1.onmessage=t,t()};var s=function(){f.port2.postMessage(0)};i=function(){setTimeout(t,0),s()}}else i=function(){setTimeout(t,0)};return J.runAfter=function(t){c.push(t),o||(o=!0,i())},J}(),K=Function.call,L=t(Array.prototype.slice),W=t(Array.prototype.reduce||function(t,n){var e=0,r=this.length;if(1===arguments.length)for(;;){if(e in this){n=this[e++];break}if(++e>=r)throw new TypeError}for(;r>e;e++)e in this&&(n=t(n,this[e],e));return n}),X=t(Array.prototype.indexOf||function(t){for(var n=0;n<this.length;n++)if(this[n]===t)return n;return-1}),Y=t(Array.prototype.map||function(t,n){var e=this,r=[];return W(e,function(o,i,u){r.push(t.call(n,i,u,e))},void 0),r}),Z=Object.create||function(t){function n(){}return n.prototype=t,new n},tt=t(Object.prototype.hasOwnProperty),nt=Object.keys||function(t){var n=[];for(var e in t)tt(t,e)&&n.push(e);return n},et=t(Object.prototype.toString);_="undefined"!=typeof ReturnValue?ReturnValue:function(t){this.value=t};var rt="From previous event:";p.resolve=p,p.nextTick=J,p.longStackSupport=!1,"object"==typeof process&&process&&process.env&&process.env.Q_DEBUG&&(p.longStackSupport=!0),p.defer=a,a.prototype.makeNodeResolver=function(){var t=this;return function(n,e){n?t.reject(n):arguments.length>2?t.resolve(L(arguments,1)):t.resolve(e)}},p.Promise=l,p.promise=l,l.race=d,l.all=I,l.reject=R,l.resolve=p,p.passByCopy=function(t){return t},h.prototype.passByCopy=function(){return this},p.join=function(t,n){return p(t).join(n)},h.prototype.join=function(t){return p([this,t]).spread(function(t,n){if(t===n)return t;throw new Error("Can't join: not the same: "+t+" "+n)})},p.race=d,h.prototype.race=function(){return this.then(p.race)},p.makePromise=h,h.prototype.toString=function(){return"[object Promise]"},h.prototype.then=function(t,n,e){function o(n){try{return"function"==typeof t?t(n):n}catch(e){return R(e)}}function i(t){if("function"==typeof n){r(t,c);try{return n(t)}catch(e){return R(e)}}return R(t)}function u(t){return"function"==typeof e?e(t):t}var c=this,f=a(),s=!1;return p.nextTick(function(){c.promiseDispatch(function(t){s||(s=!0,f.resolve(o(t)))},"when",[function(t){s||(s=!0,f.resolve(i(t)))}])}),c.promiseDispatch(void 0,"when",[void 0,function(t){var n,e=!1;try{n=u(t)}catch(r){if(e=!0,!p.onerror)throw r;p.onerror(r)}e||f.notify(n)}]),f.promise},p.tap=function(t,n){return p(t).tap(n)},h.prototype.tap=function(t){return t=p(t),this.then(function(n){return t.fcall(n).thenResolve(n)})},p.when=y,h.prototype.thenResolve=function(t){return this.then(function(){return t})},p.thenResolve=function(t,n){return p(t).thenResolve(n)},h.prototype.thenReject=function(t){return this.then(function(){throw t})},p.thenReject=function(t,n){return p(t).thenReject(n)},p.nearer=v,p.isPromise=m,p.isPromiseAlike=k,p.isPending=j,h.prototype.isPending=function(){return"pending"===this.inspect().state},p.isFulfilled=w,h.prototype.isFulfilled=function(){return"fulfilled"===this.inspect().state},p.isRejected=g,h.prototype.isRejected=function(){return"rejected"===this.inspect().state};var ot=[],it=[],ut=[],ct=!0;p.resetUnhandledRejections=b,p.getUnhandledReasons=function(){return ot.slice()},p.stopUnhandledRejectionTracking=function(){b(),ct=!1},b(),p.reject=R,p.fulfill=E,p.master=S,p.spread=N,h.prototype.spread=function(t,n){return this.all().then(function(n){return t.apply(void 0,n)},n)},p.async=D,p.spawn=P,p["return"]=C,p.promised=Q,p.dispatch=A,h.prototype.dispatch=function(t,n){var e=this,r=a();return p.nextTick(function(){e.promiseDispatch(r.resolve,t,n)}),r.promise},p.get=function(t,n){return p(t).dispatch("get",[n])},h.prototype.get=function(t){return this.dispatch("get",[t])},p.set=function(t,n,e){return p(t).dispatch("set",[n,e])},h.prototype.set=function(t,n){return this.dispatch("set",[t,n])},p.del=p["delete"]=function(t,n){return p(t).dispatch("delete",[n])},h.prototype.del=h.prototype["delete"]=function(t){return this.dispatch("delete",[t])},p.mapply=p.post=function(t,n,e){return p(t).dispatch("post",[n,e])},h.prototype.mapply=h.prototype.post=function(t,n){return this.dispatch("post",[t,n])},p.send=p.mcall=p.invoke=function(t,n){return p(t).dispatch("post",[n,L(arguments,2)])},h.prototype.send=h.prototype.mcall=h.prototype.invoke=function(t){return this.dispatch("post",[t,L(arguments,1)])},p.fapply=function(t,n){return p(t).dispatch("apply",[void 0,n])},h.prototype.fapply=function(t){return this.dispatch("apply",[void 0,t])},p["try"]=p.fcall=function(t){return p(t).dispatch("apply",[void 0,L(arguments,1)])},h.prototype.fcall=function(){return this.dispatch("apply",[void 0,L(arguments)])},p.fbind=function(t){var n=p(t),e=L(arguments,1);return function(){return n.dispatch("apply",[this,e.concat(L(arguments))])}},h.prototype.fbind=function(){var t=this,n=L(arguments);return function(){return t.dispatch("apply",[this,n.concat(L(arguments))])}},p.keys=function(t){return p(t).dispatch("keys",[])},h.prototype.keys=function(){return this.dispatch("keys",[])},p.all=I,h.prototype.all=function(){return I(this)},p.any=U,h.prototype.any=function(){return U(this)},p.allResolved=s(F,"allResolved","allSettled"),h.prototype.allResolved=function(){return F(this)},p.allSettled=M,h.prototype.allSettled=function(){return this.then(function(t){return I(Y(t,function(t){function n(){return t.inspect()}return t=p(t),t.then(n,n)}))})},p.fail=p["catch"]=function(t,n){return p(t).then(void 0,n)},h.prototype.fail=h.prototype["catch"]=function(t){return this.then(void 0,t)},p.progress=B,h.prototype.progress=function(t){return this.then(void 0,void 0,t)},p.fin=p["finally"]=function(t,n){return p(t)["finally"](n)},h.prototype.fin=h.prototype["finally"]=function(t){return t=p(t),this.then(function(n){return t.fcall().then(function(){return n})},function(n){return t.fcall().then(function(){throw n})})},p.done=function(t,n,e,r){return p(t).done(n,e,r)},h.prototype.done=function(t,n,e){var o=function(t){p.nextTick(function(){if(r(t,i),!p.onerror)throw t;p.onerror(t)})},i=t||n||e?this.then(t,n,e):this;"object"==typeof process&&process&&process.domain&&(o=process.domain.bind(o)),i.then(void 0,o)},p.timeout=function(t,n,e){return p(t).timeout(n,e)},h.prototype.timeout=function(t,n){var e=a(),r=setTimeout(function(){n&&"string"!=typeof n||(n=new Error(n||"Timed out after "+t+" ms"),n.code="ETIMEDOUT"),e.reject(n)},t);return this.then(function(t){clearTimeout(r),e.resolve(t)},function(t){clearTimeout(r),e.reject(t)},e.notify),e.promise},p.delay=function(t,n){return void 0===n&&(n=t,t=void 0),p(t).delay(n)},h.prototype.delay=function(t){return this.then(function(n){var e=a();return setTimeout(function(){e.resolve(n)},t),e.promise})},p.nfapply=function(t,n){return p(t).nfapply(n)},h.prototype.nfapply=function(t){var n=a(),e=L(t);return e.push(n.makeNodeResolver()),this.fapply(e).fail(n.reject),n.promise},p.nfcall=function(t){var n=L(arguments,1);return p(t).nfapply(n)},h.prototype.nfcall=function(){var t=L(arguments),n=a();return t.push(n.makeNodeResolver()),this.fapply(t).fail(n.reject),n.promise},p.nfbind=p.denodeify=function(t){var n=L(arguments,1);return function(){var e=n.concat(L(arguments)),r=a();return e.push(r.makeNodeResolver()),p(t).fapply(e).fail(r.reject),r.promise}},h.prototype.nfbind=h.prototype.denodeify=function(){var t=L(arguments);return t.unshift(this),p.denodeify.apply(void 0,t)},p.nbind=function(t,n){var e=L(arguments,2);return function(){function r(){return t.apply(n,arguments)}var o=e.concat(L(arguments)),i=a();return o.push(i.makeNodeResolver()),p(r).fapply(o).fail(i.reject),i.promise}},h.prototype.nbind=function(){var t=L(arguments,0);return t.unshift(this),p.nbind.apply(void 0,t)},p.nmapply=p.npost=function(t,n,e){return p(t).npost(n,e)},h.prototype.nmapply=h.prototype.npost=function(t,n){var e=L(n||[]),r=a();return e.push(r.makeNodeResolver()),this.dispatch("post",[t,e]).fail(r.reject),r.promise},p.nsend=p.nmcall=p.ninvoke=function(t,n){var e=L(arguments,2),r=a();return e.push(r.makeNodeResolver()),p(t).dispatch("post",[n,e]).fail(r.reject),r.promise},h.prototype.nsend=h.prototype.nmcall=h.prototype.ninvoke=function(t){var n=L(arguments,1),e=a();return n.push(e.makeNodeResolver()),this.dispatch("post",[t,n]).fail(e.reject),e.promise},p.nodeify=$,h.prototype.nodeify=function(t){return t?void this.then(function(n){p.nextTick(function(){t(null,n)})},function(n){p.nextTick(function(){t(n)})}):this},p.noConflict=function(){throw new Error("Q.noConflict only works when Q is used as a global")};var ft=f();return p});

}).call(this,require('_process'))

},{"_process":9}],9:[function(require,module,exports){
function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var e=setTimeout(cleanUpNextTick);draining=!0;for(var n=queue.length;n;){for(currentQueue=queue,queue=[];++queueIndex<n;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,n=queue.length}currentQueue=null,draining=!1,clearTimeout(e)}}function Item(e,n){this.fun=e,this.array=n}function noop(){}var process=module.exports={},queue=[],draining=!1,currentQueue,queueIndex=-1;process.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)n[r-1]=arguments[r];queue.push(new Item(e,n)),1!==queue.length||draining||setTimeout(drainQueue,0)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
