(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Workflow = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var Process = require('./lib/process');
var util = require('utility');
var userInterface = require('./lib/interface');
var helper = require('./lib/helper');


/*globals */

/**
 * A new Workflow constructor instance contains the reference to the application
 * and associated profile which it requires as the first two parameters. It also
 * requires a workflow configuration, as the third parameter, which is used to
 * descibe the workflow processes. If a workflow instance exists you can pass it
 * in as the fourth parameter which it will then use, else create a new one.
 *
 * @constructor
 *
 * @param {string} profile - The current profile id
 * @param {string} app - The associated application id
 * @param {Object} config - The application workflow configuration / definition
 * @param {Object} [instance] - An existing application profile workflow instance based
 * on the definition
 *
 * @author Brent Gordon
 * @version 0.1.0
 *
 * @example
 * var config = { '_id': 'abc123' };

 * var instance = { '_id': 'instance_abc123' };

 * // If there isn't an existing instance
 * var workflow = new Workflow('1234', '5678', config);
 * // If there is an existing instance
 * var workflow = new Workflow('1234', '5678', config, instance);
 *
 * @return {Object} new Workflow object
 *
 * @throws Error: A profile id is required
 * @throws Error: An app id is required
 * @throws Error: A workflow configuration is required
 *
 */

function Workflow(profile, communityId, app, config) {
    var _this = this;

    // Community ID validation checks
    if (communityId == '' || communityId == undefined) {
        throw util.error('ParamRequired', 'A community id is required.');
    } else if (typeof(communityId) !== 'string') {
        throw new Error('The community id must be a javascript string.');
    } else {
        _this.communityId = communityId || '';
    }

    // Profile ID validation checks
    if (profile == '' || profile == undefined) {
        throw util.error('ParamRequired', 'A profile id is required.');
    } else if (typeof(profile) !== 'string') {
        throw new Error('The profile id must be a javascript string.');
    } else {
        _this.profile = profile || '';
    }

    // App ID validation checks
    if (app == '' || app == undefined) {
        throw util.error('ParamRequired', 'An app id is required.');
    } else if (typeof(app) !== 'string') {
        throw new Error('The app id must be a javascript string.');
    } else {
        _this.app = app || '';
    }

    // Workflow configuration validation checks
    if (config == '' || config == undefined) {
        throw util.error('ParamRequired', 'A workflow configuration is required.');
    } else if (typeof(config) !== 'object') {
        _this.config = JSON.parse(config);
    } else {
        _this.config = config;
    }

    // Workflow instance validation checks
    _this.instance;
    // Workflow sub-processes validation checks
    _this.subprocesses = [];
    // Workflow indicators place holder
    _this.indicators = [];


}

/**
 * Workflow get profile id.
 *
 * @example ""
 *
 * @return ""
 *
 */
Workflow.prototype.getProfile = function() {
    return this.profile;
};

/**
 * Workflow get app id.
 *
 * @example ""
 *
 * @return ""
 *
 */
Workflow.prototype.getApp = function() {
    return this.app;
};

/**
 * Workflow get config.
 *
 * @example ""
 *
 * @return ""
 *
 */
Workflow.prototype.getConfig = function() {
    return this.config;
};

/**
 * Workflow get instance.
 *
 * @example ""
 *
 * @return ""
 *
 */

Workflow.prototype.getInstance = function() {
    return this.instance;
};

/**
 * Workflow set the instance data.
 *
 * @param {Object} data - the workflow process instance data
 *
 * @example ""
 *
 * @return ""
 *
 */
Workflow.prototype.setInstance = function(data) {
    this.instance = data;
};

/**
 * Workflow get sub-processes data.
 *
 * @example ""
 *
 * @return ""
 *
 */
Workflow.prototype.getSubProcesses = function() {
    return this.subprocesses;
};

/**
 * Workflow set the sub-processes data.
 *
 * @param {Object} data - the workflow process instance data
 *
 * @example ""
 *
 * @return ""
 *
 */
Workflow.prototype.setSubProcesses = function(data) {
    this.subprocesses = data;
};

/**
 * Workflow get indicator set data.
 *
 * @example ""
 *
 * @return ""
 *
 */
Workflow.prototype.getIndicators = function() {
    return this.indicators;
};

/**
 * Workflow set the indicator set data.
 *
 * @param {Object} data - the workflow process instance data
 *
 * @example ""
 *
 * @return ""
 *
 */
Workflow.prototype.setIndicators = function(data) {
    this.indicators = data;
};

/**
 * Set the variable value.
 *
 * @param {string} processId - the Workflow config / definition process id
 * @param {number} processSeq - the Workflow instance process seq
 * @param {string} subProcessId - the Workflow config / definition sub-process id
 * @param {number} subProcessSeq - the Workflow instance sub-process seq
 * @param {string} stepId - the Workflow config / definition step id
 * @param {Object} variable - the Workflow variable object
 *
 * @example ''
 *
 * @return ''
 *
 */
// Workflow.prototype.setVariable = function(processId, processSeq, subProcessId, subProcessSeq, stepId, variable){
// 	var _this = this;
// 	return new Promise(function(resolve, reject) {
// 		try {
// 			Process.getVariable(processId, processSeq, subProcessId, subProcessSeq, stepId, variable).then(funcion(result){
// 				resolve(result.data);
// 			}, function(err){
// 				reject(err);
// 			})
// 		} catch (err) {
// 			reject(err);
// 		}

// 	});
// };

/**
 * Get the variable value.
 *
 * @param {string} processId - the Workflow config / definition process id
 * @param {number} processSeq - the Workflow instance process seq
 * @param {string} subProcessId - the Workflow config / definition sub-process id
 * @param {number} subProcessSeq - the Workflow instance sub-process seq
 * @param {string} stepId - the Workflow config / definition step id
 * @param {string} key - the Workflow variable id
 *
 * @example ''
 *
 * @return ''
 *
 */
// Workflow.prototype.getVariable = function(processId, processSeq, subProcessId, subProcessSeq, stepId, key){
// 	var _this = this;
// 	return new Promise(function(resolve, reject) {
// 		try {
// 			Process.setVariable(processId, processSeq, subProcessId, subProcessSeq, stepId, key).then(funcion(result){
// 				resolve(result.data);
// 			}, function(err){
// 				reject(err);
// 			})
// 		} catch (err) {
// 			reject(err);
// 		}

// 	});
// };

/**
 * This method creates a new workflow process i.e. it creates a workflow processes instance
 * object with the minimum required data. This instance can be referenced in the following
 * way, see example below.
 *
 * @example
 * var config = { '_id': 'abc123' };

 * var workflow = new Workflow('1234', '5678', config);
 * workflow.create().then(function(result){
 *	console.log(result.message);
 *	// The following properties can now be accessed
 * 	var profile = workflow.profile;
 * 	var app = workflow.app;
 * 	var config = workflow.config;
 *	// On success you can access the instance the following way
 *	var instance = workflow.instance;
 * }, function(error){
 *	console.log(error);
 * });
 *
 * @return {Object} new Workflow instance with updated instance data.
 *
 */

Workflow.prototype.create = function() {
    var _this = this;
    return new Promise(function(resolve, reject) {
        try {
            if (_this.instance !== undefined) {
                var warn = util.warn('Instance already exists.', _this)
                resolve(warn);
            } else {
                // Create the workflow processes instance object
                var model = {
                    _id: '',
                    version: '',
                    type: 'workflowInstance',
                    processes: [],
                    channels: [
                        "community_" + app.SCOPE.getCommunityId(),
                        "profile_" + app.SCOPE.profileId,
                        "application_" + app.SCOPE.applicationId,
                        "community_" + app.SCOPE.getCommunityId() + "_application_" + app.SCOPE.applicationId
                    ]
                };

                model._id = "_local/" + _this.profile + ':processes';
                //model._id = _this.profile + ':processes';

                model.version = _this.config.version;
                _this.instance = model;
                var success = util.success('Workflow processes instance created successfully.', _this);
                resolve(success);

            }

        } catch (err) {
            reject(err);
        }

    });
};

/**
 * Workflow initialise, this function executes a process within a workflow
 * configuration.
 *
 * @param {string} processId - the process id to process
 * @param {object} [data] - the input data to process
 *
 * @example
 * Workflow.initialise('processId', { validDate: 'date' });
 *
 * @return ""
 *
 */
Workflow.prototype.initialise = function(processId, data, subprofileId) {
    var _this = this;
    return new Promise(function(resolve, reject) {
        try {
            var configProcess = [];
            // Check the passed in parameters
            if (processId !== '' && processId !== undefined) {
                // Get the current process config
                configProcess = _this.config.processes.filter(function(objProcess) {
                    if (objProcess._id == processId) {
                        return objProcess;
                    }

                });
                if (configProcess[0]._id == undefined) {
                    var error = util.error('WFConfigError', 'No valid process definition found with process id: ' + processId);
                    reject(error);
                }

            } else {
                configProcess.push(_this.config.processes[0]);
                processId = _this.config.processes[0]._id;
            }

            var buildParam = function(array) {

                var indName = "";
                for (var l = 0; l < array.length - 1; l++) {
                    indName = indName + "'" + array[l] + "',";
                }
                return '(' + indName + "'" + array[array.length - 1] + "')"

            };

            var spId = configProcess[0].subProcesses[0]._id;
            var toCheckArray = [];
            var instanceType = configProcess[0].subProcesses[0].instanceType;
            var processIndicators = JSON.xpath("indicators/_id", configProcess[0].subProcesses[0], {});

            var canCreateProcess = function(array) {
                
                
                //SP:TODO DONE
                var countSingleList = JSON.xpath("/indicators[setId = " + buildParam(array) + " and cardinality eq 'single' ]/setId", app.SCOPE.APP_CONFIG, {});
                var countSingle = countSingleList.length;

                if (countSingle > 0) {

                    var involvedprocesses = JSON.xpath("/processes/subProcesses[indicators/_id = "+ buildParam(countSingleList) +"]/_id", _this.config,{});
                    var count = JSON.xpath("count(/instance/processes/subProcesses[id = "+ buildParam(involvedprocesses) +" and complete = false()])", _this,{})[0];
                    return (count == 0)

                } else {


                    if (instanceType.newSequence != undefined) {
                        
                        var count = JSON.xpath("count(/instance/processes/subProcesses[id eq '"+ spId +"' and complete eq 'false'])", _this , {})[0];
                        return (count == 0)
                    
                    } else if (instanceType.newInstance != undefined) {
                        return true;
                    } else {
                        return true;
                    }



                }

            };

            if (canCreateProcess(processIndicators)) {

                // var processSeq = 1;
                var currentProcess = [];
                _this.instance.processes.filter(function(processItem) {
                    if (processItem.id == processId) {
                        currentProcess.push(processItem);
                    }

                });
                var processSeq = currentProcess.length + 1;
                // var nextSeq = processSeq + 1;
                // Push the process object into the array
                var processModel = {
                    id: '',
                    seq: '',
                    subProcesses: []
                }

                // 1. Update the process id and seq
                processModel.id = processId;
                processModel.seq = processSeq;
                _this.instance.processes.push(processModel);
                // Parameters
                var subProcessId = configProcess[0].subProcesses[0]._id;
                var subProcessSeq = 1;
                _this.instance.processes.filter(function(processItem) {
                    if (processItem.id == processId && processItem.seq == processSeq) {
                        subProcessSeq = processItem.subProcesses.length + 1
                    }

                });
                // Call the subprocess method
                var inputUUID = generateUUID();
                if(data.subprocessUUID != undefined && data.subprocessUUID.length > 0){
                    inputUUID = data.subprocessUUID;
                }
                //create txn
                var txnPacket = {
                    "communityId": app.SCOPE.communityId,
                    "uuid": inputUUID,
                    "userId": _lclx.SUBSCRIPTIONS.userId,
                    "transactionType": "subProcess",
                    "documents": [{"document": inputUUID, "rev": "0"}]
                };

                dao.startTransaction(txnPacket).then(function(succ) {

                    Process.subProcess(inputUUID, processId, processSeq, subProcessId, subProcessSeq, subprofileId, data, _this).then(function(subProcess) {
                        // Generate the uuid

                        var uuid = subProcess.data._id; //_this.profile + ':' + _this.app + ':' + processId + ':' + processSeq + ':' + subProcessId + ':' + subProcessSeq;

                        // Build the sub-process reference object

                        var groupKey = subProcess.data.groupKey;
                        //TODO: Change required to move isActive to subProcess file.Remove from here
                        if (subprofileId == undefined) {
                            subprofileId = '';
                        }
                        var subProcessRef = {
                            id: subProcessId,
                            subprofileId: subprofileId,
                            seq: subProcess.data["meta-data"].subProcessInsSeq,
                            uuid: uuid,
                            groupKey: groupKey,
                            label: subProcess.data.label

                        }

                        // Add the reference to the process model
                        processModel.subProcesses.push(subProcessRef);
                        // Add the subProcess model to the subprocesses array
                        //_this.subprocesses.push(subProcess.data);
                        // _this.instance.processes.push(processModel);
                        for (var index = 0; index < _this.instance.processes.length; index++) {
                            var processItem = _this.instance.processes[index];
                            if (processItem.id == processId && processItem.seq == processSeq) {
                                // Remove the current process from the array and add the updated processModel
                                _this.instance.processes.splice(index, 1, processModel)
                            }

                        }

                        // Process the indicator documents workflow processes updates
                        var indicators = subProcess.data.indicators;
                        var step = subProcess.data.step;
                        Process.indicatorDocs(processId, indicators, step, _this, uuid).then(function(result) {
                            var success = util.success('Process: ' + _this.config.processes[0]._id + ' initialized successfully.', subProcessRef);
                            // commit call
                            resolve(success);
                        }, function(err) {
                            reject(err);
                        });

                    }, function(err) {
                        _this.instance.processes = _this.instance.processes.filter(function(obj) {
                            return !(obj.id == processId && obj.seq == processSeq);
                        });
                        console.log(err);
                        reject(err);
                    });

                }).catch(function(err) {
                    console.log(err);
                    if(err.responseJSON != undefined && err.responseJSON.message != undefined){
                        reject(err.responseJSON.message);
                    } else if(err.responseText != undefined) {
                        reject(err.responseText);
                    } else {
                        reject(err);
                    }
                    
                    
                });



            } else {
                reject("Cannot create workflow as other process using same SDO is not complete")
            }








        } catch (err) {
            reject(err);
        }

    });
};

/**
 * Workflow transition to the next step. This moves the workflow from the current process,
 * sub-process step to the next one as specified.
 *
 * @param {string} processId - the Workflow config / definition process id
 * @param {number} processSeq - the Workflow instance process seq
 * @param {string} subProcessId - the Workflow config / definition sub-process id
 * @param {number} subProcessSeq - the Workflow instance sub-process seq
 * @param {string} stepId - the Workflow config / definition step id 
 * @param {string} transitionId - the Workflow config / definition transition id
 * @param {object} data - any additional data passed in as key value pairs
 *
 * @example
 * Workflow.transition('processId', 1, 'subProcessId', 1, 'stepId', 'transitionId', { key: '', value: '' });
 *
 * @return ""
 *
 */
Workflow.prototype.transition = function(processId, processSeq, subProcessId, subProcessSeq, stepId, transitionId, data, spuuid) {
    // Re-assign this
    var _this = this;
    return new Promise(function(resolve, reject) {
        try {
            var model = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']/step", app.SCOPE.workflow, {})[0];
            var stepObject = JSON.xpath("/processes[_id eq '" + processId + "']/subProcesses[_id eq '" + subProcessId + "']/steps[_id eq '" + stepId + "']", _this.config, {})[0];
            var subProcessSeq = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']/meta-data/subProcessInsSeq", app.SCOPE.workflow, {})[0];
            
            var update = function(type, result) {
                _this.instance.processes.filter(function(processItem) {
                    if (processItem.id == processId && processItem.seq == processSeq) {

                        processItem.subProcesses.filter(function(subProcessItem) {
                            if (subProcessItem.id == subProcessId) {

                                _this.subprocesses.filter(function(subProcessObj) {
                                    if (subProcessObj._id == spuuid) {

                                        if (type == 'step') {

                                            subProcessObj.step = result.data.step;
                                            var success = util.success(result.message, subProcessObj);

                                            resolve(success);
                                        } else if (type == 'stepComplete') {

                                            subProcessObj.step = result.data.step;
                                            subProcessObj.complete = true

                                            var insObject = JSON.xpath("/instance/processes/subProcesses[uuid eq '"+ subProcessObj._id +"']",app.SCOPE.workflow,{})[0];
                                            insObject.complete = true;


                                            var success = util.success(result.message, subProcessObj.step);

                                            resolve(success);
                                        }

                                    }

                                })
                            }

                        })
                    }

                })
            }

            var postActions = {}

            if(stepObject.function.task != undefined && stepObject.function.task.postActions != undefined){
            
                postActions = stepObject.function.task.postActions;
                
                Process.postActions(postActions, _this, spuuid).then(function(success) {

                    Process.transition(processId, processSeq, subProcessId, subProcessSeq, stepId, transitionId, data, _this, spuuid, model).then(function(result) {

                        if (result.data.subProcessComplete) {

                            update('stepComplete', result);
                        } else {

                            update('step', result);
                        }

                    }, function(err) {

                        reject(err);
                    });

                }, function(err) {

                    reject(err);

                });

            } else if(stepObject.function.server != undefined && stepObject.function.server.postActions != undefined){
            
                postActions = stepObject.function.server.postActions;
                Process.postActions(postActions, _this, spuuid).then(function(success) {

                    Process.transition(processId, processSeq, subProcessId, subProcessSeq, stepId, transitionId, data, _this, spuuid, model).then(function(result) {

                        if (result.data.subProcessComplete) {

                            update('stepComplete', result);
                        } else {

                            update('step', result);
                        }

                    }, function(err) {

                        reject(err);
                    });

                }, function(err) {

                    reject(err);

                });
            } else {
                Process.transition(processId, processSeq, subProcessId, subProcessSeq, stepId, transitionId, data, _this, spuuid, model).then(function(result) {

                    if (result.data.subProcessComplete) {

                        update('stepComplete', result);
                    } else {

                        update('step', result);
                    }

                }, function(err) {

                    reject(err);
                });
            }
            

        } catch (err) {

            reject(err);
        }

    });
};

/**
 * Workflow assign user.
 *
 * @param {string} processId - the Workflow config / definition process id
 * @param {number} processSeq - the Workflow instance process seq
 * @param {string} subProcessId - the Workflow config / definition sub-process id
 * @param {number} subProcessSeq - the Workflow instance sub-process seq
 * @param {string} stepId - the Workflow config / definition step id
 * @param {object} user - the user id and name data
 *
 * @example ""
 *
 * @return ""
 *
 */
Workflow.prototype.assignUser = function(processId, processSeq, subProcessId, subProcessSeq, user, uuid) {
    // Re-assign the Workflow constructor instance as _this
    var _this = this;
    return new Promise(function(resolve, reject) {
        try {
            var spObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", app.SCOPE.workflow, {})[0];
            
            var spRev = spObject._rev;
            var txnPacket = {
                "communityId": app.SCOPE.communityId,
                "uuid": uuid,
                "userId": _lclx.SUBSCRIPTIONS.userId,
                "transactionType": "subProcess",
                "documents": [{
                    "document": uuid,
                    "rev": spRev
                }]
            };

            Process.assignUser(processId, processSeq, subProcessId, subProcessSeq, user, uuid, _this).then(function(result) {

               
                resolve(result);
               


            }, function(err) {
                reject(err);
            })

           



        } catch (err) {
            reject(err);
        }

    })
};

/**
 * Workflow task, this method executes a specific task.
 *
 * @param {string} processId - the process id to process
 * @param {object} inputData - the input data to process
 *
 * @example
 * Workflow.initialize('processId', { validDate: 'date' });
 *
 * @return ""
 *
 */
Workflow.prototype.ui = function() {
    // Re-assign the Workflow constructor instance as _this
    var _this = this;
    return {
        getProcess: function(processId, lang) {
            return new Promise(function(resolve, reject) {
                try {
                    userInterface.getProcess(processId, lang, _this).then(function(model) {
                        resolve(model);
                    }, function(err) {
                        reject(err);
                    })
                } catch (err) {
                    reject(err);
                }

            })
        }

    }

};

/**
 * Workflow task, this method executes a specific task.
 *
 * @param {object} data - the process id to process
 * @param {object} _WFInstance - the input data to process
 * * @param {string} uuid - the input data to process
 *
 * @example
 * Workflow.getNodeValue(data, _WFInstance, uuid);
 *
 * @return ""
 *
 */

Workflow.prototype.getNodeValue = function(data, uuid) {
    // Re-assign the Workflow constructor instance as _this
    var _this = this;
    return new Promise(function(resolve, reject) {
        try {
            helper.getNodeValue(data, _this, uuid).then(function(res) {
                resolve(res);
            }, function(err) {
                reject(err);
            });
        } catch (err) {
            reject(err);
        }

    })
};

/**
 * Workflow task, this method executes a specific task.
 *
 * @param {object} data - the process id to process
 * @param {object} _WFInstance - the input data to process
 *
 * @example
 * Workflow.takeAssignment(spuuid, _WFInstance);
 *
 * @return ""
 *
 */

Workflow.prototype.takeAssignment = function(spuuid) {
    // Re-assign the Workflow constructor instance as _this
    var _this = this;

    return new Promise(function(resolve, reject) {

        try {
           
           //Assignment are executing here

           var spObject = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']", _this, {})[0];
            
           var assignee = JSON.xpath("/step/assignedTo", spObject, {})[0];
           //Pushing older record in reAssign array

           if (spObject.step.assignmentHistory == undefined) {
               spObject.step.assignmentHistory = [];
           }
           if (assignee.userId != "" && assignee.name != "") {
               spObject.step.assignmentHistory.push(JSON.parse(JSON.stringify(assignee)));
           }



           assignee.name = _lclx.SESSION.firstName + " " + _lclx.SESSION.lastName;
           assignee.userId = _lclx.SUBSCRIPTIONS.userId + "";
           assignee.dateTime = moment().format();
           assignee.type = ASSIGNMENT_TYPE_ACCEPTANCE;
           assignee.dueDateTime = '';
           assignee.by = _lclx.SUBSCRIPTIONS.userId + "";


           //fetch preWorkActions here 

           var processId = JSON.xpath("/instance/processes[subProcesses/uuid eq '" + spuuid + "']/id", _this, {})[0];
           var subProcessId = JSON.xpath("/instance/processes/subProcesses[uuid eq '" + spuuid + "']/id", _this, {})[0];
           
           var stepId = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']/step/id", _this, {})[0];
         
           var stepObject = JSON.xpath("/processes[_id eq '" + processId + "']/subProcesses[_id eq '" + subProcessId + "']/steps[_id eq '" + stepId + "']", _this.config, {})[0];

           if (stepObject.function.task.preWorkActions != undefined) {

               var preWorkActions = stepObject.function.task.preWorkActions;
               Process.preWorkActions(preWorkActions, _this).then(function(success) {

                   resolve(_this);

               }, function(err) {

                   reject(err);

               });

           } else {

               resolve(_this);

           }





        } catch (err) {

            reject(err);

        }

    });
};


/**
 * Workflow task, this method executes a specific task.
 *
 * @param {object} data - the process id to process
 * @param {object} _WFInstance - the input data to process
 *
 * @example
 * Workflow.condition(condition, spuuid);
 *
 * @return ""
 *
 */

Workflow.prototype.condition = function(condition, spuuid) {

    var _this = this;
    return new Promise(function(resolve, reject) {

        try {

            var operator = condition.operator;
            var dataBlock = condition.value.data;

            if (condition.subject.indicator != undefined) {

                var setId = condition.subject.indicator.setId;
                var modelScope = condition.subject.indicator.modelScope;
                var elementPath = condition.subject.indicator.elementPath;
                if (condition.subject.indicator.context == 'subProcess') {

                    var indicatorUUID = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']/indicators[id eq '" + setId + "']/instances[1]/uuid", _this, {})[0];
                   
                    var indicatorModel = JSON.xpath("/indicators[_id eq '" + indicatorUUID + "']", _this, {})[0];
                    var dataElement = indicatorModel.model[modelScope].data[setId];
                    
                    var finalValue = dataElement;
                    var pathToElement = elementPath == "" ? [] : elementPath.split(/['"\[\].]+/);

                    for (var k = 0; k < pathToElement.length; k++) {
                        if(pathToElement[k] == "") continue;
                        finalValue = finalValue[pathToElement[k]];
                    }
                    var value = finalValue; 

                    helper.getNodeValue(dataBlock, _this, spuuid).then(function(res) {
                        var result = helper.compare(value, operator, res);

                        resolve(result);
                    }, function(err) {
                        reject(err);
                    });



                } else if (condition.subject.indicator.context == 'subProfile') {

                    //SP:TODO DONE
                    var indicatorModel = JSON.xpath("/indicators[category/term eq '" + setId + "']", _this, {})[0];
                    
                    var dataElement = indicatorModel.model[modelScope].data[setId];
                    
                    var finalValue = dataElement;
                    var pathToElement = elementPath == "" ? [] : elementPath.split(/['"\[\].]+/);

                    for (var k = 0; k < pathToElement.length; k++) {
                        if(pathToElement[k] == "") continue;
                        finalValue = finalValue[pathToElement[k]];
                    }
                    var value = finalValue; 

                    helper.getNodeValue(dataBlock, _this, spuuid).then(function(res) {
                        var result = helper.compare(value, operator, res);

                        resolve(result);
                    }, function(err) {
                        reject(err);
                    });



                } else {
                    reject('Not implemented')
                }


            } else if (condition.subject.indicatorWrapper != undefined) {

                reject('Not implemented');

            } else if (condition.subject.variable != undefined) {
               // var value = dataBlock.value.data;

                helper.getNodeValue(dataBlock , _this, spuuid).then(function(rhs) {
                   
                    helper.getNodeValue(condition.subject, _this, spuuid).then(function(lhs) {
                        var result = helper.compare(lhs, operator, rhs);
                        resolve(result);
                    }, function(err) {
                        reject(err);
                    });


                }, function(err) {
                    reject(err);
                });

               

               // reject('Not implemented')
            } else if (condition.subject.subProcess != undefined) {

                var elementPath = condition.subject.subProcess.elementPath;
                var spObject = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']", _this, {})[0];
               
                var finalValue = spObject;
                var pathToElement = elementPath == "" ? [] : elementPath.split(/['"\[\].]+/);

                for (var k = 0; k < pathToElement.length; k++) {
                    if(pathToElement[k] == "") continue;
                    finalValue = finalValue[pathToElement[k]];
                }
                var value = finalValue; 
                
                helper.getNodeValue(dataBlock, _this, spuuid).then(function(res) {
                    var result = helper.compare(value, operator, res);

                    resolve(result);
                }, function(err) {
                    reject(err);
                });
            }



        } catch (err) {

            reject(err);

        }

    });
};

module.exports = Workflow;
},{"./lib/helper":4,"./lib/interface":5,"./lib/process":7,"utility":8}],2:[function(require,module,exports){
'use strict';

var util = require('utility');
var nodeValue = require('./nodeValue');
var form = require('./form');
var helper = require('./helper');

var gatekeeper = new GK();

/**
 * Actions Module
 *
 * @module lib/actions
 * @author Hasan Abbas
 * @version 2.0.0
 * @description test description
 * @copyright Kwantu Ltd RSA 2009-2015.
 *
 */

/**
 *  Form Module actions needs to be moved here.
 *  This actions module will be cental place to hold all functions.
 *  
 */

var community = (function() {

    return {

        createCommunity: function(_def, uuid, _WFInstance) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("follow");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());

                var uuidCommunity = JSON.xpath("/indicators[category/term eq 'Community']/_id", _WFInstance, {})[0];


                var action = {
                    "createCommunity": {
                        "newCommunityId": _WFInstance.profile,
                        "indicatorUUID": {
                            "Community": uuidCommunity
                        }

                    }

                };

                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {
                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);
                    var success = util.success('Worker processed successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });
        },
        userJoinCommunity: function(_def, uuid, _WFInstance) {

            return new Promise(function(resolve, reject) {

            });

        },
        releaseAdoptedApplication: function(_def, uuid, _WFInstance) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("follow");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());
                var uuidReleaseAdoptedApplication = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq 'adoptedApplication']/instances[1]/uuid", _WFInstance, {})[0];

               

                var action = {
                    "releaseAdoptedApplication": {
                        "communityId": _WFInstance.profile,
                        "indicatorUUID": {
                            "adoptedApplication": uuidReleaseAdoptedApplication
                        }

                    }

                };

                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('Worker processes successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });
        }

    }

})();

var application = (function() {

    return {

        createAppDefinition: function(_def, uuid, _WFInstance) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("follow");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());
                var uuidApplication = JSON.xpath("/indicators[category/term eq 'Application']/_id", _WFInstance, {})[0];
                
                var action = {
                    "createApplication": {
                        "newApplicationId": _WFInstance.profile,
                        "indicatorUUID": {
                            "Application": uuidApplication
                        }

                    }

                };

                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('Worker processes successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });

        },

        buildApplication: function(_def, uuid, _WFInstance) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("follow");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());
                var uuidPublishApplication = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq 'PublishApplication']/instances[1]/uuid", _WFInstance, {})[0];
                var uuidApplicationDefinition = JSON.xpath("/indicators[category/term eq 'ApplicationDefinition']/_id", _WFInstance, {})[0];
                var uuidRoles = JSON.xpath("/indicators[category/term eq 'Roles']/_id", _WFInstance, {})[0];
                var uuidApplication = JSON.xpath("/indicators[category/term eq 'Application']/_id", _WFInstance, {})[0];
                var uuidAppPermissions = JSON.xpath("/indicators[category/term eq 'AppPermissions']/_id", _WFInstance, {})[0];
                

                var action = {
                    "buildApplication": {
                        "applicationId": _WFInstance.profile,
                        "indicatorUUID": {
                            "PublishApplication": uuidPublishApplication,
                            "ApplicationDefinition": uuidApplicationDefinition,
                            "Roles": uuidRoles,
                            "Application": uuidApplication,
                            "AppPermissions": uuidAppPermissions
                        }

                    }

                };

                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('Worker processes successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });

        },

        applicationAdoption: function(_def, uuid, _WFInstance) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }


                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("follow");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());
                var uuidAdoption = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq 'Adoption']/instances[1]/uuid", _WFInstance, {})[0];
                
                var uuidPublishApplication = JSON.xpath("/indicators[category/term eq 'PublishApplication']/_id", _WFInstance, {})[0];
                var uuidApplication = JSON.xpath("/indicators[category/term eq 'Application']/_id", _WFInstance, {})[0];

                var action = {
                    "adoptApplication": {
                        "applicationId": _WFInstance.profile,
                        "indicatorUUID": {
                            "Adoption": uuidAdoption,
                            "PublishApplication": uuidPublishApplication,
                            "Application": uuidApplication
                        }

                    }

                };

                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('Worker processes successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });

        },

        createTaxonomy: function(_def, uuid, _WFInstance) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("follow");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());
                var taxonomyUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq 'Taxonomy']/instances[1]/uuid", _WFInstance, {})[0];
                
                var action = {
                    "createTaxonomy": {
                        "taxonomyUUID": taxonomyUUID
                    }

                };

                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('Worker processes successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });

        }

    }

})();

var performance = (function() {

    return {


        unlockPeriod: function(_def, uuid, _WFInstance) {

            return new Promise(function(resolve, reject) {

                var subprocessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
               

                var entryUUID = JSON.xpath("/indicators[id eq '" + PERIOD_SET_ID + "' or id eq '" + AUDIT_PERIOD_SET_ID + "']/instances/uuid", subprocessObject, {})[0];
                
               

                var enddate = subprocessObject.dates.valid;

                library.unlockPeriod(entryUUID, enddate, uuid).then(function(data) {

                    var success = util.success('Unlock period.', data);
                    resolve(success);



                }, function(error) {
                    reject(error);
                });






            });
        },

        setModelStatus: function(_def, uuid, _WFInstance) {

            return new Promise(function(resolve, reject) {

                var subprocessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                var entryUUID = JSON.xpath("/indicators[id eq '" + PERIOD_SET_ID + "' or id eq '" + AUDIT_PERIOD_SET_ID + "']/instances/uuid", subprocessObject, {})[0];
                
               

                var enddate = subprocessObject.dates.valid;

                var statusi18nLabel = JSON.xpath("/label", _def, {})[0];
                var status = helper.getLanguageMessage(statusi18nLabel);


                library.setPeriodStatus(entryUUID, enddate, status, uuid).then(function(data) {

                    var success = util.success('setModelStatus', data);
                    resolve(success);


                }, function(error) {
                    reject(error);
                });






            });
        },


        lockPerformanceModel: function(_def, uuid, _WFInstance) {

            return new Promise(function(resolve, reject) {

                var subprocessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                
                var entryUUID = JSON.xpath("/indicators[id eq '" + PERFORMANCE_SET_ID + "']/instances/uuid", subprocessObject, {})[0];

                var enddate = subprocessObject.dates.valid;

                library.lockPerformanceModel(entryUUID, enddate, uuid).then(function(data) {

                    var success = util.success('Lock performance model.', data);
                    resolve(success);


                }, function(error) {
                    reject(error);
                });






            });
        }

    }

})();

var sdo = (function() {

    return {

        create: function(_def, uuid, _WFInstance) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("follow");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());
                var sdoUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq 'SDO']/instances[1]/uuid", _WFInstance, {})[0];
                var action = {
                    "createSDO": {
                        "sdoUUID": sdoUUID
                    }

                };

                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('Worker processes successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });

        }

    }

})();

var taxonomy = (function() {

    return {

        create: function(_def, uuid, _WFInstance) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("follow");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());
                var taxonomyUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq 'Taxonomy']/instances[1]/uuid", _WFInstance, {})[0];
                
                var action = {
                    "createTaxonomy": {
                        "taxonomyUUID": taxonomyUUID
                    }

                };

                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('Worker processes successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });

        }

    }

})();

var subProcessInstance = (function() {

    return {

        setTitle: function(_def, uuid, dataValue, _WFInstance) {

            return new Promise(function(resolve, reject) {

                var spProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", app.SCOPE.workflow, {})[0];
                
                var processSPObject = JSON.xpath("/instance/processes/subProcesses[uuid eq '" + uuid + "']", app.SCOPE.workflow, {})[0];
                
                if(processSPObject != undefined){
                    processSPObject.label = dataValue;
                }
                
                spProcessObject.label = dataValue;

                var itemsToProcess = 1;
                var stuff = [];
                var obj = {};

                obj.model = _WFInstance.subprocesses;
                stuff.push(obj);
                var success = util.success('Subprocess setTitle success.', _WFInstance.subprocesses);
                resolve(success);
            });

        },

        setValidDate: function(_def, uuid, dataValue, _WFInstance) {

            return new Promise(function(resolve, reject) {

                var spProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", app.SCOPE.workflow, {})[0];
                spProcessObject.dates.valid = dataValue;

                var itemsToProcess = 1;
                var stuff = [];
                var obj = {};

                obj.model = spProcessObject;
                stuff.push(obj);

                var success = util.success('valid date set.', _WFInstance.subprocesses);
                resolve(success);
            });

        },

        setSPStatus: function(_def, uuid, dataValue, _WFInstance) {

            return new Promise(function(resolve, reject) {

                var spProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", app.SCOPE.workflow, {})[0];
                
                spProcessObject.spStatus = dataValue;

                var itemsToProcess = 1;
                var stuff = [];
                var obj = {};

                obj.model = _WFInstance.subprocesses;
                stuff.push(obj);
                var success = util.success('Subprocess spStatus success.', _WFInstance.subprocesses);
                resolve(success);
            });

        },

    }

})();

var variables = (function() {

    return {

        setVariable: function(setVariable, _WFInstance, uuid) {

            return new Promise(function(resolve, reject) {

                helper.getNodeValue(setVariable.data, _WFInstance, uuid).then(function(dataValue) {


                    var scope = setVariable.scope;
                    var variableName = setVariable.name;
                    var variableType = setVariable.variableType;

                    var validDate = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/dates/valid", _WFInstance, {})[0];
                    
                    switch (scope) {
                        case 'profile':

                            var profileId = _WFInstance.profile;
                            var profileVariableFileName = profileId + ':variables';
                            var txnPacket = app.SCOPE.txn;

                            dao.get(profileVariableFileName).then(function(file) {

                                var refPack = {};
                                var localProcess = function() {
                                    if (variableType == 'periodic') {

                                        // TODO: Overwrite the existing variable in case where same variable is assigned at multiple steps.

                                        //var processObj = JSON.xpath("/instance/processes[subProcesses/uuid eq '" + uuid + "']", _WFInstance, {})[0];
                                        //var seq = processObj.seq;
                                        
                                        
                                        //var seq = JSON.xpath("count(/subprocesses[_id eq '" + uuid + "']/preceding-sibling::node()[id = /subprocesses[_id eq '" + uuid + "']/id])", _WFInstance, {})[0] + 1;
                                        var subprocessType = JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '" + uuid + "']/id]/type", _WFInstance, {})[0];
                                        
                                        
                                        // var part = library.getSubprofileSubprocessIds();
                                        // if (subprocessType == PROCESS_TYPE_SUBPROFILE) {
                                        //     seq = JSON.xpath("count(/subprocesses[_id eq '" + uuid + "']/preceding-sibling::node()[id = /subprocesses[_id eq '" + uuid + "']/id and _id = /subprocesses[_id = " + part + "]/_id])", _WFInstance, {})[0] + 1;
                                        // }

                                        var seq = JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '" + uuid + "']/id])", _WFInstance, {})[0] + 1;
                                        if (subprocessType == PROCESS_TYPE_SUBPROFILE) {
                                            var part = library.getSubprofileSubprocessIds();
                                            seq = JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '" + uuid + "']/id and uuid = "+ part +"])", _WFInstance, {})[0] + 1;
                                        }

                                        var obj = {
                                            "subProcessUUID": uuid,
                                            "user": {
                                                "userName": _lclx.SUBSCRIPTIONS.username,
                                                "userId": _lclx.SUBSCRIPTIONS.userProfileId
                                            },
                                            "seq": seq,
                                            "validDate": validDate,
                                            "value": dataValue
                                        }

                                        if (file[variableName] != undefined) {
                                            var finalValue = file;
                                            var pathToElement = variableName == "" ? [] : variableName.split(/['"\[\].]+/);

                                            for (var k = 0; k < pathToElement.length; k++) {
                                                if(pathToElement[k] == "") continue;
                                                finalValue = finalValue[pathToElement[k]];
                                            }
                                            finalValue.push(obj);
                                            
                                        } else {
                                            file[variableName] = [obj];
                                        }

                                    } else {
                                        file[variableName] = dataValue;
                                    }

                                    dao.save(file).then(function(data) {
                                        refPack.rev = data.rev;
                                        resolve("Variable set successfully");
                                    }).catch(function(error) {
                                        reject("Failed to set Variable");
                                    });
                                };


                                var found = false;
                                for (var i = 0; i < txnPacket.documents.length; i++) {
                                    if (profileVariableFileName == txnPacket.documents[i].document) {
                                        refPack =  txnPacket.documents[i];
                                        found = true;
                                    }
                                }

                                if (!found) {
                                    txnPacket = JSON.parse(JSON.stringify(app.SCOPE.txn));
                                    txnPacket.documents = [];
                                    refPack = { "document": profileVariableFileName, "rev": (file._rev==undefined ? "0": file._rev) };
                                    txnPacket.documents.push(refPack);
                                    app.SCOPE.txn.documents.push(refPack);

                                    dao.updateTransaction(txnPacket).then(function(succ) {
                                        localProcess();
                                    }).catch(function(err) {
                                        console.log(err);
                                        if(err.responseJSON != undefined && err.responseJSON.message != undefined){
                                            reject(err.responseJSON.message);
                                        } else if(err.responseText != undefined) {
                                            reject(err.responseText);
                                        } else {
                                            reject(err);
                                        }
                                    });
                                } else {
                                    localProcess();
                                }




                            }).catch(function(error) {

                                var file = {
                                    "_id": profileVariableFileName
                                }
                                file.channels = app.profile.channels;

                                if (variableType == 'periodic') {
                                    //var processObj = JSON.xpath("/instance/processes[subProcesses/uuid eq '" + uuid + "']", _WFInstance, {})[0];
                                    //var seq = processObj.seq;
                                    
                                    
                                    //var seq = JSON.xpath("count(/subprocesses[_id eq '" + uuid + "']/preceding-sibling::node()[id = /subprocesses[_id eq '" + uuid + "']/id])", _WFInstance, {})[0] + 1;
                                    var subprocessType = JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '" + uuid + "']/id]/type", _WFInstance, {})[0];
                                    // var part = library.getSubprofileSubprocessIds();
                                    // if (subprocessType == PROCESS_TYPE_SUBPROFILE) {
                                    //     seq = JSON.xpath("count(/subprocesses[_id eq '" + uuid + "']/preceding-sibling::node()[id = /subprocesses[_id eq '" + uuid + "']/id and _id = /subprocesses[_id = " + part + "]/_id])", _WFInstance, {})[0] + 1;
                                    // }


                                    var seq = JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '" + uuid + "']/id])", _WFInstance, {})[0] + 1;
                                    if (subprocessType == PROCESS_TYPE_SUBPROFILE) {
                                        var part = library.getSubprofileSubprocessIds();
                                        seq = JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '" + uuid + "']/id and uuid = "+ part +"])", _WFInstance, {})[0] + 1;
                                    }




                                    file[variableName] = [{
                                        "subProcessUUID": uuid,
                                        "user": {
                                            "userName": _lclx.SUBSCRIPTIONS.username,
                                            "userId": _lclx.SUBSCRIPTIONS.userProfileId
                                        },
                                        "seq": seq,
                                        "validDate": validDate,
                                        "value": dataValue
                                    }];
                                } else {
                                    file[variableName] = dataValue;
                                }

                                var txnPacket = JSON.parse(JSON.stringify(app.SCOPE.txn));
                                txnPacket.documents = [];
                                var refPack = { "document": profileVariableFileName, "rev": (file._rev==undefined ? "0": file._rev)};
                                txnPacket.documents.push(refPack);
                                app.SCOPE.txn.documents.push(refPack);

                                dao.updateTransaction(txnPacket).then(function(succ) {
                                    dao.save(file).then(function(data) {
                                        refPack.rev = data.rev;
                                        resolve("Variable set successfully");
                                    }).catch(function(error) {
                                        reject("Failed to set Variable");
                                    });
                                }).catch(function(err) {
                                    console.log(err);
                                    if(err.responseJSON != undefined && err.responseJSON.message != undefined){
                                        reject(err.responseJSON.message);
                                    } else if(err.responseText != undefined) {
                                        reject(err.responseText);
                                    } else {
                                        reject(err);
                                    }
                                });

                                

                            });



                            break;
                        case 'subProcessInstance':

                            resolve("not implemented");

                            break;
                        case 'step':

                            resolve("not implemented");

                            break;


                        case 'subProfileSubProcessInstance':

                            var subProfileId = app.profile.subprofileId;
                            var subProfileVariableFileName = subProfileId + ':variables';
                            //update trxn
                            var txnPacket = app.SCOPE.txn;
                            dao.get(subProfileVariableFileName).then(function(file) {

                                ///
                                var refPack = {};
                                var localProcess = function() {
                                    if (variableType == 'periodic') {

                                        var part = library.getSubprofileSubprocessIds();
                                        
                                        // var seq = JSON.xpath("count(/subprocesses[_id eq '" + uuid + "']/preceding-sibling::node()[id = /subprocesses[_id eq '" + uuid + "']/id and _id = /subprocesses[_id = " + part + "]/_id])", _WFInstance, {})[0] + 1;

                                        var seq = JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '" + uuid + "']/id and uuid = "+ part +"])", _WFInstance, {})[0] + 1;
                                        
                                        var obj = {
                                            "subProcessUUID": uuid,
                                            "user": {
                                                "userName": _lclx.SUBSCRIPTIONS.username,
                                                "userId": _lclx.SUBSCRIPTIONS.userProfileId
                                            },
                                            "seq": seq,
                                            "validDate": validDate,
                                            "value": dataValue
                                        }

                                        if (file[variableName] != undefined) {
                                            var finalValue = file;
                                            var pathToElement = variableName == "" ? [] : variableName.split(/['"\[\].]+/);

                                            for (var k = 0; k < pathToElement.length; k++) {
                                                if(pathToElement[k] == "") continue;
                                                finalValue = finalValue[pathToElement[k]];
                                            }
                                            finalValue.push(obj);
                                            
                                        } else {
                                            file[variableName] = [obj];
                                        }

                                    } else {
                                        file[variableName] = dataValue;
                                    }

                                    dao.save(file).then(function(data) {
                                        refPack.rev = data.rev;
                                        resolve("Variable at subprofile set successfully");
                                    }).catch(function(error) {
                                        reject("Failed to set Variable at subprofile");
                                    });
                                };


                                var found = false;
                                for (var i = 0; i < txnPacket.documents.length; i++) {
                                    if (subProfileVariableFileName == txnPacket.documents[i].document) {
                                        refPack =  txnPacket.documents[i];
                                        found = true;
                                    }
                                }

                                if (!found) {
                                    txnPacket = JSON.parse(JSON.stringify(app.SCOPE.txn));
                                    txnPacket.documents = [];
                                    refPack = { "document": subProfileVariableFileName, "rev": (file._rev==undefined ? "0": file._rev) };
                                    txnPacket.documents.push(refPack);
                                    app.SCOPE.txn.documents.push(refPack);

                                    dao.updateTransaction(txnPacket).then(function(succ) {
                                        localProcess();
                                    }).catch(function(err) {
                                        console.log(err);
                                        if(err.responseJSON != undefined && err.responseJSON.message != undefined){
                                            reject(err.responseJSON.message);
                                        } else if(err.responseText != undefined) {
                                            reject(err.responseText);
                                        } else {
                                            reject(err);
                                        }
                                    });
                                } else {
                                    localProcess();
                                }




                            }).catch(function(error) {

                                var file = {
                                    "_id": subProfileVariableFileName
                                }
                                file.channels = app.profile.channels;

                                if (variableType == 'periodic') {
                                    //var processObj = JSON.xpath("/instance/processes[subProcesses/uuid eq '" + uuid + "']", _WFInstance, {})[0];
                                    //var seq = processObj.seq;

                                    //var seq = JSON.xpath("count(/subprocesses[_id eq '" + uuid + "']/preceding-sibling::node()[id = /subprocesses[_id eq '" + uuid + "']/id and id = /subprocesses[_id = /instance/processes/subProcesses[subprofileId eq '" + subProfileId + "']/uuid]/_id])", _WFInstance, {})[0] + 1;
                                    var part = library.getSubprofileSubprocessIds();
                                    var seq = JSON.xpath("count(/subprocesses[_id eq '" + uuid + "']/preceding-sibling::node()[id = /subprocesses[_id eq '" + uuid + "']/id and _id = /subprocesses[_id = " + part + "]/_id])", _WFInstance, {})[0] + 1;
                                    


                                    file[variableName] = [{
                                        "subProcessUUID": uuid,
                                        "user": {
                                            "userName": _lclx.SUBSCRIPTIONS.username,
                                            "userId": _lclx.SUBSCRIPTIONS.userProfileId
                                        },
                                        "seq": seq,
                                        "validDate": validDate,
                                        "value": dataValue
                                    }];
                                } else {
                                    file[variableName] = dataValue;
                                }

                                var txnPacket = JSON.parse(JSON.stringify(app.SCOPE.txn));
                                txnPacket.documents = [];
                                var refPack = { "document": subProfileVariableFileName, "rev": (file._rev==undefined ? "0": file._rev) };
                                txnPacket.documents.push(refPack);
                                app.SCOPE.txn.documents.push(refPack);

                                dao.updateTransaction(txnPacket).then(function(succ) {

                                    dao.save(file).then(function(data) {
                                        refPack.rev = data.rev;
                                        resolve("Variable at subprofile set successfully");
                                    }).catch(function(error) {
                                        reject("Failed to set Variable at subprofile");
                                    });

                                }).catch(function(err) {
                                    console.log(err);
                                    if(err.responseJSON != undefined && err.responseJSON.message != undefined){
                                        reject(err.responseJSON.message);
                                    } else if(err.responseText != undefined) {
                                        reject(err.responseText);
                                    } else {
                                        reject(err);
                                    }
                                });


                            });

                            break;
                        default:
                            break;
                    }

                }, function(err) {
                    reject("getNodeValue value not found.");
                });



            });

        }

    }

})();

var notification = (function() {

    return {

        sendNotificationWorker: function(notification, _WFInstance, uuid) {

            return new Promise(function(resolve, reject) {

                    var _this = this;

                    var getRecipients = function(notification) {

                        return new Promise(function(resolve, reject) {
                            var recipients = {};
                            if (notification.recipients.role != undefined) {

                                recipients.role = notification.recipients.role;
                                resolve(recipients);

                            } else if (notification.recipients.profileRole != undefined) {

                                recipients.profileRole = {};
                                recipients.profileRole.role = notification.recipients.profileRole.role;
                                recipients.profileRole.profile = notification.recipients.profileRole.profile;
                                resolve(recipients);

                            } else if (notification.recipients.subProfileRole != undefined) {

                                recipients.subProfileRole = {};
                                recipients.subProfileRole.role = notification.recipients.subProfileRole.role;
                                recipients.subProfileRole.subProfileCategory = notification.recipients.subProfileRole.subProfileCategory;
                                recipients.subProfileRole.profile = notification.recipients.subProfileRole.profile;
                                resolve(recipients);

                            } else if (notification.recipients.function != undefined) {

                                recipients.function = {};
                                recipients.function.users = {};

                                helper.getNodeValue(notification.recipients.function.users, _WFInstance, uuid).then(function(dataValue) {

                                    recipients.function.users = dataValue;
                                    resolve(recipients);

                                }, function(err) {
                                    rej(err);
                                });
                            } else if (notification.recipients.stepAssignee != undefined) {

                                recipients.stepAssignee = {};
                                recipients.stepAssignee.role = notification.recipients.stepAssignee.role;
                                resolve(recipients);

                            } else if (notification.recipients.stepAssigneeFromStep != undefined) {

                                recipients.stepAssigneeFromStep = {};
                                var stepId = notification.recipients.stepAssigneeFromStep.stepId;
                                recipients.stepAssigneeFromStep.stepId = stepId;
                                // calcukate
                                var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                                var historyObject = {};
                                for(var i = 0; i < subProcessObject.history.length; i++){
                                    if(subProcessObject.history[i].id == stepId){
                                        historyObject = subProcessObject.history[i];
                                    }
                                }
                                
                                if(historyObject.assignmentHistory != undefined && historyObject.assignmentHistory.length > 0){
                                    var obj = historyObject.assignmentHistory[historyObject.assignmentHistory.length - 1];
                                    recipients.stepAssigneeFromStep.userId = obj.userId;
                                }
                                resolve(recipients);

                            } else if (notification.recipients.indicator != undefined) {

                                recipients.indicator = {};
                                
                                var indicatorSetId = notification.recipients.indicator.indicatorSetId;
                                var elementId = notification.recipients.indicator.elementId;
                                var indicatorUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + indicatorSetId + "']/instances/uuid", _WFInstance, {})[0];
                                var indObject = JSON.xpath("/indicators[_id eq '" + indicatorUUID + "']", _WFInstance, {})[0];
                                var xpath = '/model/pending/data/' + indicatorSetId + '/' + elementId;
                                var retValue = JSON.xpath(xpath, indObject, {})[0];

                                recipients.indicator.userId = retValue;
                                resolve(recipients);

                            }

                        });
                    }
                    var proceed = function(subProcessObject,subprofileId){
                        action.notification.keys.subProcess.name = subProcessObject.label;
                        action.notification.keys.subProcess.id = uuid;
                        action.notification.keys.subProcess.validDate = subProcessObject.dates.valid;
                        action.notification.keys.subProcess.dueDate = subProcessObject.dates.due;
    
                        try{
                            
                            var stepObject = subProcessObject.step;
                            action.notification.keys.step.stepCreatedDateTime = stepObject.dateTimeCreated;
                            action.notification.keys.step.stepId = stepObject.id;
    
                            var stepConfigObject = JSON.xpath("/processes/subProcesses[_id eq '" + subProcessObject.id + "']/steps[_id eq '" + stepObject.id + "']", app.SCOPE.workflow.config, {})[0];
                            
                            action.notification.keys.step.stepName = app.getNameByLang(stepConfigObject.name);
    
                        } catch(e){
    
                        }
                        var nodeTitle = JSON.xpath("/indicators[_id eq '" + subprofileId + "']/title", app.SCOPE.workflow, {})[0];
    
                    
    
    
                        if (nodeTitle == undefined) {
                            action.notification.keys.node.title = "";
                        } else {
                            action.notification.keys.node.title = nodeTitle;
                        }
                        /**
                        * 
                        Worker message 
                        */
                        action.notification.message.default = notification.message.default;
                        action.notification.message.title = notification.message.title;
    
                        if (notification.message.rtf != undefined) {
                            action.notification.message.rtf = {};
                            if (notification.message.rtf.template != undefined) {
                                action.notification.message.rtf.template = notification.message.rtf.template;
                            } else if (notification.message.rtf.markup != undefined) {
                                action.notification.message.rtf.markup = notification.message.rtf.markup;
                            }
                        }
                        /**
                        * 
                        Worker messageType 
                        */
                        action.notification.messageType = notification.messageType;
                        /**
                        * 
                        Worker notificationType 
                        */
                        action.notification.notificationType = notification.notificationType;
                        /**
                        * 
                        Worker priority 
                        */
                        action.notification.priority = notification.priority;
                        /**
                        * 
                        Worker notificationAction if exists 
                        */
    
                        if (notification.notificationAction != undefined) {
    
                            action.notification.notificationAction = {};
                            action.notification.notificationAction.label = notification.notificationAction.label;
                            if (notification.notificationAction.action.URI != undefined) {
    
                                action.notification.notificationAction.action = {};
                                action.notification.notificationAction.action.URI = notification.notificationAction.action.URI;
    
                            } else if (notification.notificationAction.action.goto != undefined) {
    
                                action.notification.notificationAction.action = {};
                                action.notification.notificationAction.action.goto = notification.notificationAction.action.goto;
    
                            }
                        }
    
                        if (notification.schedule != undefined) {
    
                            var executeObject = notification.schedule.executeCommand;
    
                            var workerSchedule = {
                                dateTime: "",
                                unit: "",
                                factor: ""
                            }
    
                            if (executeObject.now != undefined) {
    
                                workerSchedule.dateTime = moment().format();
    
    
                            } else if (executeObject.exact != undefined) {
    
                                workerSchedule.dateTime = executeObject.exact.dateTime;
    
                            } else if (executeObject.dueDate != undefined) {
    
                                var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                                var calculatedDateTime = "";
                                var dueDate = subProcessObject.dates.due;
    
                                if (dueDate != "") {
                                    calculatedDateTime = moment(dueDate, "YYYY-MM-DD");
                                } else {
                                    calculatedDateTime = moment().format();
                                }
    
                                workerSchedule.dateTime = calculatedDateTime;
                                workerSchedule.factor = executeObject.dueDate.factor;
                                workerSchedule.unit = executeObject.dueDate.unit;
    
                            } else if (executeObject.validDate != undefined) {
    
                                var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                                var calculatedDateTime = "";
                                var dueDate = subProcessObject.dates.valid;
    
                                if (validDate != "") {
                                    calculatedDateTime = moment(validDate, "YYYY-MM-DD");
                                } else {
                                    calculatedDateTime = moment().format();
                                }
    
                                workerSchedule.dateTime = calculatedDateTime;
                                workerSchedule.factor = executeObject.validDate.factor;
                                workerSchedule.unit = executeObject.validDate.unit;
    
                            } else if (executeObject.stepCreatedDate != undefined) {
    
                                var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                                
                                var calculatedDateTime = "";
                                var stepCreatedDateTime = subProcessObject.step.dueDateTime;
    
                                if (stepCreatedDateTime != "") {
                                    calculatedDateTime = moment(stepCreatedDateTime).format();
                                } else {
                                    calculatedDateTime = moment().format();
                                }
    
                                workerSchedule.dateTime = calculatedDateTime;
                                workerSchedule.factor = executeObject.stepCreatedDate.factor;
                                workerSchedule.unit = executeObject.stepCreatedDate.unit;
    
    
                            } else {
    
                                workerSchedule.dateTime = moment().format();
    
                            }
    
                            workerObject.setSchedule(workerSchedule);
    
                        }
                        
                
                        /**
                        * 
                        Worker recipients
                        */
    
    
                        if(typeof notification === "string"){
    
    
                            dao.getConfig(notification).then(function(notiObject){
                                notification = assignmentObject;
                                
                                getRecipients(notification).then(function(recipient) {
                                    action.notification.recipients = recipient;
                                    workerObject.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button.");
                                    workerObject.setAction(action);
                                    var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                                
                                    workerObject.setContext({
                                        step: {
                                            stepDateTime: subProcessObject.step.dateTimeCreated
                                        }
                                    });
                                    workerObject.send().then(function(workerSuccess) {
                                        console.log(workerObject);
                                        var success = util.success('Notification Worker processes successfully.', workerSuccess);
                                        resolve(success);
                
                                    }, function(workerFail) {
                                        resolve(workerFail);
                                    });
                
                
                                }).catch(function(err) {
                
                                    console.log("Notification - getRecipients failed with error " + err);
                                    reject(err);
                
                
                                });
                            
                                    
                        
                            }).catch(function(fail){
                                resolve(fail);
                            })
    
    
    
                        } else {
                            getRecipients(notification).then(function(recipient) {
                                action.notification.recipients = recipient;
                                workerObject.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button.");
                                workerObject.setAction(action);
                                var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                            
                                workerObject.setContext({
                                    step: {
                                        stepDateTime: subProcessObject.step.dateTimeCreated
                                    }
                                });
                                workerObject.send().then(function(workerSuccess) {
                                    console.log(workerObject);
                                    var success = util.success('Notification Worker processes successfully.', workerSuccess);
                                    resolve(success);
            
                                }, function(workerFail) {
                                    resolve(workerFail);
                                });
            
            
                            }).catch(function(err) {
            
                                console.log("Notification - getRecipients failed with error " + err);
                                reject(err);
            
            
                            });
                        }
                    
                    }

                    var changeTaxFunction = function(ar, i,subProcessObject,subprofileId){

                        if(ar.length == i){
                            proceed(subProcessObject,subprofileId);
                        } else {
                            var k = ar[i];
                            if(k.field !="" && k.repStr != "" && k.setId !=""){

                                var indicatorVersion = "1";
                                app.SCOPE.APP_CONFIG.indicators.forEach(function(appConfigInd){
                                    if(appConfigInd.setId == k.setId){
                                        indicatorVersion = appConfigInd.version;
                                    }
                                });

                                dao.getTaxonomy("Field_Indicator_"+ k.setId +":"+ indicatorVersion).then(function(fieldIndTax){

                                    var fieldObject = {};
                                    var matchingKey = k.field;
                                    fieldIndTax.data.items.item.forEach(function(fo){
                                        if(fo.code == matchingKey){
                                            fieldObject = fo
                                        }
                                    })

                                    var indObject = {};
                                    _WFInstance.indicators.forEach(function(spInd){
                                        if(spInd.category.term == k.setId){
                                            indObject = spInd
                                        }
                                    })
                                    var value = "";
                                    
                                    
                                    if(k.field.indexOf(".")>-1){
                                        var field1 = k.field.split(".")[0];
                                        var field2 = k.field.split(".")[1];
                                        
                                        if(indObject.model != undefined && 
                                            indObject.model.pending != undefined &&
                                            indObject.model.pending.data !=undefined && 
                                            indObject.model.pending.data[k.setId] !=undefined &&
                                            indObject.model.pending.data[k.setId][field1]!=undefined && 
                                            indObject.model.pending.data[k.setId][field1][field2]!=undefined){
                                                value = indObject.model.pending.data[k.setId][field1][field2]
                                        }

                                    } else {

                                        if(indObject.model != undefined && 
                                            indObject.model.pending != undefined &&
                                            indObject.model.pending.data !=undefined && 
                                            indObject.model.pending.data[k.setId] !=undefined &&
                                            indObject.model.pending.data[k.setId][k.field]!=undefined){
                                                value = indObject.model.pending.data[k.setId][k.field]
                                        }

                                    }
                                
                                    if(fieldObject.datatype != null && fieldObject.datatype != undefined 
                                        && fieldObject.datatype !="" && fieldObject.datatype == "currency"){
                                            value = currencySymbol + " "+ numberWithCommas(value)
                                    }

                                    action.notification.keys.userDefined.push({
                                        "key":"#"+k.repStr+"#",
                                        "value": value
                                    })

                                    changeTaxFunction(ar, i+1,subProcessObject,subprofileId);

                                }).catch(function(err){
                                    console.log("Notification error: Error fetching Field Indicator taxonomy");
                                })   
                            }


                        }
                    }

                

                    var workerObject = new NotificatioWorker(app);

                    var subProfileId = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/meta-data/subprofileId", _WFInstance, {})[0];
                    
                    // var pathArray = window.location.pathname.split('/');
                    var baseURL = DOMAIN.replace("exist/rest",""); 
                    //window.location.protocol + "//" + window.location.host + "/" + pathArray[1];


                    var subprofileId = "";
                    if (app.profile != undefined && app.profile.subprofileId != undefined) {
                        subprofileId = app.profile.subprofileId;
                    }


                    var action = {
                        "notification": {
                            "message": {

                            },
                            "messageType": "",
                            "meta-data": {
                                "applicationId": _WFInstance.app,
                                "communityId": _WFInstance.communityId,
                                "profileId": _WFInstance.profile,
                                "subProcessUUID": uuid,
                                "subProfileId": subProfileId
                            },
                            "notificationType": "",
                            "subprofileId": subprofileId,
                            "priority": "",
                            "recipients": {

                            },
                            "url": baseURL,
                            "keys": {
                                "profile": {
                                    "name": "",
                                    "id": ""
                                },
                                "community": {
                                    "name": "",
                                    "id": ""
                                },
                                "application": {
                                    "name": "",
                                    "id": ""
                                },
                                "currentUser": {
                                    "name": "",
                                    "id": ""
                                },
                                "subProcess": {
                                    "name": "",
                                    "id": "",
                                    "validDate": "",
                                    "dueDate": ""
                                },
                                "notification": {
                                    "createdDateTime": moment().format()
                                },
                                "step": {
                                    "stepCreatedDateTime": "",
                                    "stepName": "",
                                    "stepId": ""
                                },
                                "node": {
                                    "title": ""
                                },
                                "userDefined":[]
                            }
                        }
                    };

                    /**
                    * 
                    Keys message 
                    */




                    var indicatorTitle = JSON.xpath("/indicators[_id eq '" + app.profile._id + "']/title", _WFInstance, {})[0];
                    
                
                    action.notification.keys.profile.name = indicatorTitle;

                    action.notification.keys.profile.id = app.profile._id;

                    action.notification.keys.community.name = app.getNameByLang(_lclx.COMMUNITY_CONFIG.communityName);
                    action.notification.keys.community.id = _lclx.COMMUNITY_CONFIG.communityId;

                    var application = JSON.xpath("/applications[appId eq '" + app.SCOPE.applicationId + "']", _lclx.COMMUNITY_CONFIG, {})[0];

                    action.notification.keys.application.name = app.getNameByLang(application.name);
                    action.notification.keys.application.id = application.appId;

                    action.notification.keys.currentUser.name = _lclx.SESSION.firstName + " " + _lclx.SESSION.lastName;
                    action.notification.keys.currentUser.id = _lclx.SUBSCRIPTIONS.userId;

                    var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                    

                    var currencySymbol = "";

                    if(_lclx.COMMUNITY_CONFIG.settings != undefined 
                        && _lclx.COMMUNITY_CONFIG.settings.currencySymbol != undefined)
                    {
                        currencySymbol = _lclx.COMMUNITY_CONFIG.settings.currencySymbol;
                    }
                    else{
                        currencySymbol = "";
                    }

                    
                    

                    if(notification.sdoKeys != undefined){
                        changeTaxFunction(notification.sdoKeys, 0,subProcessObject,subprofileId);
                    } else {
                        resolve();
                    }

                   
                
                    

            });

        },


        reAssignmentNotification: function(notification, _WFInstance, uuid, user) {

            return new Promise(function(resolve, reject) {


                var getRecipients = function(userObj) {

                    return new Promise(function(resolve, reject) {
                        var recipients = {};
                        recipients.function = {};
                        recipients.function.users = {};
                        recipients.function.users = userObj.id;
                        resolve(recipients);
                    });
                }


                var workerObject = new NotificatioWorker(app);

                var subProfileId = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/meta-data/subprofileId", _WFInstance, {})[0];
                // var pathArray = window.location.pathname.split('/');
                var baseURL = DOMAIN.replace("exist/rest","");
                //window.location.protocol + "//" + window.location.host + "/" + pathArray[1];


                var action = {
                    "notification": {
                        "message": {
                            "rtf": {

                            }
                        },
                        "messageType": "",
                        "meta-data": {
                            "applicationId": _WFInstance.app,
                            "communityId": _WFInstance.communityId,
                            "profileId": _WFInstance.profile,
                            "subProcessUUID": uuid,
                            "subProfileId": subProfileId
                        },
                        "notificationType": "workflow",
                        "priority": "",
                        "recipients": {

                        },
                        "url": baseURL,
                        "keys": {
                            "profile": {
                                "name": "",
                                "id": ""
                            },
                            "community": {
                                "name": "",
                                "id": ""
                            },
                            "application": {
                                "name": "",
                                "id": ""
                            },
                            "currentUser": {
                                "name": "",
                                "id": ""
                            },
                            "subProcess": {
                                "name": "",
                                "id": "",
                                "validDate": "",
                                "dueDate": ""
                            },
                            "notification": {
                                "createdDateTime": moment().format()
                            },
                            "step": {
                                "stepCreatedDateTime": "",
                                "stepName": "",
                                "stepId": ""
                            },
                            "node": {
                                "title": ""
                            },
                            "userDefined":[]
                        }
                    }
                };


                /**
                * 
                Keys message 
                */


                

                var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];

                if(notification.reAssignment.sdoKeys != undefined){
                    notification.reAssignment.sdoKeys.forEach(function(k){

                        if(k.field !="" && k.repStr != "" && k.setId !=""){

                            var indObject = {};
                            _WFInstance.indicators.forEach(function(spInd){
                                if(spInd.category.term == k.setId){
                                    indObject = spInd
                                }
                            })

                            var value = "";

                            if(k.field.indexOf(".")>-1){
                                var field1 = k.field.split(".")[0];
                                var field2 = k.field.split(".")[1];
                                
                                if(indObject.model != undefined && 
                                    indObject.model.pending != undefined &&
                                    indObject.model.pending.data !=undefined && 
                                    indObject.model.pending.data[k.setId] !=undefined &&
                                    indObject.model.pending.data[k.setId][field1]!=undefined && 
                                    indObject.model.pending.data[k.setId][field1][field2]!=undefined){
                                        value = indObject.model.pending.data[k.setId][field1][field2]
                                }

                            } else {

                                if(indObject.model != undefined && 
                                    indObject.model.pending != undefined &&
                                    indObject.model.pending.data !=undefined && 
                                    indObject.model.pending.data[k.setId] !=undefined &&
                                    indObject.model.pending.data[k.setId][k.field]!=undefined){
                                        value = indObject.model.pending.data[k.setId][k.field]
                                }

                            }


                           
                        
                            action.notification.keys.userDefined.push({
                                "key":"#"+k.repStr+"#",
                                "value": value
                            })
                            
                        }

                        
                    });
                }
                

                var indicatorTitle = JSON.xpath("/indicators[_id eq '" + app.profile._id + "']/title", _WFInstance, {})[0];

                // aadd keys values here

                action.notification.keys.profile.name = indicatorTitle;
                action.notification.keys.profile.id = app.profile._id;

                action.notification.keys.community.name = app.getNameByLang(_lclx.COMMUNITY_CONFIG.communityName);
                action.notification.keys.community.id = _lclx.COMMUNITY_CONFIG.communityId;

                var application = JSON.xpath("/applications[appId eq '" + app.SCOPE.applicationId + "']", _lclx.COMMUNITY_CONFIG, {})[0];

                action.notification.keys.application.name = app.getNameByLang(application.name);
                action.notification.keys.application.id = application.appId;

                action.notification.keys.currentUser.name = _lclx.SESSION.firstName + " " + _lclx.SESSION.lastName;
                action.notification.keys.currentUser.id = _lclx.SUBSCRIPTIONS.userId;


                action.notification.keys.subProcess.name = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/label", _WFInstance, {})[0];
                
                action.notification.keys.subProcess.id = uuid;

                action.notification.keys.subProcess.validDate = subProcessObject.dates.valid;
                action.notification.keys.subProcess.dueDate = subProcessObject.dates.due;

                var stepObject = subProcessObject.step;
                action.notification.keys.step.stepCreatedDateTime = stepObject.dateTimeCreated;
                action.notification.keys.step.stepId = stepObject.id;

                var stepConfigObject = JSON.xpath("/processes/subProcesses[_id eq '" + subProcessObject.id + "']/steps[_id eq '" + stepObject.id + "']", app.SCOPE.workflow.config, {})[0];
                
                action.notification.keys.step.stepName = app.getNameByLang(stepConfigObject.name);

                var nodeTitle = JSON.xpath("/indicators[_id eq '" + subProfileId + "']/title", app.SCOPE.workflow, {})[0];




                if (nodeTitle == undefined) {
                    action.notification.keys.node.title = "";
                } else {
                    action.notification.keys.node.title = nodeTitle;
                }

                /**
                * 
                Worker message 
                */
                action.notification.message.default = "";
                action.notification.message.title = notification.reAssignment.title;

                action.notification.message = notification.reAssignment.message;
                /**
                * 
                Worker messageType 
                */
                action.notification.messageType = notification.reAssignment.messageType;


                /**
                * 
                Worker priority 
                */
                action.notification.priority = notification.reAssignment.priority;
                /**
                * 
                Worker notificationAction if exists 
                */

                if (notification.reAssignment.notificationAction != undefined) {

                    action.notification.notificationAction = {};
                    action.notification.notificationAction.label = notification.reAssignment.notificationAction.label;
                    if (notification.reAssignment.notificationAction.action.URI != undefined) {

                        action.notification.notificationAction.action = {};
                        action.notification.notificationAction.action.URI = notification.reAssignment.notificationAction.action.URI;

                    } else if (notification.reAssignment.notificationAction.action.goto != undefined) {

                        action.notification.notificationAction.action = {};
                        action.notification.notificationAction.action.goto = notification.reAssignment.notificationAction.action.goto;

                    }
                }


                if (notification.reAssignment.schedule != undefined) {

                    var executeObject = notification.reAssignment.schedule.executeCommand;

                    var workerSchedule = {
                        dateTime: "",
                        unit: "",
                        factor: ""
                    }

                    if (executeObject.now != undefined) {

                        workerSchedule.dateTime = moment().format();


                    } else if (executeObject.exact != undefined) {

                        workerSchedule.dateTime = executeObject.exact.dateTime;

                    } else if (executeObject.dueDate != undefined) {

                        
                       
                        var calculatedDateTime = "";
                        var dueDate = subProcessObject.dates.due;

                        if (dueDate != "") {
                            calculatedDateTime = moment(dueDate, "YYYY-MM-DD");
                        } else {
                            calculatedDateTime = moment().format();
                        }

                        workerSchedule.dateTime = calculatedDateTime;
                        workerSchedule.factor = executeObject.dueDate.factor;
                        workerSchedule.unit = executeObject.dueDate.unit;

                    } else if (executeObject.validDate != undefined) {

                        var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                        
                        var calculatedDateTime = "";
                        var dueDate = subProcessObject.dates.valid;

                        if (validDate != "") {
                            calculatedDateTime = moment(validDate, "YYYY-MM-DD");
                        } else {
                            calculatedDateTime = moment().format();
                        }

                        workerSchedule.dateTime = calculatedDateTime;
                        workerSchedule.factor = executeObject.validDate.factor;
                        workerSchedule.unit = executeObject.validDate.unit;

                    } else if (executeObject.stepCreatedDate != undefined) {

                        var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                        
                        var calculatedDateTime = "";
                        var stepCreatedDateTime = subProcessObject.step.dueDateTime;

                        if (stepCreatedDateTime != "") {
                            calculatedDateTime = moment(stepCreatedDateTime).format();
                        } else {
                            calculatedDateTime = moment().format();
                        }

                        workerSchedule.dateTime = calculatedDateTime;
                        workerSchedule.factor = executeObject.stepCreatedDate.factor;
                        workerSchedule.unit = executeObject.stepCreatedDate.unit;


                    } else {

                        workerSchedule.dateTime = moment().format();

                    }

                    workerObject.setSchedule(workerSchedule);

                }
                /**
                * 
                Worker recipients
                */

                getRecipients(user).then(function(recipient) {
                    action.notification.recipients = recipient;
                    workerObject.setAction(action);
                    workerObject.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button.");
                    workerObject.send().then(function(workerSuccess) {

                        var success = util.success('Notification Worker processes successfully for reassignment.', workerSuccess);
                        resolve(success);

                    }, function(workerFail) {
                        resolve(workerFail);
                    });


                }).catch(function(err) {

                    console.log("Notification - getRecipients failed with error " + err);
                    reject(err);


                });

            });

        },

        assignmentNotification: function(notification, _WFInstance, uuid, user) {

            return new Promise(function(resolve, reject) {


                var getRecipients = function(userObj) {

                    return new Promise(function(resolve, reject) {
                        var recipients = {};
                        recipients.function = {};
                        recipients.function.users = {};
                        recipients.function.users = userObj.id;
                        resolve(recipients);
                    });
                }

                var workerObject = new NotificatioWorker(app);


                var subProfileId = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/meta-data/subprofileId", _WFInstance, {})[0];
                
                // var pathArray = window.location.pathname.split('/');
                var baseURL = DOMAIN.replace("exist/rest","");
                //window.location.protocol + "//" + window.location.host + "/" + pathArray[1];


                var action = {
                    "notification": {
                        "message": {
                            "rtf": {

                            }
                        },
                        "messageType": "",
                        "meta-data": {
                            "applicationId": _WFInstance.app,
                            "communityId": _WFInstance.communityId,
                            "profileId": _WFInstance.profile,
                            "subProcessUUID": uuid,
                            "subProfileId": subProfileId
                        },
                        "notificationType": "workflow",
                        "priority": "",
                        "recipients": {

                        },
                        "url": baseURL,
                        "keys": {
                            "profile": {
                                "name": "",
                                "id": ""
                            },
                            "community": {
                                "name": "",
                                "id": ""
                            },
                            "application": {
                                "name": "",
                                "id": ""
                            },
                            "currentUser": {
                                "name": "",
                                "id": ""
                            },
                            "subProcess": {
                                "name": "",
                                "id": "",
                                "validDate": "",
                                "dueDate": ""
                            },
                            "notification": {
                                "createdDateTime": moment().format()
                            },
                            "step": {
                                "stepCreatedDateTime": "",
                                "stepName": "",
                                "stepId": ""
                            },
                            "node": {
                                "title": ""
                            },
                            "userDefined": []
                        }
                    }
                };

                /**
                * 
                Keys message 
                */

                var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];

                if(notification.assignment.sdoKeys != undefined){

                    notification.assignment.sdoKeys.forEach(function(k){

                        if(k.field !="" && k.repStr != "" && k.setId !=""){

                            var indObject = {};
                            _WFInstance.indicators.forEach(function(spInd){
                                if(spInd.category.term == k.setId){
                                    indObject = spInd
                                }
                            })
                            var value = ""
                            

                            if(k.field.indexOf(".")>-1){
                                var field1 = k.field.split(".")[0];
                                var field2 = k.field.split(".")[1];
                                
                                if(indObject.model != undefined && 
                                    indObject.model.pending != undefined &&
                                    indObject.model.pending.data !=undefined && 
                                    indObject.model.pending.data[k.setId] !=undefined &&
                                    indObject.model.pending.data[k.setId][field1]!=undefined && 
                                    indObject.model.pending.data[k.setId][field1][field2]!=undefined){
                                        value = indObject.model.pending.data[k.setId][field1][field2]
                                }

                            } else {

                                if(indObject.model != undefined && 
                                    indObject.model.pending != undefined &&
                                    indObject.model.pending.data !=undefined && 
                                    indObject.model.pending.data[k.setId] !=undefined &&
                                    indObject.model.pending.data[k.setId][k.field]!=undefined){
                                        value = indObject.model.pending.data[k.setId][k.field]
                                }

                            }

                            
                        
                            action.notification.keys.userDefined.push({
                                "key":"#"+k.repStr+"#",
                                "value": value
                            })
                            
                        }
                        


                    });
                }


                var indicatorTitle = JSON.xpath("/indicators[_id eq '" + app.profile._id + "']/title", _WFInstance, {})[0];


                action.notification.keys.profile.name = indicatorTitle;
                action.notification.keys.profile.id = app.profile._id;

                action.notification.keys.community.name = app.getNameByLang(_lclx.COMMUNITY_CONFIG.communityName);
                action.notification.keys.community.id = _lclx.COMMUNITY_CONFIG.communityId;

                var application = JSON.xpath("/applications[appId eq '" + app.SCOPE.applicationId + "']", _lclx.COMMUNITY_CONFIG, {})[0];

                action.notification.keys.application.name = app.getNameByLang(application.name);
                action.notification.keys.application.id = application.appId;

                action.notification.keys.currentUser.name = _lclx.SESSION.firstName + " " + _lclx.SESSION.lastName;
                action.notification.keys.currentUser.id = _lclx.SUBSCRIPTIONS.userId;


                action.notification.keys.subProcess.name = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/label", _WFInstance, {})[0];
                
                action.notification.keys.subProcess.id = uuid;

                action.notification.keys.subProcess.validDate = subProcessObject.dates.valid;
                action.notification.keys.subProcess.dueDate = subProcessObject.dates.due;

                var stepObject = subProcessObject.step;
                action.notification.keys.step.stepCreatedDateTime = stepObject.dateTimeCreated;
                action.notification.keys.step.stepId = stepObject.id;

                var stepConfigObject = JSON.xpath("/processes/subProcesses[_id eq '" + subProcessObject.id + "']/steps[_id eq '" + stepObject.id + "']", app.SCOPE.workflow.config, {})[0];
               
                action.notification.keys.step.stepName = app.getNameByLang(stepConfigObject.name);

                var nodeTitle = JSON.xpath("/indicators[_id eq '" + subProfileId + "']/title", app.SCOPE.workflow, {})[0];
                if (nodeTitle == undefined) {
                    action.notification.keys.node.title = "";
                } else {
                    action.notification.keys.node.title = nodeTitle;
                }

                /**
                * 
                Worker message 
                */
                action.notification.message.default = "";
                action.notification.message.title = notification.assignment.title;

                action.notification.message = notification.assignment.message;
                /**
                * 
                Worker messageType 
                */
                action.notification.messageType = notification.assignment.messageType;


                /**
                * 
                Worker priority 
                */
                action.notification.priority = notification.assignment.priority;
                /**
                * 
                Worker notificationAction if exists 
                */

                if (notification.assignment.notificationAction != undefined) {

                    action.notification.notificationAction = {};
                    action.notification.notificationAction.label = notification.assignment.notificationAction.label;
                    if (notification.assignment.notificationAction.action.URI != undefined) {

                        action.notification.notificationAction.action = {};
                        action.notification.notificationAction.action.URI = notification.assignment.notificationAction.action.URI;

                    } else if (notification.assignment.notificationAction.action.goto != undefined) {

                        action.notification.notificationAction.action = {};
                        action.notification.notificationAction.action.goto = notification.assignment.notificationAction.action.goto;

                    }
                }

                if (notification.assignment.schedule != undefined) {

                    var executeObject = notification.assignment.schedule.executeCommand;

                    var workerSchedule = {
                        dateTime: "",
                        unit: "",
                        factor: ""
                    }

                    if (executeObject.now != undefined) {

                        workerSchedule.dateTime = moment().format();


                    } else if (executeObject.exact != undefined) {

                        workerSchedule.dateTime = executeObject.exact.dateTime;

                    } else if (executeObject.dueDate != undefined) {

                        
                        
                        var calculatedDateTime = "";
                        var dueDate = subProcessObject.dates.due;

                        if (dueDate != "") {
                            calculatedDateTime = moment(dueDate, "YYYY-MM-DD");
                        } else {
                            calculatedDateTime = moment().format();
                        }

                        workerSchedule.dateTime = calculatedDateTime;
                        workerSchedule.factor = executeObject.dueDate.factor;
                        workerSchedule.unit = executeObject.dueDate.unit;

                    } else if (executeObject.validDate != undefined) {

                        var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                        
                        var calculatedDateTime = "";
                        var dueDate = subProcessObject.dates.valid;

                        if (validDate != "") {
                            calculatedDateTime = moment(validDate, "YYYY-MM-DD");
                        } else {
                            calculatedDateTime = moment().format();
                        }

                        workerSchedule.dateTime = calculatedDateTime;
                        workerSchedule.factor = executeObject.validDate.factor;
                        workerSchedule.unit = executeObject.validDate.unit;

                    } else if (executeObject.stepCreatedDate != undefined) {

                        var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                        
                        var calculatedDateTime = "";
                        var stepCreatedDateTime = subProcessObject.step.dueDateTime;

                        if (stepCreatedDateTime != "") {
                            calculatedDateTime = moment(stepCreatedDateTime).format();
                        } else {
                            calculatedDateTime = moment().format();
                        }

                        workerSchedule.dateTime = calculatedDateTime;
                        workerSchedule.factor = executeObject.stepCreatedDate.factor;
                        workerSchedule.unit = executeObject.stepCreatedDate.unit;


                    } else {

                        workerSchedule.dateTime = moment().format();

                    }

                    workerObject.setSchedule(workerSchedule);

                }

                /**
                * 
                Worker recipients
                */

                getRecipients(user).then(function(recipient) {
                    action.notification.recipients = recipient;
                    workerObject.setAction(action);
                    workerObject.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button.");
                    workerObject.send().then(function(workerSuccess) {
                        console.log(workerObject);
                        var success = util.success('Notification Worker processes successfully for assignment.', workerSuccess);
                        resolve(success);

                    }, function(workerFail) {
                        resolve(workerFail);
                    });


                }).catch(function(err) {

                    console.log("Notification - getRecipients failed with error " + err);
                    reject(err);


                });

            });

        },

        acceptanceNotification: function(notification, _WFInstance, uuid, role) {

            return new Promise(function(resolve, reject) {


                var getRoles = function(role) {

                    return new Promise(function(resolve, reject) {
                        var recipients = {};
                        recipients.role = role;
                        resolve(recipients);
                    });
                }

                var workerObject = new NotificatioWorker(app);


                var subProfileId = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/meta-data/subprofileId", _WFInstance, {})[0];
               
                // var pathArray = window.location.pathname.split('/');
                var baseURL = DOMAIN.replace("exist/rest","");
                //window.location.protocol + "//" + window.location.host + "/" + pathArray[1];


                var action = {
                    "notification": {
                        "message": {
                            "rtf": {

                            }
                        },
                        "messageType": "",
                        "meta-data": {
                            "applicationId": _WFInstance.app,
                            "communityId": _WFInstance.communityId,
                            "profileId": _WFInstance.profile,
                            "subProcessUUID": uuid,
                            "subProfileId": subProfileId
                        },
                        "notificationType": "workflow",
                        "priority": "",
                        "recipients": {

                        },
                        "url": baseURL,
                        "keys": {
                            "profile": {
                                "name": "",
                                "id": ""
                            },
                            "community": {
                                "name": "",
                                "id": ""
                            },
                            "application": {
                                "name": "",
                                "id": ""
                            },
                            "currentUser": {
                                "name": "",
                                "id": ""
                            },
                            "subProcess": {
                                "name": "",
                                "id": "",
                                "validDate": "",
                                "dueDate": ""
                            },
                            "notification": {
                                "createdDateTime": moment().format()
                            },
                            "step": {
                                "stepCreatedDateTime": "",
                                "stepName": "",
                                "stepId": ""
                            },
                            "node": {
                                "title": ""
                            },
                            "userDefined":[]
                        }
                    }
                };

                /**
                * 
                Keys message 
                */

                var indicatorTitle = JSON.xpath("/indicators[_id eq '" + app.profile._id + "']/title", _WFInstance, {})[0];
                action.notification.keys.profile.name = indicatorTitle;
                action.notification.keys.profile.id = app.profile._id;

                action.notification.keys.community.name = app.getNameByLang(_lclx.COMMUNITY_CONFIG.communityName);
                action.notification.keys.community.id = _lclx.COMMUNITY_CONFIG.communityId;

                var application = JSON.xpath("/applications[appId eq '" + app.SCOPE.applicationId + "']", _lclx.COMMUNITY_CONFIG, {})[0];

                action.notification.keys.application.name = app.getNameByLang(application.name);
                action.notification.keys.application.id = application.appId;

                action.notification.keys.currentUser.name = _lclx.SESSION.firstName + " " + _lclx.SESSION.lastName;
                action.notification.keys.currentUser.id = _lclx.SUBSCRIPTIONS.userId;

                var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                
                if(notification.assignmentAcceptance.sdoKeys != undefined){
                    notification.assignmentAcceptance.sdoKeys.forEach(function(k){

                        if(k.field !="" && k.repStr != "" && k.setId !=""){

                            var indObject = {};
                            _WFInstance.indicators.forEach(function(spInd){
                                if(spInd.category.term == k.setId){
                                    indObject = spInd
                                }
                            })
                            var value = ""
                            
                            
                            if(k.field.indexOf(".")>-1){
                                var field1 = k.field.split(".")[0];
                                var field2 = k.field.split(".")[1];
                                
                                if(indObject.model != undefined && 
                                    indObject.model.pending != undefined &&
                                    indObject.model.pending.data !=undefined && 
                                    indObject.model.pending.data[k.setId] !=undefined &&
                                    indObject.model.pending.data[k.setId][field1]!=undefined && 
                                    indObject.model.pending.data[k.setId][field1][field2]!=undefined){
                                        value = indObject.model.pending.data[k.setId][field1][field2]
                                }

                            } else {

                                if(indObject.model != undefined && 
                                    indObject.model.pending != undefined &&
                                    indObject.model.pending.data !=undefined && 
                                    indObject.model.pending.data[k.setId] !=undefined &&
                                    indObject.model.pending.data[k.setId][k.field]!=undefined){
                                        value = indObject.model.pending.data[k.setId][k.field]
                                }

                            }
                            
                        
                            action.notification.keys.userDefined.push({
                                "key":"#"+k.repStr+"#",
                                "value": value
                            })
                            
                        }

                        

                    });
                }


                action.notification.keys.subProcess.name = subProcessObject.label;
                action.notification.keys.subProcess.id = uuid;

                action.notification.keys.subProcess.validDate = subProcessObject.dates.valid;
                action.notification.keys.subProcess.dueDate = subProcessObject.dates.due;

                var stepObject = subProcessObject.step;
                action.notification.keys.step.stepCreatedDateTime = stepObject.dateTimeCreated;
                action.notification.keys.step.stepId = stepObject.id;

                var stepConfigObject = JSON.xpath("/processes/subProcesses[_id eq '" + subProcessObject.id + "']/steps[_id eq '" + stepObject.id + "']", app.SCOPE.workflow.config, {})[0];
                action.notification.keys.step.stepName = app.getNameByLang(stepConfigObject.name);

                var nodeTitle = JSON.xpath("/indicators[_id eq '" + subProfileId + "']/title", app.SCOPE.workflow, {})[0];
                if (nodeTitle == undefined) {
                    action.notification.keys.node.title = "";
                } else {
                    action.notification.keys.node.title = nodeTitle;
                }

                /**
                * 
                Worker message 
                */
                action.notification.message.default = "";
                action.notification.message.title = notification.assignmentAcceptance.title;

                action.notification.message = notification.assignmentAcceptance.message;
                /**
                * 
                Worker messageType 
                */
                action.notification.messageType = notification.assignmentAcceptance.messageType;


                /**
                * 
                Worker priority 
                */
                action.notification.priority = notification.assignmentAcceptance.priority;
                /**
                * 
                Worker notificationAction if exists 
                */

                if (notification.assignmentAcceptance.notificationAction != undefined) {

                    action.notification.notificationAction = {};
                    action.notification.notificationAction.label = notification.assignmentAcceptance.notificationAction.label;
                    if (notification.assignmentAcceptance.notificationAction.action.URI != undefined) {

                        action.notification.notificationAction.action = {};
                        action.notification.notificationAction.action.URI = notification.assignmentAcceptance.notificationAction.action.URI;

                    } else if (notification.assignmentAcceptance.notificationAction.action.goto != undefined) {

                        action.notification.notificationAction.action = {};
                        action.notification.notificationAction.action.goto = notification.assignmentAcceptance.notificationAction.action.goto;

                    }
                }

                if (notification.assignmentAcceptance.schedule != undefined) {

                    var executeObject = notification.assignmentAcceptance.schedule.executeCommand;

                    var workerSchedule = {
                        dateTime: "",
                        unit: "",
                        factor: ""
                    }

                    if (executeObject.now != undefined) {

                        workerSchedule.dateTime = moment().format();


                    } else if (executeObject.exact != undefined) {

                        workerSchedule.dateTime = executeObject.exact.dateTime;

                    } else if (executeObject.dueDate != undefined) {

                        var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                        
                        var calculatedDateTime = "";
                        var dueDate = subProcessObject.dates.due;

                        if (dueDate != "") {
                            calculatedDateTime = moment(dueDate, "YYYY-MM-DD");
                        } else {
                            calculatedDateTime = moment().format();
                        }

                        workerSchedule.dateTime = calculatedDateTime;
                        workerSchedule.factor = executeObject.dueDate.factor;
                        workerSchedule.unit = executeObject.dueDate.unit;

                    } else if (executeObject.validDate != undefined) {

                        var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                        
                        var calculatedDateTime = "";
                        var dueDate = subProcessObject.dates.valid;

                        if (validDate != "") {
                            calculatedDateTime = moment(validDate, "YYYY-MM-DD");
                        } else {
                            calculatedDateTime = moment().format();
                        }

                        workerSchedule.dateTime = calculatedDateTime;
                        workerSchedule.factor = executeObject.validDate.factor;
                        workerSchedule.unit = executeObject.validDate.unit;

                    } else if (executeObject.stepCreatedDate != undefined) {

                        var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                        
                        var calculatedDateTime = "";
                        var stepCreatedDateTime = subProcessObject.step.dueDateTime;

                        if (stepCreatedDateTime != "") {
                            calculatedDateTime = moment(stepCreatedDateTime).format();
                        } else {
                            calculatedDateTime = moment().format();
                        }

                        workerSchedule.dateTime = calculatedDateTime;
                        workerSchedule.factor = executeObject.stepCreatedDate.factor;
                        workerSchedule.unit = executeObject.stepCreatedDate.unit;


                    } else {

                        workerSchedule.dateTime = moment().format();

                    }

                    workerObject.setSchedule(workerSchedule);

                }

                /**
                * 
                Worker recipients
                */

                getRoles(role).then(function(recipient) {
                    action.notification.recipients = recipient;
                    workerObject.setAction(action);
                    workerObject.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button.");
                    workerObject.setContext({
                        process: {

                        }
                    });
                    workerObject.send(workerObject).then(function(workerSuccess) {
                        console.log(workerObject);
                        var success = util.success('Notification Worker processes successfully for assignment.', workerSuccess);
                        resolve(success);

                    }, function(workerFail) {
                        resolve(workerFail);
                    });


                }).catch(function(err) {

                    console.log("Notification - getRecipients failed with error " + err);
                    reject(err);


                });

            });

        },

        acceptanceNotificationExternal: function(notification, _WFInstance, uuid, usersList) {

            return new Promise(function(resolve, reject) {


                var getUsersList = function(uList) {
                    return new Promise(function(resolve, reject) {
                        var recipients = {};
                        recipients.function = {};
                        recipients.function.users = uList;
                        resolve(recipients);
                    });
                }

                var workerObject = new NotificatioWorker(app);

                var subProfileId = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/meta-data/subprofileId", _WFInstance, {})[0];
                
                // var pathArray = window.location.pathname.split('/');
                var baseURL = DOMAIN.replace("exist/rest","");
                //window.location.protocol + "//" + window.location.host + "/" + pathArray[1];


                var action = {
                    "notification": {
                        "message": {
                            "rtf": {

                            }
                        },
                        "messageType": "",
                        "meta-data": {
                            "applicationId": _WFInstance.app,
                            "communityId": _WFInstance.communityId,
                            "profileId": _WFInstance.profile,
                            "subProcessUUID": uuid,
                            "subProfileId": subProfileId
                        },
                        "notificationType": "workflow",
                        "priority": "",
                        "recipients": {

                        },
                        "url": baseURL,
                        "keys": {
                            "profile": {
                                "name": "",
                                "id": ""
                            },
                            "community": {
                                "name": "",
                                "id": ""
                            },
                            "application": {
                                "name": "",
                                "id": ""
                            },
                            "currentUser": {
                                "name": "",
                                "id": ""
                            },
                            "subProcess": {
                                "name": "",
                                "id": "",
                                "validDate": "",
                                "dueDate": ""
                            },
                            "notification": {
                                "createdDateTime": moment().format()
                            },
                            "step": {
                                "stepCreatedDateTime": "",
                                "stepName": "",
                                "stepId": ""
                            },
                            "node": {
                                "title": ""
                            }
                        }
                    }
                };

                /**
                * 
                Keys message 
                */

                var indicatorTitle = JSON.xpath("/indicators[_id eq '" + app.profile._id + "']/title", _WFInstance, {})[0];
                action.notification.keys.profile.name = indicatorTitle;
                action.notification.keys.profile.id = app.profile._id;

                action.notification.keys.community.name = app.getNameByLang(_lclx.COMMUNITY_CONFIG.communityName);
                action.notification.keys.community.id = _lclx.COMMUNITY_CONFIG.communityId;

                var application = JSON.xpath("/applications[appId eq '" + app.SCOPE.applicationId + "']", _lclx.COMMUNITY_CONFIG, {})[0];

                action.notification.keys.application.name = app.getNameByLang(application.name);
                action.notification.keys.application.id = application.appId;

                action.notification.keys.currentUser.name = _lclx.SESSION.firstName + " " + _lclx.SESSION.lastName;
                action.notification.keys.currentUser.id = _lclx.SUBSCRIPTIONS.userId;

                var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                
                action.notification.keys.subProcess.name = subProcessObject.label;

                action.notification.keys.subProcess.id = uuid;

                action.notification.keys.subProcess.validDate = subProcessObject.dates.valid;
                action.notification.keys.subProcess.dueDate = subProcessObject.dates.due;

                var stepObject = subProcessObject.step;
                action.notification.keys.step.stepCreatedDateTime = stepObject.dateTimeCreated;
                action.notification.keys.step.stepId = stepObject.id;

                var stepConfigObject = JSON.xpath("/processes/subProcesses[_id eq '" + subProcessObject.id + "']/steps[_id eq '" + stepObject.id + "']", app.SCOPE.workflow.config, {})[0];
                action.notification.keys.step.stepName = app.getNameByLang(stepConfigObject.name);

                var nodeTitle = JSON.xpath("/indicators[_id eq '" + subProfileId + "']/title", app.SCOPE.workflow, {})[0];
                if (nodeTitle == undefined) {
                    action.notification.keys.node.title = "";
                } else {
                    action.notification.keys.node.title = nodeTitle;
                }

                /**
                * 
                Worker message 
                */
                action.notification.message.default = "";
                action.notification.message.title = notification.assignmentAcceptance.title;

                action.notification.message.rtf.markup = notification.assignmentAcceptance.message;
                /**
                * 
                Worker messageType 
                */
                action.notification.messageType = notification.assignmentAcceptance.messageType;


                /**
                * 
                Worker priority 
                */
                action.notification.priority = notification.assignmentAcceptance.priority;
                /**
                * 
                Worker notificationAction if exists 
                */

                if (notification.assignmentAcceptance.notificationAction != undefined) {

                    action.notification.notificationAction = {};
                    action.notification.notificationAction.label = notification.assignmentAcceptance.notificationAction.label;
                    if (notification.assignmentAcceptance.notificationAction.action.URI != undefined) {

                        action.notification.notificationAction.action = {};
                        action.notification.notificationAction.action.URI = notification.assignmentAcceptance.notificationAction.action.URI;

                    } else if (notification.assignmentAcceptance.notificationAction.action.goto != undefined) {

                        action.notification.notificationAction.action = {};
                        action.notification.notificationAction.action.goto = notification.assignmentAcceptance.notificationAction.action.goto;

                    }
                }

                if (notification.assignmentAcceptance.schedule != undefined) {

                    var executeObject = notification.assignmentAcceptance.schedule.executeCommand;

                    var workerSchedule = {
                        dateTime: "",
                        unit: "",
                        factor: ""
                    }

                    if (executeObject.now != undefined) {

                        workerSchedule.dateTime = moment().format();


                    } else if (executeObject.exact != undefined) {

                        workerSchedule.dateTime = executeObject.exact.dateTime;

                    } else if (executeObject.dueDate != undefined) {

                        var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                        
                        var calculatedDateTime = "";
                        var dueDate = subProcessObject.dates.due;

                        if (dueDate != "") {
                            calculatedDateTime = moment(dueDate, "YYYY-MM-DD");
                        } else {
                            calculatedDateTime = moment().format();
                        }

                        workerSchedule.dateTime = calculatedDateTime;
                        workerSchedule.factor = executeObject.dueDate.factor;
                        workerSchedule.unit = executeObject.dueDate.unit;

                    } else if (executeObject.validDate != undefined) {

                        var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                        
                        var calculatedDateTime = "";
                        var dueDate = subProcessObject.dates.valid;

                        if (validDate != "") {
                            calculatedDateTime = moment(validDate, "YYYY-MM-DD");
                        } else {
                            calculatedDateTime = moment().format();
                        }

                        workerSchedule.dateTime = calculatedDateTime;
                        workerSchedule.factor = executeObject.validDate.factor;
                        workerSchedule.unit = executeObject.validDate.unit;

                    } else if (executeObject.stepCreatedDate != undefined) {

                        var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                        
                        var calculatedDateTime = "";
                        var stepCreatedDateTime = subProcessObject.step.dueDateTime;

                        if (stepCreatedDateTime != "") {
                            calculatedDateTime = moment(stepCreatedDateTime).format();
                        } else {
                            calculatedDateTime = moment().format();
                        }

                        workerSchedule.dateTime = calculatedDateTime;
                        workerSchedule.factor = executeObject.stepCreatedDate.factor;
                        workerSchedule.unit = executeObject.stepCreatedDate.unit;


                    } else {

                        workerSchedule.dateTime = moment().format();

                    }

                    workerObject.setSchedule(workerSchedule);

                }

                /**
                * 
                Worker recipients
                */

               getUsersList(usersList).then(function(recipient) {
                    action.notification.recipients = recipient;
                    workerObject.setAction(action);
                    workerObject.setMessage("The server is processing your request. Please wait a few seconds and then click the refresh button.");
                    workerObject.setContext({
                        process: {

                        }
                    });
                    workerObject.send(workerObject).then(function(workerSuccess) {
                        console.log(workerObject);
                        var success = util.success('Notification Worker processes successfully for assignment.', workerSuccess);
                        resolve(success);

                    }, function(workerFail) {
                        resolve(workerFail);
                    });


                }).catch(function(err) {

                    console.log("Notification - getRecipients failed with error " + err);
                    reject(err);


                });

            });

        }


    }

})();


var report = (function() {

    return {




        createPerformanceReport: function(performanceReportObject, _WFInstance, uuid) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("createPerformanceReport");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());
                var workplanSetId = performanceReportObject.workplanSetId;
                var configSetId = performanceReportObject.configSetId;


                // workplanSetId scope is profile
                // configSetId scope is subprocesses

                var workplanUUID = JSON.xpath("/indicators[category/term eq '" + workplanSetId + "']/_id", app.SCOPE.workflow, {})[0];
                var configUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + configSetId + "']/instances[1]/uuid", _WFInstance, {})[0];
                

                var action = {
                    "createPerformanceReport": {
                        "workplanUUID": workplanUUID,
                        "configUUID": configUUID,
                        "profilId": _WFInstance.profile
                    }
                };

                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('WorkplanReport Worker processed successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });

        },

        createReport: function(createReport, _WFInstance, uuid) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("executeReport");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());

                var performanceReportDefinitionSetId = createReport.PerformanceReportDefinitionSetId;
                var reportingSDOSetId = createReport.reportingSDOSetId;

                var performanceReportDefinition = JSON.xpath("/indicators[category/term eq '" + performanceReportDefinitionSetId + "']/_id", _WFInstance, {})[0];
                var reportingSDO = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + reportingSDOSetId + "']/instances[1]/uuid", _WFInstance, {})[0];
               

                var action = {
                    "createReport": {
                        "performanceReportDefinition": performanceReportDefinition,
                        "reportingSDO": reportingSDO,
                        "profilId": _WFInstance.profile
                    }
                };

                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('Reprot Worker processed successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });

        },




        sdoReport: function(sdoReport, _WFInstance, uuid) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("sdoReport");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());

                var setId = sdoReport.indicatorSetId;
                var sdoReportUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + setId + "']/instances[1]/uuid", _WFInstance, {})[0];
                

                var action = {
                    "sdoReport": {
                        "sdoReportUUID": sdoReportUUID,
                        "applicationId": app.SCOPE.applicationId,
                        "communityId": app.SCOPE.getCommunityId(),
                        "profileId": app.SCOPE.workflow.profile,
                        "subProcessUUID": uuid
                    }
                };

                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('report Worker processed successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });

        },

        executeReport: function(executeReport, _WFInstance, uuid) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("executeReport");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());



                var SDOreportSetId = executeReport.SDOreportSetId;
                var reportingSDOSetid = executeReport.reportingSDOSetid;

                

                var SDOreportUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + SDOreportSetId + "']/instances[1]/uuid", _WFInstance, {})[0];
                var reportingSDOUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + reportingSDOSetid + "']/instances[1]/uuid", _WFInstance, {})[0];

                if (SDOreportUUID == undefined) {
                    SDOreportUUID = JSON.xpath("/indicators[category/term eq '" + SDOreportSetId + "']/_id", _WFInstance, {})[0];
                }


                var action = {
                    "executeReport": {
                        "sdoReportUUID": SDOreportUUID,
                        "reportingSDOUUID": reportingSDOUUID,
                        "applicationId": app.SCOPE.applicationId,
                        "communityId": app.SCOPE.getCommunityId(),
                        "profileId": app.SCOPE.workflow.profile,
                        "subProcessUUID": uuid
                    }
                };

                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('report Worker processed successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });

        },

        generateView: function(generateView, _WFInstance, uuid) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("sdoReport");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());
                var ViewConfigSetId = generateView.ViewConfigSetId;
                var ViewConfigUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + ViewConfigSetId + "']/instances[1]/uuid", _WFInstance, {})[0];

              
                var action = {
                    "generateView": {
                        "viewConfigUUID": ViewConfigUUID,
                        "applicationId": app.SCOPE.applicationId,
                        "communityId": app.SCOPE.getCommunityId(),
                        "profileId": app.SCOPE.workflow.profile,
                        "subProcessUUID": uuid
                    }
                };

                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('report Worker processed successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });

        },

        requestReport: function(requestReport, _WFInstance, uuid) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("executeReport");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());

                var sdoRequestReportSetId = requestReport.sdoRequestReportSetId;
                var sdoReportCreationSetId = requestReport.sdoReportCreationSetId;
                var performanceReportSetId = requestReport.performanceReportSetId;
                var sdoRequestReportUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + sdoRequestReportSetId + "']/instances[1]/uuid", _WFInstance, {})[0];
                
                var sdoReportCreationUUID = JSON.xpath("/indicators[category/term eq '" + sdoReportCreationSetId + "']/_id", _WFInstance, {})[0];
                var performanceReportUUID = JSON.xpath("/indicators[category/term eq '" + performanceReportSetId + "']/_id", _WFInstance, {})[0];

                var action = {
                    "requestReport": {
                        "performanceReportUUID": performanceReportUUID,
                        "sdoRequestReportUUID": sdoRequestReportUUID,
                        "sdoReportCreationUUID": sdoReportCreationUUID,
                        "applicationId": app.SCOPE.applicationId,
                        "communityId": app.SCOPE.getCommunityId(),
                        "profileId": app.SCOPE.workflow.profile,
                        "subProcessUUID": uuid
                    }
                };

                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('Request report Worker processed successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });

        },


        generateBasicView: function(generateBasicView, _WFInstance, uuid) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("sdoReport");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());

                var sdoDataObjectViewSetId = generateBasicView.sdoDataObjectViewSetId;
                var sdoDataObjectViewUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + sdoDataObjectViewSetId + "']/instances[1]/uuid", _WFInstance, {})[0];
                

                var action = {
                    "generateBasicView": {
                        "sdoDataObjectViewUUID": sdoDataObjectViewUUID,
                        "applicationId": app.SCOPE.applicationId,
                        "communityId": app.SCOPE.getCommunityId(),
                        "profileId": app.SCOPE.workflow.profile,
                        "subProcessUUID": uuid
                    }
                };

                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('generateBasicView Worker processed successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });

        },

        generateUnionView: function(generateUnionView, _WFInstance, uuid) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("sdoReport");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());

                var sdoDataObjectViewUnionSetId = generateUnionView.sdoDataObjectViewUnionSetId;
                var sdoDataObjectViewUnionUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + sdoDataObjectViewUnionSetId + "']/instances[1]/uuid", _WFInstance, {})[0];
                

                var action = {
                    "generateUnionView": {
                        "sdoDataObjectViewUnionUUID": sdoDataObjectViewUnionUUID,
                        "applicationId": app.SCOPE.applicationId,
                        "communityId": app.SCOPE.getCommunityId(),
                        "profileId": app.SCOPE.workflow.profile,
                        "subProcessUUID": uuid
                    }
                };

                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('generateUnionView Worker processed successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });

        },

        sdoReportMultiple: function(sdoReportMultiple, _WFInstance, uuid) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("sdoReport");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());

                var sdoReportCreationSetId = sdoReportMultiple.sdoReportCreationSetId;
                var sdoReportViewsSetId = sdoReportMultiple.sdoReportViewsSetId;
                var sdoReportJoinsSetId = sdoReportMultiple.sdoReportJoinsSetId;

                var sdoReportCreationUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + sdoReportCreationSetId + "']/instances[1]/uuid", _WFInstance, {})[0];
                var sdoReportViewsUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + sdoReportViewsSetId + "']/instances[1]/uuid", _WFInstance, {})[0];
                var sdoReportJoinsUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + sdoReportJoinsSetId + "']/instances[1]/uuid", _WFInstance, {})[0];
              

                var action = {
                    "sdoReportMultiple": {
                        "sdoReportCreationUUID": sdoReportCreationUUID,
                        "sdoReportViewsUUID": sdoReportViewsUUID,
                        "sdoReportJoinsUUID": sdoReportJoinsUUID,
                        "applicationId": app.SCOPE.applicationId,
                        "communityId": app.SCOPE.getCommunityId(),
                        "profileId": app.SCOPE.workflow.profile,
                        "subProcessUUID": uuid
                    }
                };

                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('sdoReportMultiple Worker processed successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });

        },

        subprofileQuarterlyReport: function(subprofileQuarterlyReport, _WFInstance, uuid) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("executeReport");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());

                var scheduleReportIndicator = subprofileQuarterlyReport.scheduleReportIndicator;
                var scheduleReportIndicatorUUID = JSON.xpath("/indicators[category/term eq '" + scheduleReportIndicator + "']/_id", _WFInstance, {})[0];
                var sdoReportApprovalIndicator = subprofileQuarterlyReport.sdoReportApprovalIndicator;
                var sdoReportApprovalIndicatorUUID = JSON.xpath("/indicators[category/term eq '" + sdoReportApprovalIndicator + "' and workflows[1]/processes[1]/subProcessUUID eq '" + uuid + "']/_id", _WFInstance, {})[0];





                var action = {
                    "subprofileQuarterlyReport": {
                        "scheduleReportIndicatorUUID": scheduleReportIndicatorUUID,
                        "sdoReportApprovalIndicatorUUID": sdoReportApprovalIndicatorUUID,
                        "subprofileCode": app.profile.subProfile.code,
                        "subprofileTitle": app.profile.subProfile.title,
                        "applicationId": app.SCOPE.applicationId,
                        "communityId": app.SCOPE.getCommunityId(),
                        "profileId": app.SCOPE.workflow.profile,
                        "subProcessUUID": uuid
                    }
                };

                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('QuarterlyReport report Worker processed successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });


        }





    }

})();

var participants = (function() {

    return {

        linkParticipants: function(linkParticipants, _WFInstance, uuid) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("follow");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());

                var EPWPLinkParticipantsInBulkId = linkParticipants.EPWPLinkParticipantsInBulkId;
                var EPWPLinkParticipantsInBulkIdUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + EPWPLinkParticipantsInBulkId + "']/instances[1]/uuid", _WFInstance, {})[0];
                
                var EPWPLocalityId = linkParticipants.EPWPLocalityId;
                var EPWPLocalityIdUUID = JSON.xpath("/indicators[category/term eq '" + EPWPLocalityId + "']/_id", _WFInstance, {})[0];

                var EPWPActiveParticipantsId = linkParticipants.EPWPActiveParticipantsId;
                var EPWPActiveParticipantsIdUUID = JSON.xpath("/indicators[category/term eq '" + EPWPActiveParticipantsId + "']/_id", _WFInstance, {})[0];

                var action = {
                    "linkParticipants": {
                        "EPWPLinkParticipantsInBulkIdUUID": EPWPLinkParticipantsInBulkIdUUID,
                        "EPWPLocalityIdUUID": EPWPLocalityIdUUID,
                        "EPWPActiveParticipantsIdUUID": EPWPActiveParticipantsIdUUID,
                        "profilId": _WFInstance.profile
                    }
                };
                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('EPWPLinkParticipants Worker processed successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });

        },

        monthlyAttendance: function(monthlyAttendance, _WFInstance, uuid) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("follow");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());

                var EPWPMonthlyAttendanceBulkUploadId = monthlyAttendance.EPWPMonthlyAttendanceBulkUploadUUID;
                var EPWPMonthlyAttendanceBulkUploadUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + EPWPMonthlyAttendanceBulkUploadId + "']/instances[1]/uuid", _WFInstance, {})[0];
               
                var EPWPActiveParticipantsId = monthlyAttendance.EPWPActiveParticipantsIdUUID;
                var EPWPActiveParticipantsIdUUID = JSON.xpath("/indicators[category/term eq '" + EPWPActiveParticipantsId + "']/_id", _WFInstance, {})[0];

                var EPWPMonthlyEmploymentPerLocalityId = monthlyAttendance.EPWPMonthlyEmploymentPerLocalityUUID;
                var EPWPMonthlyEmploymentPerLocalityUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + EPWPMonthlyEmploymentPerLocalityId + "']/instances[1]/uuid", _WFInstance, {})[0];
                



                var action = {
                    "monthlyAttendance": {
                        "EPWPMonthlyAttendanceBulkUploadUUID": EPWPMonthlyAttendanceBulkUploadUUID,
                        "EPWPActiveParticipantsIdUUID": EPWPActiveParticipantsIdUUID,
                        "EPWPMonthlyEmploymentPerLocalityUUID": EPWPMonthlyEmploymentPerLocalityUUID,
                        "profilId": _WFInstance.profile
                    }
                };
                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('monthlyAttendance Worker processed successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });

        },

        monthlyProgressSummary: function(monthlyProgressSummary, _WFInstance, uuid) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("follow");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());

                var EPWPMonthlyProgressSummaryId = monthlyProgressSummary.EPWPMonthlyProgressSummaryIdUUID;
                var EPWPMonthlyProgressSummaryIdUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + EPWPMonthlyProgressSummaryId + "']/instances[1]/uuid", _WFInstance, {})[0];
                



                var action = {
                    "monthlyProgressSummary": {
                        "EPWPMonthlyProgressSummaryIdUUID": EPWPMonthlyProgressSummaryIdUUID,

                        "profilId": _WFInstance.profile
                    }
                };
                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('monthlyAttendance Worker processed successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });

        },

        participantContracts: function(participantContracts, _WFInstance, uuid) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("follow");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());

                var EPWPParticipantContractsId = participantContracts.EPWPParticipantContractsIdUUID;
                var EPWPParticipantContractsIdUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + EPWPParticipantContractsId + "']/instances[1]/uuid", _WFInstance, {})[0];
                
                var action = {
                    "participantContracts": {
                        "EPWPParticipantContractsIdUUID": EPWPParticipantContractsIdUUID,
                        "profilId": _WFInstance.profile
                    }
                };

                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success('participantContracts Worker processed successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });
            });

        },

        genericLinkParticipants: function(genericLinkParticipants, _WFInstance, uuid) {
            return new Promise(function(resolve, reject) {



            });
        }

    }

})();

var worker = (function() {

    return {

        getWorkerWrapper: function() {

            var wrapper = {
                "source": "remote",
                "type": "workerObject",
                "_id": "",
                "channels": ["workerObject"],
                "profileId": "",
                "communityId": "",
                "applicationId": "",
                "subProcessUUID": "",
                "message": "",
                "messageType": "info",
                "createdDateTime": "",
                "senderUserId": "",
                "subProfileId": "",
                "parentTransactionId": (app.SCOPE.txn == undefined ? "" : app.SCOPE.txn.transactionId),
                "action": {

                }

            };

            return wrapper;

        },
        send: function(workerObject) {

            return new Promise(function(resolve, reject) {

                console.log('Submitting Worker Object to server');
                console.log(workerObject);
                dao.save(workerObject).then(function(workerResponse) {
                    resolve(workerResponse);
                }).catch(function(err) {
                    console.log('Error submitting worker response !!' + err);
                    reject(err);
                })

            });

        },

        sendWorker: function(workerConfig, _WFInstance, uuid) {

            return new Promise(function(resolve, reject) {

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push("sendWorker");
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());
                var processGetNodeValue = function(paramBlock, seq, paramName) {

                    return new Promise(function(res, rej) {

                        helper.getNodeValue(paramBlock, _WFInstance, uuid).then(function(dataValue) {

                            res({
                                "seq": seq,
                                "paramName": paramName,
                                "dataValue": dataValue
                            });

                        }, function(err) {
                            rej(err);
                        });


                    });

                };
                var processParams = function(configParam) {

                    return new Promise(function(res, rej) {
                        var parametersArray = [];
                        var itemsToProcess = configParam.length;
                        for (var i = 0; i < configParam.length; i++) {
                            var paramBlock = configParam[i].parameterValue;
                            var seq = configParam[i].seq;
                            var paramName = configParam[i].parameterName;

                            var paramValue = processGetNodeValue(paramBlock, seq, paramName).then(function(response) {

                                parametersArray.push({
                                    "seq": response.seq,
                                    "paramName": response.paramName,
                                    "paramValue": response.dataValue
                                })

                                itemsToProcess--;
                                if (itemsToProcess == 0) {
                                    parametersArray.push({
                                        "seq": itemsToProcess + 1,
                                        "paramName": "communityId",
                                        "paramValue": _WFInstance.communityId
                                    });

                                    parametersArray.push({
                                        "seq": itemsToProcess + 2,
                                        "paramName": "applicationId",
                                        "paramValue": _WFInstance.app
                                    });

                                    parametersArray.push({
                                        "seq": itemsToProcess + 3,
                                        "paramName": "profileId",
                                        "paramValue": _WFInstance.profile
                                    });

                                    parametersArray.push({
                                        "seq": itemsToProcess + 4,
                                        "paramName": "subProcessUUID",
                                        "paramValue": uuid
                                    });

                                    res(parametersArray);
                                }
                            }, function(err) {
                                itemsToProcess--;
                                if (itemsToProcess == 0) {
                                    parametersArray.push({
                                        "seq": itemsToProcess + 1,
                                        "paramName": "communityId",
                                        "paramValue": _WFInstance.communityId
                                    });

                                    parametersArray.push({
                                        "seq": itemsToProcess + 2,
                                        "paramName": "applicationId",
                                        "paramValue": _WFInstance.app
                                    });

                                    parametersArray.push({
                                        "seq": itemsToProcess + 3,
                                        "paramName": "profileId",
                                        "paramValue": _WFInstance.profile
                                    });

                                    parametersArray.push({
                                        "seq": itemsToProcess + 4,
                                        "paramName": "subProcessUUID",
                                        "paramValue": uuid
                                    });

                                    res(parametersArray);
                                }
                            })


                        }
                    });
                };

                var type = null;
                if (workerConfig.rest != undefined) {

                    var configParam = workerConfig.rest.parameters;
                    processParams(configParam).then(function(paramsArray) {
                        var action = {
                            "sendWorker": {
                                "rest": {

                                }
                            }
                        };
                        action.sendWorker.rest.uri = workerConfig.rest.uri;
                        action.sendWorker.rest.profilId = _WFInstance.profile;
                        action.sendWorker.rest.parameters = paramsArray;

                        workerObject.action = action;
                        worker.send(workerObject).then(function(workerSuccess) {



                            var spObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                          
                            spObject.spStatus = 'submitted';

                            if (spObject.messages == undefined) { 
                                spObject.messages = [];
                            }
                            var pendingSubmissionObject = {
                                "message": {
                                    "i18n": {
                                        "_id": "",
                                        "en": "The server is processing your request. Please wait a few seconds and then click the refresh button.",
                                        "pt": "The server is processing your request. Please wait a few seconds and then click the refresh button."
                                    }
                                },
                                "type": "info"
                            };
                            spObject.messages.push(pendingSubmissionObject);
                            // worker id here
                            if (spObject.workers == undefined) {
                                spObject.workers = [];
                            }
                            spObject.workers.push({
                                "workerId": workerObject._id,
                                "dateTime": moment().format()
                            });

                            persistData('subprocesses', app.SCOPE.workflow, uuid)
                                .then(function(saved) {

                                    var success = util.success('Worker Rest processed successfully.', workerSuccess);
                                    resolve(success);

                                }).catch(function(failed) {
                                    console.log('Worker submitted subprocess file update failed');
                                    reject(failed);
                                });





                        }, function(workerFail) {
                            console.log('Worker failed ');
                            reject(workerFail);
                        });

                    }, function(err) {
                        console.log("parameter creation failed. Abording worker object");
                    });

                } else if (workerConfig.functional != undefined) {

                    var configParam = workerConfig.functional.parameters;
                    processParams(configParam).then(function(paramsArray) {
                        var action = {
                            "sendWorker": {
                                "functional": {

                                }
                            }
                        };
                        action.sendWorker.functional.methodName = workerConfig.functional.methodName;
                        action.sendWorker.functional.profilId = _WFInstance.profile;
                        action.sendWorker.functional.parameters = paramsArray;
                        workerObject.action = action;
                        worker.send(workerObject).then(function(workerSuccess) {

                            var spObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                         
                            spObject.spStatus = 'submitted';

                            if (spObject.messages == undefined) {
                                spObject.messages = [];
                            }
                            var pendingSubmissionObject = {
                                "message": {
                                    "i18n": {
                                        "_id": "",
                                        "en": "The server is processing your request. Please wait a few seconds and then click the refresh button.",
                                        "pt": "The server is processing your request. Please wait a few seconds and then click the refresh button."
                                    }
                                },
                                "type": "info"
                            };
                            spObject.messages.push(pendingSubmissionObject);

                            // worker id here
                            if (spObject.workers == undefined) {
                                spObject.workers = [];
                            }
                            spObject.workers.push({
                                "workerId": workerObject._id,
                                "dateTime": moment().format()
                            });

                            persistData('subprocesses', app.SCOPE.workflow, uuid)
                                .then(function(saved) {

                                    var success = util.success('Worker functional processed successfully.', workerSuccess);
                                    resolve(success);

                                }).catch(function(failed) {
                                    console.log('Worker submitted subprocess file update failed');
                                    reject(failed);
                                });



                        }, function(workerFail) {
                            console.log('Worker failed ');
                            reject(workerFail);
                        });

                    }, function(err) {
                        console.log("parameter creation failed. Abording worker object");
                    });
                }

            });

        },

        executeLocal: function(workerConfig, _WFInstance, uuid) {

            return new Promise(function(resolve, reject) {



                var processGetNodeValue = function(paramBlock, seq, dataType) {

                    return new Promise(function(res, rej) {

                        helper.getNodeValue(paramBlock, _WFInstance, uuid).then(function(dataValue) {

                            res({
                                "seq": seq,
                                "dataType": dataType,
                                "dataValue": dataValue
                            });

                        }, function(err) {
                            rej(err);
                        });


                    });

                };

                var processParams = function(configParam) {

                    return new Promise(function(res, rej) {
                        var parametersArray = [];
                        var itemsToProcess = configParam.length;
                        for (var i = 0; i < configParam.length; i++) {
                            var paramBlock = configParam[i].parameterValue;
                            var seq = configParam[i].seq;
                            var dataType = configParam[i].dataType.dataType;
                            var paramValue = processGetNodeValue(paramBlock, seq, dataType).then(function(response) {

                                parametersArray.push({
                                    "seq": response.seq,
                                    "dataType": response.dataType,
                                    "paramValue": response.dataValue
                                })

                                itemsToProcess--;
                                if (itemsToProcess == 0) {
                                    res(parametersArray);
                                }
                            }, function(err) {
                                itemsToProcess--;
                                if (itemsToProcess == 0) {
                                    res(parametersArray);
                                }
                            })


                        }
                    });
                };

                var fixParamType = function(paramValue, dataType) {

                    switch (dataType) {
                        case "string":
                            var txt = paramValue.replace(/'/g, "\\'");
                            return "" + txt + "";
                            break;
                        case "date":
                        case "dateTime":
                            return "" + paramValue + "";
                            break;
                        case "number":
                        case "decimal":
                            return paramValue;
                            break;
                        default:
                            break;
                    }

                };

                var methodName = workerConfig.methodName;
                var configParam = workerConfig.parameters;
                processParams(configParam).then(function(paramsArray) {

                    var pList = '';
                    for (var i = 0; i < paramsArray.length - 1; i++) {
                        pList = pList + fixParamType(paramsArray[i].paramValue, paramsArray[i].dataType) + ',';
                    }
                    pList = pList + fixParamType(paramsArray[i].paramValue, paramsArray[i].dataType)

                    var callbackSuccess = function() {
                        console.log("S");
                        return resolve("Function '" + methodName + "' executed. Response success.");
                    };
                    var callbackFailure = function() {
                        console.log("E");
                        return reject("Function '" + methodName + "' executed. Response failed.");
                    };
                    var spUUID = "" + uuid + ""
                    // var func = methodName + '(' + pList + ',callbackSuccess, callbackFailure,' + spUUID + ')';
                    console.log("Going to execute == " + methodName);
                    if(paramsArray.length == 0){
                        ((eval(methodName))(callbackSuccess, callbackFailure, spUUID));
                    }
                    else if(paramsArray.length == 1){
                        ((eval(methodName))(paramsArray[0].paramValue, callbackSuccess, callbackFailure, spUUID));
                    }
                    else if(paramsArray.length == 2){
                        ((eval(methodName))(paramsArray[0].paramValue, paramsArray[1].paramValue, callbackSuccess, callbackFailure, spUUID));
                    }
                    else if(paramsArray.length == 3){
                        ((eval(methodName))(paramsArray[0].paramValue, paramsArray[1].paramValue, paramsArray[2].paramValue, callbackSuccess, callbackFailure, spUUID));
                    }
                    else if(paramsArray.length == 4){
                        ((eval(methodName))(paramsArray[0].paramValue, paramsArray[1].paramValue, paramsArray[2].paramValue, paramsArray[3].paramValue, callbackSuccess, callbackFailure, spUUID));
                    }
                    else if(paramsArray.length == 5){
                        ((eval(methodName))(paramsArray[0].paramValue, paramsArray[1].paramValue, paramsArray[2].paramValue, paramsArray[3].paramValue, paramsArray[4].paramValue, callbackSuccess, callbackFailure, spUUID));
                    }
                    else if(paramsArray.length == 6){
                        ((eval(methodName))(paramsArray[0].paramValue, paramsArray[1].paramValue, paramsArray[2].paramValue, paramsArray[3].paramValue, paramsArray[4].paramValue, paramsArray[5].paramValue, callbackSuccess, callbackFailure, spUUID));
                    }
                    else if(paramsArray.length == 7){
                        ((eval(methodName))(paramsArray[0].paramValue, paramsArray[1].paramValue, paramsArray[2].paramValue, paramsArray[3].paramValue, paramsArray[4].paramValue, paramsArray[5].paramValue, paramsArray[6].paramValue, callbackSuccess, callbackFailure, spUUID));
                    }
                    else if(paramsArray.length == 8){
                        ((eval(methodName))(paramsArray[0].paramValue, paramsArray[1].paramValue, paramsArray[2].paramValue, paramsArray[3].paramValue, paramsArray[4].paramValue, paramsArray[5].paramValue, paramsArray[6].paramValue, paramsArray[7].paramValue, callbackSuccess, callbackFailure, spUUID));
                    }
                    //resolve("Local function executed");

                }, function(err) {
                    console.log("parameter creation failed. Abording worker object");
                    reject(err);
                });



            });

        },

        setWorkerInfoInSubprocess: function(workerObject, _WFInstance, uuid) {

            var subprocessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
           
            var pendingSubmissionObject = {
                "message": {
                    "i18n": {
                        "_id": "",
                        "en": "The server is processing your request. Please wait a few seconds and then click the refresh button.",
                        "pt": "O servidor está processando sua solicitação. Por favor aguarde alguns segundos e depois clique no botão atualizar."
                    }
                },
                "type": "info"
            };
            subprocessObject.messages = [];
            subprocessObject.messages.push(pendingSubmissionObject);

            if (subprocessObject.workers == undefined) {
                subprocessObject.workers = [];
            }
            subprocessObject.workers.push({
                "workerId": workerObject._id,
                "dateTime": moment().format()
            })
            return;

        },


        create: function(workerConfig, _WFInstance, uuid) {

            return new Promise(function(resolve, reject) {

                var channel = workerConfig.channel;
                var workerAction = workerConfig.action;

                var workerObject = worker.getWorkerWrapper();

                var subprofileId = "";
                if (app.profile != undefined && app.profile.subprofileId != undefined) {
                    subprofileId = app.profile.subprofileId;
                }

                workerObject._id = generateUUID();
                workerObject.communityId = app.SCOPE.getCommunityId();
                workerObject.applicationId = app.SCOPE.applicationId;
                workerObject.createdDateTime = moment().format();
                workerObject.senderUserId = _lclx.SUBSCRIPTIONS.userId;
                workerObject.profileId = _WFInstance.profile;
                workerObject.subProcessUUID = uuid;
                workerObject.subprofileId = subprofileId;
                workerObject.channels.push(channel);
                workerObject.channels.push("community_" + app.SCOPE.getCommunityId());

                var action = {

                };
                action[workerAction] = {};

                for (var i = 0; i < workerConfig.indicators.length; i++) {
                    var label = workerConfig.indicators[i].label;
                    var setId = workerConfig.indicators[i].setId;
                    var context = workerConfig.indicators[i].context;

                    var id = "";

                    if (context == 'subProcess' || context == 'currentSubProcessInstance' || context == 'currentSubProcess') {
                        //id = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + setId + "']/instances[1]/uuid", _WFInstance, {})[0];
                    
                        id = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + setId + "']/instances[1]/uuid", _WFInstance, {})[0];
                        
                        if(id == undefined){

                            var spoRef = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                            
                            //just to make sure this is not the case where indicators are not populated due to some other reason, now we can search in global indicator array for reference indicator case
                            if(spoRef != undefined && spoRef.indicators.length > 0){
                                id = JSON.xpath("/indicators[category/term eq '" + setId + "']/_id", _WFInstance, {})[0];
                            }
                            
                        }
                    
                    } else {
                        id = JSON.xpath("/indicators[category/term eq '" + setId + "']/_id", _WFInstance, {})[0];
                    }
                  
                    action[workerAction][label] = id
                }
                action[workerAction].profilId = _WFInstance.profile;

                if (workerConfig.fixed != undefined) {
                    for (var i = 0; i < workerConfig.fixed.length; i++) {

                        var obj = workerConfig.fixed[i];
                        var key = Object.keys(obj)[0];
                        action[workerAction][key] = obj[key]

                    }
                }
                if (workerConfig.dataFields != undefined) {
                    action[workerAction].dataFields = workerConfig.dataFields;
                }

                workerObject.action = action;
                worker.send(workerObject).then(function(workerSuccess) {

                    worker.setWorkerInfoInSubprocess(workerObject, _WFInstance, uuid);

                    var success = util.success(workerAction + ' worker processed successfully.', workerSuccess);
                    resolve(success);

                }, function(workerFail) {
                    reject(workerFail);
                });








            });

        },

    }

})();

var user = (function() {

    return {

        addToRole: function(addToRole, uuid, _WFInstance) {

            return new Promise(function(resolve, reject) {
                helper.getNodeValue(addToRole.userName, _WFInstance, uuid).then(function(userDisplayName) {
                    helper.getNodeValue(addToRole.userId, _WFInstance, uuid).then(function(userId) {
                        helper.getNodeValue(addToRole.roleId, _WFInstance, uuid).then(function(roleId) {

                            if(typeof userDisplayName != 'string' && typeof userId != 'string' && Array.isArray([userDisplayName]) && Array.isArray([userId])){

                                if(typeof roleId != 'string' && Array.isArray([roleId])){
                                    if(userDisplayName.length != userId.length || userId.length != roleId.length){
                                        reject({
                                            "isError": true,
                                            "message": "Config issue in role assignment action."
                                        });
                                    }
                                    else{

                                        var assignRole = function(u){
                                            if(userDisplayName.length == u){
                                                var success = util.success('Role assignment complete', {});
                                                resolve(success);
                                            }
                                            else if(roleId[u] == undefined || roleId[u] == ""
                                                || userId[u] == undefined || userId[u] == ""
                                                || userDisplayName[u] == undefined || userDisplayName[u] == ""){
                                                    assignRole(u + 1);
                                            }
                                            else{
    
                                                var contextType = JSON.xpath("/roles[id eq '" + roleId[u] + "']/type", app.SCOPE.APP_CONFIG, {})[0]
            
                                                if (contextType == 'instance') {
                                                    rolesManager.doUserRegistration(userId[u], userDisplayName[u], roleId[u], 'instance').then(function(s) {
                                                        assignRole(u + 1);
                                                    }).catch(function(err) {
                                                        assignRole(u + 1);
                                                    });
                                                } else if (contextType == 'subprofile') {
                                                    rolesManager.doUserRegistration_node(userId[u], userDisplayName[u], roleId[u], 'subprofile').then(function(s) {
                                                        assignRole(u + 1);
                                                    }).catch(function(err) {
                                                        assignRole(u + 1);
                                                    });
                                                } else if (contextType == 'adoption') {
                                                    rolesManager.doUserRegistration_adoption(userId[u], userDisplayName[u], roleId[u], 'adoption').then(function(s) {
                                                        assignRole(u + 1);
                                                    }).catch(function(err) {
                                                        assignRole(u + 1);
                                                    });
                                                } else {
                                                    assignRole(u + 1);
                                                }
    
                                            }
                                        }
                                        assignRole(0);

                                    }
                                }
                                else{
                                    
                                    var assignRole = function(u){
                                        if(userDisplayName.length == u){
                                            var success = util.success('Role assignment complete', {});
                                            resolve(success);
                                        }
                                        else if(roleId == undefined || roleId == ""
                                                || userId[u] == undefined || userId[u] == ""
                                                || userDisplayName[u] == undefined || userDisplayName[u] == ""){
                                                    assignRole(u + 1);
                                            }
                                        else{

                                            var contextType = JSON.xpath("/roles[id eq '" + roleId + "']/type", app.SCOPE.APP_CONFIG, {})[0]
        
                                            if (contextType == 'instance') {
                                                rolesManager.doUserRegistration(userId[u], userDisplayName[u], roleId, 'instance').then(function(s) {
                                                    assignRole(u + 1);
                                                }).catch(function(err) {
                                                    assignRole(u + 1);
                                                });
                                            } else if (contextType == 'subprofile') {
                                                rolesManager.doUserRegistration_node(userId[u], userDisplayName[u], roleId, 'subprofile').then(function(s) {
                                                    assignRole(u + 1);
                                                }).catch(function(err) {
                                                    assignRole(u + 1);
                                                });
                                            } else if (contextType == 'adoption') {
                                                rolesManager.doUserRegistration_adoption(userId[u], userDisplayName[u], roleId, 'adoption').then(function(s) {
                                                    assignRole(u + 1);
                                                }).catch(function(err) {
                                                    assignRole(u + 1);
                                                });
                                            } else {
                                                assignRole(u + 1);
                                            }

                                        }
                                    }
                                    assignRole(0);

                                }

                            }
                            else{

                                var contextType = JSON.xpath("/roles[id eq '" + roleId + "']/type", app.SCOPE.APP_CONFIG, {})[0]
        
                                if (contextType == 'instance') {
                                    rolesManager.doUserRegistration(userId, userDisplayName, roleId, 'instance').then(function(s) {
                                        var success = util.success('Role assigned to user in context instance', s);
                                        resolve(success);
                                    }).catch(function(err) {
                                        console.log('rolesManager- instance fail');
                                        resolve('role update failed');
                                    });
                                } else if (contextType == 'subprofile') {
                                    rolesManager.doUserRegistration_node(userId, userDisplayName, roleId, 'subprofile').then(function(s) {
                                        var success = util.success('Role assigned to user in context subprofile', s);
                                        resolve(success);
                                    }).catch(function(err) {
                                        console.log('rolesManager- subprofile fail');
                                        resolve('role update failed');
                                    });
                                } else if (contextType == 'adoption') {
                                    rolesManager.doUserRegistration_adoption(userId, userDisplayName, roleId, 'adoption').then(function(s) {
                                        var success = util.success('Role assigned to user in context adoption', s);
                                        resolve(success);
                                    }).catch(function(err) {
                                        console.log('rolesManager- adoption fail');
                                        resolve('role update failed');
                                    });
                                } else {
                                    console.log('Role not found in any context');
                                    reject('Role not found in any context')
                                }
                            }
                        }).catch(function(err) {
                            reject(err);
                        })
                    }).catch(function(err) {
                        reject(err);
                    })
                }).catch(function(err) {
                    reject(err);
                });
            });
        }
    }
})();

var generalFunctions = (function(){
    return {
        addToFavourites: function(favBlock, _WFInstance, uuid){

            return new Promise(function(resolve, reject) {
                var context = favBlock.context;
                if(context == "profile"){
                    library.addToFavouritesProfile().then(function(s){
                        resolve(s);
                    }).catch(function(e){
                        reject(e);
                    });
                } else if(context == "subprofile"){
                    library.addToFavouritesSubProfile().then(function(s){
                        resolve(s);
                    }).catch(function(e){
                        reject(e);
                    });
                } else if(context == "subprocess"){
                    library.addToFavouritesSubProcess(uuid).then(function(s){
                        resolve(s);
                    }).catch(function(e){
                        reject(e);
                    });
                } 
            });
        },
        addToUserFavourites: function(favBlock, _WFInstance, uuid){

            return new Promise(function(resolve, reject) {
                var context = favBlock.context;
                var userBlock = favBlock.user;
                // get userId from get node value 
                //pass to some new functions

                var userId = '';
                if (userBlock.stepAssigneeFromStep != undefined) {

                    var stepId = userBlock.stepAssigneeFromStep.stepId;
                    var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                    var historyObject = {};
                    for(var i = 0; i < subProcessObject.history.length; i++){
                        if(subProcessObject.history[i].id == stepId){
                            historyObject = subProcessObject.history[i];
                        }
                    }
                    
                    if(historyObject.assignmentHistory != undefined && historyObject.assignmentHistory.length > 0){
                        var obj = historyObject.assignmentHistory[historyObject.assignmentHistory.length - 1];
                        userId = obj.userId;
                    }
                   

                } else if (userBlock.indicator != undefined) {

                    
                    var indicatorSetId = userBlock.indicator.indicatorSetId;
                    var elementId = userBlock.indicator.elementId;
                    var indicatorUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + indicatorSetId + "']/instances/uuid", _WFInstance, {})[0];
                    var indObject = JSON.xpath("/indicators[_id eq '" + indicatorUUID + "']", _WFInstance, {})[0];
                    var xpath = '/model/pending/data/' + indicatorSetId + '/' + elementId;
                    var retValue = JSON.xpath(xpath, indObject, {})[0];

                    userId = retValue;
                   

                }

                if(context == "profile"){
                    library.addToFavouritesProfileForUser(userId).then(function(s){
                        console.log("Workflow ****** Profile Done");
                        resolve(s);
                    }).catch(function(e){
                        reject(e);
                    });
                } else if(context == "subprofile"){
                    library.addToFavouritesSubprofileForUser(userId).then(function(s){
                        console.log("Workflow ****** SubProfile Done");
                        resolve(s);
                    }).catch(function(e){
                        reject(e);
                    });
                } else if(context == "subprocess"){
                    library.addToUsersFavouritesSubProcessForUser(userId, uuid).then(function(s){
                        console.log("Workflow ****** Subprocess Done");
                        resolve(s);
                    }).catch(function(e){
                        reject(e);
                    });
                } 
            });
        }
    }
})();

module.exports = {

    community: community,
    application: application,
    performance: performance,
    worker: worker,
    sdo: sdo,
    taxonomy: taxonomy,
    subProcessInstance: subProcessInstance,
    variables: variables,
    notification: notification,
    report: report,
    participants: participants,
    user: user,
    generalFunctions: generalFunctions
}
},{"./form":3,"./helper":4,"./nodeValue":6,"utility":8}],3:[function(require,module,exports){
'use strict';

//var gatekeeper = require('../bower_components/gatekeeper');
var util = require('utility');

// var uuid = require('node-uuid');

var gatekeeper = new GK();

/**
 * Form Module
 *
 * @module lib/form
 * @author Brent Gordon
 * @version 2.0.0
 * @description test description
 * @copyright Kwantu Ltd RSA 2009-2015.
 *
 */

function create(args) {

    var processId = args[0] || '';

    var subProcess = args[1] || {};

    var step = args[2] || {};

    var action = args[3] || {};

    var _WFInstance = args[6] || {};

    var data = args[6] || {};

    var indicators = subProcess.indicators || [];

    var result = [];

    var indicatorType = action._type;

    var processSeq = args[4] || '';

    var subProcessSeq = args[5] || '';

    var createType = args[7] || '';

    var subProcessId = subProcess._id;

    var uuid = args[8] || '';

    var baseUUID = args[9] || '';

    var profile = _WFInstance.profile;

    var inputData = args[10] || {};

    var formCreateType = action.method.form.create;
    
    if (action.method.form.authoriseAndCreateNewSeq != undefined) {
        formCreateType = action.method.form.authoriseAndCreateNewSeq;
    } 
    else if (action.method.form.createNewSeq != undefined) {
        formCreateType = action.method.form.createNewSeq;
    }

    var formType = action.method.form.type;

    var paramObject = {

        "formCreateType": formCreateType,
        "formType": formType

    }
    

    return new Promise(function (resolve, reject) {
        var toProcess = indicators.length;
        var broke = false;


        //hasan

        var errorArray = [];

        var resolveCaller = function () {

            if (broke == false) {
                var success = util.success('Form create indicator persist success.', _WFInstance.indicators);
                resolve(success);
            } else {

                var toAddProcess = [];
                for (var i = 0; i < _WFInstance.instance.processes.length; i++) {
                    if (_WFInstance.instance.processes[i].subProcesses.length > 0) {
                        toAddProcess.push(_WFInstance.instance.processes[i]);
                    }

                }

                _WFInstance.instance.processes = [];
                _WFInstance.instance.processes = toAddProcess;


                var involvedSubProcesses = [];
                var subProcessObject = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
               
                var subProcessId = subProcessObject.id;
                var subProcessConfigObject = JSON.xpath("/config/processes/subProcesses[_id eq '" + subProcessId + "']", _WFInstance, {})[0];
                if (subProcessConfigObject.instanceType.newSequence != undefined) {

                    for (var i = 0; i < subProcessConfigObject.indicators.length; i++) {

                        var indicator = subProcessConfigObject.indicators[i];
                        var setId = indicator._id;
                        var indicatorUUID = JSON.xpath("distinct-values(/subprocesses[groupKey = '" + subProcessObject.groupKey + "']/indicators[id = '" + setId + "']/instances/uuid)", _WFInstance, {})[0];

                        //JSON.xpath("/subprocesses/indicators[id eq '" + setId + "']/instances/uuid", _WFInstance, {})[0];

                        if (indicatorUUID != undefined) {
                            var indicatorObject = JSON.xpath("/indicators[_id eq '" + indicatorUUID + "']", _WFInstance, {})[0];
                            if (indicatorObject != undefined) {
                                indicatorObject.model.pending = indicatorObject.model.approved;
                            }
                        }
                    }

                    var indListNames = '';
                    for (var i = 0; i < subProcessConfigObject.indicators.length - 1; i++) {
                        indListNames = indListNames + "'" + subProcessConfigObject.indicators[i]._id + "',"

                    }
                    indListNames = indListNames + "'" + subProcessConfigObject.indicators[subProcessConfigObject.indicators.length - 1]._id + "'"
                    involvedSubProcesses = JSON.xpath("distinct-values(/indicators[category/term = (" + indListNames + ")]/model/approved/subProcessUUID)", _WFInstance, {});

                    var persistSubProcess = function (index, involvedSubProcesses) {
                        if (index == involvedSubProcesses.length) {

                            var toAddSubProcess = [];
                            for (var i = 0; i < _WFInstance.subprocesses.length; i++) {
                                if (_WFInstance.subprocesses[i].indicators.length > 0) {
                                    toAddSubProcess.push(_WFInstance.subprocesses[i]);
                                }

                            }
                            _WFInstance.subprocesses = [];
                            _WFInstance.subprocesses = toAddSubProcess;


                            var failure = util.success('Process failed', errorArray);
                            reject(failure);
                        } else {

                            persistData('indicators', _WFInstance, involvedSubProcesses[index]).then(function (data) {
                                persistSubProcess(index + 1, involvedSubProcesses);
                            }).catch(function (err) {
                                persistSubProcess(index + 1, involvedSubProcesses);
                            })


                        }

                    }

                    persistSubProcess(0, involvedSubProcesses);

                } else {

                    var toAddSubProcess = [];
                    for (var i = 0; i < _WFInstance.subprocesses.length; i++) {
                        if (_WFInstance.subprocesses[i].indicators.length > 0) {
                            toAddSubProcess.push(_WFInstance.subprocesses[i]);
                        }

                    }
                    _WFInstance.subprocesses = [];
                    _WFInstance.subprocesses = toAddSubProcess;
                    var failure = util.success('Process failed', errorArray);
                    reject(failure);
                }

            }


        }

        var subprocessType = JSON.xpath("/config/processes/subProcesses[_id eq '" + subProcessId + "']/type", _WFInstance, {})[0];

        var formCreateFn = function (indicatorType, indicatorId, validDate, instantiateSource) {

            return new Promise(function (resolve, reject) {

                gatekeeper.instantiate(baseUUID, indicatorType, indicatorId, _WFInstance.profile, validDate, subProcessId, subprocessType).then(function (docArray) {
                    // Update the indicator workflow processes section

                    for (var i = 0; i < docArray.length; i++) {
                        var object = docArray[i];

                        for (var index = 0; index < _WFInstance.indicators.length; index++) {
                            var indicator = _WFInstance.indicators[index];
                            if (indicator._id == object.model._id) {

                                _WFInstance.indicators.splice(index, 1);
                                _WFInstance.indicators.push(object.model);
                                break;

                            }

                        }


                        if (!object.model._id.endsWith(':approved') && !object.model._id.endsWith(':rejected')) {


                            object.model.model.pending.validDate = validDate;
                            object.model.model.pending.subProcessUUID = uuid;



                            var workflowObj = {
                                "id": _WFInstance.config._id,
                                "instance": _WFInstance.instance._id,
                                "processes": [{
                                    "id": processId,
                                    "subProcessId": subProcess._id,
                                    "subProcessUUID": uuid,
                                    "step": {
                                        "id": step.id,
                                        "seq": step.seq,
                                        "startDate": "",
                                        "status": step.status,
                                        "message": step.message,
                                        "assignedTo": {
                                            "userId": step.assignedTo.userId,
                                            "name": step.assignedTo.name
                                        },
                                        "comment": step.comment,
                                        "complete": false,
                                        "endDate": ""
                                    }

                                }]
                            }

                            if (object.model.model.pending.seq == 1 && action.setWorkflowLabelInTitle != undefined && action.setWorkflowLabelInTitle != '' && action.setWorkflowLabelInTitle == true) {
                                object.model.title = inputData.label;
                            }

                            if (action.setDraft != undefined && action.setDraft != '' && action.setDraft == true) {
                                object.model.control.draft = true;
                            }
                            var alreadyExists = false;
                            var obIndex = -1;
                            object.model.workflows.forEach(function(workflowBlockInIndicator, index){
                                if(uuid == workflowBlockInIndicator.processes[0].subProcessUUID){
                                    alreadyExists = true;
                                    obIndex = index;
                                }
                            }) 
                            if(!alreadyExists){
                                object.model.workflows.push(workflowObj);
                            } else{
                                object.model.workflows[obIndex] = workflowObj;
                            }

                          
                            var mainId = object.model._id;
                            // persist via gk so that it is save in couch
                            gatekeeper.persist(docArray).then(function (savedArray) {
                                //using same id call initialiseData
                                //call code to set to setInstance
                                dao.get(mainId).then(function (data) {

                                    var indicatorModel = ko.mapping.fromJS({
                                        "defaultModel": {
                                            "setId": indicatorId
                                        }

                                    });
                                    var sequence = data.model.pending.seq;
                                    gatekeeper.instantiateData(mainId, instantiateSource, indicatorModel, data.model.pending.seq, paramObject).then(function (data) {
                                        if (data[0].status == "200") {

                                            for (var index = 0; index < _WFInstance.indicators.length; index++) {
                                                var indicator = _WFInstance.indicators[index];
                                                if (indicator._id == data[0].model._id) {

                                                    _WFInstance.indicators.splice(index, 1);
                                                    _WFInstance.indicators.push(data[0].model);
                                                    break;

                                                }

                                            }

                                            if (sequence == 1) {
                                                if (action.setWorkflowLabelInField != undefined && action.setWorkflowLabelInField != '') {
                                                    var assignmentSetId = action.setWorkflowLabelInField.split(".")[0];
                                                    if (assignmentSetId == indicatorId) {
                                                        console.log(data[0]);
                                                        var txt = inputData.label;
                                                        var squote = txt.replace(/'/g, "\\'");
                                                        var finalValue = data[0].model.model.pending.data;
                                                        var pathToElement = action.setWorkflowLabelInField == "" ? [] : action.setWorkflowLabelInField.split(/['"\[\].]+/);
                                                        var k = 0;
                                                        for (k = 0; k < pathToElement.length - 1; k++) {
                                                            if(pathToElement[k] == "") continue;
                                                            finalValue = finalValue[pathToElement[k]];
                                                        }
                                                        finalValue[pathToElement[k]] = squote;
                                                        
                                                    }

                                                }
                                            }
                                            gatekeeper.persist(data).then(function (savedArray) {
                                                dao.get(mainId).then(function (data) {
                                                    if (_WFInstance.indicators.length == 0) {
                                                        _WFInstance.indicators.push(data);
                                                        toProcess--;
                                                        if (toProcess == 0) {

                                                            persistData('indicators', _WFInstance, uuid).then(function (data) {

                                                                var success = util.success('Form create indicator persist success.', _WFInstance.indicators);
                                                                resolveCaller();

                                                            }).catch(function (err) {
                                                                errorArray.push({"error": "persistData "+ uuid, "errorBlock": err});
                                                                console.error(err);
                                                                var failure = util.success('Form create indicator persist failed.', {});
                                                                broke = true;
                                                                resolveCaller();

                                                            })



                                                        }
                                                        resolve({});


                                                    } else {
                                                        var found = false;
                                                        for (var index = 0; index < _WFInstance.indicators.length; index++) {
                                                            var indicator = _WFInstance.indicators[index];
                                                            if (indicator._id == data._id) {

                                                                found = true;
                                                                // Remove the current item from the array and add the updated processModel
                                                                _WFInstance.indicators.splice(index, 1);
                                                                _WFInstance.indicators.push(data);
                                                                index = _WFInstance.indicators.length;


                                                                toProcess--;
                                                                if (toProcess == 0) {
                                                                    persistData('indicators', _WFInstance, uuid).then(function (data) {

                                                                        var success = util.success('Form create indicator persist success.', _WFInstance.indicators);
                                                                        resolveCaller();

                                                                    }).catch(function (err) {
                                                                        errorArray.push({"error": "persistData "+ uuid, "errorBlock": err});
                                                                        console.error(err);
                                                                        var failure = util.success('Form create indicator persist failed.', {});
                                                                        broke = true;
                                                                        resolveCaller();

                                                                    })
                                                                }

                                                                resolve({});


                                                            }

                                                        }

                                                        if (found == false) {
                                                            _WFInstance.indicators.push(data);

                                                            toProcess--;
                                                            if (toProcess == 0) {
                                                                persistData('indicators', _WFInstance, uuid).then(function (data) {

                                                                    var success = util.success('Form create indicator persist success.', _WFInstance.indicators);
                                                                    resolveCaller();

                                                                }).catch(function (err) {
                                                                    errorArray.push({"error": "persistData "+ uuid, "errorBlock": err});
                                                                    console.error(err);
                                                                    var failure = util.success('Form create indicator persist failed.', {});
                                                                    broke = true;
                                                                    resolveCaller();


                                                                })
                                                            }

                                                            resolve({});


                                                        }

                                                    }

                                                }).catch(function (err) {
                                                    errorArray.push({"error": "dao.get(mainId) "+ mainId, "errorBlock": err});
                                                    console.error(err);
                                                    var failure = util.success('1 Gatekeeper initialisation failed with initialiseData message ', {});
                                                    broke = true;
                                                    toProcess--;
                                                    if (toProcess == 0) {
                                                        resolveCaller();
                                                    }

                                                    resolve({});


                                                });

                                            }, function (err) {
                                                errorArray.push({"error": "gatekeeper.persist(data) - Persisting all docs ", "errorBlock": err});
                                                console.error(err);
                                                var failure = util.success('2 Gatekeeper initialisation failed with initialiseData message ', {});
                                                broke = true;
                                                toProcess--;
                                                if (toProcess == 0) {
                                                    resolveCaller();
                                                }

                                                resolve({});

                                            });

                                        } else {
                                            errorArray.push({"error": "gatekeeper.instantiateData"+ mainId + " "+ data[0].status , "errorBlock": {}});
                                            var failure = util.success('3 Gatekeeper initialisation failed with initialiseData message ', {});
                                            broke = true;
                                            toProcess--;
                                            if (toProcess == 0) {
                                                resolveCaller();
                                            }

                                            resolve({});

                                        }

                                    }, function (err) {
                                        errorArray.push({"error": "gatekeeper.instantiateData"+ mainId, "errorBlock": err});
                                        var failure = util.success('4 Gatekeeper initialisation failed with initialiseData message ', {});
                                        broke = true;
                                        toProcess--;
                                        if (toProcess == 0) {
                                            resolveCaller();
                                        }

                                        resolve({});

                                    });

                                }).catch(function (err) {
                                    errorArray.push({"error": "dao.get(mainId) "+ mainId, "errorBlock": err});
                                    console.error(err);
                                    var failure = util.success('5 Gatekeeper initialisation failed with initialiseData message ', {});
                                    broke = true;
                                    toProcess--;
                                    if (toProcess == 0) {
                                        resolveCaller();
                                    }

                                    resolve({});

                                })
                            }, function (err) {
                                errorArray.push({"error": "gatekeeper.persist savedArray", "errorBlock": err});
                                console.error(err);
                                var failure = util.success('6 Gatekeeper initialisation failed with initialiseData message ', {});
                                broke = true;
                                toProcess--;
                                if (toProcess == 0) {
                                    resolveCaller();
                                }

                                resolve({});

                            });
                        }

                    }

                }, function (err) {
                    errorArray.push({"error": "gatekeeper.instantiate", "errorBlock": err});
                    broke = true;
                    toProcess--;
                    if (toProcess == 0) {
                        resolveCaller();
                    }

                    resolve({});


                });

            });



        };

        var instantiateSource = FROM_DEFINITION;

        var loopFunction = function (indicators, counter) {

            if (indicators.length == 0) {

                toProcess--;
                if (toProcess == 0) {
                    resolveCaller();
                }

            }
            else if (counter < indicators.length) {

                var indicatorId = indicators[counter]._id;
                var indicatorName = util.getName(indicators[counter].name, 'en');

                var source = indicators[counter].initiateData;

                var initType = '';
                if (subProcess.instanceType.newSequence != undefined) {
                    initType = INSTANCE_TYPE_NEW_SEQ;
                } else if (subProcess.instanceType.newInstance != undefined) {
                    initType = INSTANCE_TYPE_NEW_INS;
                }

                var createForm = function(){
                    formCreateFn(initType, indicatorId, inputData.validDate, instantiateSource)
                    .then(function (s) {
                        loopFunction(indicators, (counter + 1));
                    })
                    .catch(function (err) {

                        broke = true;
                        toProcess--;
                        if (toProcess == 0) {
                            resolveCaller();
                        }

                    });
                }

                var indicatorDoc = {};
                if (baseUUID != undefined && baseUUID != '' && baseUUID.length > 0) {

                    var sp = JSON.xpath("/subprocesses[_id eq '" + baseUUID + "']", _WFInstance, {})[0];
                    
                    if (subProcess.periodType.periodic == undefined) {

                        if (baseUUID != uuid) {
                            sp.active = false;
                        }

                    }
                    
                    if(formCreateType == BLANK_MODEL){
                        instantiateSource = FROM_DEFINITION;
                    } else {
                        instantiateSource = FROM_AUTHORISED;
                    }
                    
                    createForm();

                } else {
                    var cardinality = JSON.xpath("/indicators[setId eq '" + indicatorId + "']/cardinality", app.SCOPE.APP_CONFIG, {})[0];

                    if (initType == INSTANCE_TYPE_NEW_INS) {

                        if (cardinality == INDICATOR_CARDINALITY_SINGLE) {

                            library.getSingleIndicator(indicatorId)
                            .then(function(existingUUID){

                                if (existingUUID.length > 0) {
                                    instantiateSource = FROM_AUTHORISED;
                                } else {
                                    instantiateSource = FROM_DEFINITION;
                                }

                                createForm();

                            })
                            .catch(function(existingUUID){
                                instantiateSource = FROM_DEFINITION;
                                createForm();
                            });


                        } else {

                            instantiateSource = FROM_DEFINITION;
                            createForm();

                        }



                    } else {

                        if (cardinality == INDICATOR_CARDINALITY_SINGLE) {
                            

                            library.getSingleIndicator(indicatorId)
                            .then(function(existingUUID){

                                if (existingUUID.length > 0) {
                                    instantiateSource = FROM_AUTHORISED;
                                } else {
                                    instantiateSource = FROM_DEFINITION;
                                }

                                createForm();

                            })
                            .catch(function(existingUUID){
                                instantiateSource = FROM_DEFINITION;
                                createForm();
                            });

                        } else {
                            //check here

                            var path = "/indicators[category/term eq '" + indicatorId + "' and id = /subprocesses[id = '" + subProcessId + "']/indicators/instances/uuid]/_id";
                            var part = library.getSubprofileSubprocessIds();
                            if (subprocessType == PROCESS_TYPE_SUBPROFILE) {
                                path = "/indicators[category/term eq '" + indicatorId + "' and id = /subprocesses[id = '" + subProcessId + "' and id = " + part + "]/indicators/instances/uuid]/_id";
                            }
                            var existingUUID = JSON.xpath(path, _WFInstance, {});

                            if (existingUUID.length > 0) {
                                instantiateSource = FROM_AUTHORISED;
                            } else {
                                instantiateSource = FROM_DEFINITION;
                            }
                            createForm();

                        }



                    }


                }

                

            }

        }

        loopFunction(indicators, 0);

    });
};

function setInstanceTitle(args) {

    var _WFInstance = args[0] || {};

    var uuid = args[2] || '';
    var data = args[4] || {};

    var title = data.label;

    return new Promise(function (resolve, reject) {

        var subProcessInstance = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
       
        var indicatorInstances = subProcessInstance.indicators;

        for (var i = 0; i < indicatorInstances.length; i++) {
            var indicatorUUID = indicatorInstances[i].instances[0].uuid;
            var indicatorInstance = JSON.xpath("/indicators[_id eq '" + indicatorUUID + "']", _WFInstance, {})[0];
            indicatorInstance.title = indicatorInstances[i].id + ' ' + title;
        };

        resolve("Set Title Success", indicatorInstances);

    });

};

function deleteProfile(args) {

    var _WFInstance = args[0] || {};

    var profileId = _WFInstance.profile;

    return new Promise(function (resolve, reject) {

        var subprofileId = "";
        if (app.profile != undefined && app.profile.subprofileId != undefined) {
            subprofileId = app.profile.subprofileId;
        }

        var workerObject = {
            "source": "remote",
            "type": "workerObject",
            "_id": generateUUID(),
            "channels": ["deleteProfile", "community_" + app.SCOPE.getCommunityId(), "workerObject"],
            "communityId": app.SCOPE.getCommunityId(),
            "applicationId": app.SCOPE.applicationId,
            "profileId": _WFInstance.profile,
            "message": "",
            "subprofileId": subprofileId,
            "messageType": "info",
            "createdDateTime": moment().format(),
            "senderUserId": _lclx.SUBSCRIPTIONS.userId,
            "parentTransactionId": (app.SCOPE.txn == undefined  ? "" : app.SCOPE.txn.transactionId),
            "notification": {

            },
            "profile": {
                "action": "deleteProfile",
                "profileId": profileId
            }

        }

        console.log(workerObject);
        dao.save(workerObject).then(function (data) {
            console.log("Worker Object submitted for profile(" + profileId + ") deletion.");
            console.log(data);
            resolve(data);
        }).catch(function (err) {
            console.log(err);
            reject(data);
        });

    });

};

function createProfile(args) {

    var _WFInstance = args[1] || {};

    var communityId = _WFInstance.communityId;
    var profileId = _WFInstance.profile;

    return new Promise(function (resolve, reject) {

        library.createProfileDocuments(communityId, profileId).then(function (data) {

            var success = util.success('Form created successfully.', data);
            resolve(success);

        }).catch(function (err) {

            console.error(err);
            var failure = util.success('ERROR: Profile creation failed', {});
            reject(failure);

        });

    });
};

function setDraft(args) {

    var _WFInstance = args[0] || {};

    var communityId = _WFInstance.communityId;
    var profileId = _WFInstance.profile;
    var uuid = args[2] || '';

    return new Promise(function (resolve, reject) {

        var subProcessInstance = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
        
        var indicatorInstances = subProcessInstance.indicators;

        for (var i = 0; i < indicatorInstances.length; i++) {
            var indicatorUUID = indicatorInstances[i].instances[0].uuid;
            var indicatorInstance = JSON.xpath("/indicators[_id eq '" + indicatorUUID + "']", _WFInstance, {})[0];
            indicatorInstance.control.draft = true;
        };

        resolve("Set Draft Success", indicatorInstances);

    });
};

function setUnDraft(args) {

    var _WFInstance = args[0] || {};

    var communityId = _WFInstance.communityId;
    var profileId = _WFInstance.profile;
    var uuid = args[2] || '';

    return new Promise(function (resolve, reject) {

        var subProcessInstance = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
        
        var indicatorInstances = subProcessInstance.indicators;

        for (var i = 0; i < indicatorInstances.length; i++) {
            var indicatorUUID = indicatorInstances[i].instances[0].uuid;
            var indicatorInstance = JSON.xpath("/indicators[_id eq '" + indicatorUUID + "']", _WFInstance, {})[0];
            indicatorInstance.control.draft = false;
        };

        resolve("Set Draft Success", indicatorInstances);

    });
};

function save(indicator) {
    var completed = [];
    var result = {
        complete: true,
        data: []
    };

    return new Promise(function (resolve, reject) {
        var success = util.success('Form indicator set saved successfully.', result);
        resolve(success);
    });
};

function submit(form) {
    var completed = [];
    var result = {
        complete: true,
        data: []
    };

    return new Promise(function (resolve, reject) {
        var success = util.success('Form submitted successfully.', result);
        resolve(success);
    });
};

function authorise(form) {
    var completed = [];
    var result = {
        complete: true,
        data: []
    };

    var processId = form[0] || '';

    var subProcess = form[1] || {};

    var subProcessId = subProcess._id;

    var processSeq = form[2] || '';

    var subProcessSeq = form[3] || '';

    var _WFInstance = form[4] || {};

    var subProcessUUID = form[6] || '';

    return new Promise(function (resolve, reject) {

        var spo = JSON.xpath("/subprocesses[_id eq '" + subProcessUUID + "']", app.SCOPE.workflow, {})[0];

        //var subProcessUUID = JSON.xpath("/processes[id eq '" + processId + "' and seq eq '" + processSeq + "']/subProcesses[id eq '" + subProcessId + "' and seq eq '" + subProcessSeq + "']/uuid", _WFInstance.instance, {})[0];
        var spIndicators = JSON.xpath("/subprocesses[_id eq '" + subProcessUUID + "']/indicators/instances/uuid", _WFInstance, {});
        var itemsToProcess = spIndicators.length;
        var updatedObjectsArray = [];
        var tempArray = [];

        //start txn on induuid + :approved then commit

        var processSDO = function(i){

            gatekeeper.authorise(spIndicators[i]).then(function (authorisedReturn) {

                gatekeeper.persist(authorisedReturn).then(function (savedArray) {

                    var uuidSavedIndicator = '';
                    for (var c = 0; c < savedArray.length; c++) {
                        if (!savedArray[c].id.endsWith(':approved')) {
                            uuidSavedIndicator = savedArray[c].id;
                        }

                    }

                    dao.get(uuidSavedIndicator).then(function (data) {

                        if (_WFInstance.indicators.length == 0) {
                            _WFInstance.indicators.push(data);
                            itemsToProcess--;
                            if (itemsToProcess == 0) {



                                persistData('indicators', _WFInstance, subProcessUUID).then(function (data) {

                                    var success = util.success('Form authorised successfully.', updatedObjectsArray);
                                    resolve(success);



                                }).catch(function (err) {

                                    console.error(err);
                                    var failure = util.success('Form authorised persist failed.', {});
                                    reject(failure);

                                });


                            }
                            else if(itemsToProcess > 0){
                                processSDO(i + 1);
                            }

                        } else {
                            var found = false;

                            for (var index = 0; index < _WFInstance.indicators.length; index++) {
                                var indicator = _WFInstance.indicators[index];
                                if (indicator._id == data._id) {
                                    found = true;
                                    // Remove the current item from the array and add the updated processModel
                                    tempArray.push(data);
                                    //_WFInstance.indicators.splice(index, 1);
                                    //_WFInstance.indicators.push(data);
                                    itemsToProcess--;
                                    if (itemsToProcess == 0) {
                                        var indLength = _WFInstance.indicators.length;
                                        var tempLength = tempArray.length;

                                        for (var p = 0; p < indLength; p++) {
                                            var tempObj = false;
                                            for (var q = 0; q < tempLength; q++) {
                                                if (_WFInstance.indicators[p]._id == tempArray[q]._id) {
                                                    tempObj = true;
                                                }
                                            }
                                            if (!tempObj) {
                                                tempArray.push(_WFInstance.indicators[p])
                                            }
                                        }

                                        _WFInstance.indicators = tempArray;

                                        break;
                                    }

                                }

                            }

                            if (found == true && itemsToProcess == 0) {

                                persistData('indicators', _WFInstance, subProcessUUID).then(function (data) {

                                    var success = util.success('Form authorised successfully.', updatedObjectsArray);
                                    resolve(success);

                                }).catch(function (err) {

                                    console.error(err);
                                    var failure = util.success('Form authorised persist failed.', {});
                                    reject(failure);

                                });

                            }

                            else if(itemsToProcess > 0){
                                processSDO(i + 1);
                            }

                        }

                    }).catch(function (err) {
                        console.error(err);
                        var failure = util.success('Form authorised persist failed 2.', {});
                        reject(failure);
                    });

                }, function (error) {
                    console.error(error);
                    var failure = util.success('Form authorised persist failed 3.', {});
                    reject(failure);
                });

            }, function (error) {
                var failure = util.success('Form authorised persist failed 4.', {});
                reject(failure);

            });

        }

        processSDO(0);




    });
};

function close(form) {
    var completed = [];
    var result = {
        complete: true,
        data: []
    };

    return new Promise(function (resolve, reject) {
        var success = util.success('Form closed successfully.', result);
        resolve(success);
    });
};



function updateIndicator(args) {

    var _WFInstance = args[0] || {};

    var uuid = args[1] || '';
    var path = args[2] || '';
    var dataValue = args[3] || '';

    return new Promise(function (resolve, reject) {

        var setId = path.split(".", 1)[0];
        var indObject = JSON.xpath("/indicators[workflows/processes/subProcessUUID = '" + uuid + "' and category/term = '" + setId + "']", _WFInstance, {})[0];
        if(indObject == undefined && setId == "appProfile"){
            indObject = JSON.xpath("/indicators[model/pending/status = 'Authorised' and category/term = '" + setId + "']", _WFInstance, {})[0];
            if(indObject == undefined){
                var stuff = [];
                var obj = {};

                obj.model = {};
                stuff.push(obj);

                var success = util.success('Indicator updated skipped.', stuff);
                resolve(success);
                return;
            }
        }

        var squote = (dataValue + "").replace(/'/g, "\\'");
        var squote = squote.split('\n').join(' ');
        var finalValue = indObject.model.pending.data;
        var pathToElement = path == "" ? [] : path.split(/['"\[\].]+/);
        var k = 0;
        for (k = 0; k < pathToElement.length - 1; k++) {
            if(pathToElement[k] == "") continue;
            finalValue = finalValue[pathToElement[k]];
        }
        finalValue[pathToElement[k]] = squote;
        var itemsToProcess = 1;
        var stuff = [];
        var obj = {};

        obj.model = indObject;
        stuff.push(obj);

        var txnPacket = JSON.parse(JSON.stringify(app.SCOPE.txn));
        txnPacket.documents = [];
        var refPack = { "document": indObject._id, "rev": indObject._rev };
        txnPacket.documents.push(refPack);
        app.SCOPE.txn.documents.push(refPack);

        dao.updateTransaction(txnPacket).then(function(succ) {

            dao.save(indObject).then(function(data) {
                refPack.rev = data.rev;
                var success = util.success('Indicator updated.', stuff);
                resolve(success);
            }).catch(function(error) {
                console.log(error);
                var success = util.success('Indicator updated.', stuff);
                resolve(success);
            });

        }).catch(function(err) {
            console.log(err);
            var success = util.success('Indicator updated.', stuff);
            resolve(success);
        });


    });
};


function updateIndicatorWrapper(args) {

    var _WFInstance = args[0] || {};

    var uuid = args[1] || '';
    var path = args[2] || '';
    var dataValue = args[3] || '';
    var indicatorSetId = args[4] || '';

    return new Promise(function (resolve, reject) {


        var indObject = JSON.xpath("/indicators[workflows/processes/subProcessUUID = '" + uuid + "' and category/term = '" + indicatorSetId + "']", _WFInstance, {})[0];

        if(indObject == undefined && indicatorSetId == "appProfile"){
            indObject = JSON.xpath("/indicators[model/pending/status = 'Authorised' and category/term = '" + indicatorSetId + "']", _WFInstance, {})[0];
            if(indObject == undefined){
                var stuff = [];
                var obj = {};

                obj.model = {};
                stuff.push(obj);

                var success = util.success('Indicator updated skipped.', stuff);
                resolve(success);
                return;
            }
        }

        var squote = dataValue.replace(/'/g, "\\'");
        var squote = squote.split('\n').join(' ');
        var finalValue = indObject;
        var pathToElement = path == "" ? [] : path.split(/['"\[\].]+/);
        var k = 0;
        for (k = 0; k < pathToElement.length - 1; k++) {
            if(pathToElement[k] == "") continue;
            finalValue = finalValue[pathToElement[k]];
        }
        finalValue[pathToElement[k]] = squote;
        var itemsToProcess = 1;
        var stuff = [];
        var obj = {};

        obj.model = indObject;
        stuff.push(obj);

        var txnPacket = JSON.parse(JSON.stringify(app.SCOPE.txn));
        txnPacket.documents = [];
        var refPack = { "document": indObject._id, "rev": indObject._rev };
        txnPacket.documents.push(refPack);
        app.SCOPE.txn.documents.push(refPack);

        dao.updateTransaction(txnPacket).then(function(succ) {

            dao.save(indObject).then(function(data) {
                refPack.rev = data.rev;
                var success = util.success('Indicator updated.', stuff);
                resolve(success);
            }).catch(function(error) {
                console.log(error);
                var success = util.success('Indicator updated.', stuff);
                resolve(success);
            });

        }).catch(function(err) {
            console.log(err);
            var success = util.success('Indicator updated.', stuff);
            resolve(success);
        });

    });
};

function markUpdateIndicator(args) {

    var _WFInstance = args[0] || {};

    var uuid = args[1] || '';
    var status = args[2] || '';
    var indicatorSetId = args[3] || '';

    return new Promise(function (resolve, reject) {

        var indObject = JSON.xpath("/indicators[workflows/processes/subProcessUUID = '" + uuid + "' and category/term = '" + indicatorSetId + "']", _WFInstance, {})[0];
        indObject.model.pending.status = status;
        var itemsToProcess = 1;
        var stuff = [];
        var obj = {};
        obj.model = indObject;
        stuff.push(obj);

        var success = util.success('Indicator updated.', stuff);
        resolve(success);

    });
};


function setStatus(args) {


    // Currently setting status to subprocess instance. it should update some field in appProfile or whatever indicator the profile has.
    var _WFInstance = args[0] || {};
    var uuid = args[1] || '';
    var status = args[2] || '';

    return new Promise(function (resolve, reject) {

        var subProcessInstance = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
       
        subProcessInstance.step.message = status;

        resolve("Set profile status Success", subProcessInstance);

    });

};

module.exports = {

    create: create,
    save: save,
    submit: submit,
    authorise: authorise,
    close: close,
    setDraft: setDraft,
    setUnDraft: setUnDraft,
    createProfile: createProfile,
    setInstanceTitle: setInstanceTitle,
    deleteProfile: deleteProfile,
    updateIndicator: updateIndicator,
    markUpdateIndicator: markUpdateIndicator,
    updateIndicatorWrapper: updateIndicatorWrapper

}
},{"utility":8}],4:[function(require,module,exports){
'use strict';


function getLanguageMessage(message) {

    var language = service.getLanguage();
    var res = message.i18n[language];
    return res;

};

function numberWithCommas(x) {
    if(x.toString().startsWith("<")){
        return x.toString();
    }
    else{
        return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }
}

function getNodeValue(data, _WFInstance, uuid) {

    return new Promise(function(resolve, reject) {
        
        if(typeof data == 'string'){
            resolve(data);
        }
        else if (data.value != undefined) {

            var inputDataType = 'string';

            if (data.value.datatype.dataType != undefined) {
                inputDataType = data.value.datatype.dataType;
            } else {
                inputDataType = data.value.datatype;
            }


            var inputValue = data.value.data;

            if (inputDataType == 'number') {
                resolve(Number(inputValue));
            } else if (inputDataType == 'string') {
                resolve(inputValue);
            } else if (inputDataType == 'integer') {
                resolve(parseInt(inputValue));
            } else if (inputDataType == 'decimal') {
                resolve(parseFloat(inputValue));
            } else if (inputDataType == 'date' || inputDataType == 'dateTime') {
                resolve(inputValue);
            } else {
                // In case data type not matched
                resolve(inputValue);
            }

        } else if (data.indicatorUUID != undefined) {

            // A change is required to make sure proper scope is identified.
            var indicatorUUID = null;

            var subprocess = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
            
            if (subprocess.indicators.length == 0) {

                indicatorUUID = JSON.xpath("/indicators[category/term eq '" + data.indicatorUUID.indicatorSetId + "']/_id", _WFInstance, {})[0];

            } else {

                indicatorUUID = JSON.xpath("/indicators[id eq '" + data.indicatorUUID.indicatorSetId + "']/instances/uuid", subprocess, {})[0];
                if (indicatorUUID == undefined) {
                    indicatorUUID = JSON.xpath("/indicators[category/term eq '" + data.indicatorUUID.indicatorSetId + "']/_id", _WFInstance, {})[0];
                }
            }



            resolve(indicatorUUID);

        } else if (data.indicator != undefined) {

            var indicatorUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + data.indicator.indicatorSetId + "']/instances/uuid", _WFInstance, {})[0];
            
            var indObject = JSON.xpath("/indicators[_id eq '" + indicatorUUID + "']", _WFInstance, {})[0];
            var basepath = "";
            if(data.indicator.basepath != undefined){
                basepath = data.indicator.basepath;
            }
            var xpath = '/model/pending/data/' + data.indicator.indicatorSetId + basepath + '/' + data.indicator.elementId;

            //var seq = JSON.xpath("count(/subprocesses[_id eq '" + uuid + "']/preceding-sibling::node()[id = /subprocesses[_id eq '" + uuid + "']/id])", _WFInstance, {})[0] + 1;
            var subprocessType = JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '" + uuid + "']/id]/type", _WFInstance, {})[0];
            //var part = library.getSubprofileSubprocessIds();

            // if (subprocessType == PROCESS_TYPE_SUBPROFILE) {
            //     seq = JSON.xpath("count(/subprocesses[_id eq '" + uuid + "']/preceding-sibling::node()[id = /subprocesses[_id eq '" + uuid + "']/id and _id = /subprocesses[_id = " + part + "]/_id])", _WFInstance, {})[0] + 1;
            // }

            var seq = JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '" + uuid + "']/id])", _WFInstance, {})[0] + 1;
            if (subprocessType == PROCESS_TYPE_SUBPROFILE) {
                var part = library.getSubprofileSubprocessIds();
                seq = JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '" + uuid + "']/id and uuid = "+ part +"])", _WFInstance, {})[0] + 1;
            }

            var replacedPath = replaceAll(xpath, '#SEQUENCE#', seq);

            var validDate = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/dates/valid", _WFInstance, {})[0];
            var concatValidDate = "'" + validDate + "'";
            var newPath = replaceAll(replacedPath, '#END_DATE#', concatValidDate);
            var dotReplaced = replaceAll(newPath, '[.]', '/');
            if(basepath.length > 0){
                var retValue = JSON.xpath(dotReplaced, indObject, {});
                resolve(retValue);
            }
            else{
                var retValue = JSON.xpath(dotReplaced, indObject, {})[0];
                if(data.indicator.addString != undefined && data.indicator.addString != ""){
                    retValue = retValue + data.indicator.addString
                }
                resolve(retValue);
            }
            
        } else if (data.system != undefined) {

            resolve("ERROR: Unimplemented system type found.");

        } else if (data.variable != undefined) {

            /**
             * 
             * Taken out of schema
             * 
                        "subProcessInstance": {
                            "type": "string",
                            "description": "value of the variable subProcessInstance variable current subprocessInstance"
                        },
                        "step": {
                            "type": "string",
                            "description": "value of the variable in the current step"
                        },
                        "subProcessId": {
                            "type": "string",
                            "description": "value of the current applicaiton ID"
                        }
             * 
             * 
             * 
             */
            if (data.variable.profile != undefined) {

                var variableName = data.variable.profile;

                var profileId = _WFInstance.profile;
                var profileVariableFileName = profileId + ':variables';

                dao.get(profileVariableFileName).then(function(file) {

                    if(data.variable.type != undefined){
                        if(data.variable.type == "count"){
                            resolve(file[data.variable.name].length);
                        } else {
                            reject("ERROR: Profile variables type implementation - Case not found");
                        }
                    } else {

                        
                        var finalValue = file;
                        var pathToElement = variableName == "" ? [] : variableName.split(/['"\[\].]+/);

                        for (var k = 0; k < pathToElement.length; k++) {
                            if(pathToElement[k] == "") continue;
                            finalValue = finalValue[pathToElement[k]];
                        }
                        var obj = finalValue;

                        if(obj == undefined){
                            reject("Variable not found");
                        }
                        else if (typeof obj == 'object') {

                            var getSeq = function(){
                                return new Promise(function(res, rej){

                                    var seq = 0;

                                    if(data.variable.periodic == undefined || 
                                        data.variable.periodic.seq == undefined){

                                            //var seq = JSON.xpath("count(/subprocesses[_id eq '" + uuid + "']/preceding-sibling::node()[id = /subprocesses[_id eq '" + uuid + "']/id])", _WFInstance, {})[0] + 1;
                                    
                                            var subprocessType = JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '" + uuid + "']/id]/type", _WFInstance, {})[0];
                                            //var part = library.getSubprofileSubprocessIds();
                    
                                            // if (subprocessType == PROCESS_TYPE_SUBPROFILE) {
                                            //     seq = JSON.xpath("count(/subprocesses[_id eq '" + uuid + "']/preceding-sibling::node()[id = /subprocesses[_id eq '" + uuid + "']/id and _id = /subprocesses[_id = " + part + "]/_id])", _WFInstance, {})[0] + 1;
                                            // }
                    
                    
                                            seq = JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '" + uuid + "']/id])", _WFInstance, {})[0] + 1;
                                            if (subprocessType == PROCESS_TYPE_SUBPROFILE) {
                                                var part = library.getSubprofileSubprocessIds();
                                                seq = JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '" + uuid + "']/id and uuid = "+ part +"])", _WFInstance, {})[0] + 1;
                                            }

                                            res(seq);

                                    }
                                    else{
                                        getNodeValue(data.variable.periodic.seq, _WFInstance, uuid)
                                        .then(function(seqVar){
                                            res(seqVar);
                                        })
                                        .catch(function(err){
                                            rej(err);
                                        });
                                    }

                                });
                            }

                            var getVal = function(){

                                return new Promise(function(res,rej){

                                    var vParam = "value";

                                    if(data.variable.periodic != undefined && 
                                        data.variable.periodic.value != undefined){
                                            getNodeValue(data.variable.periodic.value, _WFInstance, uuid)
                                            .then(function(vPar){
                                                res(vPar);
                                            })
                                            .catch(function(err){
                                                rej(err);
                                            });
                                    }
                                    else{
                                        res(vParam);
                                    }

                                });

                            };
                            
    
                            
                            getSeq()
                            .then(function(seq){
                                getVal()
                                .then(function(vParam){
                                    var valuePath = "/" + variableName + "[" + seq + "]/" + vParam;
                                    var retValue = JSON.xpath(valuePath, file, {})[0];
                                    resolve(retValue);
                                })
                                .catch(function(err){
                                    reject(err);
                                });
                            })
                            .catch(function(err){
                                reject(err);
                            });
    
    
                            
    
    
    
                        } else if (typeof obj == 'string') {
    
                            resolve(obj);
    
                        }

                    }
                   

                }).catch(function(error) {

                    reject("ERROR: Profile variables not found");

                });

            } else if(data.variable.subProfile != undefined){

                var variableName = data.variable.subProfile;
                var subprofileId = app.profile.subprofileId
                if(data.variable.subprofileId != undefined && data.variable.subprofileId != ""){
                    subprofileId = data.variable.subprofileId;
                }
               // var profileId = _WFInstance.profile;
                var profileVariableFileName =  subprofileId + ':variables';

                dao.get(profileVariableFileName).then(function(file) {


                    var finalValue = file;
                    var pathToElement = variableName == "" ? [] : variableName.split(/['"\[\].]+/);

                    for (var k = 0; k < pathToElement.length; k++) {
                        if(pathToElement[k] == "") continue;
                        finalValue = finalValue[pathToElement[k]];
                    }
                    var obj = finalValue;

                    if(obj == undefined){
                        reject("Variable not found");
                    }
                    else if (typeof obj == 'object') {

                        var seq = 0;

                        if(data.variable.periodic == undefined || 
                            data.variable.periodic.seq == undefined){

                            //var seq = JSON.xpath("count(/subprocesses[_id eq '" + uuid + "']/preceding-sibling::node()[id = /subprocesses[_id eq '" + uuid + "']/id])", _WFInstance, {})[0] + 1;
                        
                            var subprocessType = JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '" + uuid + "']/id]/type", _WFInstance, {})[0];
                            //var part = library.getSubprofileSubprocessIds();

                            // if (subprocessType == PROCESS_TYPE_SUBPROFILE) {
                            //     seq = JSON.xpath("count(/subprocesses[_id eq '" + uuid + "']/preceding-sibling::node()[id = /subprocesses[_id eq '" + uuid + "']/id and _id = /subprocesses[_id = " + part + "]/_id])", _WFInstance, {})[0] + 1;
                            // }

                            seq = JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '" + uuid + "']/id])", _WFInstance, {})[0] + 1;
                            if (subprocessType == PROCESS_TYPE_SUBPROFILE) {
                                var part = library.getSubprofileSubprocessIds();
                                seq = JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '" + uuid + "']/id and uuid = "+ part +"])", _WFInstance, {})[0] + 1;
                            }
                        }
                        else{
                            seq = getNodeValue(data.variable.periodic.seq, _WFInstance, uuid);
                        }


                        var vParam = "value";
                            
                        if(data.variable.periodic != undefined && 
                            data.variable.periodic.value != undefined){
                                vParam = getNodeValue(data.variable.periodic.value, _WFInstance, uuid);
                        }


                        var valuePath = "/" + variableName + "[" + seq + "]/" + vParam;
                        var retValue = JSON.xpath(valuePath, file, {})[0];
                        resolve(retValue);



                    } else if (typeof obj == 'string') {

                        resolve(obj);

                    }

                }).catch(function(error) {

                    reject("ERROR: sub Profile variables not found");

                });


            } else {
                reject("ERROR: Unimplemented profile type found.");
            }

        } else if (data.indicatorWrapper != undefined) {

            var indicatorSet = data.indicatorWrapper.indicatorSetId;
            var indicatorUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + indicatorSet + "']/instances/uuid", _WFInstance, {})[0];
           
            var indObject = JSON.xpath("/indicators[_id eq '" + indicatorUUID + "']", _WFInstance, {})[0];
            var elementpath = replaceAll(data.indicatorWrapper.path, "[.]", "/")
            var xpath = '/' + elementpath
            var value = JSON.xpath(xpath, indObject, {})[0];
            resolve(value);

        } else if (data.calculated != undefined) {


            var value = '';
            var separator = data.calculated.separator;

            for (var i = 0; i < data.calculated.elements.length - 1; i++) {

                var elements = data.calculated.elements;
                
                var possibleItems = ["fromRepeat", "elementProperty", "constantValue", "elementWrapper", "currentDate", "randomDigits", "profileObjectElement", "profileObjectWrapper", "currentFinancialYear", "scopeVariable", "xpath"];
                switch (propertyExists(elements[i], possibleItems)) {

                    case 'elementProperty':
                        var indicatorSet = elements[i].elementProperty.indicatorSetId;
                        var indicatorUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + indicatorSet + "']/instances/uuid", _WFInstance, {})[0];
                       
                        var indObject = JSON.xpath("/indicators[_id eq '" + indicatorUUID + "']", _WFInstance, {})[0];
                        var elementpath = replaceAll(elements[i].elementProperty.elementId, "[.]", "/")
                        var xpath = '/model/pending/data/' + indicatorSet + '/' + elementpath;
                        var itemValue = JSON.xpath(xpath, indObject, {})[0];
                        value = value + itemValue + separator;
                        break;


                    case 'constantValue':

                        var itemValue = elements[i].constantValue.value;
                        value = value + itemValue + separator;
                        break;

                    case 'scopeVariable':

                        var varName = elements[i].scopeVariable;
                        var itemValue = "";
                        if(varName == "#USER_ID"){
                            itemValue = _lclx.SUBSCRIPTIONS.userId;
                        }
                        else if(varName == "#USERNAME"){
                            itemValue = _lclx.SESSION.username;
                        }
                        else if(varName == "#FIRSTNAME"){
                            itemValue = _lclx.SESSION.firstName;
                        }
                        else if(varName == "#LASTNAME"){
                            itemValue = _lclx.SESSION.lastName;
                        }
                        if(itemValue.length > 0){
                            value = value + itemValue + separator;
                        }
                        
                        break;

                    case 'elementWrapper':
                        var indicatorSet = elements[i].elementWrapper.indicatorSetId;
                        var indicatorUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + indicatorSet + "']/instances/uuid", _WFInstance, {})[0];
                        var indObject = JSON.xpath("/indicators[_id eq '" + indicatorUUID + "']", _WFInstance, {})[0];
                        var elementpath = replaceAll(elements[i].elementWrapper.elementId, "[.]", "/")
                        var xpath = '/' + elementpath;
                        var itemValue = JSON.xpath(xpath, indObject, {})[0];
                        value = value + itemValue + separator;
                        break;


                    case 'currentDate':

                        value = value + formatDate(new Date()) + separator;
                        break;

                    case 'randomDigits':
                        var digits = elements[i].randomDigits.digits;
                        var random = Math.random();
                        var exp = Math.pow(10, digits);
                        var intPart = (random * exp) ^ 0
                        value = value + intPart + separator;
                        break;

                    case 'profileObjectElement':

                        var indicatorSet = elements[i].profileObjectElement.indicatorSetId;
                        var indObject = JSON.xpath("/indicators[category/term eq 'appProfile']", app.SCOPE.workflow, {})[0];
                        var elementpath = replaceAll(elements[i].profileObjectElement.elementId, "[.]", "/")
                        var xpath = '/model/pending/data/' + indicatorSet + '/' + elementpath;
                        var itemValue = JSON.xpath(xpath, indObject, {})[0];
                        value = value + itemValue + separator;
                        break;

                    case 'profileObjectWrapper':

                        var indicatorSet = elements[i].profileObjectWrapper.indicatorSetId;
                        var indObject = JSON.xpath("/indicators[category/term eq 'appProfile']", app.SCOPE.workflow, {})[0];
                        var elementpath = replaceAll(elements[i].profileObjectWrapper.wrapperElementId, "[.]", "/")
                        var xpath = '/' + elementpath;
                        var itemValue = JSON.xpath(xpath, indObject, {})[0];
                        value = value + itemValue + separator;
                        break;
                    case 'currentFinancialYear':

                        var startDate = elements[i].currentFinancialYear.startDate;
                        var startMonth = elements[i].currentFinancialYear.startMonth;
                        var financialYear = new Date().getFullYear() + "-" + startMonth + "-" + startDate;
                        value = value + financialYear + separator;
                        break;
                    case 'fromRepeat':

                        var indicatorSet = elements[i].fromRepeat.indicatorSetId;
                        var indicatorUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + indicatorSet + "']/instances/uuid", _WFInstance, {})[0];
                        
                        var indObject = JSON.xpath("/indicators[_id eq '" + indicatorUUID + "']", _WFInstance, {})[0];
                        var elementpath = replaceAll(elements[i].fromRepeat.path, "[.]", "/");
                        var xpath = '/model/pending/data/' + indicatorSet + '/' + elementpath;
                        var filter = '';
                       
                        if(elements[i].fromRepeat.filter == 'validDate'){
                            var sp = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                            var vd = sp.dates.valid;
                            filter = "[enddate eq '"+ vd +"']/"
                       
                        }
                        xpath = xpath + filter + replaceAll(elements[i].fromRepeat.element, "[.]", "/");

                        var itemValue = JSON.xpath(xpath, indObject, {})[0];
                        value = value + itemValue + separator;
                        

                        break;
                    case 'xpath':
                        if(elements[i].xpath.indicatorSetId != undefined
                            && elements[i].xpath.indicatorSetId.length > 0){
                            var indicatorSet = elements[i].xpath.indicatorSetId;
                            var indicatorUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + indicatorSet + "']/instances/uuid", _WFInstance, {})[0];
                            var indObject = JSON.xpath("/indicators[_id eq '" + indicatorUUID + "']", _WFInstance, {})[0];
                            var itemValue = JSON.xpath(elements[i].xpath.expr, indObject, {})[0];
                            value = value + itemValue + separator;
                            break;
                        }
                        else{
                            var itemValue = JSON.xpath(elements[i].xpath.expr, _WFInstance, {})[0];
                            value = value + itemValue + separator;
                            break;
                        }
                        
                        

                    default:
                        reject("No method found from implemented list.");
                        break;
                }

            }

            var i = data.calculated.elements.length - 1;
            var elements = data.calculated.elements;

            var possibleItems = ["fromRepeat","elementProperty", "constantValue", "elementWrapper", "currentDate", "randomDigits", "profileObjectElement", "profileObjectWrapper", "currentFinancialYear", "scopeVariable", "xpath"];
            switch (propertyExists(elements[i], possibleItems)) {

                case 'elementProperty':
                    var indicatorSet = elements[i].elementProperty.indicatorSetId;
                    var indicatorUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + indicatorSet + "']/instances/uuid", _WFInstance, {})[0];
                    
                    var indObject = JSON.xpath("/indicators[_id eq '" + indicatorUUID + "']", _WFInstance, {})[0];
                    var elementpath = replaceAll(elements[i].elementProperty.elementId, "[.]", "/")
                    var xpath = '/model/pending/data/' + indicatorSet + '/' + elementpath;
                    var itemValue = JSON.xpath(xpath, indObject, {})[0];
                    value = value + itemValue;
                    break;


                case 'constantValue':

                    var itemValue = elements[i].constantValue.value;
                    value = value + itemValue;
                    break;
                case 'scopeVariable':

                    var varName = elements[i].scopeVariable;
                    var itemValue = "";
                    if(varName == "#USER_ID"){
                        itemValue = _lclx.SUBSCRIPTIONS.userId;
                    }
                    else if(varName == "#USERNAME"){
                        itemValue = _lclx.SESSION.username;
                    }
                    else if(varName == "#FIRSTNAME"){
                        itemValue = _lclx.SESSION.firstName;
                    }
                    else if(varName == "#LASTNAME"){
                        itemValue = _lclx.SESSION.lastName;
                    }
                    if(itemValue.length > 0){
                        value = value + itemValue;
                    }
                    
                    break;

                case 'elementWrapper':
                    var indicatorSet = elements[i].elementWrapper.indicatorSetId;
                    var indicatorUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + indicatorSet + "']/instances/uuid", _WFInstance, {})[0];
                    
                    var indObject = JSON.xpath("/indicators[_id eq '" + indicatorUUID + "']", _WFInstance, {})[0];
                    var elementpath = replaceAll(elements[i].elementWrapper.elementId, "[.]", "/")
                    var xpath = '/' + elementpath;
                    var itemValue = JSON.xpath(xpath, indObject, {})[0];
                    value = value + itemValue;
                    break;


                case 'currentDate':

                    value = value + formatDate(new Date());
                    break;

                case 'randomDigits':
                    var digits = elements[i].randomDigits.digits;
                    var random = Math.random();
                    var exp = Math.pow(10, digits);
                    var intPart = (random * exp) ^ 0
                    value = value + intPart;
                    break;

                case 'profileObjectElement':

                    var indicatorSet = elements[i].profileObjectElement.indicatorSetId;
                    var indObject = JSON.xpath("/indicators[category/term eq 'appProfile']", app.SCOPE.workflow, {})[0];
                    var elementpath = replaceAll(elements[i].profileObjectElement.elementId, "[.]", "/")
                    var xpath = '/model/pending/data/' + indicatorSet + '/' + elementpath;
                    var itemValue = JSON.xpath(xpath, indObject, {})[0];
                    value = value + itemValue;
                    break;

                case 'profileObjectWrapper':

                    var indicatorSet = elements[i].profileObjectWrapper.indicatorSetId;
                    var indObject = JSON.xpath("/indicators[category/term eq 'appProfile']", app.SCOPE.workflow, {})[0];
                    var elementpath = replaceAll(elements[i].profileObjectWrapper.wrapperElementId, "[.]", "/")
                    var xpath = '/' + elementpath;
                    var itemValue = JSON.xpath(xpath, indObject, {})[0];
                    value = value + itemValue;
                    break;

                case 'currentFinancialYear':

                    var startDate = elements[i].currentFinancialYear.startDate;
                    var startMonth = elements[i].currentFinancialYear.startMonth;
                    var financialYear = new Date().getFullYear() + "-" + startMonth + "-" + startDate;
                    value = value + financialYear;
                    break;
                
                case 'fromRepeat':

                    var indicatorSet = elements[i].fromRepeat.indicatorSetId;
                    var indicatorUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + indicatorSet + "']/instances/uuid", _WFInstance, {})[0];
                    
                    var indObject = JSON.xpath("/indicators[_id eq '" + indicatorUUID + "']", _WFInstance, {})[0];
                    var elementpath = replaceAll(elements[i].fromRepeat.path, "[.]", "/");
                    var xpath = '/model/pending/data/' + indicatorSet + '/' + elementpath;
                    var filter = '';
                   
                    if(elements[i].fromRepeat.filter == 'validDate'){
                        var sp = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                        var vd = sp.dates.valid;
                        filter = "[enddate eq '"+ vd +"']/"
                   
                    }
                    xpath = xpath + filter + replaceAll(elements[i].fromRepeat.element, "[.]", "/");

                    var itemValue = JSON.xpath(xpath, indObject, {})[0];
                    value = value + itemValue;
                    

                    break;

                case 'xpath':
                    if(elements[i].xpath.indicatorSetId != undefined
                        && elements[i].xpath.indicatorSetId.length > 0){
                        var indicatorSet = elements[i].xpath.indicatorSetId;
                        var indicatorUUID = JSON.xpath("/subprocesses[_id eq '" + uuid + "']/indicators[id eq '" + indicatorSet + "']/instances/uuid", _WFInstance, {})[0];
                        var indObject = JSON.xpath("/indicators[_id eq '" + indicatorUUID + "']", _WFInstance, {})[0];
                        var itemValue = JSON.xpath(elements[i].xpath.expr, indObject, {})[0];
                        value = value + itemValue + separator;
                        break;
                    }
                    else{
                        var itemValue = JSON.xpath(elements[i].xpath.expr, _WFInstance, {})[0];
                        value = value + itemValue + separator;
                        break;
                    }
                
                default:
                    reject("No method found from implemented list.");
                    break;
            }




            resolve(value);

        } else if (data.subProcess != undefined) {

            if (data.subProcess.path != undefined) {

                var path = data.subProcess.path;
                var arr = path.split(".");
                var pathItems = "";
                for (var i = 0; i < arr.length; i++) {
                    pathItems = pathItems + "['" + arr[i] + "']";
                }
                var subprocess = JSON.xpath("/subprocesses[_id eq '" + uuid + "']", _WFInstance, {})[0];
                
                var finalValue = subprocess;
                var pathToElement = pathItems == "" ? [] : pathItems.split(/['"\[\].]+/);

                for (var k = 0; k < pathToElement.length; k++) {
                    if(pathToElement[k] == "") continue;
                    finalValue = finalValue[pathToElement[k]];
                }
                var value = finalValue;
                resolve(value)

            } else if (data.subProcess.stepUser != undefined) {

            }



        }

    });



};


function replaceAll(txt, replace, with_this) {
    if (typeof txt.replace != 'function') {
        console.log(replace + ' ' + with_this);
        console.log(txt);
    }
    return txt.replace(new RegExp(replace, 'g'), with_this);
}

function formatDate(date) {

    var day = date.getDate();
    var monthIndex = date.getMonth();
    var year = date.getFullYear();

    return day + '-' + monthIndex + '-' + year;
}


function compare(subject, operator, value) {
    switch (operator) {
        case '>':
            return subject > value;
        case '<':
            return subject < value;
        case '>=':
            return subject >= value;
        case '<=':
            return subject <= value;
        case '==':
            if(subject == undefined){
                subject = "";
            }
            return subject === value;
        case '!=':
            return subject !== value;
    }
};


module.exports = {

    getLanguageMessage: getLanguageMessage,
    getNodeValue: getNodeValue,
    compare: compare

}
},{}],5:[function(require,module,exports){
'use strict';

var util = require('utility');

/**
 * User Interface Module
 *
 * @module lib/ui
 * @author Brent Gordon
 * @version 0.1.0
 * @description test description
 *
 */

 /**
  * Get all process sub-processes user interface data
  *
  * @param {string} processId - the Workflow config / definition process id
  * @param {string} lang - the user preffered langauge
  * @param {object} _WFInstance - the current workflow constructor instance
  *
  * @example ''
  *
  * @return ''
  *
  */
 function getProcess(processId, lang, _WFInstance){
  return new Promise(function(resolve, reject) {
    try {
      var processModel = [];
      var processInstance = [];
    	_WFInstance.instance.processes.filter(function(processItem){
    		if (processItem.id == processId) {
    			processInstance = processItem;
    		}
    	})
      // console.log(processInstance.subProcesses.length);
      util.syncLoop(processInstance.subProcesses.length, function(loop){
  			var counter = loop.iteration();
        var processSeq = processInstance.seq;
        var subProcessId = processInstance.subProcesses[counter].id;
        var subProcessSeq = processInstance.subProcesses[counter].seq;
        getSubProcess(processId, processSeq, subProcessId, subProcessSeq, lang, _WFInstance).then(function(model){
          // console.log(model);
          processModel.push(model);
          loop.next();
          // console.log(processModel);
  			}, function(err){
          // console.log(processModel);
  				loop.break();
  				reject(err);
  			});
  		}, function(){
        // console.log(processModel);
  			resolve(processModel);
  		});
    } catch(err){
      reject(err);
    }
  })
};

 /**
  * Get SubProcess user interface data
  *
  * @param {string} processId - the Workflow config / definition process id
  * @param {number} processSeq - the Workflow instance process seq
  * @param {string} subProcessId - the Workflow config / definition sub-process id
  * @param {number} subProcessSeq - the Workflow instance sub-process seq
  * @param {object} _WFInstance - the current workflow constructor instance
  *
  * @example ''
  *
  * @return ''
  *
  */
function getSubProcess(processId, processSeq, subProcessId, subProcessSeq, lang, _WFInstance){
  return new Promise(function(resolve, reject) {
    try {
      var model = {
        id: '',
        seq: '',
        name: '',
        help: '',
        dates: '',
        step: ''
      };
      var subProcess = [];
    	var subProcessConf = [];
    	_WFInstance.instance.processes.filter(function(processItem){
    		if (processItem.id == processId && processItem.seq == processSeq) {
    			var spLength = processItem.subProcesses.length;
    			processItem.subProcesses.filter(function(subProcessItem){
    				if (subProcessItem.id == subProcessId && subProcessItem.seq == subProcessSeq && subProcessItem.complete == false) {
    					subProcess = subProcessItem;
    				}
    			})
    		}
    	})
    	// Get the current subProcess configuration
    	_WFInstance.config.processes.filter(function(processConfig){
    		if (processConfig._id == processId) {
    			processConfig.subProcesses.filter(function(subProcessConfig){
    				if (subProcessConfig._id == subProcessId) {
    					subProcessConf = subProcessConfig;
    				}
    			})
    		}
    	})
      // Update the model
      model.id = subProcessConf._id;
      model.seq = subProcess.seq;
      model.name = util.getName(subProcessConf.name, lang);
      model.help = util.getName(subProcessConf.help, lang);
      model.dates = subProcess.dates;
      model.step = subProcess.step;
      resolve(model);
    } catch(err) {
      reject(err);
    }
  })
};




function prepareNotificationScreen(){

  ""
};

 module.exports = {

  getProcess: getProcess

 }

},{"utility":8}],6:[function(require,module,exports){
'use strict';


function get() {

    return new Promise(function(resolve, reject) {

    });

};

module.exports = {

    get: get

}
},{}],7:[function(require,module,exports){
'use strict';

var util = require('utility');
var actionsModule = require('./actions');
var helper = require('./helper');
var form = require('./form');

/**
 * Process Module
 *
 * @module lib/process
 * @author Hasan Abbas
 * @version 0.2.1
 * @description Workflow implementation changed as per new schema implementation
 *
 */

/**
 * Count an array of items
 *
 * @param {Array} arr - the array data
 *
 * @example ''
 *
 * @return ''
 *
 */
function count(arr) {
    if (arr !== undefined) {
        return arr.length;
    } else {
        return 0;
    }

};

/**
 * Process pre-requisites
 *
 * @param {object} prerequisites - the pre-requisites config data
 *
 * @example ''
 *
 * @return ''
 *
 */
function preRequisites(prerequisites, _WFInstance, spuuid) {
    return new Promise(function(resolve, reject) {
        // Uncomment below section when ready to implement
        var completed = [];
        try {
            util.syncLoop(prerequisites.length, function(loop) {
                var counter = loop.iteration();
                preRequisite(prerequisites[counter], _WFInstance, spuuid).then(function(data) {
                    // Check if all pre-requisites completed successfully.
                    completed.push(true);
                    loop.next();
                }, function(err) {
                    completed.push(false);
                    loop.break();
                    reject(err);
                });
            }, function() {
                if (completed.every(Boolean)) {
                    var success = util.success('Pre-requisites completed successfully.', {});
                    resolve(success);
                } else {
                    var error = util.error('WFPreRequisiteError', 'Not all pre-requisites passed.');
                    reject(error);
                }

            });
        } catch (err) {
            reject(err);
        }

    });
};

/**
 * Process pre-requisite, execute the pre-requisite condition.
 *
 * @param {object} prerequisite - the pre-requisite config data
 * @param {object} _WFInstance - the workflow constructor instance
 *
 * @example
 * Process.preRequisite(config, counter, instance, doc);
 *
 * @return ''
 *
 */
function preRequisite(prerequisite, _WFInstance, spuuid) {
    return new Promise(function(resolve, reject) {



        if (prerequisite.check.numberProcessInstances != undefined) {

            var numberProcessInstances = prerequisite.check.numberProcessInstances;
            var _filterOperator = numberProcessInstances.operator;
            var xpathOperator = '';
            switch (_filterOperator) {
                case 'greaterThan':
                    xpathOperator = 'gt';
                    break;
                case 'lessThan':
                    xpathOperator = 'lt';
                    break;
                case 'greaterThanEqual':
                    xpathOperator = 'ge';
                    break;
                case 'lessThanEqual':
                    xpathOperator = 'le';
                    break;
                case 'equalTo':
                    xpathOperator = 'eq';
                    break;
                case 'notEqualTo':
                    xpathOperator = 'ne';
                    break;
            }

            var _subprocessId = numberProcessInstances.subProcessId;

            var _filterValue = numberProcessInstances.type;

            var innerXpath = ''

            if (_filterValue == "all") {
                innerXpath = '';
            } else {
                innerXpath = "[complete eq 'true']";
            }

            var additionalFilter = "";

            if (numberProcessInstances.filter != undefined && numberProcessInstances.filter.length > 0) {
                additionalFilter = "[" + numberProcessInstances.filter + "]";
            }

            var fullPath = "count(/instance/processes/subProcesses[id eq '" + _subprocessId + "']" + innerXpath + additionalFilter + ")";

            var prereqProcessType = JSON.xpath("/config/processes/subProcesses[_id eq '" + _subprocessId + "']/type", _WFInstance, {})[0];
            var part = library.getSubprofileSubprocessIds();

            if (app.profile.subprofileId != undefined && app.profile.subprofileId != '' && prereqProcessType != undefined && prereqProcessType == PROCESS_TYPE_SUBPROFILE) {
                fullPath = "count(/instance/processes/subProcesses[id eq '" + _subprocessId + "' and uuid = " + part + "]" + innerXpath + ")";
            }

            var subjectCount = JSON.xpath(fullPath, _WFInstance, {})[0];
            var countValue = prerequisite.check.numberProcessInstances.count;
            var compare = util.compare(subjectCount, prerequisite.check.numberProcessInstances.operator, parseInt(countValue));


            if (compare) {
                var success = util.success('Pre-requisites passed.', {});
                resolve(success);
            } else {

                var message = helper.getLanguageMessage(prerequisite.message);
                var error = util.error('WFPreRequisiteError', message);
                reject(error);
            }


        } else if (prerequisite.check.variable != undefined) {

            var scope = prerequisite.check.variable.scope;
            var fileName = '';

            if (scope == "profile") {

                var profileId = _WFInstance.profile;
                fileName = profileId + ':variables';

            } else if (scope == "subProfileSubProcessInstance") {

                var subProfileId = app.profile.subprofileId;
                fileName = subProfileId + ':variables';

            } else {
                reject("ERROR: Scope '" + scope + "' not implemented in pre-requisites");
            }

            dao.get(fileName).then(function(file) {

                var variableName = prerequisite.check.variable.name;
                var variableType = prerequisite.check.variable.type;
                var finalValue = file;
                var pathToElement = variableName == "" ? [] : variableName.split(/['"\[\].]+/);

                for (var k = 0; k < pathToElement.length; k++) {
                    if(pathToElement[k] == "") continue;
                    finalValue = finalValue[pathToElement[k]];
                }
                var obj = finalValue;
                var subjectValueCalculated;

                var inputValue = prerequisite.check.variable.value.data;
                var inputDataType = prerequisite.check.variable.value.dataType.dataType;
                
                if(obj == undefined){
                    if(inputDataType == "date"){
                        obj = "2000-01-01";
                    }
                    else{
                        obj = "";
                    }
                }

                if (variableType != undefined && variableType == "array") {
                    subjectValueCalculated = obj;
                } else if (typeof obj == 'object') {

                    //var seq = JSON.xpath("count(/subprocesses[_id eq '" + spuuid + "']/preceding-sibling::node()[id = /subprocesses[_id eq '" + spuuid + "']/id])", _WFInstance, {})[0] + 1;
                    var subprocessType = JSON.xpath("/config/processes/subProcesses[_id eq /subprocesses[_id eq '" + spuuid + "']/id]/type", _WFInstance, {})[0];
                    // var part = library.getSubprofileSubprocessIds();
                    // if (subprocessType == PROCESS_TYPE_SUBPROFILE) {
                    //     seq = JSON.xpath("count(/subprocesses[_id eq '" + spuuid + "']/preceding-sibling::node()[id = /subprocesses[_id eq '" + spuuid + "']/id and _id = /subprocesses[_id = " + part + "]/_id])", _WFInstance, {})[0] + 1;
                    // }




                    var seq = JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '" + spuuid + "']/id])", _WFInstance, {})[0] + 1;
                    if (subprocessType == PROCESS_TYPE_SUBPROFILE) {
                        var part = library.getSubprofileSubprocessIds();
                        seq = JSON.xpath("count(/instance/processes/subProcesses[id = /subprocesses[_id eq '" + spuuid + "']/id and uuid = " + part + "])", _WFInstance, {})[0] + 1;
                    }





                    var valuePath = "/" + variableName + "[" + seq + "]/value";
                    subjectValueCalculated = JSON.xpath(valuePath, file, {})[0];

                } else if (typeof obj == 'string') {

                    subjectValueCalculated = obj;

                }


                

                if(inputValue == "#VALID_DATE"){
                    var spo = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']", _WFInstance, {})[0];
                    if(spo != undefined){
                        inputValue = spo.dates.valid;
                    }
                }

                if (inputValue.indexOf("xpath:") == 0) {
                    var fullPath = inputValue.substring(6);
                    inputValue = JSON.xpath(fullPath, _WFInstance, {})[0];
                }

                if (inputValue == "#VALID_DATE") {
                    var spo = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']", _WFInstance, {})[0];
                    if (spo != undefined) {
                        inputValue = spo.dates.valid;
                    }
                }


                var finalValue;
                if (inputDataType == 'number') {
                    finalValue = Number(inputValue);
                } else if (inputDataType == 'string') {
                    finalValue = inputValue;
                } else if (inputDataType == 'integer') {
                    finalValue = parseInt(inputValue);
                    if (variableType != undefined && variableType == "array") {

                        if (subjectValueCalculated == undefined) {
                            subjectValueCalculated = 0;
                        } else {
                            subjectValueCalculated = subjectValueCalculated.length;
                        }

                    }
                } else if (inputDataType == 'decimal') {
                    finalValue = parseFloat(inputValue);
                } else if (inputDataType == 'date' || inputDataType == 'dateTime') {
                    finalValue = inputValue;
                }

                if (subjectValueCalculated == undefined &&
                    (prerequisite.check.variable.allowBlank != undefined &&
                        prerequisite.check.variable.allowBlank == true)) {
                    var success = util.success('Variable Pre-requisites passed.', {});
                    resolve(success);
                } else {
                    var compare = util.compare(subjectValueCalculated, prerequisite.check.variable.operator, finalValue);
                    if (compare) {
                        var success = util.success('Variable Pre-requisites passed.', {});
                        resolve(success);
                    } else {

                        var message = helper.getLanguageMessage(prerequisite.message);
                        message = message.replace("#VALID_DATE", subjectValueCalculated);
                        var error = util.error('WFPreRequisiteError', message);
                        reject(error);
                    }
                }


            }).catch(function(error) {
                if (prerequisite.check.variable.allowBlank != undefined &&
                    prerequisite.check.variable.allowBlank == true) {
                    var success = util.success('Variable Pre-requisites passed.', {});
                    resolve(success);
                } else {
                    var message = helper.getLanguageMessage(prerequisite.message);
                    message = message.replace("#VALID_DATE", subjectValueCalculated);
                    var error = util.error('WFPreRequisiteError', message);
                    reject(error);
                }
            }).catch(function(error) {

                var message = helper.getLanguageMessage(prerequisite.message);
                message = message.replace("#VALID_DATE", subjectValueCalculated);
                var error = util.error('WFPreRequisiteError:', message);
                reject(error);

            });

        } else if(prerequisite.check.indicator != undefined){
            var operator = prerequisite.check.indicator.operator;
            var setId = prerequisite.check.indicator.setId;
            var field = prerequisite.check.indicator.field;
            var scope = prerequisite.check.indicator.scope;

            var indObj = {};
            if (scope == "profile") {
                _WFInstance.indicators.forEach(function(ind){
                    if(ind.category.term == setId){
                        indObj = ind; 
                    }
                })
            } else if (scope == "subProcess") {
                var spObject = {};
                _WFInstance.subprocesses.forEach(function(sp){
                    if(sp._id == spuuid){
                        spObject = sp;
                    }
                })
                var indUUID = "";
                spObject.indicators.forEach(function(indRef){
                    if(indRef.id == setId){
                        indUUID = indRef.instances[0].uuid;
                    }
                })

                _WFInstance.indicators.forEach(function(ind){
                    if(ind._id == indUUID){
                        indObj = ind;
                    }
                })

            } else {
                reject("ERROR: Scope '" + scope + "' not implemented in pre-requisites");
            }

            var tokens = field.split(".");
            
            var getValue = function(object, tokens, index){
               
                if(tokens.length == index){
                    
                    return object;
                } else {
                    var key = tokens[index];
                    return getValue(object[key], tokens, index+1);
                }
                
            };
            var sdoObject = indObj.model.pending.data[setId];
            var subjectValueCalculated = getValue(sdoObject, tokens,0 )
            
            helper.getNodeValue(prerequisite.check.indicator.data, _WFInstance, spuuid).then(function(dataValue) {

                var compare = util.compare(subjectValueCalculated, prerequisite.check.indicator.operator, dataValue);
                if (compare) {
                    var success = util.success('Variable Pre-requisites passed.', {});
                    resolve(success);
                } else {
    
                    var message = helper.getLanguageMessage(prerequisite.message);
                    message = message.replace("#VALID_DATE", subjectValueCalculated);
                    var error = util.error('WFPreRequisiteError', message);
                    reject(error);
                }

            }, function(err) {
                reject("ERROR: getNodeValue returned error");
            });
        } else {

            var error = util.error('WFPreRequisiteError', 'Pre-requisite type not defined.');
            reject(error);

        }

    });
};

/**
 * Process pre-actionss
 *
 * @param {object} preActions - the pre-actions config data
 * @param {object} _WFInstance - the current workflow constructor instance
 *
 * @example ''
 *
 * @return ''
 *
 */
function preActions(preActions, _WFInstance, spuuid) {
    return new Promise(function(resolve, reject) {
        var completed = [];
        try {

            var spObject = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']", _WFInstance, {})[0];
            var processID = spObject["meta-data"].processConfigId;
            var processId = spObject["meta-data"].subProcessConfigId;
            var processSEQ = spObject["meta-data"].subProcessInsSeq;
            var processSeq = spObject["meta-data"].subProcessInsSeq;

            var subProcessConfigObject = JSON.xpath("/processes[_id eq '" + processID + "']/subProcesses[_id eq '" + processId + "']", _WFInstance.config, {})[0];
            var stepObject = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']/step", _WFInstance, {})[0];

            util.syncLoop(preActions.length, function(loop) {
                var counter = loop.iteration();
                action(preActions[counter], processID, processSEQ, processId, processSeq, subProcessConfigObject, stepObject, _WFInstance, {}, spuuid).then(function(data) {
                    // Check if all pre-requisites completed successfully.
                    completed.push(true);
                    loop.next();
                }, function(err) {
                    completed.push(false);
                    loop.break();
                    reject(err);
                });
            }, function() {
                if (completed.every(Boolean)) {
                    var success = util.success('Pre-actions completed successfully.', {});
                    resolve(success);
                } else {
                    var error = util.error('WFPreRequisiteError', 'Not all pre-actions passed.');
                    reject(error);
                }

            });
        } catch (err) {
            reject(err);
        }

    });
};

/**
 * Workflow get sub-process data.
 *
 * @param {string} id - the subProcess config id
 * @param {object} _WFInstance - the current workflow constructor instance
 *
 * @example ""
 *
 * @return ""
 *
 */
function getSubProcess(id, _WFInstance) {
    if (_WFInstance.subprocesses == undefined) {
        return [];
    } else {
        _WFInstance.subprocesses.filter(function(subProcess) {
            if (subProcess.id == id) {
                return subProcess;
            }

        });
    }

};

/**
 * Process sub-process
 *
 * @param {object} process - the current process id and seq
 * @param {object} subProcess - the sub-process id and seq
 * @param {object} data - the user input data
 * @param {object} _WFInstance - the current workflow constructor instance
 *
 * @example ''
 *
 * @return ''
 *
 */
function subProcess(uuid, processId, processSeq, subProcessId, subProcessSeq, subprofileId, data, _WFInstance) {
    // Get the current process subProcess instance
    // var subProcessSeq = 1;
    var subProcess = [];
    var processConf = [];
    var subProcessConf = [];


    // _WFInstance.instance.processes.filter(function(objProcess) {
    //     if (objProcess.id == processId && objProcess.seq == processSeq) {
    //         var spLength = objProcess.subProcesses.length;
    //         objProcess.subProcesses.filter(function(objSubProcess) {
    //             if (objSubProcess.id == subProcessId && objSubProcess.seq == subProcessSeq) {
    //                 var uuid = objSubProcess.uuid;
    //                 _WFInstance.subprocesses.filter(function(subProcessItem) {
    //                     if (subProcessItem._id == uuid) {
    //                         subProcess = subProcessItem;
    //                     }

    //                 })
    //             }
    //         });
    //     }

    // });

    // NOTE: incoming uuid will be used in case of new subprocess creation
    _WFInstance.subprocesses.filter(function(subProcessItem) {
        if (subProcessItem._id == uuid) {
            subProcess = subProcessItem;
        }
    });




    // Get the current subProcess configuration
    _WFInstance.config.processes.filter(function(processConfig) {
        if (processConfig._id == processId) {
            processConf = processConfig;
            processConfig.subProcesses.filter(function(subProcessConfig) {
                if (subProcessConfig._id == subProcessId) {
                    subProcessConf = subProcessConfig;
                }

            })
        }

    });

    //TODO: Change required to move isActive to subProcess file.Here
    var groupKey = '';
    var baseUUID = data.baseUUID;
    var countSubprocessInContext = 0;

    if (baseUUID != undefined && baseUUID != '' && baseUUID.length > 0) {

        var previousObject = JSON.xpath("/subprocesses[_id eq '" + baseUUID + "']", _WFInstance, {})[0];

        groupKey = previousObject.groupKey;
        countSubprocessInContext = previousObject['meta-data'].subProcessInsSeq;


    } else {

        var cardIndList = '';
        for (var i = 0; i < subProcessConf.indicators.length - 1; i++) {
            cardIndList = cardIndList + "'" + subProcessConf.indicators[i]._id + "',";
        }
        cardIndList = cardIndList + "'" + subProcessConf.indicators[i]._id + "'";
        var singleCard = JSON.xpath("/indicators[setId = (" + cardIndList + ") and cardinality eq 'single']", app.SCOPE.APP_CONFIG, {}).length;

        if (subProcessConf.instanceType.newSequence != undefined || singleCard > 0) {
            var previousObject = JSON.xpath("/instance/processes[id eq '" + processId + "']", _WFInstance, {})[0];
            if (previousObject != undefined && previousObject.subProcesses.length > 0) {
                groupKey = previousObject.subProcesses[0].groupKey;
            } else {
                groupKey = generateUUID();
            }
        } else {
            groupKey = generateUUID();

        }

        countSubprocessInContext = JSON.xpath("count(/processes/subProcesses[groupKey eq '" + groupKey + "'])", _WFInstance.instance, {})[0];
    }

    var label = data.label;
    var subProcessObjectId = uuid;






    var model = {
        _id: subProcessObjectId,
        id: subProcessId,
        type: 'workflowInstanceSubProcess',
        dateTimeCreated: moment().format(),
        dueDateTime: moment().format(),
        seq: subProcessSeq,
        initiated: false,
        dates: {
            created: '',
            valid: '',
            start: '',
            due: '',
            closed: ''
        },
        complete: false,
        indicators: [],
        step: {},
        active: true,
        groupKey: groupKey,
        label: label,
        channels: [
            "community_" + app.SCOPE.getCommunityId(),
            "profile_" + app.SCOPE.profileId,
            "application_" + app.SCOPE.applicationId,
            "community_" + app.SCOPE.getCommunityId() + "_application_" + app.SCOPE.applicationId
        ],
        history: [],
        //meta information added for server side conflict management and merger
        "meta-data": {
            applicationId: app.SCOPE.applicationId,
            communityId: app.SCOPE.getCommunityId(),
            profileId: app.SCOPE.profileId,
            subprofileId: subprofileId == undefined ? '' : subprofileId,
            processConfigId: processId,
            subProcessConfigId: subProcessId,
            subProcessInsSeq: countSubprocessInContext + 1
        },
        messages: [],
        spStatus: ''
    };

    if (data.validDate != undefined && data.validDate.length > 0) {
        if(subProcessConf.periodType.periodic != undefined){
            model.dates.valid = moment(data.validDate).endOf("month").format("YYYY-MM-DD");
        }
        else{
            model.dates.valid = data.validDate;
        }
        
    }

    if (app.profile.subprofileId != undefined && app.profile.subprofileId != "") {
        model.channels.push("profile_" + app.SCOPE.profileId + "_subprofile_" + app.profile.subprofileId);
        model.channels.push("subprofile_" + app.profile.subprofileId);
    } else {
        model.channels.push("profile_" + app.SCOPE.profileId + "_subprofile_" + 0);
        model.channels.push("subprofile_" + 0);
    }

    _WFInstance.subprocesses.push(model);
    // Return a promise
    return new Promise(function(resolve, reject) {
        // Catch all uncaught errors
        try {
            // 1. Process the pre-actions
            var preActionsConf = processConf.preActions;
            //action(actions[counter], processId, processSeq, subProcessId, subProcessSeq, subProcess, step, _WFInstance, data, uuid)
            preActions(preActionsConf, _WFInstance, subProcessObjectId).then(function(result) {
                // 2. Process the pre-requisites
                var prerequisiteConf = processConf.prerequisites;
                preRequisites(prerequisiteConf, _WFInstance, subProcessObjectId).then(function(result) {
                    // 3. Initiate the subProcess
                    var initiateConf = subProcessConf.initiate;
                    initiate(initiateConf, subProcess, data).then(function(result) {
                        //Update the subProcess model
                        model.initiated = result.data.initiated;
                        model.dates = result.data.dates;
                        // Execute the first step
                        var stepId = subProcessConf.steps[0]._id;
                        var transitionId = subProcessConf.steps[0].transition[0]._id;
                        var stepSeq = 1;
                        step(processId, processSeq, subProcessId, subProcessSeq, stepId, stepSeq, data, _WFInstance, subProcessObjectId)
                            .then(function(result) {

                                model.step = result.data;
                                indicators(subProcessConf.indicators, _WFInstance, model._id).then(function(result1) {
                                    model.indicators = result1.data;

                                    // Execute the transitions, if auto
                                    //Subprocess postActions removed from here as they should be executed at the end of the subProcess, means at last step after transition, just before finish.
                                    // Can add history object here in case for first step, i.e initialisation
                                    // model.history.push(result.data);

                                    var success = util.success(result1.message, model);
                                    resolve(success);


                                }, function(err) {
                                    reject(err);
                                })
                            }, function(err) {

                                console.log(err);

                                reject(err);
                            })
                    }, function(err) {
                        _WFInstance.subprocesses = _WFInstance.subprocesses.filter(function(obj) {
                            return !(obj._id == subProcessObjectId);
                        });
                        reject(err);
                    })
                }, function(err) {
                    _WFInstance.subprocesses = _WFInstance.subprocesses.filter(function(obj) {
                        return !(obj._id == subProcessObjectId);
                    });
                    reject(err);
                })
            }, function(err) {
                _WFInstance.subprocesses = _WFInstance.subprocesses.filter(function(obj) {
                    return !(obj._id == subProcessObjectId);
                });
                reject(err);
            })
        } catch (err) {
            reject(err);
        }

    });
};

/**
 * Process initiate
 *
 * @param {object} initiate - the initiate config data
 * @param {object} data - the user input data
 *
 * @example ''
 *
 * @return ''
 *
 */
function initiate(initiate, subProcess, data) {
    var completed = [];
    var result = {
        initiated: false,
        dates: {
            created: '',
            valid: '',
            start: '',
            due: '',
            closed: ''
        }

    };

    return new Promise(function(resolve, reject) {
        var init = function() {

            if (initiate.user != undefined) {
                result.dates.created = data.createdDate;
                if (initiate.user.validDate._type == 'userSelected' || initiate.user.validDate._type == 'autoSelected') {
                    if (data.validDate != undefined) {
                        result.dates.valid = data.validDate;
                    } else {
                        result.dates.valid = new Date().toISOString().substring(0, 10);
                    }

                }

                if (initiate.user.dueDate._type == 'userSelected' || initiate.user.dueDate._type == 'autoSelected') {
                    if (data.dueDate !== undefined) {
                        result.dates.due = data.dueDate;
                    }

                }

                result.dates.start = data.firstDate;



                result.initiated = true;
                var success = util.success('Sub-Process initiate completed successfully.', result);
                resolve(success);

            } else if (initiate.auto != undefined) {

                /*
                result.dates.created = data.createdDate;

                if (initiate.dates.valid._type == 'userSelected' || initiate.dates.valid._type == 'autoSelected') {
                    if (data.validDate !== undefined) {
                        result.dates.valid = data.validDate;
                    } else {
                        util.warn('WFInitiateError', 'No valid date passed in - {data.validDate}');
                    }

                }

                if (initiate.dates.due._type == 'userSelected' || initiate.dates.due._type == 'autoSelected') {
                    if (data.dueDate !== undefined) {
                        result.dates.due = data.dueDate;
                    } else {
                        util.warn('WFInitiateError', 'No due date passed in - {data.dueDate}');
                    }

                }

                result.initiated = true;
                var success = util.success('Sub-Process initiate completed successfully.', result);
                resolve(success);*/

            } else {

                var error = util.error('WFInitiateError', 'Initiate type: ' + initiate._type + ' not defined.');
                reject(error);

            }

        }

        if (subProcess.complete == undefined) {
            init();
        } else if (!subProcess.complete) {
            if (initiate.parallelInstances) {
                init();
            } else {
                var error = util.error('WFInitiateError', 'Sub-process: ' + subProcess.id + ' still active and parallel instances are not allowed.');
                reject(error);
            }

        }

    });
};

/**
 * Process step
 *
 * @param {string} processId - the current process id
 * @param {string} subProcessId - the current sub-process id
 * @param {string} stepId - the current sub-process step id
 * @param {number} stepSeq - the current sub-process step instance counter / sequence
 * @param {object} data - the user input data
 * @param {object} _WFInstance - the current _WFInstance constructor instance
 *
 * @example ''
 *
 * @return ''
 *
 */
function step(processId, processSeq, subProcessId, subProcessSeq, stepId, stepSeq, data, _WFInstance, spuuid) {

    // Default step model
    var model = {
        key: generateUUID(),
        id: '',
        seq: '',
        status: '',
        message: '',
        assignedTo: {
            userId: '',
            name: '',
            dateTime: '',
            type: '',
            dueDateTime: '',
            by: ''
        },
        assignmentHistory: [],
        dateTimeCreated: moment().format(),
        dueDateTime: moment().format(),
        transition: {
            transitionId: '',
            dateTime: '',
            userId: ''
        },
        assignment: {},
        comment: ''
    };

    var subProcess = {};

    var uuid = '';
    var instSubProcess;
    var step = {};

    var transitionId = '';
    return new Promise(function(resolve, reject) {
        try {
            //Get the current subProcess instance data

            // _WFInstance.instance.processes.filter(function(objProcess) {
            //     if (objProcess.id == processId && objProcess.seq == processSeq) {
            //         objProcess.subProcesses.filter(function(objSubProcess) {
            //             if (objSubProcess.id == subProcessId && objSubProcess.seq == subProcessSeq) {
            //                 uuid = objSubProcess.uuid;
            //             }
            //         })
            //     }
            // });

            _WFInstance.subprocesses.filter(function(subProcessItem) {
                if (subProcessItem._id == app.SCOPE.processUUID) {
                    instSubProcess = subProcessItem;
                }

            })
            _WFInstance.config.processes.filter(function(objProcess) {
                if (objProcess._id == processId) {
                    objProcess.subProcesses.filter(function(objSubProcess) {
                        if (objSubProcess._id == subProcessId) {
                            subProcess = objSubProcess;
                            objSubProcess.steps.filter(function(objStep) {
                                if (objStep._id == stepId) {
                                    step = objStep;
                                }

                            })
                        }

                    })
                }

            });
            // Update the sub-process step data
            model.id = stepId;
            model.seq = stepSeq;

            var instanceStatus = '';
            if (step.setInstanceStatusTo.NotStarted != undefined) {
                instanceStatus = "NotStarted";
            } else if (step.setInstanceStatusTo.Created != undefined) {
                instanceStatus = "Created";
            } else if (step.setInstanceStatusTo.InProgress != undefined) {
                instanceStatus = "InProgress";
            } else if (step.setInstanceStatusTo.Submitted != undefined) {
                instanceStatus = "Submitted";
            } else if (step.setInstanceStatusTo.Complete != undefined) {
                instanceStatus = "Complete";
            }

            var language = service.getLanguage();

            model.status = instanceStatus;
            model.message = step.setInstanceStatusTo[instanceStatus].label.i18n[language];
            model.comment = data.comment !== undefined ? data.comment : '';
            var indicators = instSubProcess !== undefined ? instSubProcess.indicators : [];

            var updateSPIndicatorObject = function(indicators, _WFInstance) {
                var assignee = model.assignedTo;
                if (indicators.length > 0) {
                    for (var i = 0; i < indicators.length; i++) {
                        var indicatorObject = indicators[i];
                        var uuid = indicatorObject.instances[0].uuid;
                        var indicator = JSON.xpath("/indicators[_id eq '" + uuid + "']", _WFInstance, {})[0];
                        indicatorObject.instances[0].seq = indicator.model.pending.seq;

                        for (var j = 0; j < indicator.workflows.length; j++) {
                            if (indicator.workflows[j].processes[0] != undefined &&
                                indicator.workflows[j].processes[0].subProcessUUID != undefined &&
                                indicator.workflows[j].processes[0].step != undefined &&
                                spuuid == indicator.workflows[j].processes[0].subProcessUUID) {
                                indicator.workflows[j].processes[0].step.assignedTo = assignee;
                            }
                        }

                    }
                }
            };
            var clearSPStatus = function(spuuid) {
                var obj = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']", _WFInstance, {})[0];

                obj.spStatus = "";
            };

            indicatorDocs(processId, indicators, model, _WFInstance, spuuid).then(function(result) {
                uuid = spuuid;

                if (step.function.actions != undefined) {
                    actions(step.function.actions, processId, processSeq, subProcessId, subProcessSeq, subProcess, model, _WFInstance, data, spuuid)
                        .then(function(result) {
                            var assignee = model.assignedTo;

                            assignee.name = _lclx.SESSION.firstName + " " + _lclx.SESSION.lastName;
                            assignee.userId = _lclx.SUBSCRIPTIONS.userId + "";
                            assignee.dateTime = moment().format();
                            assignee.type = ASSIGNMENT_TYPE_AUTO;
                            assignee.dueDateTime = '';
                            assignee.by = _lclx.SUBSCRIPTIONS.userId + "";



                            updateSPIndicatorObject(indicators, _WFInstance);
                            var transitionId = step.transition[0]._id;
                            transition(processId, processSeq, subProcessId, subProcessSeq, stepId, transitionId, data, _WFInstance, spuuid, model).then(function(result) {
                                var success = util.success('Transition completed successfully.', result.data.step);
                                resolve(success);
                            }, function(err) {
                                reject(err);
                            });
                        }, function(err) {
                            console.log(err);
                            reject(err);
                        })

                } else if (step.function.task != undefined) {
                    // Make assignments
                    task(processId, processSeq, step.function.task, spuuid, model).then(function(result) {

                        updateSPIndicatorObject(indicators, _WFInstance);
                        var success = util.success('Task awaiting user action.', model);
                        resolve(success);
                    }, function(err) {
                        reject(err);
                    });

                } else if (step.function.server != undefined) {
                    // Make assignments
                    clearSPStatus(spuuid);
                    server(step.function.server, processId, processSeq, subProcessId, subProcessSeq, subProcess, model, _WFInstance, data, spuuid).then(function(result) {

                        updateSPIndicatorObject(indicators, _WFInstance);
                        var success = util.success('Server awaiting server response.', model);
                        resolve(success);

                    }, function(err) {
                        reject(err);
                    });

                }

            }, function(err) {
                reject(err);
            })
        } catch (err) {
            reject(err);
        }

    });
};

/**
 * Process indicator updates
 *
 * @param {object} actions - the actions config data
 * @param {object} subProcess - the current sub-process form config data
 * @param {object} _WFInstance - the current workflow constructor instance
 *
 * @example ''
 *
 * @return ''
 *
 */
function indicators(indicators, _WFInstance, spuuid) {
    var model = [];
    return new Promise(function(resolve, reject) {
        try {
            var array = JSON.xpath("indicators[fn:count(./workflows/processes[subProcessUUID eq '" + spuuid + "']) gt 0]", _WFInstance, {});

            for (var j = 0; j < array.length; j++) {
                var indicator = array[j];
                var indicatorModel = {
                    id: '',
                    instances: []
                }

                var instanceModel = {
                    uuid: '',
                    title: '',
                    key: '',
                    seq: 1,
                    rev: ''
                }

                indicatorModel.id = indicator.category.term;
                instanceModel.uuid = indicator._id;
                instanceModel.rev = indicator._rev;
                instanceModel.title = indicator.title;
                instanceModel.key = '';
                instanceModel.seq = indicator.model.pending.seq; // indicator seq number here which is getting updated.
                indicatorModel.instances.push(instanceModel);
                model.push(indicatorModel);
            }

            var success = util.success('Process indicator model updated.', model);
            resolve(success);
        } catch (err) {
            reject(err);
        }

    })
};

/**
 * Process assign user
 *
 * @param {string} processId - the Workflow config / definition process id
 * @param {number} processSeq - the Workflow instance process seq
 * @param {string} subProcessId - the Workflow config / definition sub-process id
 * @param {number} subProcessSeq - the Workflow instance sub-process seq
 * @param {string} stepId - the Workflow config / definition step id
 * @param {string} transitionId - the Workflow config / definition transition id
 * @param {object} user - the user to assign to
 * @param {object} _WFInstance - the current workflow constructor instance
 *
 * @example ''
 *
 * @return ''
 *
 */
function assignUser(processId, processSeq, subProcessId, subProcessSeq, user, uuid, _WFInstance) {
    return new Promise(function(resolve, reject) {
        try {

            // Get the current subProcess instance data

            /*
            _WFInstance.instance.processes.filter(function (objProcess) {
                if (objProcess.id == processId && objProcess.seq == processSeq) {
                    objProcess.subProcesses.filter(function (objSubProcess) {
                        if (objSubProcess.id == subProcessId && objSubProcess.seq == subProcessSeq) {
                            uuid = objSubProcess.uuid;
                        }
                    });
                }
            });
            */

            _WFInstance.subprocesses.filter(function(subProcessItem) {
                if (subProcessItem._id == uuid) {
                    //Added to hstory
                    if (subProcessItem.step.assignmentHistory == undefined) {
                        subProcessItem.step.assignmentHistory = [];
                    }
                    if (subProcessItem.step.assignedTo.userId != "" && subProcessItem.step.assignedTo.name != "") {
                        subProcessItem.step.assignmentHistory.push(JSON.parse(JSON.stringify(subProcessItem.step.assignedTo)));
                    }


                    // Set the user details
                    subProcessItem.step.assignedTo.userId = user.id;
                    subProcessItem.step.assignedTo.name = user.name;
                    subProcessItem.step.assignedTo.dateTime = moment().format();
                    subProcessItem.step.assignedTo.type = ASSIGNMENT_TYPE_REASSIGNMENT;
                    subProcessItem.step.assignedTo.dueDateTime = '';
                    subProcessItem.step.assignedTo.by = _lclx.SUBSCRIPTIONS.userId + "";

                    // Update the indicators user details
                    var indicators = subProcessItem.indicators;
                    for (var i = 0; i < indicators.length; i++) {
                        var indicator = indicators[i];
                        for (var j = 0; j < indicator.instances.length; j++) {
                            var instance = indicator.instances[j];
                            for (var k = 0; k < _WFInstance.indicators.length; k++) {
                                var doc = _WFInstance.indicators[k];
                                if (instance.uuid == doc._id) {
                                    doc.workflows.filter(function(workflow) {
                                        workflow.processes.filter(function(processItem) {
                                            if (processItem.id == processId) {
                                                // Update the user id and name in the document
                                                processItem.step.assignedTo.userId = user.id;
                                                processItem.step.assignedTo.name = user.name;
                                            }

                                        })

                                    })
                                }

                            }

                        }

                    }
                    //Send assign user notification from here

                    var notification = JSON.xpath("/processes[_id eq '" + processId + "']/notifications", _WFInstance.config, {})[0];

                    if (notification != undefined && notification.reAssignment != undefined) {

                        if(typeof notification.reAssignment === "string"){
                          
                            var reAssignmentNId = notification.reAssignment;
                            
                            dao.getConfig(reAssignmentNId).then(function(reAssignmentObject){
                                notification.reAssignment = reAssignmentObject;
                                
                                actionsModule.notification.reAssignmentNotification(notification, _WFInstance, uuid, user).then(
                                    function(success) {
                                        var success = util.success('User assigned successfully. UserId: "' + user.id + '", Name: "' + user.name + '"', subProcessItem);
                                        resolve(success);
                                    }).catch(
                                    function(fail) {
                                        resolve(fail);
                                    });
                                    

                            }).catch(function(fail){
                                resolve(fail);
                            })


                        } else {
                          

                            actionsModule.notification.reAssignmentNotification(notification, _WFInstance, uuid, user).then(
                                function(success) {
                                    var success = util.success('User assigned successfully. UserId: "' + user.id + '", Name: "' + user.name + '"', subProcessItem);
                                    resolve(success);
                                }).catch(
                                function(fail) {
                                    resolve(fail);
                                });
                        }

                       


                    } else {

                        var success = util.success('User assigned successfully. UserId: "' + user.id + '", Name: "' + user.name + '"', subProcessItem);
                        resolve(success);

                    }





                }

            })
        } catch (err) {
            reject(err);
        }

    });
};

/**
 * Process indicator document updates
 *
 * @param {object} actions - the actions config data
 * @param {object} subProcess - the current sub-process form config data
 * @param {object} _WFInstance - the current workflow constructor instance
 *
 * @example ''
 *
 * @return ''
 *
 */
function indicatorDocs(processId, indicators, step, _WFInstance, currentSPUUID) {
    return new Promise(function(resolve, reject) {
        try {
            // Update the indicator sections of the subProcess
            if (indicators == undefined) {
                var error = util.error('WFIndicatorsUpdate', 'Indicators parameter is required. - Value: ' + indicators)
                reject(err);
            } else {
                for (var i = 0; i < indicators.length; i++) {
                    var indicator = indicators[i];
                    for (var j = 0; j < indicator.instances.length; j++) {
                        var instance = indicator.instances[j];
                        for (var k = 0; k < _WFInstance.indicators.length; k++) {
                            var doc = _WFInstance.indicators[k];
                            if (instance.uuid == doc._id) {
                                doc.workflows.filter(function(workflow) {
                                    workflow.processes.filter(function(processItem) {
                                        if (processItem.subProcessUUID == currentSPUUID) {
                                            processItem.step.id = step.id;
                                            processItem.step.seq = step.seq;
                                            processItem.step.status = step.status;
                                            processItem.step.message = step.message;
                                            processItem.step.assignedTo.userId = step.assignedTo.userId;
                                            processItem.step.assignedTo.name = step.assignedTo.name;
                                            processItem.step.comment = step.comment !== undefined ? step.comment : '';
                                        }
                                    })

                                })
                            }

                        }

                    }

                }

                var success = util.success('Indicator documents workflow process model updated.', _WFInstance);
                resolve(success);
            }

        } catch (err) {
            reject(err);
        }

    })
};

/**
 * Process actions
 *
 * @param {object} actions - the actions config data
 * @param {object} subProcess - the current sub-process form config data
 * @param {object} _WFInstance - the current workflow constructor instance
 *
 * @example ''
 *
 * @return ''
 *
 */

function actions(actions, processId, processSeq, subProcessId, subProcessSeq, subProcess, step, _WFInstance, data, uuid) {
    var arrActions = [];
    return new Promise(function(resolve, reject) {
        util.syncLoop(actions.length, function(loop) {
            var counter = loop.iteration();
            action(actions[counter], processId, processSeq, subProcessId, subProcessSeq, subProcess, step, _WFInstance, data, uuid)
                .then(function(result) {
                    var retAction = {
                        id: actions[counter]._id,
                        seq: counter,
                        data: result
                    };

                    arrActions.push(retAction);
                    loop.next();
                }, function(err) {
                    loop.break();
                    reject(err);
                });
        }, function() {
            var success = util.success('Actions completed successfully.', arrActions);
            resolve(success);
        });
    });
};

/**
 * Process action
 *
 * @param {object} action - the action config data
 * @param {object} subProcess - the current sub-process form config data
 * @param {object} _WFInstance - the current workflow constructor instance
 *
 * @example ''
 *
 * @return ''
 *
 */
function action(action, processId, processSeq, subProcessId, subProcessSeq, subProcess, step, _WFInstance, data, uuid) {
    return new Promise(function(resolve, reject) {

        if (action.method != undefined) {
            var methodPossibleItems = ["form", "indicator", "profile", "subProcessInstance", "step", "community", "application", "user", "sdo", "performance", "taxonomy", "variables", "notification", "report", "worker", "participants", "generalFunctions"];
            switch (propertyExists(action.method, methodPossibleItems)) {
                case 'form':
                    if (action.method.form.create != undefined) {

                        var args = [];
                        args.push(processId);
                        args.push(subProcess);
                        args.push(step);
                        args.push(action);
                        args.push(processSeq);
                        args.push(subProcessSeq);

                        args.push(_WFInstance);
                        args.push(data.createType);
                        args.push(uuid);
                        args.push(data.baseUUID);
                        args.push(data);

                        form.create(args).then(function(result) {
                            resolve(result.data);
                        }, function(err) {
                            reject(err);
                        });

                    } else if (action.method.form.authorise != undefined) {

                        var args = [];
                        args.push(processId);
                        args.push(subProcess);
                        args.push(processSeq);
                        args.push(subProcessSeq);
                        args.push(_WFInstance);
                        args.push(data.createType);
                        args.push(uuid);
                        args.push(data.baseUUID);
                        args.push(data);
                        form.authorise(args).then(function(result) {
                            resolve(result.data);
                        }, function(err) {
                            reject(err);
                        });

                    } else if (action.method.form.undraft != undefined) {
                        var args = [];
                        args.push(_WFInstance);
                        args.push(data.createType);
                        args.push(uuid);
                        args.push(data.baseUUID);
                        args.push(data);
                        form.setUnDraft(args).then(function(result) {
                            resolve(result.data);
                        }, function(err) {
                            reject(err);
                        });

                    } else if (action.method.form.draft != undefined) {
                        var args = [];
                        args.push(_WFInstance);
                        args.push(data.createType);
                        args.push(uuid);
                        args.push(data.baseUUID);
                        args.push(data);
                        form.setDraft(args).then(function(result) {
                            resolve(result.data);
                        }, function(err) {
                            reject(err);
                        });

                    } else if (action.method.form.close != undefined) {

                        var args = [];
                        args.push(subProcess.indicators);
                        args.push(_WFInstance);
                        args.push(data.createType);
                        args.push(uuid);
                        args.push(data.baseUUID);
                        args.push(data);
                        form.close(args).then(function(result) {
                            resolve(result.data);
                        }, function(err) {
                            reject(err);
                        });

                    } else if (action.method.form.authoriseAndCreateNewSeq != undefined) {

                        var args = [];
                        args.push(processId);
                        args.push(subProcess);
                        args.push(processSeq);
                        args.push(subProcessSeq);
                        args.push(_WFInstance);
                        args.push(data.createType);
                        args.push(uuid);
                        args.push(data.baseUUID);
                        args.push(data);
                        form.authorise(args).then(function(result) {

                            // Create new sequence

                            var args = [];
                            args.push(processId);
                            args.push(subProcess);
                            args.push(step);
                            args.push(action);
                            args.push(processSeq);
                            args.push(subProcessSeq);

                            args.push(_WFInstance);
                            args.push(data.createType);
                            args.push(uuid);
                            args.push(uuid);
                            args.push(data);

                            form.create(args).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });



                            //Ed creation of new sequence



                        }, function(err) {
                            reject(err);
                        });

                    } else if (action.method.form.createNewSeq != undefined) {

                        var args = [];
                        args.push(processId);
                        args.push(subProcess);
                        args.push(step);
                        args.push(action);
                        args.push(processSeq);
                        args.push(subProcessSeq);

                        args.push(_WFInstance);
                        args.push(data.createType);
                        args.push(uuid);
                        args.push(uuid);
                        args.push(data);

                        form.create(args).then(function(result) {
                            resolve(result.data);
                        }, function(err) {
                            reject(err);
                        });




                    }

                    break;
                case 'indicator':
                    if (action.method.indicator.create != undefined) {

                        resolve("Not implemented");

                    } else if (action.method.indicator.instantiate != undefined) {

                        resolve("Not implemented");

                    } else if (action.method.indicator.setValue != undefined) {

                        var path = action.method.indicator.setValue.path;

                        helper.getNodeValue(action.method.indicator.setValue.data, _WFInstance, uuid).then(function(dataValue) {

                            var args = [];
                            args.push(_WFInstance);
                            args.push(uuid);
                            args.push(path);
                            args.push(dataValue);

                            form.updateIndicator(args).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });

                        }, function(err) {
                            reject(err);
                        });


                    } else if (action.method.indicator.updateStatus != undefined) {

                        var indicatorSetId = action.method.indicator.indicatorSetId;
                        var args = [];
                        args.push(_WFInstance);
                        args.push(uuid);

                        if (action.method.indicator.updateStatus != undefined) {
                            var status = action.method.indicator.updateStatus;
                            args.push(status);
                            args.push(indicatorSetId);
                            // Keep indicator functions in indiator file istead of form file.
                            form.markUpdateIndicator(args).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });

                        } else {
                            resolve("Action indicator sub type not found.");
                        }

                    } else if (action.method.indicator.setWrapperElement != undefined) {

                        var path = action.method.indicator.setWrapperElement.path;
                        var indicatorSetId = action.method.indicator.setWrapperElement.indicatorSetId;

                        helper.getNodeValue(action.method.indicator.setWrapperElement.data, _WFInstance, uuid).then(function(dataValue) {

                            var args = [];
                            args.push(_WFInstance);
                            args.push(uuid);
                            args.push(path);
                            args.push(dataValue);
                            args.push(indicatorSetId);

                            form.updateIndicatorWrapper(args).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });

                        }, function(err) {
                            reject(err);
                        });


                    }

                    break;
                case 'profile':
                    if (action.method.profile.create != undefined) {

                        var args = [];
                        args.push(processId);
                        args.push(_WFInstance);
                        args.push(data.createType);
                        args.push(uuid);
                        args.push(data.baseUUID);
                        args.push(data);
                        form.createProfile(args).then(function(result) {
                            resolve(result.data);
                        }, function(err) {
                            reject(err);
                        });

                    } else if (action.method.profile.setStatusTo != undefined) {

                        var args = [];
                        var status = action.method.profile.setStatusTo;

                        args.push(_WFInstance);
                        args.push(uuid);
                        args.push(status);

                        form.setStatus(args).then(function(result) {
                            resolve(result.data);
                        }, function(err) {
                            reject(err);
                        });

                    }
                    else if (action.method.profile.setProfileStatus != undefined) {

                        helper.getNodeValue(action.method.profile.setProfileStatus.value, _WFInstance, uuid).then(function(dataValue) {

                            dao.setProfileStatus(action.method.profile.setProfileStatus.key, dataValue);
                            resolve({});
                        }, function(err) {
                            reject(err);
                        });

                    }
                    else if (action.method.profile.setSubprofileStatus != undefined) {

                        helper.getNodeValue(action.method.profile.setSubprofileStatus.value, _WFInstance, uuid).then(function(dataValue) {

                            dao.setSubprofileStatus(action.method.profile.setSubprofileStatus.key, dataValue);
                            resolve({});
                        }, function(err) {
                            reject(err);
                        });

                    }

                    break;
                case 'subProcessInstance':
                    var spPossibleItems = ["instantiate", "authorise", "close", "setVariable", "setStatusTo", "setStatusMsgTo", "setTitle", "setValidDate", "setSPStatus"];
                    switch (propertyExists(action.method.subProcessInstance, spPossibleItems)) {

                        case 'setTitle':
                            helper.getNodeValue(action.method.subProcessInstance.setTitle, _WFInstance, uuid).then(function(dataValue) {

                                actionsModule.subProcessInstance.setTitle(action.method.subProcessInstance.setTitle, uuid, dataValue, _WFInstance).then(function(result) {
                                    resolve(result.data);
                                }, function(err) {
                                    reject(err);
                                });

                            }, function(err) {
                                reject(err);
                            });

                            //update subprocess label in workflow instance process object: TODO
                            break;

                        case 'setValidDate':
                            helper.getNodeValue(action.method.subProcessInstance.setValidDate, _WFInstance, uuid).then(function(dataValue) {
                                actionsModule.subProcessInstance.setValidDate(action.method.subProcessInstance.setValidDate, uuid, dataValue, _WFInstance).then(function(result) {
                                    resolve(result.data);
                                }, function(err) {
                                    reject(err);
                                });
                            }, function(err) {
                                reject(err);
                            });

                            //update subprocess label in workflow instance process object: TODO
                            break;


                        case 'setSPStatus':
                            helper.getNodeValue(action.method.subProcessInstance.setSPStatus, _WFInstance, uuid).then(function(dataValue) {
                                actionsModule.subProcessInstance.setSPStatus(action.method.subProcessInstance.setSPStatus, uuid, dataValue, _WFInstance).then(function(result) {
                                    resolve(result.data);
                                }, function(err) {
                                    reject(err);
                                });
                            }, function(err) {
                                reject(err);
                            });

                            //update subprocess label in workflow instance process object: TODO
                            break;



                        default:
                            reject("No method found from implemented list in subprocess action.");
                            break;
                    }

                    break;
                case 'step':
                    break;
                case 'community':
                    var communityPossibleItems = ["createCommunity", "releaseAdoptedApplication", "userJoinCommunity"];
                    switch (propertyExists(action.method.community, communityPossibleItems)) {

                        case 'createCommunity':
                            return actionsModule.community.createCommunity(action.method.community.createCommunity, uuid, _WFInstance).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });

                        case 'releaseAdoptedApplication':
                            return actionsModule.community.releaseAdoptedApplication(action.method.community.releaseAdoptedApplication, uuid, _WFInstance).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });

                        case 'userJoinCommunity':
                            return actionsModule.community.userJoinCommunity(action.method.community.userJoinCommunity, uuid, _WFInstance).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });

                        default:
                            reject("No method found from implemented list.");
                            break;
                    }

                    break;
                case 'application':
                    var applicationPossibleItems = ["createAppDefinition", "buildApplication", "applicationAdoption"];
                    switch (propertyExists(action.method.application, applicationPossibleItems)) {

                        case 'createAppDefinition':
                            return actionsModule.application.createAppDefinition(action.method.application.createAppDefinition, uuid, _WFInstance).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });

                        case 'buildApplication':
                            return actionsModule.application.buildApplication(action.method.application.buildApplication, uuid, _WFInstance).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });

                        case 'applicationAdoption':
                            return actionsModule.application.applicationAdoption(action.method.application.applicationAdoption, uuid, _WFInstance).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });

                        default:
                            reject("No method found from implemented list.");
                            break;
                    }

                    break;

                case 'user':
                    var userPossibleItems = ["addToRole"];
                    switch (propertyExists(action.method.user, userPossibleItems)) {
                        case 'addToRole':
                            return actionsModule.user.addToRole(action.method.user.addToRole, uuid, _WFInstance).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });
                    }
                    break;
                case 'sdo':
                    var sdoPossibleItems = ["create", "enrollCourse"];
                    switch (propertyExists(action.method.sdo, sdoPossibleItems)) {

                        case 'create':
                            return actionsModule.sdo.create(action.method.sdo.create, uuid, _WFInstance).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });
                        case 'enrollCourse':
                            return actionsModule.sdo.enrollCourse(action.method.sdo.enrollCourse, uuid, _WFInstance).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });

                        default:
                            reject("No method found from implemented list.");
                            break;
                    }

                    break;

                case 'performance':
                    var performancePossibleItems = ["unlockPeriod", "lockPerformanceModel", "setModelStatus"];
                    switch (propertyExists(action.method.performance, performancePossibleItems)) {


                        case 'unlockPeriod':
                            return actionsModule.performance.unlockPeriod(action.method.performance.unlockPeriod, uuid, _WFInstance).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });
                        case 'setModelStatus':
                            return actionsModule.performance.setModelStatus(action.method.performance.setModelStatus, uuid, _WFInstance).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });
                        case 'lockPerformanceModel':
                            return actionsModule.performance.lockPerformanceModel(action.method.performance.lockPerformanceModel, uuid, _WFInstance).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });


                        default:
                            reject("No method found from implemented list.");
                            break;
                    }

                    break;

                case 'taxonomy':
                    var taxonomyPossibleItems = ["create"];
                    switch (propertyExists(action.method.taxonomy, taxonomyPossibleItems)) {

                        case 'create':
                            return actionsModule.taxonomy.create(action.method.taxonomy.create, uuid, _WFInstance).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });

                        default:
                            reject("No method found from implemented list.");
                            break;
                    }

                    break;
                case 'variables':
                    var variablesPossibleItems = ["setVariable"];
                    switch (propertyExists(action.method.variables, variablesPossibleItems)) {

                        case 'setVariable':

                            return actionsModule.variables.setVariable(action.method.variables.setVariable, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });

                        default:
                            reject("No method found from implemented list.");
                            break;
                    }

                    break;
                case 'notification':


                    if(typeof action.method.notification === "string"){
                          
                        var reAssignmentNId = action.method.notification;
                        
                        dao.getConfig(reAssignmentNId).then(function(reAssignmentObject){
                            action.method.notification = reAssignmentObject;

                            actionsModule.notification.sendNotificationWorker(action.method.notification, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            }); 

                        }).catch(function(fail){
                            resolve(fail);
                        })


                    } else {
                      
                         actionsModule.notification.sendNotificationWorker(action.method.notification, _WFInstance, uuid).then(function(result) {
                            resolve(result.data);
                        }, function(err) {
                            reject(err);
                        });
                       
                    }

                    break;

                  

                case 'report':
                    /**
                     * 
                     */
                    var reportPossibleItems = ["createPerformanceReport", "createReport", "sdoReport", "executeReport", "requestReport", "generateView", "generateBasicView", "generateUnionView", "sdoReportMultiple", "subprofileQuarterlyReport"];

                    switch (propertyExists(action.method.report, reportPossibleItems)) {

                        case 'createPerformanceReport':
                            return actionsModule.report.createPerformanceReport(action.method.report.createPerformanceReport, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });

                        case 'createReport':
                            return actionsModule.report.createReport(action.method.report.createReport, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });
                        case 'sdoReport':
                            return actionsModule.report.sdoReport(action.method.report.sdoReport, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });
                        case 'executeReport':
                            return actionsModule.report.executeReport(action.method.report.executeReport, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });
                        case 'generateView':
                            return actionsModule.report.generateView(action.method.report.generateView, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });
                        case 'requestReport':
                            return actionsModule.report.requestReport(action.method.report.requestReport, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });
                        case 'generateBasicView':
                            return actionsModule.report.generateBasicView(action.method.report.generateBasicView, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });
                        case 'generateUnionView':
                            return actionsModule.report.generateUnionView(action.method.report.generateUnionView, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });

                        case 'sdoReportMultiple':
                            return actionsModule.report.sdoReportMultiple(action.method.report.sdoReportMultiple, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });
                        case 'subprofileQuarterlyReport':
                            return actionsModule.report.subprofileQuarterlyReport(action.method.report.subprofileQuarterlyReport, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });


                        default:
                            reject("No method found from implemented list.");
                            break;
                    }

                    break;

                case 'worker':
                    var workerPossibleItems = ["sendWorker", "executeLocal", "create"];
                    switch (propertyExists(action.method.worker, workerPossibleItems)) {

                        case 'sendWorker':

                            return actionsModule.worker.sendWorker(action.method.worker.sendWorker, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });

                        case 'executeLocal':

                            return actionsModule.worker.executeLocal(action.method.worker.executeLocal, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });

                        case 'create':

                            return actionsModule.worker.create(action.method.worker.create, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });

                        default:
                            reject("No method found from implemented list.");
                            break;
                    }

                    break;



                case 'participants':
                    /**
                     * 
                     */
                    var participantPossibleItems = ["linkParticipants", "monthlyAttendance", "monthlyProgressSummary", "participantContracts"];

                    switch (propertyExists(action.method.participants, participantPossibleItems)) {

                        case 'linkParticipants':
                            return actionsModule.participants.linkParticipants(action.method.participants.linkParticipants, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });

                        case 'monthlyAttendance':
                            return actionsModule.participants.monthlyAttendance(action.method.participants.monthlyAttendance, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });

                        case 'monthlyProgressSummary':
                            return actionsModule.participants.monthlyProgressSummary(action.method.participants.monthlyProgressSummary, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });
                        case 'participantContracts':
                            return actionsModule.participants.participantContracts(action.method.participants.participantContracts, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });


                        default:
                            reject("No method found from implemented list.");
                            break;
                    }

                    break;
                case "generalFunctions":

                    var possibleItems = ["addToFavourites", "addToUserFavourites"];
                    switch (propertyExists(action.method.generalFunctions, possibleItems)) {

                        case 'addToFavourites':
                            return actionsModule.generalFunctions.addToFavourites(action.method.generalFunctions.addToFavourites, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });
                        case 'addToUserFavourites':
                            return actionsModule.generalFunctions.addToUserFavourites(action.method.generalFunctions.addToUserFavourites, _WFInstance, uuid).then(function(result) {
                                resolve(result.data);
                            }, function(err) {
                                reject(err);
                            });

                        default:
                            reject("No method found from implemented list.");
                            break;
                    }
                    break;





                default:
                    reject("method not defined in configuration");
                    break;
            }

        } else {
            reject("No method found from implemented list.");

        }

    });
};

/**
 * Process tasks
 *
 * @param {object} task - the task config data
 * @param {object} inputData - the user input data
 *
 * @example ''
 *
 * @return ''
 *
 */
function task(subprocessID, subprocessSEQ, task, spuuid, model) {

    return new Promise(function(resolve, reject) {

        var _WFInstance = app.SCOPE.workflow;
        var preActionsConf = task.preActions;
        preActions(preActionsConf, _WFInstance, spuuid).then(function(preActionResult) {

            var list = [];


            if (task.assign.role != undefined) {
                var assignType = 'profileRole';
                var profileId = _WFInstance.profile;
                var id = '';

                var processToAssignExternal = function() {

                    var role = task.assign.role.roleId;
                    library.getUsersFromProfileRole(id, role).then(function(list) {

                        if (list != undefined) {

                            if (list.length > 1) {

                                // Adding roles from external profile

                                var isCurrentUserExistInGivenRole = false;
                                for (var i = 0; i < list.length; i++) {
                                    var uid = list[i].id;
                                    if (_lclx.SUBSCRIPTIONS.userId == list[i].id) {
                                        isCurrentUserExistInGivenRole = true;
                                    }
                                }


                                if (isCurrentUserExistInGivenRole) {
                                    if (model.assignmentHistory == undefined) {
                                        model.assignmentHistory = [];
                                    }
                                    var assignee = model.assignedTo;
                                    if (assignee.userId != "" && assignee.name != "") {
                                        var newObj = JSON.parse(JSON.stringify(assignee));
                                        model.assignmentHistory.push(newObj);
                                    }


                                    assignee.name = _lclx.SESSION.firstName + " " + _lclx.SESSION.lastName;
                                    assignee.userId = _lclx.SUBSCRIPTIONS.userId + "";
                                    assignee.dateTime = moment().format();
                                    assignee.type = ASSIGNMENT_TYPE_AUTO;
                                    assignee.dueDateTime = '';
                                    assignee.by = _lclx.SUBSCRIPTIONS.userId + "";

                                    // Notification that its been automatically assigned to you
                                    //Send assign user notification from here



                                    var notification = JSON.xpath("/processes[_id eq '" + subprocessID + "']/notifications", _WFInstance.config, {})[0];
                                    if (notification != undefined && notification.assignment != undefined) {
                                        var user = { 'id': _lclx.SUBSCRIPTIONS.userId, 'name': _lclx.SUBSCRIPTIONS.username };
                                        
                                        
                                        if(typeof notification.assignment === "string"){
                          
                                            var assignmentNId = notification.assignment;
                                            
                                            dao.getConfig(assignmentNId).then(function(assignmentObject){
                                                notification.assignment = assignmentObject;
                                                
                                                actionsModule.notification.assignmentNotification(notification, _WFInstance, spuuid, user).then(
                                                    function(success) {
                                                        console.log('User assigned successfully. UserId: "' + user.id + '", Name: "' + user.name + '"');
                                                    }
                                                ).catch(
                                                    function(fail) {
                                                        console.log('User assignment notification failed to user UserId: "' + user.id + '", Name: "' + user.name + '"');
                                                    }
                                                );
                                                    
                                        
                                            }).catch(function(fail){
                                                resolve(fail);
                                            })
                                        
                                        
                                        } else {
                                          
                                            actionsModule.notification.assignmentNotification(notification, _WFInstance, spuuid, user).then(
                                                function(success) {
                                                    console.log('User assigned successfully. UserId: "' + user.id + '", Name: "' + user.name + '"');
                                                }
                                            ).catch(
                                                function(fail) {
                                                    console.log('User assignment notification failed to user UserId: "' + user.id + '", Name: "' + user.name + '"');
                                                }
                                            );
                                            
                                        }


                                       

                                        
                                    }
                                }

                                var assignment = '';
                                if (task.assign.assignment != undefined) {

                                    var assignment = model.assignment;
                                    var accept = {
                                        "show": task.assign.assignment.accept.show,
                                        "label": _getNameByLang(task.assign.assignment.accept.label.i18n)
                                    };

                                    assignment.accept = accept;
                                    assignment.message = _getNameByLang(task.assign.assignment.message.i18n);
                                    var reject = {
                                        "show": task.assign.assignment.reject.show,
                                        "label": _getNameByLang(task.assign.assignment.reject.label.i18n)
                                    };

                                    assignment.reject = reject;
                                    var value = {
                                        "profileId": id,
                                        "type": "user",
                                        "userId": list
                                    };

                                    assignment.value = value;
                                    assignment.profileRoleId = id;

                                }

                                if (isCurrentUserExistInGivenRole) {
                                    //Fire Pre-workActions here

                                    var processId = JSON.xpath("/instance/processes[subProcesses/uuid eq '" + spuuid + "']/id", _WFInstance, {})[0];
                                    var subProcessId = JSON.xpath("/instance/processes/subProcesses[uuid eq '" + spuuid + "']/id", _WFInstance, {})[0];
                                    var stepId = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']/step/id", _WFInstance, {})[0];

                                    var stepObject = JSON.xpath("/processes[_id eq '" + processId + "']/subProcesses[_id eq '" + subProcessId + "']/steps[_id eq '" + stepId + "']", _WFInstance.config, {})[0];


                                    if (task.preWorkActions != undefined) {

                                        var preWorkActionsObj = task.preWorkActions;
                                        preWorkActions(preWorkActionsObj, _WFInstance).then(function(success) {
                                            resolve('Assignment is made. Pre work actions found and executed ');
                                        }, function(err) {
                                            reject(err);
                                        });

                                    } else {
                                        resolve('Assignment is made. No pre work actions found. ');
                                    }

                                } else {

                                    // Notification that its been released for acceptance

                                    var notification = JSON.xpath("/processes[_id eq '" + subprocessID + "']/notifications", _WFInstance.config, {})[0];
                                    //issue here
                                    if (notification != undefined && notification.assignmentAcceptance != undefined) {
                                        var user = { 'id': _lclx.SUBSCRIPTIONS.userId, 'name': _lclx.SUBSCRIPTIONS.username };
                                        actionsModule.notification.acceptanceNotificationExternal(notification, _WFInstance, spuuid, list).then(
                                            function(success) {
                                                resolve('Notifications request submitted for acceptance.');
                                            }
                                        ).catch(
                                            function(fail) {
                                                resolve('Notifications failed');
                                                console.log('User assignment notification failed to user UserId: "' + user.id + '", Name: "' + user.name + '"');
                                            }
                                        );
                                    } else {
                                        resolve('Notifications not found');
                                    }



                                }


                            } else if (list.length == 1) {
                                // Implement here preWorkAction as this is automatically assigned in case of 1 user and will not go trough acceptance function.

                                var userId = list[0].id;
                                var username = list[0].name;

                                if (model.assignmentHistory == undefined) {
                                    model.assignmentHistory = [];
                                }

                                var assignee = model.assignedTo;
                                if (assignee.userId != "" && assignee.name != "") {
                                    var newObj = JSON.parse(JSON.stringify(assignee));
                                    model.assignmentHistory.push(newObj);
                                }
                                assignee.name = username + "";
                                assignee.userId = userId + "";
                                assignee.dateTime = moment().format();
                                assignee.type = ASSIGNMENT_TYPE_AUTO;
                                assignee.dueDateTime = '';
                                assignee.by = _lclx.SUBSCRIPTIONS.userId + "";

                                var assignment = '';
                                if (task.assign.assignment != undefined) {

                                    var assignment = model.assignment;
                                    var accept = {
                                        "show": task.assign.assignment.accept.show,
                                        "label": _getNameByLang(task.assign.assignment.accept.label.i18n)
                                    };

                                    assignment.accept = accept;
                                    assignment.message = _getNameByLang(task.assign.assignment.message.i18n);
                                    var reject = {
                                        "show": task.assign.assignment.reject.show,
                                        "label": _getNameByLang(task.assign.assignment.reject.label.i18n)
                                    };

                                    assignment.reject = reject;
                                    var value = {
                                        "profileId": id,
                                        "userId": list,
                                        "type": "user"
                                    };

                                    assignment.value = value;
                                    assignment.profileRoleId = id;

                                }

                                // Notification that its been automatically assigned to you
                                //Send assign user notification from here

                                var notification = JSON.xpath("/processes[_id eq '" + subprocessID + "']/notifications", _WFInstance.config, {})[0];
                                if (notification != undefined && notification.assignment != undefined) {
                                    var user = { 'id': userId, 'name': username };

                                    if(typeof notification.assignment === "string"){
                          
                                        var assignmentNId = notification.assignment;
                                        
                                        dao.getConfig(assignmentNId).then(function(assignmentObject){
                                            notification.assignment = assignmentObject;
                                            
                                            actionsModule.notification.assignmentNotification(notification, _WFInstance, spuuid, user).then(
                                                function(success) {
                                                    console.log('User assigned successfully. UserId: "' + user.id + '", Name: "' + user.name + '"');
                                                }
                                            ).catch(
                                                function(fail) {
                                                    console.log('User assignment notification failed to user UserId: "' + user.id + '", Name: "' + user.name + '"');
                                                }
                                            );
                                                
                                    
                                        }).catch(function(fail){
                                            resolve(fail);
                                        })
                                    
                                    
                                    } else {
                                      
                                        actionsModule.notification.assignmentNotification(notification, _WFInstance, spuuid, user).then(
                                            function(success) {
                                                console.log('User assigned successfully. UserId: "' + user.id + '", Name: "' + user.name + '"');
                                            }
                                        ).catch(
                                            function(fail) {
                                                console.log('User assignment notification failed to user UserId: "' + user.id + '", Name: "' + user.name + '"');
                                            }
                                        );
                                        
                                    }

                                    


                                }

                                //Fire Pre-workActions here

                                var processId = JSON.xpath("/instance/processes[subProcesses/uuid eq '" + spuuid + "']/id", _WFInstance, {})[0];
                                var subProcessId = JSON.xpath("/instance/processes/subProcesses[uuid eq '" + spuuid + "']/id", _WFInstance, {})[0];
                                var stepId = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']/step/id", _WFInstance, {})[0];

                                var stepObject = JSON.xpath("/processes[_id eq '" + processId + "']/subProcesses[_id eq '" + subProcessId + "']/steps[_id eq '" + stepId + "']", _WFInstance.config, {})[0];

                                if (task.preWorkActions != undefined) {

                                    var preWorkActionsObj = task.preWorkActions;
                                    preWorkActions(preWorkActionsObj, _WFInstance).then(function(success) {
                                        resolve('Assigned to the only user in role. Pre work actions executed');
                                    }, function(err) {
                                        reject(err);
                                    });

                                } else {
                                    resolve('Assigned to the only user in role. No pre work actions found.');
                                }

                            } else {
                                //Case where users list = 0
                                var assignee = model.assignedTo;
                                assignee.name = "";
                                assignee.userId = "";

                                var assignment = '';
                                if (task.assign.assignment != undefined) {

                                    var assignment = model.assignment;
                                    var accept = {
                                        "show": task.assign.assignment.accept.show,
                                        "label": _getNameByLang(task.assign.assignment.accept.label.i18n)
                                    };

                                    assignment.accept = accept;
                                    assignment.message = _getNameByLang(task.assign.assignment.message.i18n);
                                    var reject = {
                                        "show": task.assign.assignment.reject.show,
                                        "label": _getNameByLang(task.assign.assignment.reject.label.i18n)
                                    };

                                    assignment.reject = reject;
                                    var value = {
                                        "profileId": id,
                                        "userId": list,
                                        "type": "user"
                                    };

                                    assignment.value = value;
                                    assignment.profileRoleId = id;

                                }
                                //Will be fired from TakeAssignment path
                                resolve("No users found in list. Assigning blank ");

                            }

                        } else {
                            reject('Error in getUsersFromProfileRole ');
                        }

                    }).catch(function(err) {
                        reject(err);
                    })
                };

                var processToAssign = function() {
                    var role = task.assign.role.roleId;
                    library.getUsersListByRole(id, role).then(function(list) {
                        if (list != undefined) {

                            if (list.length > 1) {

                                // New requirement here will automatically assign the step to current user if this user falls under the provided group.
                                // RULE INTRODUCED ON 16-MARCH-2017
                                // If current user lies within the specified role, it will be automatically assigned to that user.

                                var isCurrentUserExistInGivenRole = false;
                                var rolesObject = library.getCurrentUserRoles();

                                var isCurrentUserRole1 = rolesObject.profile.indexOf(role);
                                var isCurrentUserRole2 = rolesObject.community.indexOf(role);
                                var isCurrentUserRole3 = rolesObject.implicit.indexOf(role);
                                var isCurrentUserRole4 = rolesObject.adoption.indexOf(role);
                                var isCurrentUserRole5 = rolesObject.subprofile.indexOf(role);

                                if (isCurrentUserRole1 > -1 || isCurrentUserRole2 > -1 || isCurrentUserRole3 > -1 || isCurrentUserRole4 > -1 || isCurrentUserRole5 > -1) {
                                    isCurrentUserExistInGivenRole = true;
                                } else {
                                    isCurrentUserExistInGivenRole = false;
                                }

                                if (isCurrentUserExistInGivenRole) {
                                    if (model.assignmentHistory == undefined) {
                                        model.assignmentHistory = [];
                                    }
                                    var assignee = model.assignedTo;
                                    if (assignee.userId != "" && assignee.name != "") {
                                        var newObj = JSON.parse(JSON.stringify(assignee));
                                        model.assignmentHistory.push(newObj);
                                    }


                                    assignee.name = _lclx.SESSION.firstName + " " + _lclx.SESSION.lastName;
                                    assignee.userId = _lclx.SUBSCRIPTIONS.userId + "";
                                    assignee.dateTime = moment().format();
                                    assignee.type = ASSIGNMENT_TYPE_AUTO;
                                    assignee.dueDateTime = '';
                                    assignee.by = _lclx.SUBSCRIPTIONS.userId + "";

                                    // Notification that its been automatically assigned to you
                                    //Send assign user notification from here
                                    var notification = JSON.xpath("/processes[_id eq '" + subprocessID + "']/notifications", _WFInstance.config, {})[0];
                                    if (notification != undefined && notification.assignment != undefined) {
                                        var user = { 'id': _lclx.SUBSCRIPTIONS.userId, 'name': _lclx.SUBSCRIPTIONS.username };
                                        
                                        if(typeof notification.assignment === "string"){
                          
                                            var assignmentNId = notification.assignment;
                                            
                                            dao.getConfig(assignmentNId).then(function(assignmentObject){
                                                notification.assignment = assignmentObject;
                                                
                                                actionsModule.notification.assignmentNotification(notification, _WFInstance, spuuid, user).then(
                                                    function(success) {
                                                        console.log('User assigned successfully. UserId: "' + user.id + '", Name: "' + user.name + '"');
                                                    }
                                                ).catch(
                                                    function(fail) {
                                                        console.log('User assignment notification failed to user UserId: "' + user.id + '", Name: "' + user.name + '"');
                                                    }
                                                );
                                                    
                                        
                                            }).catch(function(fail){
                                                resolve(fail);
                                            })
                                        
                                        
                                        } else {
                                          
                                            actionsModule.notification.assignmentNotification(notification, _WFInstance, spuuid, user).then(
                                                function(success) {
                                                    console.log('User assigned successfully. UserId: "' + user.id + '", Name: "' + user.name + '"');
                                                }
                                            ).catch(
                                                function(fail) {
                                                    console.log('User assignment notification failed to user UserId: "' + user.id + '", Name: "' + user.name + '"');
                                                }
                                            );
                                            
                                        }
                                        
                                        
                                        
                                    }
                                }

                                var assignment = '';
                                if (task.assign.assignment != undefined) {

                                    var assignment = model.assignment;
                                    var accept = {
                                        "show": task.assign.assignment.accept.show,
                                        "label": _getNameByLang(task.assign.assignment.accept.label.i18n)
                                    };

                                    assignment.accept = accept;
                                    assignment.message = _getNameByLang(task.assign.assignment.message.i18n);
                                    var reject = {
                                        "show": task.assign.assignment.reject.show,
                                        "label": _getNameByLang(task.assign.assignment.reject.label.i18n)
                                    };

                                    assignment.reject = reject;
                                    var value = {
                                        "profileId": profileId,
                                        "roleId": role,
                                        "type": "role"
                                    };

                                    assignment.value = value;
                                    assignment.profileRoleId = id;

                                }



                                if (isCurrentUserExistInGivenRole) {
                                    //Fire Pre-workActions here

                                    var processId = JSON.xpath("/instance/processes[subProcesses/uuid eq '" + spuuid + "']/id", _WFInstance, {})[0];
                                    var subProcessId = JSON.xpath("/instance/processes/subProcesses[uuid eq '" + spuuid + "']/id", _WFInstance, {})[0];
                                    var stepId = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']/step/id", _WFInstance, {})[0];

                                    var stepObject = JSON.xpath("/processes[_id eq '" + processId + "']/subProcesses[_id eq '" + subProcessId + "']/steps[_id eq '" + stepId + "']", _WFInstance.config, {})[0];


                                    if (task.preWorkActions != undefined) {

                                        var preWorkActionsObj = task.preWorkActions;
                                        preWorkActions(preWorkActionsObj, _WFInstance).then(function(success) {
                                            resolve('Assignment is made. Pre work actions found and executed ');
                                        }, function(err) {
                                            reject(err);
                                        });

                                    } else {
                                        resolve('Assignment is made. No pre work actions found. ');
                                    }

                                } else {

                                    // Notification that its been released for acceptance

                                    var notification = JSON.xpath("/processes[_id eq '" + subprocessID + "']/notifications", _WFInstance.config, {})[0];
                                    //issue here
                                    if (notification != undefined && notification.assignmentAcceptance != undefined) {
                                        var user = { 'id': _lclx.SUBSCRIPTIONS.userId, 'name': _lclx.SUBSCRIPTIONS.username };
                                        


                                        if(typeof notification.assignmentAcceptance === "string"){
                          
                                            var assignmentNId = notification.assignmentAcceptance;
                                            
                                            dao.getConfig(assignmentNId).then(function(assignmentObject){
                                                notification.assignmentAcceptance = assignmentObject;
                                                
                                                actionsModule.notification.acceptanceNotification(notification, _WFInstance, spuuid, role).then(
                                                    function(success) {
        
                                                        resolve('Notifications request submitted for acceptance.');
                                                    }
                                                ).catch(
                                                    function(fail) {
                                                        resolve('Notifications failed');
                                                        console.log('User assignment notification failed to user UserId: "' + user.id + '", Name: "' + user.name + '"');
                                                    }
                                                );
                                               
                                                    
                                        
                                            }).catch(function(fail){
                                                resolve(fail);
                                            })
                                        
                                        
                                        } else {
                                          
                                            
                                            actionsModule.notification.acceptanceNotification(notification, _WFInstance, spuuid, role).then(
                                                function(success) {
    
                                                    resolve('Notifications request submitted for acceptance.');
                                                }
                                            ).catch(
                                                function(fail) {
                                                    resolve('Notifications failed');
                                                    console.log('User assignment notification failed to user UserId: "' + user.id + '", Name: "' + user.name + '"');
                                                }
                                            );

                                            
                                        }


                                       

                                        
                                    } else {
                                        resolve('Notifications not found');
                                    }



                                }


                            } else if (list.length == 1) {
                                // Implement here preWorkAction as this is automatically assigned in case of 1 user and will not go trough acceptance function.

                                var userId = list[0].id;
                                var username = list[0].name;

                                if (model.assignmentHistory == undefined) {
                                    model.assignmentHistory = [];
                                }

                                var assignee = model.assignedTo;
                                if (assignee.userId != "" && assignee.name != "") {
                                    var newObj = JSON.parse(JSON.stringify(assignee));
                                    model.assignmentHistory.push(newObj);
                                }
                                assignee.name = username + "";
                                assignee.userId = userId + "";
                                assignee.dateTime = moment().format();
                                assignee.type = ASSIGNMENT_TYPE_AUTO;
                                assignee.dueDateTime = '';
                                assignee.by = _lclx.SUBSCRIPTIONS.userId + "";

                                var assignment = '';
                                if (task.assign.assignment != undefined) {

                                    var assignment = model.assignment;
                                    var accept = {
                                        "show": task.assign.assignment.accept.show,
                                        "label": _getNameByLang(task.assign.assignment.accept.label.i18n)
                                    };

                                    assignment.accept = accept;
                                    assignment.message = _getNameByLang(task.assign.assignment.message.i18n);
                                    var reject = {
                                        "show": task.assign.assignment.reject.show,
                                        "label": _getNameByLang(task.assign.assignment.reject.label.i18n)
                                    };

                                    assignment.reject = reject;
                                    var value = {
                                        "profileId": profileId,
                                        "roleId": role,
                                        "type": "role"
                                    };

                                    assignment.value = value;
                                    assignment.profileRoleId = id;

                                }

                                // Notification that its been automatically assigned to you
                                //Send assign user notification from here

                                var notification = JSON.xpath("/processes[_id eq '" + subprocessID + "']/notifications", _WFInstance.config, {})[0];
                                if (notification != undefined && notification.assignment != undefined) {
                                    var user = { 'id': userId, 'name': username };
                                    
                                    
                                    if(typeof notification.assignment === "string"){
                          
                                        var assignmentNId = notification.assignment;
                                        
                                        dao.getConfig(assignmentNId).then(function(assignmentObject){
                                            notification.assignment = assignmentObject;
                                            
                                            actionsModule.notification.assignmentNotification(notification, _WFInstance, spuuid, user).then(
                                                function(success) {
                                                    console.log('User assigned successfully. UserId: "' + user.id + '", Name: "' + user.name + '"');
                                                }
                                            ).catch(
                                                function(fail) {
                                                    console.log('User assignment notification failed to user UserId: "' + user.id + '", Name: "' + user.name + '"');
                                                }
                                            );
                                                
                                    
                                        }).catch(function(fail){
                                            resolve(fail);
                                        })
                                    
                                    
                                    } else {
                                      
                                        actionsModule.notification.assignmentNotification(notification, _WFInstance, spuuid, user).then(
                                            function(success) {
                                                console.log('User assigned successfully. UserId: "' + user.id + '", Name: "' + user.name + '"');
                                            }
                                        ).catch(
                                            function(fail) {
                                                console.log('User assignment notification failed to user UserId: "' + user.id + '", Name: "' + user.name + '"');
                                            }
                                        );
                                        
                                    }
                                    
                                    
                                    
                                    
                                }

                                //Fire Pre-workActions here

                                var processId = JSON.xpath("/instance/processes[subProcesses/uuid eq '" + spuuid + "']/id", _WFInstance, {})[0];
                                var subProcessId = JSON.xpath("/instance/processes/subProcesses[uuid eq '" + spuuid + "']/id", _WFInstance, {})[0];
                                var stepId = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']/step/id", _WFInstance, {})[0];

                                var stepObject = JSON.xpath("/processes[_id eq '" + processId + "']/subProcesses[_id eq '" + subProcessId + "']/steps[_id eq '" + stepId + "']", _WFInstance.config, {})[0];

                                if (task.preWorkActions != undefined) {

                                    var preWorkActionsObj = task.preWorkActions;
                                    preWorkActions(preWorkActionsObj, _WFInstance).then(function(success) {
                                        resolve('Assigned to the only user in role. Pre work actions executed');
                                    }, function(err) {
                                        reject(err);
                                    });

                                } else {
                                    resolve('Assigned to the only user in role. No pre work actions found.');
                                }

                            } else {
                                //Case where users list = 0
                                var assignee = model.assignedTo;
                                assignee.name = "";
                                assignee.userId = "";

                                var assignment = '';
                                if (task.assign.assignment != undefined) {

                                    var assignment = model.assignment;
                                    var accept = {
                                        "show": task.assign.assignment.accept.show,
                                        "label": _getNameByLang(task.assign.assignment.accept.label.i18n)
                                    };

                                    assignment.accept = accept;
                                    assignment.message = _getNameByLang(task.assign.assignment.message.i18n);
                                    var reject = {
                                        "show": task.assign.assignment.reject.show,
                                        "label": _getNameByLang(task.assign.assignment.reject.label.i18n)
                                    };

                                    assignment.reject = reject;
                                    var value = {
                                        "profileId": profileId,
                                        "roleId": role,
                                        "type": "role"
                                    };

                                    assignment.value = value;
                                    assignment.profileRoleId = id;

                                }
                                //Will be fired from TakeAssignment path
                                resolve("No users found in list. Assigning blank ");

                            }

                        } else {
                            reject(err);
                        }

                    }, function(err) {
                        reject(err);
                    });
                };

                if (task.assign.role.profile != undefined) {

                    if (task.assign.role.profile == 'current') {
                        id = _WFInstance.profile;
                    } else if (task.assign.role.profile == 'community') {
                        id = app.SCOPE.getCommunityId();
                    }
                    processToAssign();

                } else if (task.assign.role.profileId != undefined) {

                    helper.getNodeValue(task.assign.role.profileId, _WFInstance, spuuid).then(function(formProfileId) {
                        id = formProfileId;
                        processToAssignExternal();
                    }).catch(function(err) {
                        reject(err);
                    });

                }




            } else if (task.assign.user != undefined) {

                helper.getNodeValue(task.assign.user.userName, _WFInstance, spuuid).then(function(userName) {
                    helper.getNodeValue(task.assign.user.userId, _WFInstance, spuuid).then(function(userId) {

                        var userId = userId;
                        var username = userName;
                        var profileId = _WFInstance.profile;
                        if (model.assignmentHistory == undefined) {
                            model.assignmentHistory = [];
                        }

                        var assignee = model.assignedTo;
                        if (assignee.userId != "" && assignee.name != "") {
                            var newObj = JSON.parse(JSON.stringify(assignee));
                            model.assignmentHistory.push(newObj);
                        }
                        assignee.name = username + "";
                        assignee.userId = userId + "";
                        assignee.dateTime = moment().format();
                        assignee.type = ASSIGNMENT_TYPE_AUTO;
                        assignee.dueDateTime = '';
                        assignee.by = _lclx.SUBSCRIPTIONS.userId + "";

                        var assignment = '';
                        if (task.assign.assignment != undefined) {

                            var assignment = model.assignment;
                            var accept = {
                                "show": task.assign.assignment.accept.show,
                                "label": _getNameByLang(task.assign.assignment.accept.label.i18n)
                            };

                            assignment.accept = accept;
                            assignment.message = _getNameByLang(task.assign.assignment.message.i18n);
                            var reject = {
                                "show": task.assign.assignment.reject.show,
                                "label": _getNameByLang(task.assign.assignment.reject.label.i18n)
                            };



                            var i = {
                                id: userId,
                                name: userName
                            }
                            list.push(i);

                            assignment.reject = reject;
                            var value = {
                                "profileId": profileId,
                                "userId": list,
                                "type": "user"
                            };





                            assignment.value = value;
                            assignment.profileRoleId = id;

                        }
                        // Notification that its been automatically assigned to you
                        //Send assign user notification from here
                        var notification = JSON.xpath("/processes[_id eq '" + subprocessID + "']/notifications", _WFInstance.config, {})[0];
                        if (notification != undefined && notification.assignment != undefined) {
                            var user = { 'id': userId, 'name': username };
                            
                            if(typeof notification.assignment === "string"){
                          
                                var assignmentNId = notification.assignment;
                                
                                dao.getConfig(assignmentNId).then(function(assignmentObject){
                                    notification.assignment = assignmentObject;
                                    
                                    actionsModule.notification.assignmentNotification(notification, _WFInstance, spuuid, user).then(
                                        function(success) {
                                            console.log('User assigned successfully. UserId: "' + user.id + '", Name: "' + user.name + '"');
                                        }
                                    ).catch(
                                        function(fail) {
                                            console.log('User assignment notification failed to user UserId: "' + user.id + '", Name: "' + user.name + '"');
                                        }
                                    );
                                        
                            
                                }).catch(function(fail){
                                    resolve(fail);
                                })
                            
                            
                            } else {
                              
                                actionsModule.notification.assignmentNotification(notification, _WFInstance, spuuid, user).then(
                                    function(success) {
                                        console.log('User assigned successfully. UserId: "' + user.id + '", Name: "' + user.name + '"');
                                    }
                                ).catch(
                                    function(fail) {
                                        console.log('User assignment notification failed to user UserId: "' + user.id + '", Name: "' + user.name + '"');
                                    }
                                );
                                
                            }
                            
                            
                        }
                        //Fire Pre-workActions here
                        var processId = JSON.xpath("/instance/processes[subProcesses/uuid eq '" + spuuid + "']/id", _WFInstance, {})[0];
                        var subProcessId = JSON.xpath("/instance/processes/subProcesses[uuid eq '" + spuuid + "']/id", _WFInstance, {})[0];

                        var stepId = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']/step/id", _WFInstance, {})[0];

                        var stepObject = JSON.xpath("/processes[_id eq '" + processId + "']/subProcesses[_id eq '" + subProcessId + "']/steps[_id eq '" + stepId + "']", _WFInstance.config, {})[0];

                        if (task.preWorkActions != undefined) {

                            var preWorkActionsObj = task.preWorkActions;
                            preWorkActions(preWorkActionsObj, _WFInstance).then(function(success) {
                                resolve('Assigned to the only user in role. Pre work actions executed');
                            }, function(err) {
                                reject(err);
                            });

                        } else {
                            resolve('Assigned to the only user in role. No pre work actions found.');
                        }
                    }, function(err) {
                        reject(err);
                    });

                }, function(err) {
                    reject(err);
                });

            } else if (task.assign.swimlane != undefined) {

                var stepId = task.assign.swimlane.stepId;
                var sequence = task.assign.swimlane.sequence;

                var subProcess = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']", _WFInstance, {})[0];

                var historyList = JSON.xpath("/history[id eq '" + stepId + "']", subProcess, {});
                var dateSearch = '';
                if (sequence == 'last') {
                    dateSearch = JSON.xpath("max(for $s in /* return xs:dateTime($s/dateTimeCreated))", historyList, {})[0];
                } else {
                    dateSearch = JSON.xpath("min(for $s in /* return xs:dateTime($s/dateTimeCreated))", historyList, {})[0];
                }
                var historyObject = JSON.xpath("/*[xs:dateTime(dateTimeCreated) eq xs:dateTime('" + dateSearch + "')]", historyList, {})[0];
                var assignmentObject = JSON.xpath("/assignmentHistory[last()]", historyObject, {})[0];

                var userId = assignmentObject.userId;
                var username = assignmentObject.name;

                if (model.assignmentHistory == undefined) {
                    model.assignmentHistory = [];
                }

                var assignee = model.assignedTo;
                if (assignee.userId != "" && assignee.name != "") {
                    var newObj = JSON.parse(JSON.stringify(assignee));
                    model.assignmentHistory.push(newObj);
                }
                assignee.name = username + "";
                assignee.userId = userId + "";
                assignee.dateTime = moment().format();
                assignee.type = ASSIGNMENT_TYPE_SWIMLANE;
                assignee.dueDateTime = '';
                assignee.by = _lclx.SUBSCRIPTIONS.userId + "";

                var assignment = '';

                // Notification that its been automatically assigned to you
                //Send assign user notification from here
                var notification = JSON.xpath("/processes[_id eq '" + subprocessID + "']/notifications", _WFInstance.config, {})[0];
                if (notification != undefined && notification.assignment != undefined) {
                    var user = { 'id': userId, 'name': username };
                    
                    
                    if(typeof notification.assignment === "string"){
                          
                        var assignmentNId = notification.assignment;
                        
                        dao.getConfig(assignmentNId).then(function(assignmentObject){
                            notification.assignment = assignmentObject;
                            
                            actionsModule.notification.assignmentNotification(notification, _WFInstance, spuuid, user).then(
                                function(success) {
                                    console.log('User assigned successfully. UserId: "' + user.id + '", Name: "' + user.name + '"');
                                }
                            ).catch(
                                function(fail) {
                                    console.log('User assignment notification failed to user UserId: "' + user.id + '", Name: "' + user.name + '"');
                                }
                            );
                                
                    
                        }).catch(function(fail){
                            resolve(fail);
                        })
                    
                    
                    } else {
                      
                        actionsModule.notification.assignmentNotification(notification, _WFInstance, spuuid, user).then(
                            function(success) {
                                console.log('User assigned successfully. UserId: "' + user.id + '", Name: "' + user.name + '"');
                            }
                        ).catch(
                            function(fail) {
                                console.log('User assignment notification failed to user UserId: "' + user.id + '", Name: "' + user.name + '"');
                            }
                        );
                        
                    }
                    
                    
                }
                //Fire Pre-workActions here
                var processId = JSON.xpath("/instance/processes[subProcesses/uuid eq '" + spuuid + "']/id", _WFInstance, {})[0];
                var subProcessId = JSON.xpath("/instance/processes/subProcesses[uuid eq '" + spuuid + "']/id", _WFInstance, {})[0];
                var stepId = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']/step/id", _WFInstance, {})[0];

                var stepObject = JSON.xpath("/processes[_id eq '" + processId + "']/subProcesses[_id eq '" + subProcessId + "']/steps[_id eq '" + stepId + "']", _WFInstance.config, {})[0];

                if (task.preWorkActions != undefined) {

                    var preWorkActionsObj = task.preWorkActions;
                    preWorkActions(preWorkActionsObj, _WFInstance).then(function(success) {
                        resolve('Assigned to the only user in role. Pre work actions executed');
                    }, function(err) {
                        reject(err);
                    });

                } else {
                    resolve('Assigned to the only user in role. No pre work actions found.');
                }
            }
        }, function(err) {
            reject(err);
        });
    });
};



/**
 * Process tasks
 *
 * @param {object} task - the task config data
 * @param {object} inputData - the user input data
 *
 * @example ''
 *
 * @return ''
 *
 */
function server(server, processId, processSeq, subProcessId, subProcessSeq, subProcess, model, _WFInstance, data, uuid) {

    return new Promise(function(resolve, reject) {

        //var _WFInstance = app.SCOPE.workflow;
        var profileId = _WFInstance.profile;
        var actionBlock = server.serverAction[0];
        if (model.assignmentHistory == undefined) {
            model.assignmentHistory = [];
        }

        var assignee = model.assignedTo;
        if (assignee.userId != "" && assignee.name != "") {
            var newObj = JSON.parse(JSON.stringify(assignee));
            model.assignmentHistory.push(newObj);
        }
        assignee.name = _lclx.SESSION.firstName + " " + _lclx.SESSION.lastName;
        assignee.userId = _lclx.SUBSCRIPTIONS.userId + "";
        assignee.dateTime = moment().format();
        assignee.type = ASSIGNMENT_TYPE_AUTO;
        assignee.dueDateTime = '';
        assignee.by = _lclx.SUBSCRIPTIONS.userId + "";

        action(actionBlock, processId, processSeq, subProcessId, subProcessSeq, subProcess, model, _WFInstance, data, uuid)
            .then(function(result) {
                resolve("No users found in list. Assigning blank ");
            }, function(err) {
                reject("Server action error found rejected")
            });
    });

};

/**
 * Process transition
 *
 * @param {string} processId - the Workflow config / definition process id
 * @param {number} processSeq - the Workflow instance process seq
 * @param {string} subProcessId - the Workflow config / definition sub-process id
 * @param {number} subProcessSeq - the Workflow instance sub-process seq
 * @param {string} stepId - the Workflow config / definition step id
 * @param {string} transitionId - the Workflow config / definition transition id
 * @param {object} data - any additional data passed in as key value pairs
 * @param {object} _WFInstance - the current workflow constructor instance
 *
 * @example ''
 *
 * @return ''
 *
 */
function transition(processId, processSeq, subProcessId, subProcessSeq, stepId, transitionId, data, _WFInstance, spuuid, model) {
    return new Promise(function(resolve, reject) {
        try {
            var stepSeq = 0;
            var nextStepId = '';
            var nextStepSeq = 0;
            var subProcess = [];
            var currentProcess = _WFInstance.config.processes.filter(function(objProcess) {
                if (objProcess._id == processId) {
                    return objProcess;
                }

            });
            var currentSubProcess = currentProcess[0].subProcesses.filter(function(objSubProcess) {
                if (objSubProcess._id == subProcessId) {
                    return objSubProcess;
                }

            });
            var currentStep = currentSubProcess[0].steps.filter(function(objStep) {
                if (objStep._id == stepId) {
                    return objStep;
                }

            });
            var transition = currentStep[0].transition.filter(function(objTransition) {
                if (objTransition._id == transitionId) {
                    return objTransition;
                }

            });
            for (var i = 0; i < currentSubProcess[0].steps.length; i++) {
                if (currentSubProcess[0].steps[i]._id == stepId) {
                    stepSeq = parseInt(currentSubProcess[0].steps[i]._seq);
                }

            }

            currentSubProcess[0].steps.filter(function(stepItem) {
                nextStepSeq = stepSeq + 1;
                if (parseInt(stepItem._seq) == nextStepSeq) {
                    nextStepId = stepItem._id;
                }

            })




            var maxSteps = currentSubProcess[0].steps.length;
            var spinstanceObject = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']", _WFInstance, {})[0];
            var spInstanceStepObject = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']/step", _WFInstance, {})[0];

            // Adding step Object in subprocess history From second step. As first step is added at subProcess() function 
            if (spinstanceObject.history == undefined) {
                spinstanceObject.history = [];
            }
            var pushIndicatorToModel = function(model) {

                // In both  the cases the list is differnet that needs to be made same.

                var indicatorList = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']/indicators", _WFInstance, {});

                var isFirst = false;
                if (indicatorList == undefined || indicatorList.length == 0) {
                    isFirst = true;
                    indicatorList = JSON.xpath("/indicators[workflows/processes[subProcessUUID eq '" + spuuid + "']]", _WFInstance, {});
                }
                if (model.indicators == undefined) {
                    model.indicators = [];
                }
                for (var j = 0; j < indicatorList.length; j++) {

                    if (isFirst) {

                        var uuid = indicatorList[j]._id;
                        var rev = JSON.xpath("/indicators[_id eq '" + uuid + "']/_rev", _WFInstance, {})[0];
                        var seq = indicatorList[j].model.pending.seq;
                        var status = indicatorList[j].model.pending.status;
                        var indObject = {
                            uuid: uuid,
                            rev: rev,
                            seq: seq,
                            status: status
                        }
                        model.indicators.push(indObject);

                    } else {

                        var uuid = indicatorList[j].instances[0].uuid;
                        var rev = JSON.xpath("/indicators[_id eq '" + uuid + "']/_rev", _WFInstance, {})[0];
                        var seq = JSON.xpath("/indicators[_id eq '" + uuid + "']/model/pending/seq", _WFInstance, {})[0];
                        var status = JSON.xpath("/indicators[_id eq '" + uuid + "']/model/pending/status", _WFInstance, {})[0];
                        var indObject = {
                            uuid: uuid,
                            rev: rev,
                            seq: seq,
                            status: status
                        }
                        model.indicators.push(indObject);

                    }
                }
                delete model.assignedTo;
                delete model.assignment;
                return model;
            }

            // add information to transtion object.
            var trnObject = {
                transitionId: transition[0]._id,
                dateTime: moment().format(),
                userId: _lclx.SUBSCRIPTIONS.userId + ""
            }
            if (model != undefined && Object.keys(model).length > 0) {
                model.transition = trnObject;
            } else {
                spInstanceStepObject.transition = trnObject;
            }

            // copy current assignedTo to reAssignment object

            if (model != undefined && Object.keys(model).length > 0) {
                if (model.assignmentHistory == undefined) {
                    model.assignmentHistory = [];
                }
                var assigneeObj = JSON.parse(JSON.stringify(model.assignedTo));
                if (assigneeObj.userId != "" && assigneeObj.name != "") {
                    model.assignmentHistory.push(assigneeObj);
                }

            } else {
                if (spInstanceStepObject.assignmentHistory == undefined) {
                    spInstanceStepObject.assignmentHistory = [];
                }
                var assigneeObj = JSON.parse(JSON.stringify(spInstanceStepObject.assignedTo));
                if (assigneeObj.userId != "" && assigneeObj.name != "") {
                    spInstanceStepObject.assignmentHistory.push(assigneeObj);
                }

            }
            var historyModel;
            if (model != undefined && Object.keys(model).length > 0) {
                historyModel = JSON.parse(JSON.stringify(model));
            } else {
                historyModel = JSON.parse(JSON.stringify(spInstanceStepObject));
            }
            var indModelInStep = pushIndicatorToModel(historyModel);
            spinstanceObject.history.push(indModelInStep);

            if (transition[0].transitionAction.goToStep != undefined) {



                var nextSeq = parseInt(currentStep[0]._seq) + parseInt(transition[0].transitionAction.goToStep.default);
                var nextId = '';
                currentSubProcess[0].steps.filter(function(stepItem) {

                    if (parseInt(stepItem._seq) == nextStepSeq) {
                        nextId = stepItem._id;
                    }

                });

                step(processId, processSeq, subProcessId, subProcessSeq, nextId, nextSeq, data, _WFInstance, spuuid).then(function(result) {
                    if (nextSeq == maxSteps) {
                        var success = util.success('All Step transitions have completed successfully.', {
                            subProcessComplete: true,
                            step: result.data
                        });
                        resolve(success);
                    } else {

                        var success = util.success('Step transition completed successfully.', {
                            subProcessComplete: false,
                            step: result.data
                        });
                        resolve(success);

                    }

                }, function(err) {
                    reject(err);
                });

            } else if (transition[0].transitionAction.goToStepId != undefined) {



                var goToStepId = transition[0].transitionAction.goToStepId.stepId;
                var goToStepSeq = 1;

                currentSubProcess[0].steps.filter(function(stepItem) {
                    if (stepItem._id == goToStepId) {
                        goToStepSeq = parseInt(stepItem._seq);
                    }

                });

                step(processId, processSeq, subProcessId, subProcessSeq, goToStepId, goToStepSeq, data, _WFInstance, spuuid).then(function(result) {
                    if (goToStepSeq == maxSteps || result.data.status == 'Complete') {

                        var success = util.success('All Step transitions have completed successfully.', {
                            subProcessComplete: true,
                            step: result.data
                        });
                        resolve(success);

                    } else {

                        var success = util.success('Step transition completed successfully.', {
                            subProcessComplete: false,
                            step: result.data
                        });
                        resolve(success);

                    }

                }, function(err) {
                    reject(err);
                });
            } else if (transition[0].transitionAction.stop != undefined) {
                var newArr = [];
                if(spinstanceObject.messages != undefined){
                    for(var m = 0; m < spinstanceObject.messages.length; m++){
                        var obj = spinstanceObject.messages[m];
                        if((obj.type == "info" || obj.type == "success") && 
                        (obj.keep == undefined || obj.keep != true)){
                            if(obj.url != undefined){
                                newArr.push(obj);
                            }
                        }
                        else{
                            newArr.push(obj);
                        }
                    }
                }
                spinstanceObject.messages = newArr;
                // As this is the last step (where stop is defied) , subProcess postActions should come here.
                var postActionsConf = currentProcess[0].postActions;
                postActions(postActionsConf, _WFInstance, spuuid).then(function(result) {

                    var success = util.success('Step transition completed successfully.Workflow stopped.', {
                        subProcessComplete: true,
                        step: model
                    });
                    resolve(success);

                }, function(err) {
                    reject(err);
                });

            }

        } catch (err) {
            reject(err);
        }

    });
};

/**
 * Process postActions
 *
 * @param {object} postActions - the postActions config data
 *
 * @example ''
 *
 * @return ''
 *
 */
function postActions(postActions, _WFInstance, spuuid) {
    return new Promise(function(resolve, reject) {
        var completed = [];
        try {


            var spObject = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']", _WFInstance, {})[0];

            var processID = spObject["meta-data"].processConfigId;
            var processId = spObject["meta-data"].subProcessConfigId;
            var processSEQ = spObject["meta-data"].subProcessInsSeq;
            var processSeq = spObject["meta-data"].subProcessInsSeq;

            var subProcessConfigObject = JSON.xpath("/config/processes[_id eq '" + processID + "']/subProcesses[_id eq '" + processId + "']", _WFInstance, {})[0];
            var stepObject = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']/step", _WFInstance, {})[0];


            util.syncLoop(postActions.length, function(loop) {
                var counter = loop.iteration();
                action(postActions[counter], processID, processSEQ, processId, processSeq, subProcessConfigObject, stepObject, _WFInstance, {}, spuuid).then(function(data) {
                    // Check if all pre-requisites completed successfully.
                    completed.push(true);
                    loop.next();
                }, function(err) {
                    completed.push(false);
                    loop.break();
                    reject(err);
                });
            }, function() {
                if (completed.every(Boolean)) {
                    var success = util.success('Post-actions completed successfully.', {});
                    resolve(success);
                } else {
                    var error = util.error('WFPreActionsError', 'Not all post-actions passed.');
                    reject(error);
                }

            });
        } catch (err) {
            reject(err);
        }

    });
};

/*
function sendNotifications(usersList, spuuid){

  // get users list 
  // sen notifications to users y adding channels to them

  var channelArray = [];

  for(i=0;i<usersList.length; i++){
    channelArray.push("user_"+usersList[i].id);
  }

  assignToUsers(processWorkflowMessage(NOTIFICATION_USER_MSG_ACCEPT, spuuid), channelArray);

};*/

/*function assignToUsers(message, channelArray){

     var channels = channelArray;

     var notification =  { 
          "_id": generateUUID(),
          "channels":channels,
          "message": message,
          "messageType": "info",
          "createdDateTime": moment().format(),
          "read": false,
          "readDateTime": "",
          "type": "notification",
          "senderUserId": _lclx.SUBSCRIPTIONS.userId
       };

       console.log(notification);
       dao.save(notification);

  };*/

function processWorkflowMessage(message, spuuid) {

    var replacedMsg = message;

    if (replacedMsg.indexOf('#INSTANCE_LABEL') !== -1) {
        var val = JSON.xpath("/instance/processes/subProcesses[uuid eq '" + spuuid + "']/label", app.SCOPE.workflow, {})[0];
        replacedMsg = replacedMsg.replace('#INSTANCE_LABEL', val);

    }

    if (replacedMsg.indexOf('#USER_NAME') !== -1) {
        var val = JSON.xpath("/subprocesses[_id eq '" + spuuid + "']/step/assignedTo/name", app.SCOPE.workflow, {})[0];

        replacedMsg = replacedMsg.replace('#USER_NAME', val);

    }

    if (replacedMsg.indexOf('#PROFILE_TITLE') !== -1) {
        var val = app.profile.title;
        replacedMsg = replacedMsg.replace('#PROFILE_TITLE', val);

    }

    if (replacedMsg.indexOf('#PROFILE_TYPE') !== -1) {
        var val = app.SCOPE.APP_CONFIG.name;
        replacedMsg = replacedMsg.replace('#PROFILE_TYPE', val);

    }

    if (replacedMsg.indexOf('#VAR_SPUUID') !== -1) {
        var val = spuuid;
        replacedMsg = replacedMsg.replace('#VAR_SPUUID', val);

    }

    return replacedMsg;
};

function _getName(arr, lang) {
    if (arr !== undefined) {
        for (var i = 0; i < arr.length; i++) {
            if (arr[i]._lang === lang) {
                return arr[i].value;
            }

        }

    }

};

function _getNameByLang(obj) {
    return library.getNameByLang(obj);
};





/**
 * Process preWorkActions
 *
 * @param {object} preWorkActions - the preWorkActions config data
 *
 * @example ''
 *
 * @return ''
 *
 */

function preWorkActions(preWorkActions, _WFInstance) {
    return new Promise(function(resolve, reject) {
        var completed = [];
        try {
            var subProcessConfigObject = JSON.xpath("/config/processes[_id eq '" + app.SCOPE.spo.pObject.id + "']/subProcesses[_id eq '" + app.SCOPE.spo.spObject.id + "']", _WFInstance, {})[0];
            var stepObject = JSON.xpath("/subprocesses[_id eq '" + app.SCOPE.processUUID + "']/step", _WFInstance, {})[0];

            util.syncLoop(preWorkActions.length, function(loop) {
                var counter = loop.iteration();
                action(preWorkActions[counter], app.SCOPE.spo.pObject.id, app.SCOPE.spo.pObject.seq, app.SCOPE.spo.spObject.id, app.SCOPE.spo.spObject.seq, subProcessConfigObject, stepObject, _WFInstance, {}, app.SCOPE.processUUID).then(function(data) {
                    // Check if all pre-requisites completed successfully.
                    completed.push(true);
                    loop.next();
                }, function(err) {
                    completed.push(false);
                    loop.break();
                    reject(err);
                });
            }, function() {
                if (completed.every(Boolean)) {
                    var success = util.success('PreWork-actions completed successfully.', {});
                    resolve(success);
                } else {
                    var error = util.error('WFPreActionsError', 'Not all pre-work-actions passed.');
                    reject(error);
                }

            });
        } catch (err) {
            reject(err);
        }

    });
};


module.exports = {

    preRequisites: preRequisites,
    preActions: preActions,
    postActions: postActions,
    preWorkActions: preWorkActions,
    subProcess: subProcess,
    indicatorDocs: indicatorDocs,
    task: task,
    transition: transition,
    assignUser: assignUser

}
},{"./actions":2,"./form":3,"./helper":4,"utility":8}],8:[function(require,module,exports){
'use strict';

/**
 * Utility Module
 *
 * @module lib/util
 *
 * @author Brent Gordon
 * @version 0.1.0
 *
 * @description
 * Workflow utility module used to format the return and error objects, and
 * contains some other utility functions such as a sync loop and compare.
 *
 */

/**
 * Success block return object, contains a message and optional data object.
 *
 * @param {string} message - the success message
 * @param {string|Object} [data] - the success returned data
 *
 * @example
 * // Return success without a data block
 * var success = util.success('Success message goes here...');
 *
 * @return {Object} - with message and data properties
 *
 */
function success(message, data){
	return {
		message: message,
		data: data
	};
};

/**
 * Warning block return object, contains a message and optional data object.
 *
 * @param {string} message - the warning message
 * @param {string|Object} [data] - the returned data
 *
 * @example
 * // Return success without a data block
 * var success = util.warn('Warning message goes here...');
 *
 * @return {Object} with message and data properties, and logs the warning to the console.
 *
 */
function warn(message, data){
	console.warn(data);
	return {
		warning: message,
		data: data
	};
};

/**
 * Error block JS error object, contains a code and message for the error.
 *
 * @param {string} code - the error code
 * @param {string} message - the error message
 *
 * @example
 * var success = util.error('Error001','Error message goes here...');
 *
 * @return {Object} with a code and message properties.
 *
 */
function error(code, message){
	var err = new Error('');
	err.name = code;
	err.message = message;
	return err;
};

/**
 * A loop which can loop X amount of times, which carries out
 * asynchronous code, but waits for that code to complete before looping.
 *
 * @param {number} iterations - the number of iterations to carry out
 * @param {function} process - the code/function we're running for every
 * iteration
 * @param {function} exit - an optional callback to carry out once the loop
 * has completed
 *
 * @example
 * util.syncLoop(5, function(loop){
 * 	var counter = loop.iteration();
 * 	// Add async calls here..
 *
 * }, function(){
 * 	// On complete perform actions here...
 *
 * });
 *
 * @return {Object} the loop control object.
 *
 */
function syncLoop(iterations, process, exit){
    var index = 0,
        done = false,
        shouldExit = false;
    var loop = {
        next:function(){
            if(done){
                if(shouldExit && exit){
                    return exit(); // Exit if we're done
                }
            }
            // If we're not finished
            if(index < iterations){
                index++; // Increment our index
                process(loop); // Run our process, pass in the loop
            // Otherwise we're done
            } else {
                done = true; // Make sure we say we're done
                if(exit) exit(); // Call the callback on exit
            }
        },
        iteration:function(){
            return index - 1; // Return the loop number we're on
        },
        break:function(end){
            done = true; // End the loop
            shouldExit = end; // Passing end as true means we still call the exit callback
        }
    };
    loop.next();
    return loop;
};

function compare(subject, operator, value) {
  	switch (operator) {
  		case 'greaterThan':
			return subject > value;
		case 'lessThan':
			return subject < value;
		case 'greaterThanEqual':
			return subject >= value;
		case 'lessThanEqual':
			return subject <= value;
		case 'equalTo':
			return subject === value;
		case 'notEqualTo':
			return subject !== value;
  	}
};

function getName(arr, lang){
	if (arr !== undefined) {
		for (var i = 0; i < arr.length ; i++) {
			if (arr[i].i18n._lang === lang) {
				return arr[i].i18n.value;
			}
		}
	}
}

module.exports = {

 	success: success,
 	warn: warn,
 	error: error,
 	syncLoop: syncLoop,
 	compare: compare,
	getName: getName

 }

},{}]},{},[1])(1)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
